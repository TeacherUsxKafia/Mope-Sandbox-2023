//test#1

var disconectttt = false;

// var inUpgrade = false;
// var inMobile = false;

// setInterval(() => {
// let workerUrl = 'data:application/javascript;base64,' + btoa(`
// self.addEventListener('message', (e) => {
//   if(e.data==='hello'){
//     self.postMessage('hello');
//   }
//   debugger;
//   self.postMessage('');
// });
// `);
// function checkIfDebuggerEnabled() {
//   return new Promise((resolve) => {
//     let fulfilled = false;
//     let worker = new Worker(workerUrl);
//     worker.onmessage = (e) => {
//       let data = e.data;
//       if (data === 'hello') {
//         setTimeout(() => {
//           if (!fulfilled) {
//             resolve(true);
//             worker.terminate();
//           }
//         }, 1);
//       } else {
//         fulfilled = true;
//         resolve(false);
//         worker.terminate();
//       }
//     };
//     worker.postMessage('hello');
//   });
// }

// checkIfDebuggerEnabled().then((result) => {
//   if (result) {
//     document.documentElement.style.backgroundColor = "black";

//     alert('You should have do not that')
//     setInterval(() => {
//         document.documentElement.style.backgroundColor = "black";

//         disconectttt = true;
//         window.open()
//         document.getDocumentById('startButton').onclick = function(){
//             location.reload()

            
//         }
        
//     }, 100)
//     location.reload();

    
//   }
// });
  
// }, 100)


const gameVersion = 161,
    KTestingExperimental = true,
     ACTIVATEOURGAMEMODE = true,
    KTestingBeta = true;
console.log(`\n\n\n`);
console.log('--------------------------------------------');
console.log('');
console.log('m    m                       mmmm   mmmm   mmmm   mmmm');
console.log('##  ##  mmm   mmmm    mmm   "   "# m"  "m "   "# m"  "m');
console.log('# ## # #" "#  #" "#  #"  #      m" #  m #     m" #  m #');
console.log('# "" # #   #  #   #  #""""    m"   #    #   m"   #    #');
console.log('#    # "#m#"  ##m#"  "#mm"  m#mmmm  #mm#  m#mmmm  #mm#');
console.log('              #                                       ');
console.log('              "                                       ');
console.log('___ Remake of Mope.io™ game by TeacherUs');
console.log('--------------------------------------------');
console.log('-----------Game Version ' + gameVersion + (KTestingBeta ? ' (BETA)' : '') + ' ----------------');
var url = new URL(window.location.href);
var secr = url.searchParams.get("ModeActivate");


if(!KTestingExperimental) window.onerror = function (_0x263834, _0x44be88, _0x164353) {};

const global_battlepass_test = false;
var global_battlepass_bar = null;
var global_battlepass_exist = false;
var global_battlepass_items = [];
var global_battlepass_maxlevel = 999;
var global_battlepass_season_number = 1;
var global_battlepass_end = +new Date();
var global_battlepass_name = "some season";

function isElement(obj) {
    try {
      //Using W3 DOM2 (works for FF, Opera and Chrome)
      return obj instanceof HTMLElement;
    }
    catch(e){
      //Browsers not supporting W3 DOM2 don't have HTMLElement and
      //an exception is thrown and we end up here. Testing some
      //properties that all elements have (works on IE7)
      return (typeof obj==="object") &&
        (obj.nodeType===1) && (typeof obj.style === "object") &&
        (typeof obj.ownerDocument ==="object");
    }
  }

function updateBPStats() {
    var level = document.getElementsByClassName('mainlevel');
    if(level.length > 0) {
        for(var i in level) {
            if(isElement(level[i]) && level[i].innerHTML) {
                level[i].innerHTML = "Level "+userInfo.level;
                if(global_battlepass_exist) {
                    if(level[i].classList && !level[i].classList.contains("infohaspass"))
                        level[i].classList.add("infohaspass");
                }
            }
        }
    }
    calculateXP();
}
setInterval(() => {
    if (typeof unsafeWindow !== 'undefined' || /\bTampermonkey\b/.test(navigator.userAgent)) {
        disconectttt = true;
        alert("aaa")
    
        location.reload()
       }
    }, 1000)

    
    
function load_battlepass_data() {//49397
    $.ajax({
        'url': 'https://accountserver.mopesandbox.fun/battlepass?userId=' + login_userId + '&passwordToken=' + login_passwordToken,
        'success': function (aeae) {
            let a;
            try{a = JSON.parse(aeae);}catch{}
            console.log(a);
            if(a.success) {
                global_battlepass_items = [];
                global_battlepass_season_number = a.data.season_number;
                global_battlepass_exist = a.data.haspass;
                global_battlepass_maxlevel = a.data.maxlevel;
                global_battlepass_end = a.data.end;
                global_battlepass_name = a.data.name;
                for(var i in a.data.levels.free) {
                    var level = a.data.levels.free[i];
                    var lvl = new MP_Level(level.type);
                    var data = {
                        id: level.id,
                        path: level.type != 0 ? level.path : "",
                        coins: level.type == 0 ? level.value : 0,
                        free: true,
                        taken: level.taken,
                        cantake: level.cantake,
                        level: level.level,
                        title: level.type != 0 ? level.title : "",
                    };
                    lvl.loadData(data);
                    global_battlepass_items.push(lvl);
                }
                for(var i in a.data.levels.gold) {
                    var level = a.data.levels.gold[i];
                    var lvl = new MP_Level(level.type);
                    var data = {
                        id: level.id,
                        path: level.type != 0 ? level.path : "",
                        coins: level.type == 0 ? level.value : 0,
                        free: false,
                        taken: level.taken,
                        cantake: level.cantake,
                        level: level.level,
                        title: level.type != 0 ? level.title : "",
                    };
                    lvl.loadData(data);
                    global_battlepass_items.push(lvl);
                }
                var elem = document.getElementById('content-items-BattlePass');
                var elem2 = document.getElementById('content-items-BattlePass2');
                var elem3 = document.getElementById('pages-BattlePass');
                if(elem && elem2 && elem3) {
                    createBattlePass(elem, elem2, elem3);
                }
                calculateXP();
            }
        },
        'error': function (_0x4fea74, _0x44b992, _0x57ccd3) {
            return {success:false};
        }
    });
}

function battlepass_daysleft() {
    var date1 = new Date();
    var date2 = new Date(global_battlepass_end);
    var Difference_In_Time = date2.getTime() - date1.getTime();
    var Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);
    return Math.max(Math.round(Difference_In_Days), 0);
}

function battlepass_minutesleft() {
    var date1 = new Date();
    var date2 = new Date(global_battlepass_end);
    var diffMs = (date2 - date1);
    // var diffDays = Math.floor(diffMs / 86400000); // days
    // var diffHrs = Math.floor((diffMs % 86400000) / 3600000); // hours
    var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000); // minutes
    return Math.max(diffMins, 0);
}

function calculateXP() {
    var width = userInfo.xp * 100 / userInfo.xpNextLvl;
    if(width > 100) width = 100;
    if(width < 0) width = 0;
    var progress = document.getElementsByClassName('battlepass_progress_xp');
    if(progress.length > 0) {
        for(var i in progress) {
            if(progress[i].style) progress[i].style.width = width+"%";
            if(progress[i].innerHTML) progress[i].innerHTML = userInfo.xp+"/"+userInfo.xpNextLvl+" xp";
        }
    }
    return width;
}

function changeLogo(name) {
    document.getElementById('logo').src = name;
}

changeLogo("img/classiclogo.png");

var isGhost = false;
var teamID = 0;

var oldSessionId = null;
var curGameSessionID = null;
var isInActiveGameSession = false;
var a_mouse = 1,
  a_rabbit = 2,
  a_pig = 3,
  a_fox = 4,
  a_deer = 5,
  a_mole = 6,
  a_zebra = 7,
  a_lion = 8,
  a_bigCat = 9,
  a_bear = 10,
  a_croc = 11,
  a_rhino = 12,
  a_hippo = 13,
  a_dragn = 14,
  a_shrimp = 15,
  a_trout = 16,
  a_crab = 17,
  a_squid = 18,
  a_shark = 19,
  a_stingray = 20,
  a_turtle = 21,
  a_seaHorse = 22,
  a_jellyFish = 23,
  a_kraken = 24,
  a_pufferFish = 25,
  a_killerWhale = 26,
  a_swordfish = 27,
  a_gorilla = 28,
  a_octopus = 29,
  a_wolf = 30,
  a_arcticHare = 31,
  a_yeti = 32,
  a_chipmunk = 33,
  a_muskox = 34,
  a_penguin = 35,
  a_polarBear = 36,
  a_seal = 37,
  a_snowLeopard = 38,
  a_walrus = 39,
  a_reindeer = 40,
  a_arcticFox = 41,
  a_wolverine = 42,
  a_mammoth = 43,
  a_donkey = 44,
  a_snail = 45,
  a_blackDragon = 46,
  a_sabertoothTiger = 47,
  a_elephant = 48,
  a_blueWhale = 49,
  a_cobra = 50,
  a_boaConstrictor = 51,
  a_giantSpider = 52,
  a_trex = 53,
  a_tiger = 54,
  a_giraffe = 55,
  a_eagle = 56,
  a_hedgehog = 57,
  a_duck = 58,
  a_duckling = 59,
  a_lemming = 60,
  a_kingCrab = 61,
  a_frog = 62,
  a_ostrich = 63,
  a_pelican = 64,
  a_falcon = 65,
  a_snowyOwl = 66,
  a_honeyBee = 67,
  a_phoenix = 68,
  a_ostrichBaby = 69,
  a_seaMonster = 70,
  a_landMonster = 71,
  a_iceMonster = 72,
  a_dinoMonster = 73,
  a_pigeon = 74,
  a_toucan = 75,
  // birds update 2018
  a_macaw = 76,
  a_flamingo = 77,
  a_cassowary = 78,
  a_chicken = 79,
  a_woodpecker = 80,
  a_peacock = 81,
  // desert update
  a_kangarooRat = 82,
  a_desertChipmunk = 83,
  a_meerkat = 84,
  a_gazelle = 85,
  a_armadillo = 86,
  a_fennecFox = 87,
  a_camel = 88,
  a_warthog = 89,
  a_hyena = 90,
  a_rattleSnake = 91,
  a_vulture = 92,
  a_bison = 93,
  a_komodoDragon = 94,
  a_giantScorpion = 95,
  a_pterodactyl = 96,
  a_gobiBear = 97,
  a_blackWidow = 98,
  a_bulletAnt = 99,
  a_kingDragon = 100, a_snowman = 101, a_santa = 102, a_rudolph = 103
  , a_deathWorm = 104,
  a_markhor = 105, a_bigFoot = 106,
  /// forest update
  a_aiBoss = 107,
  a_raven = 108,
  a_kakapo = 109,
  a_pheasant = 110,
  a_whiteGiraffe = 111,
  a_poop = 112;

var o_biome_land = 1,
    o_player = 2,
    o_hill = 3,
    o_waterSpot = 4,
    o_hidingHole = 5,
    o_hidingBush = 6,
    o_mudSpot = 7,
    o_rockHill = 8,
    o_bigHidingHole = 9,
    o_lake = 10,
    o_lakeIsland = 11,
    o_biome_ocean = 12,
    o_hidingHoleOcean = 13,
    o_abilityObj = 14,
    o_fruitTree = 15,
    o_biome_arctic = 16,
    o_arcticIce = 17,
    o_fireBall = 0x12,
    o_snowBall = 0x13,
    o_berry = 20,
    o_water = 21,
    o_mushroom = 22,
    o_lillypad = 23,
    o_bigMushroom = 24,
    o_bigMushroomBush = 25,
    o_plankton = 26,
    o_berryBush = 27,
    o_planktonBush = 28,
    o_banana = 29,
    o_coconut = 30,
    o_raspberry = 31,
    o_pear = 32,
    o_beach = 33,
    o_biome_ocean_extraWater = 34,
    o_seaweed = 35,
    o_starfish = 36,
    o_kelp = 37,
    o_clam = 38,
    o_conchShell = 39,
    o_river = 40,
    o_volcano = 42,
    o_lavaLake = 44,
    o_healingStone = 46,
    o_biome_volcano = 47,
    o_arcticNut = 48,
    o_carrot = 49,
    o_watermelon = 50,
    o_watermelonSlice = 51,
    o_meatSmall = 52,
    o_meatMedium = 53,
    o_meatLarge = 54,
    o_biome_poison = 55,
    o_poisonBerry = 56,
    o_spiderWeb = 57,
    o_bog = 58,
    o_poisonBall = 59,
    o_cloudBerry = 60,
    o_flock = 61,
    o_flockspot = 62,
    o_egg = 63,
    o_sleigh = 64,
    o_quill = 65,
    o_ostrichEgg = 66,
    o_waterDrop = 67,
    o_beeHive = 68,
    o_honeyComb = 69,
    o_fire = 70,
    o_fireTornado = 71,
    o_sinkHole = 72,
    o_DangerAreaCircle = 73,
    o_animalCarcass = 74,
    o_chilli = 75,
    o_safeArea = 76,
    o_spawnEgg = 77,
    o_teamStone = 78,
    o_biome_desert = 79,
    o_iceCrystal = 80,
    o_camelSpit = 81,
    o_cactus = 82,
    o_dustCloud = 83,
    o_bone = 84,
    o_sweatPoison = 85,
    o_poisonPool = 86,
    o_flytrap = 87,
    o_flytrapMouth = 88,
    o_mango = 89,
    o_dateFruit = 90,
    o_melon = 91,
    o_melonSlice = 92,
    o_cactusPear = 93,
    o_walnut = 94,
    o_orange = 95,
    o_aloeveraPlant = 96,
    o_aloeveraLeaf = 97,
    o_antHill = 98,
    o_quickSand = 99,
    o_oasis = 100,
    o_tree = 101,
    o_tsunami = 102,
    o_tornado = 103,
    o_dustStorm = 104,
    o_snowStorm = 105,
    o_snow = 106,
    o_lavaDrop = 107,
    o_heatStorm = 108,
    o_coldStorm = 109,
    o_rainStorm = 110,
    o_rainDrop = 111,
    o_iceBall = 112,
    o_gift = 113,
    o_cartSaddle = 114,
    o_saddle = 115,
    o_pointer = 116,
    o_animalBody = 117,
    o_forest = 118,
    o_animalFOV = 119,
    o_flag_usa = 150,
    o_amogus = 151,
    o_mopecoinbox = 152,
    o_meteorCrater = 153,
    o_meteor = 154;

var isCoinsShowing = true;
var GameObjType = {
        'customClassesForOType': {},
        'setClassForAnimalType': function (_0x377456, _0x177ea4) {
            this.setCustomClassForGameObjType(_0x377456, o_player, _0x177ea4);
        },
        'setClassForAnimalBodyType': function (_0x1c167c, _0x48838a) {
            this.setCustomClassForGameObjType(_0x1c167c, o_animalBody, _0x48838a);
        },
        'setCustomClassForGameObjType': function (_0x2b6a95, _0x1915da, _0x3ea11e) {
            this.customClassesForOType[_0x1915da] || (this.customClassesForOType[_0x1915da] = {
                'oTypeMainClass': null,
                'secondaryTypeClasses': {}
            });
            var _0x1a6075 = this.customClassesForOType[_0x1915da];
            null == _0x3ea11e ? (null != _0x1a6075.oTypeMainClass && console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class (" + this.customClassesForOType[_0x1915da] + ') is already set for oType ' + _0x1915da + '! Check for duplicate calls!'), _0x1a6075.oTypeMainClass = _0x2b6a95) : (_0x3ea11e in _0x1a6075.secondaryTypeClasses && console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class is already set for oType " + _0x1915da + ' AND secondaryType (eg. animalType) ' + _0x3ea11e + '! Check for duplicate calls!'), _0x1a6075.secondaryTypeClasses[_0x3ea11e] = _0x2b6a95);
            this.onClassSet(_0x2b6a95, _0x1915da, _0x3ea11e);
        },
        'getClassForGameObjType': function (_0x4b4056, _0x1c2c65) {
            if (_0x4b4056 in this.customClassesForOType) {
                var _0x52285e = this.customClassesForOType[_0x4b4056];
                return null == _0x1c2c65 || 0 == _0x1c2c65 ? _0x52285e.oTypeMainClass : _0x1c2c65 in _0x52285e.secondaryTypeClasses ? _0x52285e.secondaryTypeClasses[_0x1c2c65] : _0x52285e.oTypeMainClass;
            }
            return GameObj;
        },
        'newlyVis_createGameObjFromMsg': function (msg) {
            var oType = msg.readUInt8(),
                secondaryType = null;
            if (oType == 2 || oType == 117 || oType == 14) secondaryType = msg.readUInt8();
  
            var newObj = GameObjType.createGameObjOfOType(oType, secondaryType);
            newObj.worldUpd_readMsgNewlyVisible(msg, oType, secondaryType);
            return newObj;
        },
        'createGameObjOfOType': function (_0x457691, _0x20c34c) {
            return new(this.getClassForGameObjType(_0x457691, _0x20c34c))(_0x457691, _0x20c34c);
        },
        'onClassSet': function (_0x3cd1e8) {}
    };

var _0x4170f3 = 0x1,
    _0x543083 = 0x2,
    _0xe39007 = 0x3,
    _0x41846d = 0x4,
    _0x2342f6 = 0x5,
    _0x4f5784 = 0x6,
    _0x4c8c3e = 0x7,
    _0x49ee98 = 0x8,
    _0x58b203 = 0x9,
    _0x306e7d = 0xa,
    _0x17b991 = 0xb,
    _0x1bea6f = 0xc,
    _0x1de318 = 0xd,
    _0x1ddfd4 = 0xe,
    _0x245d92 = 0xf,
    _0x21d795 = 0x10,
    _0x14aa29 = 0x11,
    _0x44ffc0 = 0x12,
    _0x13e47b = 0x13,
    _0x128264 = 0x14,
    _0x166900 = 0x15,
    _0x22c4b4 = 0x16,
    _0xbffa37 = 0x17,
    _0x39caec = 0x18,
    _0xcbf731 = 0x19,
    _0x1b136a = 0x1a,
    _0x4dca01 = 0x1b,
    _0x58670a = 0x1c,
    _0x1ebbca = 0x1d,
    _0x332f04 = 0x1e,
    _0x1e6300 = 0x1f,
    _0x10ffe7 = 0x20,
    _0x4e5642 = 0x21,
    _0xfa8790 = 0x22,
    _0x37feb8 = 0x23,
    _0x586eae = 0x24,
    _0x115d14 = 0x25,
    _0x5b87cd = 0x26,
    _0xa4ccd0 = 0x27,
    _0x1cd045 = 0x28,
    _0x50fb31 = 0x29,
    _0x4fb188 = 0x2a,
    _0x13ad6a = 0x2b,
    _0x4ab9c5 = 0x2c,
    _0x5ea8fd = 0x2d,
    _0x1da4d1 = 0x2e,
    _0x318be6 = 0x2f,
    _0x3cd364 = 0x30,
    _0x50c7e0 = 0x31,
    _0x25e140 = 0x32,
    _0x5b3c93 = 0x33,
    _0xb20c08 = 0x34,
    _0x1a31f6 = 0x35,
    _0x3223f8 = 0x36,
    _0x33258c = 0x37,
    _0x819b63 = 0x38,
    _0x49b403 = 0x39,
    _0x4e163c = 0x3a,
    _0xa8f04a = 0x3b,
    _0x58ec8b = 0x3c,
    _0x5362ea = 0x3d,
    _0x5def9d = 0x3e,
    _0x5d266c = 0x3f,
    _0x1cc507 = 0x40,
    _0x1db4ca = 0x41,
    _0xbc3a94 = 0x42,
    _0x4bc18f = 0x43,
    _0x3afcf3 = 0x44,
    _0x3894a3 = 0x45,
    _0x11d8d8 = 0x46,
    _0x3c0348 = 0x47,
    _0x29871d = 0x48,
    _0x17505c = 0x49,
    _0x132e3a = 0x4a,
    _0x510be1 = 0x4b,
    _0x56c4f6 = 0x4c,
    _0x2714c6 = 0x4d,
    _0x4906df = 0x4e,
    _0x667e39 = 0x4f,
    _0x1840f3 = 0x50,
    _0x1c031f = 0x51,
    _0x3ebaa2 = 0x52,
    _0x3475cc = 0x53,
    _0x4b5f75 = 0x54,
    _0x22da49 = 0x55,
    _0x58e093 = 0x56,
    _0x4a40f6 = 0x57,
    _0x293281 = 0x58,
    _0x18993a = 0x59,
    _0x24f42b = 0x5a,
    _0x3fe455 = 0x5b,
    _0x35fbe8 = 0x5c,
    _0x2c0737 = 0x5d,
    _0x5deb7a = 0x5e,
    _0x28a6aa = 0x5f,
    _0x31ed20 = 0x60,
    _0x8942b7 = 0x61,
    _0x36bb4b = 0x62,
    _0x258caf = 0x63,
    _0x4e99c5 = 0x64,
    _0x2bd850 = 0x65,
    _0x2f892 = 0x66,
    _0x1eb23c = 0x67,
    _0x319038 = 0x68,
    _0x2f88c2 = 0x69,
    _0x15ef44 = 0x6a,
    _0x999be1 = 0x6c,
    _0x445c8d = function (_0x23362f) {
        var _0x4b5917 = {};
        switch (_0x23362f) {
        case _0x5ea8fd:
            _0x4b5917.aniName = 'Snail';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = "You're a super slow snail!";
            _0x4b5917.aniCol = '#fcc02b';
            _0x4b5917.skinName = 'snail';
            break;
        case _0x4170f3:
            _0x4b5917.aniName = 'Mouse';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = '';
            _0x4b5917.aniCol = '#9BA9B9';
            _0x4b5917.skinName = 'mouse';
            break;
        case _0x543083:
            _0x4b5917.aniName = 'Rabbit';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to RABBIT! \nPress W to burrow a hole to hide in!`;
            _0x4b5917.aniCol = '#AA937E';
            _0x4b5917.skinName = 'rabbit';
            break;
        case _0xe39007:
            _0x4b5917.aniName = 'Pig';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to PIG!\n Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)`;
            _0x4b5917.aniCol = '#DD6BD4';
            _0x4b5917.skinName = 'pig';
            break;
        case _0x41846d:
            _0x4b5917.aniName = 'Fox';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to FOX! ,\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!`;
            _0x4b5917.aniCol = '#FF9D43';
            _0x4b5917.skinName = 'fox';
            break;
        case _0x2342f6:
            _0x4b5917.aniName = 'Deer';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to DEER! \nPress W to dig up food! \nDig in mud for better food!\n Hint:Check water areas for new food sources!`;
            _0x4b5917.aniCol = '#C4773E';
            _0x4b5917.skinName = 'deer';
            break;
        case _0x4f5784:
            _0x4b5917.aniName = 'Mole';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to MOLE!\n Hold W to dig underground!\nGo under anything, do surprise attacks!`;
            _0x4b5917.aniCol = '#4C4A45';
            _0x4b5917.skinName = 'mole';
            break;
        case _0x4c8c3e:
            _0x4b5917.aniName = 'Zebra';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to ZEBRA! \nPress W to kick side ways!`;
            _0x4b5917.aniCol = '#FFFFFF';
            _0x4b5917.skinName = 'zebra';
            break;
        case _0x49ee98:
            _0x4b5917.aniName = 'Lion';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to LION!\n Press W to release a mighty ROAR (Rawr!)!`;
            _0x4b5917.aniCol = '#f8c923';
            _0x4b5917.skinName = 'lion';
            break;
        case _0x58b203:
            _0x4b5917.aniName = 'CHEETAH';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to CHEETAH!\n Press W to get a speed boost! (Every 8 seconds)!`;
            _0x4b5917.aniCol = '#CAC05B';
            _0x4b5917.skinName = 'bigcat/cheetah';
            break;
        case _0x306e7d:
            _0x4b5917.aniName = 'Bear';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to BEAR!\n Bears climb through green hills! (Press W to use your claw!)`;
            _0x4b5917.aniCol = '#99591C';
            _0x4b5917.skinName = 'bear';
            break;
        case _0x17b991:
            _0x4b5917.aniName = 'Croc';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to CROCODILE!\n Press W to bite and drag around animals! \n+ (Now hide in water spots)+ Swim well in Mud, Lakes & Oceans!`;
            _0x4b5917.aniCol = '#30F51C';
            _0x4b5917.skinName = 'croc';
            break;
        case _0x1de318:
            _0x4b5917.aniName = 'Hippo';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to HIPPO!\nHippos are great swimmers, dominate the Lakes/Oceans/Mud!`;
            _0x4b5917.aniCol = '#945A99';
            _0x4b5917.skinName = 'hippo';
            break;
        case _0x1bea6f:
            _0x4b5917.aniName = 'Rhino';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to RHINO!\n Press W to CHARGE with your mighty horn!`;
            _0x4b5917.aniCol = '#94a3a9';
            _0x4b5917.skinName = 'rhino';
            break;
        case _0x245d92:
            _0x4b5917.aniName = 'Shrimp';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = '';
            _0x4b5917.aniCol = '#f88e37';
            _0x4b5917.skinName = 'shrimp';
            break;
        case _0x21d795:
            _0x4b5917.aniName = 'Trout';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to TROUT!\nHint: Hold Left-click to RUN! (Uses extra water)`;
            _0x4b5917.aniCol = '#ac8686';
            _0x4b5917.skinName = 'trout';
            break;
        case _0x14aa29:
            _0x4b5917.aniName = 'Crab';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to CRAB!\n Crabs can survive on dry land!\n (On land, Press W to go into your shell!)`;
            _0x4b5917.aniCol = '#bf2408';
            _0x4b5917.skinName = 'crab';
            break;
        case _0x44ffc0:
            _0x4b5917.aniName = 'Squid';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to SQUID!\n Squids can use INK when injured (press W!) \n+ you can hide in plankton bushes!`;
            _0x4b5917.aniCol = '#40dda4';
            _0x4b5917.skinName = 'squid';
            break;
        case _0x13e47b:
            _0x4b5917.aniName = 'Shark';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to SHARK!\n A vicious predator of the oceans!`;
            _0x4b5917.aniCol = '#999fc6';
            _0x4b5917.skinName = 'shark';
            break;
        case _0x22c4b4:
            _0x4b5917.aniName = 'Sea-horse';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to SEA HORSE!\n An agile hunter!`;
            _0x4b5917.aniCol = '#73BE2F';
            _0x4b5917.skinName = 'seahorse';
            break;
        case _0xbffa37:
            _0x4b5917.aniName = 'Jellyfish';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to JELLYFISH!\n A slowly-turning animal that can grow quite large!`;
            _0x4b5917.aniCol = '#FDB9BA';
            _0x4b5917.skinName = 'jellyfish';
            break;
        case _0x166900:
            _0x4b5917.aniName = 'Turtle';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to TURTLE!\n Lives well on land & water! (On land, Press W to go into your shell!)`;
            _0x4b5917.aniCol = '#502E1A';
            _0x4b5917.skinName = 'turtle';
            break;
        case _0x128264:
            _0x4b5917.aniName = 'Stringray';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to STINGRAY!\n Use electic shock (Release W key!) to shock animals! \n(Takes time to recharge)`;
            _0x4b5917.aniCol = '#164336';
            _0x4b5917.skinName = 'stingray';
            break;
        case _0x39caec:
            _0x4b5917.aniName = 'The Kraken';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to THE KRAKEN!\n Terrorize the oceans, and be feared by all!\n (Release W to use whirlpool ability!)`;
            _0x4b5917.aniCol = '#64a034';
            _0x4b5917.skinName = 'kraken';
            break;
        case _0xcbf731:
            _0x4b5917.aniName = 'Pufferfish';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to PUFFERFISH!\n (Hold W to inflate- become spiky, and dangerous to touch!)`;
            _0x4b5917.aniCol = '#6C5C2C';
            _0x4b5917.skinName = 'pufferfish';
            break;
        case _0x1b136a:
            _0x4b5917.aniName = 'Killer Whale';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Killer Whale! \nWhales blow out water when diving! (And sometimes other loot!)`;
            _0x4b5917.aniCol = '#141414';
            _0x4b5917.skinName = 'killerwhale';
            break;
        case _0x4dca01:
            _0x4b5917.aniName = 'Swordfish';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n (Press W to rush with your sharp nose!)`;
            _0x4b5917.aniCol = '#689CD7';
            _0x4b5917.skinName = 'swordfish';
            break;
        case _0x58670a:
            _0x4b5917.aniName = 'Gorilla';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Gorillas are very fast on hills/trees!\n Press W to throw bananas! (from trees)`;
            _0x4b5917.aniCol = '#323232';
            _0x4b5917.skinName = 'gorilla';
            break;
        case _0x1ebbca:
            _0x4b5917.aniName = 'Octopus';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Octopus!\nHold W to use your 'Disguise' ability!\n(Hint: wait for prey to bite you- they get stunned!)`;
            _0x4b5917.aniCol = '#ff8340';
            _0x4b5917.skinName = 'octopus';
            break;
        case _0x1ddfd4:
            _0x4b5917.aniName = 'Dragon';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n (You're amazing!) \nFly over everything, Hold W to shoot fire!`;
            _0x4b5917.aniCol = '#22FF8A';
            _0x4b5917.skinName = 'dragon';
            break;
        case _0x1da4d1:
            _0x4b5917.aniName = 'Black Dragon';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Black dragons drink lava instead of water! Black dragons only heal on healing stones/lava!`;
            _0x4b5917.aniCol = 'black';
            _0x4b5917.skinName = 'blackdragon';
            break;
        case _0xb20c08:
            _0x4b5917.aniName = 'Giant Spider';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Place web around the game to catch prey!`;
            _0x4b5917.aniCol = 'black';
            _0x4b5917.skinName = 'giantSpider';
            break;
        case _0x25e140:
            _0x4b5917.aniName = 'Cobra';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Hold W to Spit venom, and poison animals with your bite!`;
            _0x4b5917.aniCol = 'black';
            _0x4b5917.skinName = 'cobra';
            break;
        case _0x5b3c93:
            _0x4b5917.aniName = 'Boa Constrictor';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Coil and suffocate other animals!`;
            _0x4b5917.aniCol = 'black';
            _0x4b5917.skinName = 'boaConstrictor';
            break;
        case _0x1a31f6:
            _0x4b5917.aniName = 'T-REX';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + ` The Dinosaur!\n This ancient dinosaur has powerful jaws that can drag prey around!!`;
            _0x4b5917.aniCol = '#862A2A';
            _0x4b5917.skinName = 'trex';
            break;
        case _0x3223f8:
            _0x4b5917.aniName = 'Tiger';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Tiger!\n Tigers can launch an ambush attack (HOLD W to grow a bush) Release to attack!`;
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'tiger';
            break;
        case _0x33258c:
            _0x4b5917.aniName = 'Giraffe';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Giraffe!\nGiraffe have huge legs and stomp anyone in their way!`;
            _0x4b5917.aniCol = '#E9BD23';
            _0x4b5917.skinName = 'giraffe';
            break;
        case _0x819b63:
            _0x4b5917.aniName = 'Eagle';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Eagle!\nEagles can fly up other animals in the air! !\n`;
            _0x4b5917.aniCol = '#5b400d';
            _0x4b5917.skinName = 'eagle';
            break;
        case _0x50fb31:
            _0x4b5917.aniName = 'Arctic Fox';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!`;
            _0x4b5917.aniCol = '#CFCFCF';
            _0x4b5917.skinName = 'arctic/arcticfox';
            break;
        case _0x1e6300:
            _0x4b5917.aniName = 'Arctic Hare';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n \nPress W to burrow a hole to hide in!`;
            _0x4b5917.aniCol = '#D5D5D5';
            _0x4b5917.skinName = 'arctic/arctichare';
            break;
        case _0x10ffe7:
            _0x4b5917.aniName = 'The Yeti!';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n So it really exists... \n Hold W to turn into snow, release W to freeeeeze!`;
            _0x4b5917.aniCol = '#839eb5';
            _0x4b5917.skinName = 'arctic/yeti';
            break;
        case _0x4e5642:
            _0x4b5917.aniName = 'Chipmunk';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = '';
            _0x4b5917.aniCol = '#A77C30';
            _0x4b5917.skinName = 'arctic/chipmunk';
            break;
        case _0xfa8790:
            _0x4b5917.aniName = 'Muskox';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Press W to charge with your horns! \nPlus move decently on ice!`;
            _0x4b5917.aniCol = '#231f18';
            _0x4b5917.skinName = 'arctic/muskox';
            break;
        case _0x37feb8:
            _0x4b5917.aniName = 'Penguin';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Left-click to run!\n (HOLD W to slide FAST on ice)!`;
            _0x4b5917.aniCol = '#FFFFFF';
            _0x4b5917.skinName = 'arctic/penguin';
            break;
        case _0x586eae:
            _0x4b5917.aniName = 'Polar Bear';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Polar bears can climb hills! \n+ They're amazing swimmers!`;
            _0x4b5917.aniCol = '#e4e4e4';
            _0x4b5917.skinName = 'arctic/bear/bear';
            break;
        case _0x115d14:
            _0x4b5917.aniName = 'Seal';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Seals can slide on ice (Hold W) + can climb hills (rocks too!)`;
            _0x4b5917.aniCol = '#cfcfcf';
            _0x4b5917.skinName = 'arctic/seal';
            break;
        case _0x5b87cd:
            _0x4b5917.aniName = 'Snow leopard';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Press W to get a speed boost! (Every 8 seconds)!`;
            _0x4b5917.aniCol = '#cfcfcf';
            _0x4b5917.skinName = 'arctic/snowleopard';
            break;
        case _0xa4ccd0:
            _0x4b5917.aniName = 'Walrus';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n You can slide on ice (Hold W) + can climb hills (rocks too!)`;
            _0x4b5917.aniCol = '#633838';
            _0x4b5917.skinName = 'arctic/walrus';
            break;
        case _0x1cd045:
            _0x4b5917.aniName = 'Reindeer';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Press W to dig up food! \n Your sharp hooves let you turn very well on ice!`;
            _0x4b5917.aniCol = '#a68976';
            _0x4b5917.skinName = 'arctic/reindeer';
            break;
        case _0x332f04:
            _0x4b5917.aniName = 'Wolf';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Wolf paws turn very well on ice!\n Press W to howl!`;
            _0x4b5917.aniCol = '#6B6B6B';
            _0x4b5917.skinName = 'arctic/wolf';
            break;
        case _0x4fb188:
            _0x4b5917.aniName = 'Wolverine';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Press W to Let out a Powerful GROWL! (Knocks back prey!)`;
            _0x4b5917.aniCol = '#843A0F';
            _0x4b5917.skinName = 'arctic/wolverine';
            break;
        case _0x13ad6a:
            _0x4b5917.aniName = 'Mammoth';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Press W to roll snowballs with your trunk!\n The bigger the snowball gets, the longer the freeze!`;
            _0x4b5917.aniCol = '#9d4717';
            _0x4b5917.skinName = 'arctic/mammoth';
            break;
        case _0x4ab9c5:
            _0x4b5917.aniName = 'Donkey';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Press W to Kick any animal behind you`;
            _0x4b5917.aniCol = '#8c7c64';
            _0x4b5917.skinName = 'donkey';
            break;
        case _0x318be6:
            _0x4b5917.aniName = 'Sabertooth Tiger';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Sabertooth Tiger!\nSabertooth Tigers are great swimmers, dominate the Lakes/Oceans/Mud!`;
            _0x4b5917.aniCol = '#945A99';
            _0x4b5917.skinName = 'sabertoothtiger';
            break;
        case _0x3cd364:
            _0x4b5917.aniName = 'Elephant';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to ' + _0x4b5917.aniName + `!\n Use your long trunk to attack and eat food!`;
            _0x4b5917.aniCol = '#945A99';
            _0x4b5917.skinName = 'elephant';
            break;
        case _0x50c7e0:
            _0x4b5917.aniName = 'Blue Whale';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Blue Whale!\n Smash with your powerful tail!`;
            _0x4b5917.aniCol = '#945A99';
            _0x4b5917.skinName = 'bluewhale';
            break;
        case _0xa8f04a:
            _0x4b5917.aniName = 'Duckling';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to a DUCK!';
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'duck/0/duck';
            break;//_0x4e163c
            case _0x4e163c:
                _0x4b5917.aniName = 'Duck';
                _0x4b5917.aniDesc = '';
                _0x4b5917.upgradeText = 'UPGRADED to a DUCK!';
                _0x4b5917.aniCol = '#FF9000';
                _0x4b5917.skinName = 'duck';
                break;//_0x4e163c
        case _0x49b403:
            _0x4b5917.aniName = 'Hedgehog';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Hedgehog!\n (Hold W to become spiky, and dangerous to touch!)`;
            _0x4b5917.aniCol = '#5b400d';
            _0x4b5917.skinName = 'hedgehog';
            break;
        case _0x5362ea:
            _0x4b5917.aniName = 'King Crab';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to a KING CRAB!';
            _0x4b5917.aniCol = '#971f0e';
            _0x4b5917.skinName = 'kingcrab';
            break;
        case _0x58ec8b:
            _0x4b5917.aniName = 'Lemming';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = '';
            _0x4b5917.aniCol = '#A77C30';
            _0x4b5917.skinName = 'arctic/lemming';
            break;
        case _0x5def9d:
            _0x4b5917.aniName = 'Frog';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to Frog!!';
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'frog/frog';
            break;
        case _0x5d266c:
            _0x4b5917.aniName = 'Ostrich';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Ostrich! Lay eggs to hatch babies! \nCommand babies by placing your crosshair (right-click/W)-\n They can attack prey!`;
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'ostrich/ostrich';
            break;
        case _0x1cc507:
            _0x4b5917.aniName = 'Pelican';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Pelican! \nPick up water (and prey!) in your mouth,\nfly, and drop water on prey! (press W again)`;
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'pelican/pelican';
            break;
        case _0x1db4ca:
            _0x4b5917.aniName = 'Falcon';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Falcon! \nFly, and do a powerful dive attack! Aim it well.`;
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'falcon';
            break;
        case _0xbc3a94:
            _0x4b5917.aniName = 'Snowy Owl';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = `UPGRADED to Snowy Owl!\n Aim the crosshair, \n right click/W when it's on top of prey, to attack!`;
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'snowyowl/snowyowl';
            break;
        case _0x3894a3:
            _0x4b5917.aniName = 'Baby Ostrich';
            _0x4b5917.aniDesc = '';
            _0x4b5917.upgradeText = 'UPGRADED to Baby Ostrich!!';
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'ostrich/baby-ostrich';
            break;
        case _0x3afcf3:
            _0x4b5917.aniName = 'Phoenix';
            _0x4b5917.upgradeText = `UPGRADED to Phoenix!\nCreate powerful fire tornados to burn your enemies alive!`;
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'phoenix/phoenix';
            break;
        case _0x11d8d8:
            _0x4b5917.aniName = 'Sea Monster';
            _0x4b5917.upgradeText = 'UPGRADED to Sea Monster!';
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'seamonster';
            break;
        case _0x3c0348:
            _0x4b5917.aniName = 'Land Monster';
            _0x4b5917.upgradeText = 'UPGRADED to Land Monster!';
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'landmonster';
            break;
        case _0x29871d:
            _0x4b5917.aniName = 'Ice Monster';
            _0x4b5917.upgradeText = 'UPGRADED to Ice Monster!';
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'icemonster';
            break;
        case _0x17505c:
            _0x4b5917.aniName = 'Dino Monster';
            _0x4b5917.upgradeText = 'UPGRADED to Dino Monster!';
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'dinomonster';
            break;
        case _0x132e3a:
            _0x4b5917.aniName = 'Pigeon';
            _0x4b5917.upgradeText = `UPGRADED to Pigeon!\nHold W to fly around. `;
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'pigeon/pigeon';
            break;
        case _0x510be1:
            _0x4b5917.aniName = 'Toucan';
            _0x4b5917.upgradeText = `UPGRADED to Toucan!\nHold W to fly around. `;
            _0x4b5917.aniCol = '#FF9000';
            _0x4b5917.skinName = 'toucan/toucan';
            break;
        case _0x999be1:
            _0x4b5917.aniName = 'Poop';
            _0x4b5917.upgradeText = `UPGRADED to Duck!. `;
            _0x4b5917.aniCol = 'brown';
            _0x4b5917.skinName = 'poop';
            break;
        default:
            _0x4b5917.aniName = '??', _0x4b5917.aniDesc = '', _0x4b5917.aniCol = '#000000', _0x4b5917.upgradeText = 'UPGRADED!';
        }
        return _0x4b5917;
    };

function _0x1dfb1b() {}

if(localStorage.getItem("bruh")) {
    let a = localStorage.getItem("bruh");
    let d = new Date(Number(a));
    let c = new Date();
    if(d > c) alert("bad boy"), window.location.reload(true);
    else localStorage.removeItem("bruh");
}

var _0x456c6e = 0x65,
    KomodoAbility = 900,
    chickenAbility = 150,
    markhorAbil = 151,
    _0x443adb = 0,
    _0x4428e3 = 0x1,
    _0x31c7d7 = 0x2,
    _0x174e88 = 0x3,
    _0x5a924b = 0x4,
    _0x28f606 = 0x5,
    _0x5182ec = 0x6,
    _0x424652 = 0x7,
    _0x4e955d = 0x8,
    _0x26b6e9 = 0x9,
    _0x3930c4 = 0xa,
    _0x34a673 = 0xb,
    _0x8caa31 = 0xc,
    _0x482a33 = 0xd,
    _0x4e8732 = 0xe,
    _0x22236c = 0xf,
    _0x3588e1 = 0x10,
    _0x37f1a9 = 0x11,
    _0x13f029 = 0x12,
    _0x272ed6 = 0x13,
    _0xeb0ec1 = 0x14,
    _0x779685 = 0x15,
    _0x551cc0 = 0x16,
    _0x27a46a = 0x17,
    _0x2b44fe = 0x18,
    _0x5020b8 = 0x19,
    _0x50ae9f = 0x1a,
    _0x3f475c = 0x1b,
    _0x35d9ab = 0x1c,
    _0x36ba18 = 0x1e,
    _0x404a08 = 0x1f,
    _0x57afac = 0x20,
    _0x14c7a6 = 0x21,
    _0x4628a4 = 0x22,
    _0x51552c = 0x23,
    _0x426544 = 0x24,
    _0x470a8b = 0x25,
    _0x1f6f89 = 0x26,
    _0x4d52a4 = 0x27,
    _0x492730 = 0x28,
    _0x34f413 = 0x29,
    _0x4de08b = 0x2a,
    _0x149736 = 0x2b,
    _0x3e420f = 0x2e,
    _0x3c4e59 = 0x2f,
    _0x341f1f = 0x30,
    _0x482b4c = 0x31,
    _0x461076 = 0x33,
    _0x471740 = 0x36,
    _0x2bebb2 = 0x37,
    _0x1e5d1f = 0x38,
    _0x5f39b1 = 0x39,
    _0x23db8f = 0x3a,
    _0x5d4ba8 = 0x3b,
    _0x4af420 = 0x3c,
    _0x598dae = 0x3d,
    _0x3476d5 = 0x3e,
    _0x480fd2 = 0x3f,
    _0x53c170 = 0x40,
    _0x5778d5 = 0x41,
    _0x1a15fc = 0x42,
    _0x3598d3 = 0x43,
    _0x26120a = 0x44,
    _0x118df7 = 0x45,
    _0x732b06 = 0x46,
    _0x1fab69 = 0x47,
    _0x499356 = 0x48,
    _0x5ebc48 = 0x49,
    _0x3f3ba2 = 0x4a,
    _0x370043 = 0x4b,
    _0x2d3f85 = 0x4c,
    _0x58afde = 0x4d,
    _0xfa9e9c = 0x4e,
    _0x12e40b = 0x4f,
    _0x237bc2 = 0x50,
    _0x3ba6bc = 0x51,
    _0x2a9fc0 = 0x52,
    _0x58931e = 0x53,
    _0x19435b = 0x56,
    _0x3b20c3 = 0x57,
    _0x94125 = 0x58,
    _0x57b271 = 0x59,
    _0x17f519 = 0x5a,
    _0x2be396 = 0x5b,
    _0x113fae = 0x5c,
    _0x3f37f7 = 0x5d,
    _0x364e0e = 0x5e,
    _0xda7e33 = 0x5f,
    _0x44e324 = 0x5d,
    _0x222974 = 0x61,
    _0x57ff0a = 0x62,
    _0x476024 = 0x63,
    _0x22d643 = 0x65,
    _0x14ebee = 0x66,
    _0xf075e3 = 0x67,
    _0x574ded = 0x68,
    _0x444957 = 0x69,
    _0x5e0363 = 0x6a,
    _0x399018 = 0x6b,
    _0x4418e3 = 0x6c,
    _0x261136 = 0x70,
    pullhole = 300,

    _0x5a107b = function (_0x343cb0) {
        var _0x3c32bc = {},
            _0xce9e38 = gameObjsByID[myPlayerID];
        switch (_0x343cb0) {
        case _0x2a9fc0:
            _0x3c32bc.abilName = 'Bear Attack';
            _0x3c32bc.abilImg = 'skins/desert/gobibear/gobibear_attack.png';
            break;
        case _0x58931e:
            _0x3c32bc.abilName = 'Spit!';
            _0x3c32bc.abilImg = 'skins/desert/camel/spit.png';
            break;
        case _0x57afac:
            _0x3c32bc.abilName = 'Tail Slap';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x404a08:
            _0x3c32bc.abilName = 'Trunk Hit';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x456c6e:
            _0x3c32bc.abilName = 'Dive';
            _0x3c32bc.abilImg = 'img/ability_dive.png';
            break;
        case _0x5020b8:
            _0x3c32bc.abilName = 'Dig For Food';
            _0x3c32bc.abilImg = 'skins/' + 'deer/' + '0/' + 'deer' + '.png';
            break;
        
        case _0x31c7d7:
            _0x3c32bc.abilName = 'Shell';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '2.png';
            break;
            case KomodoAbility:
                _0x3c32bc.abilName = 'Poison Bite\n(Sweat Prey)';
                _0x3c32bc.abilImg =   'skins/desert/komododragon/' + '0' + '/komododragon_ability.png';
              
                break
                case chickenAbility:

                _0x3c32bc.abilName = 'Run!';
                _0x3c32bc.abilImg =   'skins/land/chicken/' + '0' + '/chicken.png';
              
                    break
                    case markhorAbil:
                        _0x3c32bc.abilName = "Jump High\n& Headbang!";
                        break;


        case _0x779685:
            _0x3c32bc.abilName = 'Bite Drag';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x426544:
            _0x3c32bc.abilName = 'Suffocate prey';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x2bebb2:
            _0x3c32bc.abilName = 'Fly with water';
            _0x3c32bc.abilImg = 'skins/pelican/ability_pelican.png';
            break;
        case _0x424652:
            _0x3c32bc.abilName = 'Disguise';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x551cc0:
            _0x3c32bc.abilName = 'Burrow Hole';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x27a46a:
            _0x3c32bc.abilName = 'Pull from Hole';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x26b6e9:
            _0x3c32bc.abilName = 'Charge';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x37f1a9:
            _0x3c32bc.abilName = 'Roll snow';
            _0x3c32bc.abilImg = 'img/snowball.png';
            break;
        case _0x4628a4:
            _0x3c32bc.abilName = 'Venom Spit';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x51552c:
            _0x3c32bc.abilName = 'Spin Web';
            _0x3c32bc.abilImg = 'img/spiderWeb.png';
            break;
        case _0x482a33:
            _0x3c32bc.abilName = 'Throw Snow';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x3588e1:
            _0x3c32bc.abilName = 'Drop Snow';
            _0x3c32bc.abilImg = 'img/snowball.png';
            break;
        case _0x13f029:
            _0x3c32bc.abilName = 'Loud Noise';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x4e8732:
            _0x3c32bc.abilName = 'Claw Slash';
            _0x3c32bc.abilImg = 'img/ability_claw.png';
            break;
        case _0x5a924b:
            _0x3c32bc.abilName = 'Ink';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x174e88:
            _0x3c32bc.abilName = 'Shock';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x4428e3:
            _0x3c32bc.abilName = 'Hold to Dig';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x8caa31:
            _0x3c32bc.abilName = 'Howl';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x2b44fe:
            _0x3c32bc.abilName = 'Throw Banana';
            _0x3c32bc.abilImg = 'skins/0' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x35d9ab:
            _0x3c32bc.abilName = 'Cause Wave';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x22236c:
            _0x3c32bc.abilName = 'Extra Boost';
            _0x29b77f == _0x58b203 ? _0xce9e38 && (_0x343cb0 = _0xce9e38.animalInfo(), _0x3c32bc.abilImg = 'skins/' + _0x343cb0.skinName + '.png') : _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x4e955d:
            _0x3c32bc.abilName = 'Slide on ice';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x3930c4:
            _0x3c32bc.abilName = 'Inflate';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x482b4c:
            _0x3c32bc.abilName = 'Spikes';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '2.png';
            break;
        case _0x461076:
            _0x3c32bc.abilName = 'Arm Smash';
            _0x3c32bc.abilImg = 'img/ability_crabSmashSkin.png';
            break;
        case _0x470a8b:
            _0x3c32bc.abilName = 'Jaws Bite';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x3e420f:
            _0x3c32bc.abilName = 'Jaws Bite';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x471740:
            _0x3c32bc.abilName = 'Command Babies';
            _0x3c32bc.abilImg = 'skins/ostrich/ostrich-baby.png';
            break;
        case _0x23db8f:
            _0x3c32bc.abilName = 'Target prey';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x5f39b1:
            _0x3c32bc.abilName = 'Sky dive';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x1f6f89:
            _0x3c32bc.abilName = 'Ambush Attack';
            if (_0xce9e38 = gameObjsByID[myPlayerID]) _0x343cb0 = _0xce9e38.animalInfo(), _0x3c32bc.abilImg = 'skins/' + _0x343cb0.skinName + '.png';
            break;
        case _0x4de08b:
            _0x3c32bc.abilName = 'Stomp';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x3c4e59:
            _0x3c32bc.abilName = 'Fly with prey';
            _0xce9e38 && (_0xce9e38.animalInfo(), _0x3c32bc.abilImg = 'skins/eagle/' + _0xce9e38.animalSpecies + '/eagle.png');
            break;
        case _0x341f1f:
            _0x3c32bc.abilName = 'Stink';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x53c170:
        case _0x5778d5:
            _0x3c32bc.abilName = 'HOLD to fly';
            if (_0xce9e38 = gameObjsByID[myPlayerID]) _0x343cb0 = _0xce9e38.animalInfo(), _0x3c32bc.abilImg = 'skins/' + _0x343cb0.skinName + '.png';
            break;
        case _0x1fab69:
            _0x3c32bc.abilName = `HOLD to fly\n& Mimic Animals`;
            if (_0xce9e38 = gameObjsByID[myPlayerID]) _0x343cb0 = _0xce9e38.animalInfo(), _0x3c32bc.abilImg = 'skins/' + _0x343cb0.skinName + '.png';
            break;
        case _0x499356:
            _0x3c32bc.abilName = `HOLD in water\n(find food)`;
            _0x3c32bc.abilImg = 'skins/flamingo/flamingo.png';
            break;
        case _0x370043:
            _0x3c32bc.abilName = `HOLD to Peck\n/ Fly`;
            _0x3c32bc.abilImg = 'skins/woodpecker/woodpecker.png';
            break;
        case _0x2d3f85:
            _0x3c32bc.abilName = `HOLD to Hypnotize\n/ Fly from hills`;
            _0x3c32bc.abilImg = 'skins/peacock/peacock_ability.png';
            break;
        case _0x58afde:
            _0x3c32bc.abilName = `HOLD to Jump High\n`;
            _0x3c32bc.abilImg = 'skins/desert/gazelle/gazelle1.png';
            break;
        case _0xfa9e9c:
            _0x3c32bc.abilName = 'HOLD to ROLL';
            _0x3c32bc.abilImg = 'skins/desert/armadillo/armadillo1.png';
            break;
        case _0x237bc2:
            _0x3c32bc.abilName = 'HOLD to Dig';
            _0x3c32bc.abilImg = 'skins/desert/meerkat/0/meerkat1.png';
            break;
        case _0x12e40b:
            _0x3c32bc.abilName = 'Spits Food!';
            _0x3c32bc.abilImg = 'skins/desert/chipmunk/chipmunk1.png';
            break;
        case _0x3ba6bc:
            _0x3c32bc.abilName = 'Whine!';
            _0x3c32bc.abilImg = 'skins/desert/fennecfox/fennecfox1.png';
            break;
        case _0x5ebc48:
            _0x3c32bc.abilName = `Front Kick\n(HOLD to Charge)`;
            _0x3c32bc.abilImg = 'skins/cassowary/cassowary1.png';
            break;
        case _0x598dae:
            _0x3c32bc.abilName = 'Fire Tornado';
            _0x3c32bc.abilImg = 'img/firetornado.png';
            break;
        case _0x1a15fc:
            _0x3c32bc.abilName = 'Sink Hole';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x480fd2:
            _0x3c32bc.abilName = 'Giant Whirlpool';
            _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
            break;
        case _0x732b06:
            _0x3c32bc.abilName = 'Knock In Air';
            _0x3c32bc.abilImg = 'skins/monsters/dinomonster/dinomonster.png';
            break;
        case _0x118df7:
            _0x3c32bc.abilName = 'Feeze Prey';
            _0x3c32bc.abilImg = 'skins/monsters/icemonster/icemonster.png';
            break;
        default:
            _0x3c32bc.abilName = 'Ability', _0x3c32bc.abilImg = 'skins/' + _0x445c8d(_0x29b77f).skinName + '.png';
        }
        return _0x3c32bc;
    },
    _0x55ada2 = function (_0x279e5e, _0x2c1c60) {
        return Math.random() * (_0x2c1c60 - _0x279e5e) + _0x279e5e;
    },
    _0x591b73 = function (_0x5a5a1f, _0x11d648) {
        return Math.floor(Math.random() * (_0x11d648 - _0x5a5a1f + 0x1)) + _0x5a5a1f;
    },
    _0x5a5a44 = function (_0x1385ac) {
        _0x1385ac = Math.trunc(_0x1385ac) % 0x168 + (_0x1385ac - Math.trunc(_0x1385ac));
        return 0 < _0x1385ac ? _0x1385ac : _0x1385ac + 0x168;
    },
    _0x302b6e = function (_0x503a40) {
        _0x503a40 = _0x503a40.split('.');
        return 0x100 * (0x100 * (0x100 * +_0x503a40[0] + +_0x503a40[0x1]) + +_0x503a40[0x2]) + +_0x503a40[0x3];
    },
    _0x4412d1 = function (_0x26181c) {
        for (var _0x1fa8d6 = _0x26181c % 0x100, _0x401040 = 0x3; 0 < _0x401040; _0x401040--) _0x26181c = Math.floor(_0x26181c / 0x100), _0x1fa8d6 = _0x26181c % 0x100 + '.' + _0x1fa8d6;
        return _0x1fa8d6;
    },
    _0x3ab472 = function (_0x257a61, _0x8a8461) {
        var _0x5b168c = _0x8a8461.split('?')[0],
            _0x5255f0, _0x1d9e95;
        _0x5255f0 = -0x1 !== _0x8a8461.indexOf('?') ? _0x8a8461.split('?')[0x1] : '';
        if ('' !== _0x5255f0) {
            _0x1d9e95 = _0x5255f0.split('&');
            for (var _0x1b1276 = _0x1d9e95.length - 0x1; 0 <= _0x1b1276; --_0x1b1276) _0x5255f0 = _0x1d9e95[_0x1b1276].split('=')[0], _0x5255f0 === _0x257a61 && _0x1d9e95.splice(_0x1b1276, 0x1);
            _0x5b168c = _0x5b168c + '?' + _0x1d9e95.join('&');
        }
        return _0x5b168c;
    },
    _0x639a73 = function (_0xdcdcc5) {
        return 0xb4 / Math.PI * _0xdcdcc5;
    },
    _0x55d748 = function (_0x5cbb62) {
        return Math.PI / 0xb4 * _0x5cbb62;
    },
    _0x161dd9 = function (_0x4ad7fd, _0x57a04c, _0xab0514, _0x255760) {
        return Math.atan2(_0x255760 - _0x57a04c, _0xab0514 - _0x4ad7fd);
    },
    get_bit = function (_0x11761d, _0x56706b) {
        return 0 != (_0x11761d >> _0x56706b) % 0x2;
    },
    set_bit = function (_0x3dd688, _0x1bc0bb, _0x849d32) {
        return _0x849d32 ? _0x3dd688 | 0x1 << _0x1bc0bb : _0x3dd688 & ~(0x1 << _0x1bc0bb);
    },
    _0x5b2dfd = function (_0x248fd2, _0x86b227) {
        var _0x19205a = _0x5a5a44(_0x639a73(_0x86b227 - _0x248fd2));
        0xb4 < _0x19205a && (_0x19205a -= 0x168);
        return _0x55d748(_0x19205a);
    },
    _0x1c8ba9 = function (_0x2d5679, _0x42f365, _0x5375dc) {
        return Math.min(_0x5375dc, Math.max(_0x42f365, _0x2d5679));
    },
    encode_utf8 = function (_0x26d125) {
        return encodeURIComponent(_0x26d125);
    },
    _0x378e6c = function (_0x2abd40) {
        return decodeURIComponent(_0x2abd40);
    },
    _0x5adcd3 = function (_0xcecb14, _0x417b25, _0x4fe780) {
        var _0x57cfca = 1.2 * ctx.measureText('M').width;
        _0xcecb14 = _0xcecb14.split('\x0a');
        for (var _0x5c57fd = 0; _0x5c57fd < _0xcecb14.length; ++_0x5c57fd) ctx.fillText(_0xcecb14[_0x5c57fd], _0x417b25, _0x4fe780), _0x4fe780 += _0x57cfca;
    },
    _0x47e6f9 = function (_0x2c479a) {
        var _0x4229d1 = parseInt(_0x2c479a, 0xa),
            _0x2cf330 = Math.floor(_0x4229d1 / 0xe10);
        _0x2c479a = Math.floor((_0x4229d1 - 0xe10 * _0x2cf330) / 0x3c);
        _0x4229d1 = _0x4229d1 - 0xe10 * _0x2cf330 - 0x3c * _0x2c479a;
        0xa > _0x4229d1 && (_0x4229d1 = '0' + _0x4229d1);
        return _0x2c479a + ':' + _0x4229d1;
    },
    _0x29cd81 = function (_0x5460a1) {
        return _0x5460a1.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    },
    _0x3dd6a4 = function (_0x3f0676) {
        return _0x34bb19(_0x3f0676);
    },
    _0x34bb19 = function (_0x992ab1, _0x4c21d9) {
        if (null === _0x992ab1) return null;
        if (0 === _0x992ab1) return '0';
        _0x4c21d9 = !_0x4c21d9 || 0 > _0x4c21d9 ? 0 : _0x4c21d9;
        var _0x663686 = _0x992ab1.toPrecision(0x2).split('e'),
            _0x663686 = 0x1 === _0x663686.length ? 0 : Math.floor(Math.min(_0x663686[0x1].slice(0x1), 0xe) / 0x3),
            _0x59f929 = 0x1 > _0x663686 ? _0x992ab1.toFixed(0 + _0x4c21d9) : (_0x992ab1 / Math.pow(0xa, 0x3 * _0x663686)).toFixed(0x2);
        return (0 > _0x59f929 ? _0x59f929 : Math.abs(_0x59f929)) + ['', 'K', 'M', 'B', 'T'][_0x663686];
    },
    _0x110b78 = function (_0x248c3a, _0x16d188, _0x1302ee, _0x22cf27) {
        ctx.fillStyle = _0x22cf27;
        ctx.beginPath();
        ctx.arc(_0x248c3a, _0x16d188, Math.max(0, _0x1302ee), 0, 0x2 * Math.PI);
        ctx.fill();
    },
    _0x337f7c = function (_0x23b0b6, _0x43446c, _0x162a75, _0x58d982, _0x262f91) {
        ctx.strokeStyle = _0x262f91;
        ctx.lineWidth = _0x58d982;
        ctx.beginPath();
        ctx.arc(_0x23b0b6, _0x43446c, Math.max(0, _0x162a75), 0, 0x2 * Math.PI);
        ctx.stroke();
    },
    _0x93972d = function (_0x1f13bc, _0x1589c8, _0x2d4b79, _0x56d990) {
        return _0x2d4b79 * Math.sin(_0x56d990 * Math.PI / _0x1589c8 * _0x1f13bc);
    },
    _0xad8e24 = function (_0x501ebf, _0x41a9af) {
        (KTestingExperimental || _0x41a9af) && console.log(_0x501ebf);
    };

function _0x1b18ae(_0x55c37c) {
    var _0x45b824 = new Date(null);
    _0x45b824.setSeconds(_0x55c37c);
    _0x55c37c = _0x45b824.getMinutes();
    var _0x45b824 = _0x45b824.getSeconds(),
        _0x772224 = '';
    0 < _0x55c37c && (_0x772224 = _0x55c37c + 'm ');
    0 < _0x45b824 && (_0x772224 += _0x45b824 + 's');
    return _0x772224;
}

function _0x459785(_0x8f0ce2, _0x2bef67) {
    var _0x28b700 = _0x8f0ce2.x - _0x2bef67.x,
        _0x3e5575 = _0x8f0ce2.y - _0x2bef67.y;
    return Math.sqrt(_0x28b700 * _0x28b700 + _0x3e5575 * _0x3e5575);
}

function MsgReader(_0x13d193) {
    this.data = _0x13d193;
    this.offset = 0;
    this.readUInt8 = function () {
        var _0x13d193 = this.data.getUint8(this.offset);
        this.offset += 0x1;
        return _0x13d193;
    };
    this.readUInt16 = function () {
        try {
            var _0x13d193 = this.data.getUint16(this.offset, !0x1);
            this.offset += 0x2;
            return _0x13d193;
        } catch (_0x371765) {
            return 0;
        }
    };
    this.readInt16 = function () {
        try {
            var _0x13d193 = this.data.getInt16(this.offset, !0x1);
            this.offset += 0x2;
            return _0x13d193;
        } catch (_0x2c2f3b) {
            return 0;
        }
    }
    this.readUInt32 = function () {
  
            var _0x13d193 = this.data.getUint32(this.offset, !0x1);
            this.offset += 4;
            return _0x13d193;
        
         
        
    };
    
    
    this.readString = function () {
        for (var _0x13d193 = this.readUInt16(), _0x6e303b = '', _0x2b5892, _0xe7b985 = 0; _0xe7b985 < _0x13d193; _0xe7b985++) _0x2b5892 = this.readUInt8(), _0xe7b985 != _0x13d193 - 0x1 && (_0x6e303b += String.fromCharCode(_0x2b5892));
        return _0x378e6c(_0x6e303b);
    };
    this.readMsgReaderBitsGroup = function () {};
    this.readBitGroup = function () {
        return new _0x145cac(this);
    };
    this.getOffset = function(){
        return this.offse;
    }
}

function fidjiaslfo(a) {
    this.len = 0;
    this.dataView = new DataView(new ArrayBuffer(a));
    this.writeUInt8 = function(a) {
        this.dataView.setUint8(this.len, a);
        this.len += 1
    };
    this.writeUInt16 = function(a) {
        this.dataView.setUint16(this.len, a, !1);
        this.len += 2
    };
    this.writeInt16 = function(a) {
        this.dataView.setInt16(this.len, a, !1);
        this.len += 2
    };
    this.writeUInt32 = function(a) {
        this.dataView.setUint32(this.len, a, !1);
        this.len += 4
    };
    this.writeString = function(a) {
        a = encode_utf8(a);
        len = a.length;
        this.writeUInt16(a.length);
        for(var c = 0; c < len; c++) this.writeUInt8(a.charCodeAt(c))
    }
}

function _0x145cac(_0x11397c) {
    this.bytesArray = new Uint8Array(20);
    this.bytesLen = 0;
    this.rBitIndex = 0x1;
    this.rByteIndex = 0;
    this.getBool = function () {
        var _0x11397c = 0 < get_bit(this.bytesArray[this.rByteIndex], this.rBitIndex);
        this.rBitIndex += 0x1;
        0x7 < this.rBitIndex && (this.rBitIndex = 0x1, this.rByteIndex += 0x1);
        return _0x11397c;
    };
    this.getInt0to3 = function () {
        return this.getIntWithXBits(0x2);
    };
    this.getIntWithXBits = function (_0x3cdf14) {
        for (var _0x3e35bf = 0, _0x28647e = 0; _0x28647e < _0x3cdf14; _0x28647e++) var _0xf1b1b9 = this.getBool(),
            _0x3e35bf = set_bit(_0x3e35bf, _0x28647e, _0xf1b1b9);
        return _0x3e35bf;
    };
    this.byteToStr = function (_0x413f7e) {
        for (var _0x412fe0 = '', _0x92250d = 0; 0x8 > _0x92250d; _0x92250d++) _0x412fe0 += 0 < get_bit(_0x413f7e, _0x92250d) ? '1' : '0';
        return _0x412fe0;
    };
    var _0x4693b4 = !0;
    do _0x4693b4 = _0x11397c.readUInt8(), this.bytesArray[this.bytesLen++] = _0x4693b4, _0x4693b4 = 0 < get_bit(_0x4693b4, 0); while (_0x4693b4);
}
function howManyCaps(str) {
    let upper = 0;
    for (let i = 0; i < str.length; i++) {
        if (str[i] >= 'A' && str[i] <= 'Z') upper++;
    }
    return upper;
};
_0x120450.prototype = {
    'strokeW': 0x1,
    'strokeColor': '#000000',
    'multiLine': !0x1,
    '_text': '',
    '_color': '#000000',
    '_yt': null,
    '_type': 0,
    'x': 0,
    icon: 0,
    shadowBlur: 0,
    'y': 0,
    '_fntSize': 0x10,
    '_canvas': null,
    '_ctx': null,
    '_dirty': !0x1,
    'renderScale': 1.5,
    '_scale': 0x1,
    'width': 0,
    'height': 0,
    currentStepGrad: 0,
    currentStepTurn: 0.005,
    img: null,
    abo: null,
    'setColor': function (_0x2f8368, yt, type, ico) {
        this._color != _0x2f8368 && (this._color = _0x2f8368, this._dirty = !0);
        if(this._yt != yt) {
            this._yt = yt;
        }
        this._type = type;
        this.icon = ico;
    },
    'setFontSize': function (_0x7c6608) {
        this._fntSize != _0x7c6608 && (this._fntSize = _0x7c6608, this._dirty = !0);
    },
    'setText': function (_0x3035c0) {
        _0x3035c0 != this._text && (this._text = _0x3035c0, this._dirty = !0);
    },
    'getRenderedCanvas': function () {
        null == this._canvas && (this._canvas = document.createElement('canvas'), this._ctx = this._canvas.getContext('2d'));
        if (this._dirty) {
            this._dirty = !0x1;
            var _0x39f7bc = this._canvas,
                _0x54ea4e = this._ctx,
                _0x183df3 = this._text,
                _0x7e8fb8 = this._scale,
                _0x403476 = this._fntSize * this.renderScale,
                _0x40ea55 = _0x403476 + 'px Arial';
            _0x54ea4e.font = _0x40ea55;
            var _0x437dad = ~~(0.2 * _0x403476);
            _0x54ea4e.font = _0x40ea55;
            if (this.multiLine) {
                for (var _0x31dad7 = 1.2 * _0x54ea4e.measureText('M').width, _0x183df3 = _0x183df3.split('\x0a'), _0x129eef = 0, _0x2f0fa3 = 0; _0x2f0fa3 < _0x183df3.length; ++_0x2f0fa3) _0x129eef = Math.max(_0x129eef, _0x54ea4e.measureText(_0x183df3[_0x2f0fa3]).width);
                this.width = (_0x129eef + 0x6) * _0x7e8fb8;
                this.height = (_0x31dad7 * _0x183df3.length + _0x437dad) * _0x7e8fb8;
                _0x39f7bc.width = this.width;
                _0x39f7bc.height = this.height;
                this.width /= this.renderScale;
                this.height /= this.renderScale;
                _0x54ea4e.globalAlpha = 0x1;
                _0x54ea4e.font = _0x40ea55;
                0 < this.strokeW && (_0x54ea4e.shadowOffsetX = this.strokeW, _0x54ea4e.shadowOffsetY = this.strokeW, _0x54ea4e.shadowColor = this.strokeColor);
                _0x54ea4e.fillStyle = this._color;
                _0x54ea4e.textAlign = 'center';
                _0x39f7bc = 0x3 + _0x39f7bc.width / 0x2;
                _0x403476 -= _0x437dad / 0x2;
                for (_0x2f0fa3 = 0; _0x2f0fa3 < _0x183df3.length; ++_0x2f0fa3) _0x54ea4e.fillText(_0x183df3[_0x2f0fa3], _0x39f7bc, _0x403476), _0x403476 += _0x31dad7;
            } else {
                this.width = (_0x54ea4e.measureText(_0x183df3).width + 0x6) * _0x7e8fb8;
                this.height = (_0x403476 + _0x437dad) * _0x7e8fb8;
                _0x39f7bc.width = this.width;
                let lineSpace = 0;
                if(this.icon == 1) lineSpace = 64;
                if(this.icon == 4) lineSpace += 150;
                if(this.icon == 2 || this.icon == 3 || this.icon == 5) lineSpace += 64;
                _0x39f7bc.width += lineSpace;
                _0x39f7bc.height = this.height;
                this.width /= this.renderScale;
                this.height /= this.renderScale;
                _0x54ea4e.globalAlpha = 0x1;
                _0x54ea4e.font = _0x40ea55;
                if(0 < this.strokeW) {
                    _0x54ea4e.shadowOffsetX = this.strokeW;
                    _0x54ea4e.shadowOffsetY = this.strokeW;
                    _0x54ea4e.shadowColor = this.strokeColor;
                    _0x54ea4e.shadowBlur = this.shadowBlur;
                }
                _0x54ea4e.fillStyle = this._color;
                if(this._type == 1 && this._yt != null) {
                    let ind = Math.round(_0x183df3.length/2);
                    if(howManyCaps(_0x183df3) <= _0x183df3.length/2 && howManyCaps(_0x183df3) > 1) {
                        let upper = 0;
                        let uea = 0;
                        for (let i = 0; i < _0x183df3.length; i++) {
                            if (_0x183df3[i] >= 'A' && _0x183df3[i] <= 'Z') {
                                upper++;
                                if(upper == 2) {
                                    uea = i;
                                }
                            }
                        }
                        ind = uea;
                    }
                    _0x54ea4e.fillStyle = this._color;
                    _0x54ea4e.fillText(_0x183df3.substr(0,ind), lineSpace+3, _0x403476 - _0x437dad / 0x2);
                    _0x54ea4e.fillStyle = this._yt;
                    _0x54ea4e.fillText(_0x183df3.substr(ind), lineSpace+3+_0x54ea4e.measureText(_0x183df3.substr(0,ind)).width, _0x403476 - _0x437dad / 0x2);
                } else if(this._type == 2 && this._color && this._color.constructor === Array) {
                    // _0x54ea4e.shadowOffsetX = 0;
                    // _0x54ea4e.shadowOffsetY = 0;
                    // _0x54ea4e.shadowColor = 'none';
                    // _0x54ea4e.shadowBlur = 0;
                    let grad = this._ctx.createLinearGradient(-200, 0, _0x39f7bc.width+400, _0x39f7bc.height);
                    grad.addColorStop(0, this._color[0]);
                    grad.addColorStop(Math.max(Math.min(this.currentStepGrad-0.1, 1.0), 0.0), this._color[0]);
                    grad.addColorStop(this.currentStepGrad, this._color[1]);
                    grad.addColorStop(Math.min(Math.max(this.currentStepGrad+0.1, 0.0), 1.0), this._color[0]);
                    grad.addColorStop(1, this._color[0]);
                    _0x54ea4e.fillStyle = grad;
                    _0x54ea4e.fillText(_0x183df3, lineSpace+3, _0x403476 - _0x437dad / 0x2);
                    if(this.currentStepGrad >= 0.90) this.currentStepGrad = 0;
                    this.currentStepGrad += this.currentStepTurn;
                } else {
                    _0x54ea4e.fillText(_0x183df3, lineSpace+3, _0x403476 - _0x437dad / 0x2);
                }
                if(this.icon == 1) this.youtubeIcon();
                if(this.icon == 2) this.testerIcon();
                if(this.icon == 3) this.adminIcon();
                if(this.icon == 4) this.mopeIcon();
                if(this.icon == 5) this.artistIcon();
            }
        }
        return this._canvas;
    },
    'testerIcon': function () {
        this.img = _0x2f22f9("img/protection.png");
        if(this.img) {
            this.getRenderedCanvas().getContext('2d').clearRect(3, 2, 50, 50);
            this.getRenderedCanvas().getContext('2d').drawImage(this.img, 3, 2, 50, 50);
        } else {
            if(this.abo == null) {
                this.abo = setTimeout(function() {this.testerIcon()}.bind(this), 1000);
            }
        }
    },
    'artistIcon': function () {
        this.img = _0x2f22f9("img/artist.png");
        if(this.img) {
            this.getRenderedCanvas().getContext('2d').clearRect(3, 2, 50, 50);
            this.getRenderedCanvas().getContext('2d').drawImage(this.img, 3, 2, 50, 50);
        } else {
            if(this.abo == null) {
                this.abo = setTimeout(function() {this.artistIcon()}.bind(this), 1000);
            }
        }
    },
    'adminIcon': function () {
        this.img = _0x2f22f9("img/admin.png");
        if(this.img) {
            this.getRenderedCanvas().getContext('2d').clearRect(3, 2, 50, 50);
            this.getRenderedCanvas().getContext('2d').drawImage(this.img, 3, 2, 50, 50);
        } else {
            if(this.abo == null) {
                this.abo = setTimeout(function() {this.adminIcon()}.bind(this), 1000);
            }
        }
    },
    'mopeIcon': function () {
        this.img = _0x2f22f9("img/logo.png");
        if(this.img) {
            this.getRenderedCanvas().getContext('2d').clearRect(3, 10, 125, 40);
            this.getRenderedCanvas().getContext('2d').drawImage(this.img, 3, 10, 150, 40);
        } else {
            if(this.abo == null) {
                this.abo = setTimeout(function() {this.mopeIcon()}.bind(this), 1000);
            }
        }
    },
    'youtubeIcon': function () {
        this.img = _0x2f22f9("img/youtube.png");
        if(this.img) {
            this.getRenderedCanvas().getContext('2d').clearRect(3, 2, 50, 50);
            this.getRenderedCanvas().getContext('2d').drawImage(this.img, 3, 2, 50, 50);
        } else {
            if(this.abo == null) {
                this.abo = setTimeout(function() {this.youtubeIcon()}.bind(this), 1000);
            }
        }
    },
    'draw': function () {
        if (this._text) {
            var _0x4b68f7 = this.renderScale;
            this.updateColor();
            var _0x22ef7b = this.getRenderedCanvas(),
                _0x8ff066 = _0x22ef7b.width / _0x4b68f7,
                _0x4b68f7 = _0x22ef7b.height / _0x4b68f7;
            this.setPos(_0x8ff066, _0x4b68f7);
            if(_0x22ef7b.width > 0 && _0x22ef7b.height > 0 && _0x8ff066 > 0 && _0x4b68f7 > 0) ctx.drawImage(_0x22ef7b, this.x - _0x8ff066 / 0x2, this.y - _0x4b68f7 / 0x2, _0x8ff066, _0x4b68f7);
        }
    },
    getTextSize: function () {
        if (this._text) {
            var rnchache = this.getRenderedCanvas();
            let _ctx = rnchache.getContext("2d");
            return _ctx.measureText(this._text).width;
        }
        return 0;
    },
    'setPos': function (_0x47dad2, _0x1dfe58) {},
    'updateColor': function () {},
    'setStroke': function (a) {
        if (a != this.strokeW) {
            this.strokeW = a;
            this._dirty = true;
        }
    }
};

function _0x120450(_0x3e61fc, _0x4bc55e) {
    _0x3e61fc && (this._fntSize = _0x3e61fc);
    _0x4bc55e && (this._color = _0x4bc55e);
}
window.CachedText = _0x120450;

function aniChoiceButton(_0x509c4c, _0xaaa697, _0x1e79a7, _0x95b420, aniTT, biomeNum, species, subSpecies, premiumSkinType) {
    this.x = _0x509c4c;
    this.y = _0xaaa697;
    this.w = _0x1e79a7;
    this.h = _0x95b420;
    this.aniT = aniTT;
    this.species = species;
    this.subSpecies = subSpecies;
    this.premiumSkinType = premiumSkinType;
    this.teamID = 0;
    this.btnHotkey = '0';
    this.imgSizeF = 0.5;
    this.buttonTXT = new _0x120450(0xa, 'white');
    this.buttonTXT.renderScale = 1.5;
    this.buttonTXT.multiLine = !0;
    _0x509c4c = GameObjType.createGameObjOfOType(o_player, aniTT);
    _0x509c4c.animalType = aniTT;
    _0x509c4c.animalSpecies = this.species;
    _0x509c4c.animalSubSpecies = this.subSpecies;
    _0x509c4c.animalPremiumSkin = this.premiumSkinType;
    _0x509c4c.curBiome = biomeNum;
    _0x509c4c.isInstance = true;
    this.buttonTXT.setText(_0x509c4c.animalInfo().aniName);
    this.isHighLighted = !0x1;
    this.biomeNum = biomeNum;
    0 < _0x509c4c.animalPremiumSkin && _0x509c4c.setSparkleInterval(_0x26c094(0x5, 0xa), _0x26c094(0x2, 0x3));
    _0x509c4c.flag_isDevMode = isDevMode;
    _0x509c4c.lava = 0x64;
    aniTT = '' + _0x509c4c.animalInfo().aniName;
    aniTT = aniTT.split(' ').join('\x0a');
    this.buttonTXT.setText(aniTT);
    _0x509c4c.x = _0x509c4c.ox = _0x509c4c.nx = 0;
    _0x509c4c.y = _0x509c4c.oy = _0x509c4c.ny = 0;
    _0x509c4c.rad = _0x509c4c.oRad = _0x509c4c.nRad = 0x1e;
    _0x509c4c.alwaysPlainOutline = !0;
    this.drawnAniObj = _0x509c4c;
    this.buttonScaleF = 0x1;
    this.setHotKey = function (_0x5e958c) {
        _0x5e958c && (this.btnHotkey = _0x5e958c, this.hotkey = new _0x120450(0xa, 'white'), this.hotkey.renderScale = 1.5, this.hotkey.multiLine = !0, this.hotkey.setText(this.btnHotkey.toUpperCase()));
    };
    this.setMouseHover = function (_0x7529b2) {
        this.drawnAniObj.isMouseHovering = _0x7529b2;
    };
    this.testPosHitsButton = function (_0x429be8, _0x1435c9) {
        return _0x429be8 < this.x - this.w / 0x2 || _0x429be8 > this.x + this.w / 0x2 ? !0x1 : _0x1435c9 < this.y - this.w / 0x2 || _0x1435c9 > this.y + this.w / 0x2 ? !0x1 : !0;
    };
    this.setPosAndSize = function (_0x1684f3, _0x460244, _0x29d29b, _0x1f6166, _0x25ac36, _0x46da82) {
        this.w = _0x29d29b;
        this.h = _0x1f6166;
        this.x = _0x1684f3 + _0x29d29b * (0.5 - _0x25ac36);
        this.y = _0x460244 + _0x1f6166 * (0.5 - _0x46da82);
    };
    this.draw = function (_0x21ad18) {
        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.scale(this.buttonScaleF, this.buttonScaleF);
        _0x21ad18 = ctx.globalAlpha;
        ctx.globalAlpha = 0.5;
        switch (this.biomeNum) {
        case 0:
            ctx.fillStyle = '#26A73A';
            break;
        case 0x1:
            ctx.fillStyle = '#1C91B8';
            break;
        case 0x2:
            ctx.fillStyle = '#B2B2B2';
            break;
        case 0x3:
            ctx.fillStyle = '#ff6000';
            break;
        case 0x4:
            ctx.fillStyle = '#9F8641';
        }
        ctx.fillRect(0 - this.w / 0x2, 0 - this.h / 0x2, this.w, this.h);
        this.isHighLighted && (ctx.strokeStyle = 'white', ctx.fillStyle = 'white', ctx.globalAlpha = 0.2 * _0x21ad18, ctx.fillRect(0 - this.w / 0x2, 0 - this.h / 0x2, this.w, this.h), ctx.globalAlpha = 1, ctx.strokeRect(0 - this.w / 0x2, 0 - this.h / 0x2, this.w, this.h), ctx.globalAlpha = 0.2 * _0x21ad18);
        ctx.globalAlpha = _0x21ad18;
        _0x21ad18 = 0.225 * this.w;
        this.drawnAniObj.nRad = this.drawnAniObj.rad = _0x21ad18;
        ctx.save();
        ctx.scale(0x2, 0x2);
        this.drawnAniObj.teamID = _0x3ea5fd;
        this.drawnAniObj.draw();
        ctx.restore();
        var _0xaaa697 = 0xa + this.imgSizeF / 0.5 * 0xa;
        0xf < _0x21ad18 && (this.buttonTXT.setFontSize(_0xaaa697 * interfS), this.buttonTXT.x = 0, this.buttonTXT.y = 0.375 * -this.h, this.buttonTXT.y += 0.1 * this.h, this.buttonTXT.draw());
        this.hotkey && !_0x467658 && (ctx.save(), 0x2 != _0x14fca5 && (ctx.globalAlpha = 0.3, this.hotkey.setFontSize(0x10 * interfS), this.hotkey.x = -this.w / 0x2 + 0xa * interfS, this.hotkey.y = this.h / 0x2 - 0xc * interfS, this.hotkey.draw()), ctx.restore());
        ctx.restore();
    };
}
window.AniChoiceButton = aniChoiceButton;
_0x310ac2.prototype = {
    'x': 0,
    'y': 0,
    'w': 0,
    'h': 0,
    'visible': !0,
    'buttonTXT': null,
    'pressed': !0x1,
    'pressedTouchID': -0x1,
    'touchEnabled': !0,
    'testPosHitsButton': function (_0x51e2a5, _0x2583b3) {
        return _0x51e2a5 < this.x - this.w / 0x2 || _0x51e2a5 > this.x + this.w / 0x2 ? !0x1 : _0x2583b3 < this.y - this.w / 0x2 || _0x2583b3 > this.y + this.w / 0x2 ? !0x1 : !0;
    },
    'setPosAndSize': function (_0x25107d, _0x57cb23, _0x3f633, _0x43a9df, _0x5ea853, _0x12c06c) {
        this.w = _0x3f633;
        this.h = _0x43a9df;
        this.x = _0x25107d + _0x3f633 * (0.5 - _0x5ea853);
        this.y = _0x57cb23 + _0x43a9df * (0.5 - _0x12c06c);
    },
    'onButtonTouchStart': function () {},
    'onButtonTouchEnd': function () {}
};

function _0x310ac2(_0x508bbb) {
    this.buttonTXT = new _0x120450(0xa, 'white');
    this.buttonTXT.renderScale = 1.5;
    this.buttonTXT.setText(_0x508bbb);
    this.draw = function () {
        this.visible && (ctx.save(), ctx.globalAlpha = 0.2, ctx.fillStyle = this.pressed ? 'white' : '#000000', ctx.fillRect(this.x - this.w / 0x2, this.y - this.h / 0x2, this.w, this.h), ctx.globalAlpha = 0.2, this.buttonTXT.setFontSize(0x19 * interfS), this.buttonTXT.x = this.x, this.buttonTXT.y = this.y, this.buttonTXT.draw(), ctx.restore());
    };
}
window.TouchButton = _0x310ac2;
var _0x389a70 = function () {
    this.buttonTXT = new _0x120450(0xa, 'white');
    this.buttonTXT.renderScale = 1.5;
    this.isMiniRechargeBut = !0x1;
    this.abil_Type = 0;
    this.abil_possible = this.abil_usable = this.abil_recharging = this.abil_active = !0x1;
    this.abil_avilableA = this.abil_rechargeBarA = this.abil_rechargeTotalT = this.abil_rechargeEndT = 0;
    this.drawAbilityImage = function (_0x483e59, _0x1172a8) {
        if (this.abil_Type == _0x272ed6 || this.abil_Type == _0x36ba18 || this.abil_Type == _0x476024) {
            var _0x41e43b = _0x2f22f9('img/fireball/' + _0x483e59.speciesType + '/' + Math.trunc(_0x1534e0 / 0x78) % 0x5 + '.png');
            if (_0x41e43b) {
                var _0x62e9c2 = 0.4 * this.w,
                    _0x4165dc = 0;
                gameObjsByID[myPlayerID] && (_0x4165dc = _0x93972d((_0x1534e0 - gameObjsByID[myPlayerID].spawnTime) / 0x3e8, 0x1, 0xa, 0x2));
                ctx.globalAlpha = _0x1172a8 * this.abil_avilableA;
                ctx.drawImage(_0x41e43b, -_0x62e9c2, 0.85 * -_0x62e9c2 - _0x4165dc, 0x2 * _0x62e9c2, 0x2 * _0x62e9c2 + _0x4165dc);
            }
        } else if (_0x41e43b = _0x483e59.abilImg, (_0x62e9c2 = gameObjsByID[myPlayerID]) && this.abil_Type == _0x456c6e && (_0x41e43b = this.getDiveImage(_0x62e9c2)), _0x41e43b = _0x2f22f9(_0x41e43b)) {
            var _0x2a89ad = _0x4165dc = _0x62e9c2 = 0.4 * this.w;
            ctx.globalAlpha = _0x1172a8 * this.abil_avilableA;
            0x258 == _0x41e43b.height && (_0x2a89ad = 1.1 * _0x62e9c2);
            ctx.drawImage(_0x41e43b, -_0x4165dc, 0.85 * -_0x2a89ad, 0x2 * _0x4165dc, 0x2 * _0x2a89ad);
        }
    };
    this.getDiveImage = function (_0x320d53) {
        var _0x5e2a18 = 'img/ability_dive.png';
        _0x320d53 && this.abil_Type == _0x456c6e && (_0x320d53.flag_inLava && !_0x320d53.flag_inWater ? _0x5e2a18 = 'img/ability_dive_lava.png' : _0x320d53.flag_eff_isInMud && !_0x320d53.flag_inWater && (_0x5e2a18 = 'img/ability_diveMud.png'));
        return _0x5e2a18;
    };
    this.draw = function () {
        if (this.visible && (this.abil_rechargeBarA += 0.1 * ((this.abil_recharging ? 0x1 : 0) - this.abil_rechargeBarA), this.abil_avilableA += 0.1 * ((this.abil_usable || this.abil_active ? 0x1 : 0.2) - this.abil_avilableA), this.isMiniRechargeBut && (this.h = 0.6 * this.w), this.abil_possible)) {
            ctx.save();
            this.isMiniRechargeBut ? (this.h = 0.8 * this.w, ctx.translate(this.x, this.y + 0.36 * this.h), ctx.scale(0.65, 0.65)) : ctx.translate(this.x, this.y);
            var _0x11c66f = 0.2 * this.abil_avilableA,
                _0x544b26 = this.pressed || _0x1ecf4e ? '#CECECE' : '#000000';
            this.abil_active && (_0x544b26 = _0x45ff9a, _0x11c66f = 0.7);
            ctx.fillStyle = _0x544b26;
            ctx.globalAlpha = 0x1 * _0x11c66f;
            ctx.fillRect(0 - this.w / 0x2, 0 - this.h / 0x2, this.w, this.h);
            _0x11c66f = GameObjType.createGameObjOfOType(o_player, _0x29b77f);
            _0x11c66f.animalType = _0x29b77f;
            _0x11c66f.animalSpecies = _0x1c026f;
            _0x11c66f.animalSubSpecies = _0x334542;
            _0x11c66f = _0x11c66f && this.abil_Type != _0x456c6e ? _0x11c66f.getAbilityInfo(this.abil_Type) : _0x5a107b(this.abil_Type);
            this.drawAbilityImage(_0x11c66f, 0x1);
            this.buttonTXT.setText(_0x11c66f.abilName);
            this.buttonTXT.multiLine = !0;
            this.buttonTXT.setFontSize(0x19 * interfS);
            this.buttonTXT.x = 0;
            this.buttonTXT.y = 0.35 * -this.w;
            this.buttonTXT.draw();
            _0x11c66f = Math.max(0, this.abil_rechargeEndT - _0x1534e0);
            this.abil_rechargeBarA += 0.1 * ((this.abil_recharging ? 0x1 : 0) - this.abil_rechargeBarA);
            if (0.01 < this.abil_rechargeBarA) {
                ctx.globalAlpha = 0.35 * this.abil_rechargeBarA;
                ctx.fillStyle = '#000000';
                var _0x544b26 = 0.8 * this.w,
                    _0x6f6491 = 0.5 * this.h;
                ctx.fillRect(0 - _0x544b26 / 0x2, 0 - _0x6f6491 / 0x2, _0x544b26, _0x6f6491);
                ctx.globalAlpha = 0x1 * this.abil_rechargeBarA;
                ctx.fillStyle = '#F3C553';
                ctx.fillRect(0 - _0x544b26 / 0x2, 0 - _0x6f6491 / 0x2, _0x11c66f / this.abil_rechargeTotalT * _0x544b26, _0x6f6491);
            }
            ctx.restore();
        }
    };
};
_0x389a70.prototype = Object.create(_0x310ac2.prototype);
window.AbilityButton = _0x389a70;
var _0x312ff8 = 0x1b,
    _0x213678 = 0x1c,
    _0x37ab53 = 0x1d,
    _0x28eb25 = 0x1e,
    _0x2f3d97 = 0xff,
    _0xc54d13 = 0x33,
    _0xcf7679 = 0x34,
    _0x4a694b = 0x35,
    _0x1f5f91 = 0x36,
    _0x33ebfa = 0x37,
    _0x17d8d3 = 0x38,
    _0x144ab2 = 0x3a,
    _0x5da8e3 = 0x3d,
    _0x51c8a0 = 0x3e;

function _0x25494d(_0x4e30cb) {
    _0x4e30cb = _0x4e30cb.split('+').join(' ');
    for (var _0x2435b2 = {}, _0x1d6617, _0x25033b = /[?&]?([^=]+)=([^&]*)/g; _0x1d6617 = _0x25033b.exec(_0x4e30cb);) _0x2435b2[decodeURIComponent(_0x1d6617[0x1])] = decodeURIComponent(_0x1d6617[0x2]);
    return _0x2435b2;
}
var _0x35efab = _0x25494d(document.location.search),
    _0x43acdb = 0 < _0x35efab.mobileios,
    _0x15a839 = 0 < _0x35efab.mobileAndroid,
    _0x467658 = _0x43acdb || _0x15a839,
    _0x308cb2 = 0 < _0x35efab.videoson,
    _0x2cf57 = 0.175,
    _0x557a1b = '#3FBA54',
    _0x205ed4 = '#f7f7f7',
    _0x44bd8a = '#09992F',
    _0x48c2f4 = '#007ec0',
    _0x584102 = 'grey',
    _0x19a7a3 = '#a59215',
    _0x262220 = '#09992F',
    _0x4d7c91 = '#8CCEF4',
    _0x1654e7 = '#4E66E4',
    _0x1a1848 = '#ff6000',
    _0x206596 = '#4854a2',
    _0x2f824d = _0x206596,
    _0x493161 = '#bfaf43',
    _0x54901d = '#d6c348',
    _0x307049 = '#c8b745',
    _0x2c4174 = '#F35F53',
    _0x356bc3 = '#CF6259',
    _0x5a41ed = '#FF911E',
    _0x3385f8 = '#C67019',
    _0x105778 = '#EF3C31',
    _0x45ff9a = '#4AE05E',
    _0x174576 = '#8C9688',
    _0x57d309 = '#878053',
    _0x68d4da = '#328ca2',
    _0x53e87b = 'rgba(50,140,162,0.5)',
    _0x108135 = '#ff884c',
    _0x9e874d = '#007fa9',
    _0x2221fa = '#b0a13b',
    _0x3259ae = !0,
    _0x3a69b9 = !0,
    _0x5e31cf = !0,
    _0x5df99e = !0,
    _0x18cd00 = !0,
    _0x20916b = !0,
    _0x26f066 = function (_0x36fc49) {
        switch (_0x36fc49) {
        case _0x4e9b48:
            return _0x48c2f4;
        case _0x35f8d3:
            return _0x584102;
        case _0x55aace:
            return _0x19a7a3;
        default:
        case _0x20cd91:
            return _0x44bd8a;
        }
    },
    _0x181baa = [],
    _0x20cd91 = 0,
    _0x4e9b48 = 0x1,
    _0x35f8d3 = 0x2,
    _0x3ec694 = 0x3,
    _0x55aace = 0x4,
    _0x1534e0 = +new Date(),
    timeStamp = +new Date(),
    _0x3ea5fd = 0,
    _0x1419f3 = !0x1,
    _0x260125 = 0,
    _0x554a7d = null,
    _0x45cca0 = !0x1,
    _0xdc22da = !0x1,
    _0x186eed = !0x1,
    _0x4381a8 = !0x1,
    _0x4dd1a2 = null,
    _0x3692f0 = 0,
    _0x541c7d = 0,
    _0x10301d = 0,
    _0x11358c = 0,
    _0x5de8f3 = 0,
    _0x2fd7aa = 0,
    _0x3d325c = [],
    _0x1fb994 = !0x1,
    _0x359307 = 0,
    _0x52b6dd = null,
    _0x1d0b8d = !0x1,
    _0x34061d = 0,
    isDevMode = !1,
    isSuperDev = !0x1,
    devMode_zoomEnabled = !1,
    _0x3ad1cd = document.getElementById('gCanvas'),
    _0xef3376 = null,
    _0x3c1394 = null,
    _0xc4d735 = 0,
    _0x7939c1 = 0,
    ctx = null;
_0x3ad1cd && (ctx = _0x3ad1cd.getContext('2d'), ctx.shadowColor = 'black');
var _0x3a42a4 = !0x1,
    pixelRat = Math.min(window.devicePixelRatio, 0x2),
    _0x5b308c = 0x1 == ('ontouchstart' in window || navigator.maxTouchPoints),
    _0x3c8376 = {},
    _0x56fc3c = function (_0x5c4c2b) {
        if (!_0x3c8376.hasOwnProperty(_0x5c4c2b) && !_0x499630) {
            var _0x5af521 = new Audio(_0x5c4c2b);
            _0x3c8376[_0x5c4c2b] = _0x5af521;
            _0x5af521.volume = 0.7;
            _0x5af521.muted = _0x499630;
        }
        return _0x3c8376[_0x5c4c2b];
    },
    _0x130ade = null,
    _0x52550b = '',
    _0x17c499 = 'audio/music_game.mp3?v='+gameVersion,
    _0x3757c8 = function (_0x407530) {
        _0x130ade && (_0x130ade.pause(), _0x130ade.currentTime = 0);
        _0x52550b = _0x407530;
        if (!_0x499630) {
            _0x130ade = _0x56fc3c(_0x407530, !0);
            try {
                _0x130ade.play();
            } catch (_0xa2857a) {}
        }
    },
    _0xcd03a2 = !0,
    _0x5ba953 = function () {
        var _0xe5325c = document.getElementById('button_mute_img');
        _0xe5325c && (_0xe5325c.src = _0x499630 ? 'img/sound_off.png' : 'img/sound_on.png', _0xcd03a2 ? _0xcd03a2 = !0x1 : (_0xe5325c = new Audio('audio/tap.mp3?v='+gameVersion), _0xe5325c.volume = _0x499630 ? 0.15 : 0.5, _0xe5325c.play()));
    },
    acUnlogged = false,
    instantSetCamNextUpd = !0x1,
    camzoom = camzoom_n = 2.7,
    camzoom = 1,
    camx = 0,
    camy = 0,
    camx_n = 0,
    camy_n = 0,
    camx_o = 0,
    camy_o = 0,
    interfS = 1,
    _0x16763 = 0,
    _0x42c274 = 0,
    gameMouseX = 0,
    gameMouseY = 0,
    _0x19a7ce = 0,
    _0x5a00b5 = 0,
    _0x39d96d = !0x1,
    _0x1ecf4e = !0x1,
    canvasW = 0,
    canvasH = 0,
    gameW = 0,
    gameH = 0,
    _0x1d059b = 0,
    _0x2bad39 = 0x1,
    _0xc2ceb0 = 0x3,
    _0x398937 = 0x4,
    _0x3f62ca = 0x5,
    gameMode = _0x1d059b,
    _0x5a5eb2 = 0,
    _0x48f1e4 = {},
    _0x2f22f9 = function (_0xd7188e, _0x522bac) {
        _0x48f1e4.hasOwnProperty(_0xd7188e) || (_0x48f1e4[_0xd7188e] = new Image(), _0x48f1e4[_0xd7188e].src = _0xd7188e + ('?v=' + gameVersion + (KTestingBeta ? '.' + gameVerTxt : '')));
        return 0 != _0x48f1e4[_0xd7188e].width && _0x48f1e4[_0xd7188e].complete ? _0x48f1e4[_0xd7188e] : null;
    },
    _0x1b3b5f = 100,
    _0x29dd16 = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0),
    _0x1066b0 = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0),
    _0x5835e4 = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0),
    _0x5546de = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0),
    _0x408004 = !0x1,
    gameObjs = [],
    gameObjsByID = {},
    _0x464b8a = [],
    _0x4509a0 = !0x1,
    _0x8f38b6 = 0,
    _0x10e968 = 0x1,
    _0x456fa4 = !0x1,
    _0xf495f7 = 0,
    _0x28afdb = 0x1,
    abil_dive_isMain = !0x1,
    _0x188f5a = +new Date(),
    _0x225545 = !0x1,
    _0x47691c = !0x1,
    _0x149353 = !0x1,
    _0x5e9cd7 = !0x1,
    _0x2ef7be = !0x1,
    _0x499630 = !0x1,
    _0x515c19 = !0x1;

function _0xefc497(_0x10b288, _0x2db440, _0x4b6ef7) {
    var _0x483795 = document.getElementById('optionsContainer'),
        _0x59719d = document.createElement('label');
    _0x59719d.innerHTML = "<input type='checkbox' id='" + _0x10b288 + "'><span style='color: " + _0x4b6ef7 + ";''>" + _0x2db440 + '</span>';
    _0x483795.appendChild(_0x59719d);
}
_0xefc497('options_noImages', 'No Animal images  ', 'black');
_0xefc497('options_noNames', 'No Names & Chat  ', 'black');
_0x5b308c && (_0xefc497('options_noJoystick', 'No Joystick', '#194614'), _0xefc497('options_leftHanded', 'LEFT-handed Joystick', '#194614'));
_0xefc497('options_noXpPopup', "Don't show +XP popups", 'black');
if (window.localStorage) {
    var _0x47691c = 0 < window.localStorage.getItem('options_noNames') + 0,
        _0x524169 = document.getElementById('options_noNames');
    _0x524169 && (_0x524169.checked = _0x47691c);
    _0x225545 = 0 < window.localStorage.getItem('options_noImages') + 0;
    if (_0x524169 = document.getElementById('options_noImages')) _0x524169.checked = _0x225545;
    _0x149353 = 0 < window.localStorage.getItem('options_noJoystick') + 0;
    if (_0x524169 = document.getElementById('options_noJoystick')) _0x524169.checked = _0x149353;
    _0x5e9cd7 = 0 < window.localStorage.getItem('options_leftHanded') + 0;
    if (_0x524169 = document.getElementById('options_leftHanded')) _0x524169.checked = _0x5e9cd7;
    _0x2ef7be = 0 < window.localStorage.getItem('options_noXpPopup') + 0;
    if (_0x524169 = document.getElementById('options_noXpPopup')) _0x524169.checked = _0x2ef7be;
    _0x499630 = 0 < window.localStorage.getItem('options_muted') + 0;
    _0x5ba953();
}
var _0x5603cb = document.getElementById('button_mute');
_0x5603cb && (_0x5603cb.onclick = function () {
    _0x499630 = !_0x499630;
    _0x5ba953();
    try {
        window.localStorage.setItem('options_muted', _0x499630 ? 0x1 : 0);
    } catch (_0x345864) {}
});
document.getElementById('settingsButton').onclick = function () {
    _0x513831();
};

function getDiscordCode() {//49397
    $.ajax({
        'url': 'https://accountserver.mopesandbox.fun/discord?userId=' + login_userId + '&passwordToken=' + login_passwordToken,
        'success': function (aeae) {
            let a;
            try{a = JSON.parse(aeae);}catch{}
            if(a && a.success == true){
                var discordcodeblock = document.getElementById('discordCode');
                discordcodeblock.innerText = a.code;
            } else if(a && a.success == false && a.type == 1){
                var discordcodeblock = document.getElementById('dcCodeBlock');
                discordcodeblock.innerHTML = "<p>Linked to:</p> <div id=\"discordCode\" class=\"discordCode\">" + a.code + "</div>";
            }
        },
        'error': function (_0x4fea74, _0x44b992, _0x57ccd3) {
            return {success:false};
        }
    });
}

function buttonLogOut() {
    var logoutbutton = document.getElementById('logoutbut');
    var discordblock = document.getElementById('dcCodeBlock');
    if(isUserLoggedIn) {
        logoutbutton && (logoutbutton.onclick = function () {
            _0x3a61e5();
        }) && (logoutbutton.style.display = "");
        discordblock && (discordblock.style.display = "");
        getDiscordCode();
    } else {
        logoutbutton && (logoutbutton.onclick = function () {}) && (logoutbutton.style.display = "none");
        discordblock && (discordblock.style.display = "none");
    }
}

function _0x513831() {
    var _0xa0e923 = document.getElementById('optionsDiv');
    _0xa0e923.style.display = 'block' == _0xa0e923.style.display ? 'none' : 'block';
    if (_0xa0e923 = _0x56fc3c('audio/click.mp3?v='+gameVersion)) try {
        _0xa0e923.play();
    } catch (_0x13ffac) {}
}
document.getElementById('closeBut').onclick = function () {
    _0x284085();
};

function _0x284085() {
    var _0x118f34 = document.getElementById('optionsDiv');
    _0x118f34.style.display = 'block' == _0x118f34.style.display ? 'none' : 'block';
    if (_0x118f34 = _0x56fc3c('audio/click.mp3?v='+gameVersion)) try {
        _0x118f34.play();
    } catch (_0x37261f) {}
}
if (_0x5603cb = document.getElementById('options_noImages')) _0x5603cb.onchange = function () {
    if (window.localStorage) {
        _0x225545 = this.checked;
        try {
            window.localStorage.setItem('options_noImages', _0x225545 ? 0x1 : 0);
        } catch (_0x163845) {}
    }
};
if (_0x5603cb = document.getElementById('options_noNames')) _0x5603cb.onchange = function () {
    if (window.localStorage) {
        _0x47691c = this.checked;
        try {
            window.localStorage.setItem('options_noNames', _0x47691c ? 0x1 : 0);
        } catch (_0x7232a2) {}
    }
};
if (_0x5603cb = document.getElementById('options_noJoystick')) _0x5603cb.onchange = function () {
    if (window.localStorage) {
        _0x149353 = this.checked;
        try {
            window.localStorage.setItem('options_noJoystick', _0x149353 ? 0x1 : 0);
        } catch (_0x5e2739) {}
        _0x141915();
    }
};
if (_0x5603cb = document.getElementById('options_leftHanded')) _0x5603cb.onchange = function () {
    if (window.localStorage) {
        _0x5e9cd7 = this.checked;
        try {
            window.localStorage.setItem('options_leftHanded', _0x5e9cd7 ? 0x1 : 0);
        } catch (_0x5e0c25) {}
        _0x141915();
        console.log('options_leftHanded: saved as ' + window.localStorage.getItem('options_leftHanded'));
    }
};
if (_0x5603cb = document.getElementById('options_noXpPopup')) _0x5603cb.onchange = function () {
    if (window.localStorage) {
        _0x2ef7be = this.checked;
        try {
            window.localStorage.setItem('options_noXpPopup', _0x2ef7be ? 0x1 : 0);
        } catch (_0x2f7f18) {}
        _0x141915();
    }
};
var isAirBar = !0x1,
    animalBarType = 0,
    _0x337e3d = waterBarPerc_n = 0x64,
    xpPer_n = xp = xpPer = 0,
    _0x33aa44 = infectionBarPerc_n = 0x64,
    _0x2df634 = new _0x120450(0x10, 'white'),
    _0x1dc146 = new _0x120450(0x10, 'white'),
    _0x15141e = new _0x120450(0x10, 'white'),
    playersOnlineTxt = new _0x120450(0xa, 'white'),
    fpsInGameText = new _0x120450(0xa, 'white'),
    _0x30ab4a = new _0x120450(0x10, 'white');
_0x30ab4a.multiLine = !0;
_0x30ab4a.renderScale = 0x1;
playersOnlineTxt.renderScale = 0x1;
fpsInGameText.renderScale = 0x1;
var _0xb93f66 = !0x1,
    _0x241d22 = 0,
    _0x43e95a = 0,
    _0x592754 = '',
    _0x57947c = [],
    _0x154a0f = new _0x389a70();
_0x154a0f.onButtonTouchStart = function () {
    _0x386281(_0x4d2161, !0);
};
_0x154a0f.onButtonTouchEnd = function () {
    _0x386281(_0x4d2161, !0x1);
    _0x1f6753.pressed && -0x1 == _0x1f6753.pressedTouchID && (_0x1f6753.pressed = !0x1, _0x386281(_0x29bf00, !0x1));
};
_0x57947c.push(_0x154a0f);
var _0x35b993 = new _0x389a70();
_0x35b993.isMiniRechargeBut = !0;
_0x35b993.touchEnabled = !0x1;
_0x57947c.push(_0x35b993);
var _0x1f6753 = new _0x310ac2('HOLD TO RUN');
_0x1f6753.onButtonTouchStart = function () {
    _0x386281(_0x29bf00, !0);

};
_0x1f6753.onButtonTouchEnd = function () {
    _0x386281(_0x29bf00, !0x1);
};
_0x57947c.push(_0x1f6753);
var _0x558661 = new _0x310ac2('CHAT');
_0x558661.onButtonTouchStart = function () {
    _0x30daf6();
    // _0x558661.visible = false;
};
_0x57947c.push(_0x558661);
var _0x1bd898 = new _0x310ac2('S');
_0x1bd898.onButtonTouchStart = function () {
    _0x386281(_0x53f7c6, !0);
    // _0x1bd898.visible = false;
};
_0x57947c.push(_0x1bd898);
var _0xcb461b = new _0x310ac2('DOWN↓');
_0xcb461b.onButtonTouchStart = function () {
    _0x386281(_0x3c99c0, !0);
    
    // upbutton.visible = false;
    // _0x1bd898.visible =   false;
    // _0x558661.visible = false;
    // _0x1f6753.visible = false;

    // _0xcb461b.visible = false;
    // button_zoomplus.visible = false;
    // button_zoomminus.visible = false;
    // button_dkey.visible = false;

    // upbutton.touchEnabled = false;
    // _0x1bd898.touchEnabled =   false;
    // _0x558661.touchEnabled = false;
    // _0x1f6753.touchEnabled = false;

    // _0xcb461b.touchEnabled = false;
    // button_zoomplus.touchEnabled = false;
    // button_zoomminus.touchEnabled = false;
    // button_dkey.touchEnabled = false;



//     setTimeout(() => {
//         upbutton.visible = true;
//         _0x1bd898.visible =   true;
//         _0x558661.visible = true;
//         _0x1f6753.visible = true;
    
//         button_zoomplus.visible = true;
//         button_zoomminus.visible = true;
//         _0xcb461b.visible = true;
// button_dkey.visible = true

// upbutton.touchEnabled = true;
// _0x1bd898.touchEnabled =   true;
// _0x558661.touchEnabled = true;
// _0x1f6753.touchEnabled = true;

// button_zoomplus.touchEnabled = true;
// button_zoomminus.touchEnabled = true;
// _0xcb461b.touchEnabled = true;
// button_dkey.touchEnabled = true
//     }, 4000)


// // inUpgrade = true

 };
_0x57947c.push(_0xcb461b);
var upbutton = new _0x310ac2('UP↑');
upbutton.onButtonTouchStart = function () {
    _0x386281(_0x251747, !0);

       
    // upbutton.visible = false;
    // _0x1bd898.visible =   false;
    // _0x558661.visible = false;
    // _0x1f6753.visible = false;

    // _0xcb461b.visible = false;
    // button_zoomplus.visible = false;
    // button_zoomminus.visible = false;
    // button_dkey.visible = false;

    // upbutton.touchEnabled = false;
    // _0x1bd898.touchEnabled =   false;
    // _0x558661.touchEnabled = false;
    // _0x1f6753.touchEnabled = false;

    // _0xcb461b.touchEnabled = false;
    // button_zoomplus.touchEnabled = false;
    // button_zoomminus.touchEnabled = false;
    // button_dkey.touchEnabled = false;



//     setTimeout(() => {
//         upbutton.visible = true;
//         _0x1bd898.visible =   true;
//         _0x558661.visible = true;
//         _0x1f6753.visible = true;
    
//         button_zoomplus.visible = true;
//         button_zoomminus.visible = true;
//         _0xcb461b.visible = true;
// button_dkey.visible = true

// upbutton.touchEnabled = true;
// _0x1bd898.touchEnabled =   true;
// _0x558661.touchEnabled = true;
// _0x1f6753.touchEnabled = true;

// button_zoomplus.touchEnabled = true;
// button_zoomminus.touchEnabled = true;
// _0xcb461b.touchEnabled = true;
// button_dkey.touchEnabled = true
//     }, 4000)

};
_0x57947c.push(upbutton);
var button_zoomplus = new _0x310ac2('ZOOM+');
button_zoomplus.onButtonTouchStart = function () {
    buttonHandlerZoom(1);
};
_0x57947c.push(button_zoomplus);
var button_zoomminus = new _0x310ac2('ZOOM-');
button_zoomminus.onButtonTouchStart = function () {
    buttonHandlerZoom(0);
};
_0x57947c.push(button_zoomminus);
var button_dkey = new _0x310ac2('D KEY');
button_dkey.onButtonTouchStart = function () {
    // button_dkey.visible = false;
    
    _0x386281(6, true);
};
_0x57947c.push(button_dkey);
var _0x197e21 = !0x1,
    _0x579800 = -0x1,
    _0x46c7b9 = 0,
    _0x4ba688 = 0,
    _0x103c95 = 0,
    _0x2c19ea = 0,
    _0x161ba5 = 0x32,
    _0x395c86 = 0,
    _0x165f20 = 0,
    _0x511cb1 = 0,
    _0x380575 = 0,
    _0x3423ed = 0,
    timeStamp = +Date.now(),
    _0xa3ac90 = null;

function _0x26c094(_0x1cfc2e, _0x1d8fff) {
    _0x1cfc2e = Math.min(_0x1cfc2e, _0x1d8fff);
    _0x1d8fff = Math.max(_0x1cfc2e, _0x1d8fff);
    return _0x1cfc2e + Math.random() * (_0x1d8fff - _0x1cfc2e + 0x1);
}

_0x1cbd2d.wave = 0x1;
_0x1cbd2d.halfWave = 0x2;
_0x1cbd2d.arc = 0x3;
_0x1cbd2d.quad = 0x4;
_0x1cbd2d.bow = 0x5;
_0x1cbd2d.bounce = 0x6;
_0x1cbd2d.elastic = 0x7;
_0x1cbd2d.bounceEaseOut = 0x8;
_0x1cbd2d.bounceEaseInOut = 0x9;

function _0x1cbd2d(_0x156da5, _0x4c9090, _0x16ad63, _0x4d5c50) {
    this.forObj = _0x156da5;
    this.duration = _0x4c9090;
    this.animation = _0x16ad63;
    this.startTime = null;
    this.frame = 0;
    this.frameRate = 0x3e8;
    this.timePassed = 0;
    this.stopWhenDurationPassed = this.generate = !0;
    this.accelerateEnd = this.state = 0;
    this.hasStopped = !0x1;
    this.img = null;
    this.vars = _0x4d5c50;
    this.loop = this.keepLastFrame = !0x1;
    this.setImage = function (_0x2aa03e) {
        this.img = _0x2f22f9(_0x2aa03e);
    };
    this.run = function () {
        null == this.startTime && (this.startTime = _0x1534e0);
        if (null != this.startTime && (0x2 != this.state || this.hasStopped || (this.hasStopped = !0, this.onStop()), this.hasStopped || (this.calcTimePassed(), this.generateFrame(), this.onFrameEntered(this.frame), this.timePassed >= this.duration && this.stopWhenDurationPassed && (this.state = 0x2)), this.hasStopped)) {
            if (this.keepLastFrame) this.onFrameEntered(this.frame);
            this.loop && this.reset();
        }
    };
    this.reset = function () {
        this.timestamp = null;
        this.hasStopped = !0x1;
        this.state = 0;
    };
    this.generateFrame = function () {
        if (this.generate) switch (this.state = 0x1, this.animation) {
        case _0x1cbd2d.wave:
            this.frame = this.wave(this.timePassed);
            break;
        case _0x1cbd2d.halfWave:
            this.frame = this.halfWave(this.timePassed);
            break;
        case _0x1cbd2d.arc:
            this.frame = this.arc(this.timePassed);
            break;
        case _0x1cbd2d.quad:
            this.frame = this.quad(this.timePassed);
            break;
        case _0x1cbd2d.bow:
            void 0 == this.vars && (this.vars = {
                'v1': 0x1
            });
            this.frame = this.bow(this.timePassed);
            break;
        case _0x1cbd2d.bounce:
            this.frame = this.bounce(this.timePassed);
            break;
        case _0x1cbd2d.elastic:
            void 0 == this.vars && (this.vars = {
                'v1': 0x1
            });
            this.frame = this.elastic(this.timePassed);
            break;
        case _0x1cbd2d.bounceEaseOut:
            this.frame = this.bounceEaseOut(this.timePassed);
            break;
        case _0x1cbd2d.bounceEaseInOut:
            this.frame = this.bounceEaseInOut(this.timePassed);
        }
    };
    this.timing = function (_0x39f08c) {
        return _0x39f08c;
    };
    this.halfWave = function (_0x3bcc57) {
        return 0x1 * Math.sin(0.5 * Math.PI / this.duration * _0x3bcc57);
    };
    this.wave = function (_0x27a2cf) {
        return 0x1 * Math.sin(0x1 * Math.PI / this.duration * _0x27a2cf);
    };
    this.arc = function (_0x51c051) {
        return 0x1 - Math.sin(Math.acos(_0x51c051));
    };
    this.quad = function (_0x4d86a1) {
        return Math.pow(_0x4d86a1, 0x2);
    };
    this.bow = function (_0x46ace) {
        var _0x4c9090 = this.vars.v1;
        return Math.pow(_0x46ace, 0x2) * ((_0x4c9090 + 0x1) * _0x46ace - _0x4c9090);
    };
    this.bounce = function (_0x1d7f80) {
        for (var _0x4c9090 = 0, _0x16ad63 = 0x1;; _0x4c9090 += _0x16ad63, _0x16ad63 /= 0x2)
            if (_0x1d7f80 >= (0x7 - 0x4 * _0x4c9090) / 0xb) return -Math.pow((0xb - 0x6 * _0x4c9090 - 0xb * _0x1d7f80) / 0x4, 0x2) + Math.pow(_0x16ad63, 0x2);
    };
    this.elastic = function (_0x9dce5) {
        return Math.pow(0x2, 0xa * (_0x9dce5 - 0x1)) * Math.cos(0x14 * Math.PI * this.vars.v1 / 0x3 * _0x9dce5);
    };
    this.bounceEaseOut = function (_0x471783) {
        return 0x1 - this.bounce(0x1 - _0x471783);
    };
    this.bounceEaseInOut = function (_0x2e73e2) {
        return 0.5 > _0x2e73e2 ? this.bounce(0x2 * _0x2e73e2) / 0x2 : (0x2 - this.bounce(0x2 * (0x1 - _0x2e73e2))) / 0x2;
    };
    this.calcTimePassed = function () {
        this.timePassed = (_0x1534e0 - this.startTime) / this.frameRate;
    };
    this.onFrameEntered = function (_0x2cba85) {};
    this.onStop = function () {};
}
var _0x2c4641 = 0,
    adBlockEnabled = !0x1;

function _0x30ff81() {
    adBlockEnabled = !0x1;
    if (!_0x467658) {
        var _0x30e1d8 = document.createElement('div');
        _0x30e1d8.innerHTML = '&nbsp;';
        _0x30e1d8.className = 'adsbox';
        document.body.appendChild(_0x30e1d8);
        window.setTimeout(function () {
            0 === _0x30e1d8.offsetHeight && (adBlockEnabled = !0);
            _0x30e1d8.remove();
        }, 0x1f4);
    }
}
_0x30ff81();
// _0x467658 || (function (_0x56e23e, _0x3495f2, _0xcfd30b, _0x348157, _0x2371a0, _0x5adae6, _0x5c927d) {
//     _0x56e23e.GoogleAnalyticsObject = _0x2371a0;
//     _0x56e23e[_0x2371a0] = _0x56e23e[_0x2371a0] || function () {
//         (_0x56e23e[_0x2371a0].q = _0x56e23e[_0x2371a0].q || []).push(arguments);
//     };
//     _0x56e23e[_0x2371a0].l = 0x1 * new Date();
//     _0x5adae6 = _0x3495f2.createElement(_0xcfd30b);
//     _0x5c927d = _0x3495f2.getElementsByTagName(_0xcfd30b)[0];
//     _0x5adae6.async = 0x1;
//     _0x5adae6.src = _0x348157;
//     _0x5c927d.parentNode.insertBefore(_0x5adae6, _0x5c927d);
// }(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga'), ga('create', 'UA-36494583-11', 'auto'), ga('send', 'pageview'));
var _0x21989f = 0,
    _0x1bf17f = 0;
if (window.localStorage) {
    var _0x53fff0 = 0x1 * window.localStorage.getItem('lastAdShowT') || 0,
        _0x59f70a = +new Date() - _0x53fff0,
        _0x1bf17f = 0 < _0x59f70a ? _0x53fff0 : 0,
        _0x21989f = 0x1 * window.localStorage.getItem('gamesSinceAd');
    console.log('videoAd: ' + _0x21989f + ' games since last ad!');
}
var _0x27312d = 0,
    _0x39ba8a = +new Date(),
    _0x9febd7 = !0x1,
    _0x2cb46b = function () {
        if (!_0x45319f()) return console.log('videoAd: no show: ads disabled'), !0x1;
        if (_0x308cb2) return console.log('videoAd: test mode, always show video ad!'), !0;
        if (adBlockEnabled) return console.log('videoAd: no show: ad blocker on!'), !0x1;
        console.log('lastAdShowT ' + _0x1bf17f + ' ,' + (+new Date() - _0x1bf17f) / 0xea60 + ' mins ago, ');
        console.log('gamesPlayedSinceLastAd ' + _0x21989f);
        return 0x2 > _0x21989f && 0 == _0x1bf17f ? (console.log('videoAd: no show: NEW PLAYER, no games yet started!'), !0x1) : 0x12c < (+new Date() - _0x1bf17f) / 0x3e8 && 0 < _0x21989f ? (console.log('videoAd: show: time limit passed!'), !0) : 0x3 <= _0x21989f ? (console.log('videoAd: show: 3+ games passed!'), !0) : !0x1;
    },
    _0x40407d = !0,
    _0x45319f = function () {
        // var _0x543cd2 = KTestingExperimental || 'file:' == location.protocol;
        var _0x543cd2 = true;
        return !_0x467658 && !_0x543cd2;
    },
    _0x3152e8 = function () {
        console.log('initing video ads...'); // ABOBUS CHECK DISCORD
        _0x40407d && (window.aiptag = window.aiptag || {}, window.aiptag.cmd = window.aiptag.cmd || [], window.aiptag.cmd.player = window.aiptag.cmd.player || [], window.aiptag.gdprShowConsentTool = !0x1, window.aiptag.cmd.player.push(function () {
            window.adplayer = new aipPlayer({
                'AD_WIDTH': 0x3c0,
                'AD_HEIGHT': 0x21c,
                'AD_FULLSCREEN': !0,
                'AD_CENTERPLAYER': !0x1,
                'LOADING_TEXT': 'loading advertisement',
                'PREROLL_ELEM': function () {
                    return document.getElementById('preroll');
                },
                'AIP_COMPLETE': function () {
                    onVideoAdFinished(!0);
                },
                'AIP_REMOVE': function () {}
            });
        }));
    };

function _0x26c426() {
    if (!_0x467658) try {
        console.log('BANNERADS: refreshing...'), adTestAdinplay ? (window.aiptag.cmd.display.push(function () {
            aipDisplayTag.display('mope-io_300x250');
        }), window.aiptag.cmd.display.push(function () {
            aipDisplayTag.display('mope-io_728x90');
        })) : factorem.refreshAds([0x1, 0x2], !0);
    } catch (_0x4e5970) {
        console.log('BANNERADS: error refreshing: ' + _0x4e5970);
    }
}

var getScript = function (src, callback, onerror) {
    var headElm = document.head || document.getElementsByTagName("head")[0];
    var script = document.createElement("script");
    var once = true;
    script.async = "async";
    script.type = "text/javascript";
    script.charset = "UTF-8";
    script.src = src;
    script.onload = script.onreadystatechange = function () {
      if (
        once &&
        (!script.readyState || /loaded|complete/.test(script.readyState))
      ) {
        once = false;
        callback();
        script.onload = script.onreadystatechange = null;
      }
    };
  
    headElm.appendChild(script);
};

var _0x102742 = !0;

function _0x345651(_0x596e0d) {}
var _0x2859db = !0x1,
    _0x5b55d7 = !0x1,
    _0x42f014 = new _0x120450(0xa, 'white');
_0x42f014.setText('Connecting...');
_0x42f014.renderScale = 0x1;
var _0x3ad103 = function () {
    console.log('playing video ad!');
    _0x130ade && (_0x130ade.volume = 0.2);
    _0x9febd7 = !0;
    _0x385867(!0x1);
    _0x2859db = !0;
    _0x5b55d7 = !0x1;
    _0x40407d ? window.aiptag.cmd.player.push(function () {
        adplayer.startPreRoll();
    }) : (document.getElementById('pvVidContainer').style.display = 'block', _0x3e12eb());
};
window.onVideoAdFinished = function (_0x2417a3) {
    _0x9febd7 || console.log("VIDEOADS: ad isn't playing!");
    _0x2859db = _0x5b55d7 = _0x9febd7 = !0x1;
    _0x40407d || (document.getElementById('pvVidContainer').style.display = 'none', document.getElementById('my-content-2').style.display = 'none');
    _0x3ad1cd.focus();
    if (_0x2417a3 && (_0x21989f = 0, _0x1bf17f = +new Date(), window.localStorage)) try {
        window.localStorage.setItem('lastAdShowT', _0x1bf17f), window.localStorage.setItem('gamesSinceAd', _0x21989f);
    } catch (_0x133864) {}
    if (!isAliveInGame && !_0x109e62) {
        _0x130ade && (_0x130ade.volume = 0.7);
        var _0x239a74 = _0x56fc3c('audio/click.mp3?v='+gameVersion);
        if (_0x239a74) try {
            _0x239a74.play();
        } catch (_0x3f4c34) {}
        console.log('VIDEOADS: Video done (success: ' + _0x2417a3 + '), joining game!');
        //joinGame(!1);
    }
};
var _0x350158 = function (_0x4b3b53, _0x431815) {
    var _0x2b0d0f = document.head || document.getElementsByTagName('head')[0],
        _0x2c334a = document.createElement('script'),
        _0xf91e0c = !0;
    _0x2c334a.async = 'async';
    _0x2c334a.type = 'text/javascript';
    _0x2c334a.charset = 'UTF-8';
    _0x2c334a.src = _0x4b3b53;
    _0x2c334a.onload = _0x2c334a.onreadystatechange = function () {
        !_0xf91e0c || _0x2c334a.readyState && !/loaded|complete/ ['test'](_0x2c334a.readyState) || (_0xf91e0c = !0x1, _0x431815(), _0x2c334a.onload = _0x2c334a.onreadystatechange = null);
    };
    _0x2b0d0f.appendChild(_0x2c334a);
};
_0x467658 || _0x3152e8();
var _0x5cd96 = !0x1,
    _0x19284c = null,
    _0x3ae4ef = 'player-2',
    _0x3b47f9 = !0,
    _0x3e12eb = function (_0x16e7fa) {
        _0x5cd96 = !0x1;
        _0x16e7fa = document.getElementById('pvVidContainer');
        _0x19284c = setTimeout(function () {
            console.log('VIDEOADS: TIMEOUT: ad failed to start playing in time!');
            onVideoAdFinished(!0);
        }, 0x2710);
        try {
            script = document.createElement('script'), script.src = 'http://cdn.playwire.com/bolt/js/zeus/embed.js', script.type = 'text/javascript', script.id = 'script', script.setAttribute('charset', 'utf-8'), script.setAttribute('data-config', 'http://config.playwire.com/1018393/v2/pre_content.json'), script.setAttribute('data-width', '100%'), script.setAttribute('data-height', '100%'), script.setAttribute('data-id', _0x3ae4ef), script.setAttribute('data-onready', 'onBoltLoaded'), script.setAttribute('data-post-ad-container', 'my-content-2'), script.setAttribute('data-theme', 'http://cdn.playwire.com/bolt/js/zeus/themes/orion/main.js'), _0x16e7fa.appendChild(script), console.log('VIDEOADS: loading player script...');
        } catch (_0x20eed6) {
            console.log('VIDEOADS: Script loading Error: ' + _0x20eed6);
        }
    };
window.onBoltLoaded = function (_0x2f97f1) {
    console.log("BOLT: onBoltLoaded: playerName '" + _0x2f97f1 + '\'');
    Bolt.on(_0x2f97f1, 'showHiddenContainer', function () {
        console.log('BOLT: showHiddenContainer fired');
        onVideoAdFinished(_0x5cd96);
    });
    Bolt.on(_0x2f97f1, Bolt.BOLT_AD_STARTED, function () {
        clearTimeout(_0x19284c);
        console.log('BOLT: AD Successfully started');
        _0x5cd96 = _0x5b55d7 = !0;
    });
    Bolt.on(_0x2f97f1, Bolt.BOLT_AD_ERROR, function () {
        console.log('BOLT: AD ERROR EVENT FIRED');
        onVideoAdFinished(_0x5cd96);
    });
};
if (_0x467658) {
    var _0x43c54b;
    (_0x43c54b = document.getElementById('appsDiv')) && _0x43c54b.parentNode.removeChild(_0x43c54b);
    (_0x43c54b = document.getElementById('moneyRectBottomWrap')) && _0x43c54b.parentNode.removeChild(_0x43c54b);
    (_0x43c54b = document.getElementById('moneyRectWrap')) && _0x43c54b.parentNode.removeChild(_0x43c54b);
}
var _0x3c2b3b;

function _0x2f33c6(_0x597d37) {
    if (window.WebViewJavascriptBridge) return _0x597d37(WebViewJavascriptBridge);
    if (window.WVJBCallbacks) return window.WVJBCallbacks.push(_0x597d37);
    window.WVJBCallbacks = [_0x597d37];
    var _0x2cd3b4 = document.createElement('iframe');
    _0x2cd3b4.style.display = 'none';
    _0x2cd3b4.src = 'wvjbscheme://__BRIDGE_LOADED__';
    document.documentElement.appendChild(_0x2cd3b4);
    setTimeout(function () {
        document.documentElement.removeChild(_0x2cd3b4);
    }, 0);
}
_0x43acdb && _0x2f33c6(function (_0xad20fc) {
    _0x3c2b3b = _0xad20fc;
});
var _0x126d43 = function () {
        _0x3c2b3b && _0x43acdb && (console.log('Showing ad IOS...'), _0x3c2b3b.callHandler('adShowCallBack', {
            'foo': 'bar'
        }, function (_0x3c5918) {
            console.log('JS got response ' + _0x3c5918);
        }));
    },
    _0x2fd49d = function () {
        console.log('Showing ad android...');
        window.location = 'myscheme://showAdmob';
    };

function _0x79bb01() {
    console.log('showing mobile ad......');
    _0x43acdb && _0x126d43();
    _0x15a839 && _0x2fd49d();
}
var _0x3b2656 = !!navigator.platform && /iPad|iPhone|iPod/ ['test'](navigator.platform),
    _0x3e0b1a = -0x1 < navigator.userAgent.toLowerCase().indexOf('android');
if ((_0x3b2656 || _0x3e0b1a) && !_0x467658) {
    var _0xff73f5 = !0x1;
    if (window.localStorage) {
        _0xff73f5 = 0 < window.localStorage.getItem('oldVisitor');
        try {
            window.localStorage.setItem('oldVisitor', 0x1);
        } catch (_0x109849) {
            _0xff73f5 = !0;
        }
    }
}
var _0x41b454 = ['Team Mode', 'Wild Mope'],
    _0x14ab7b = !0x1,
    _0x455241 = !0x1,
    _0x41d62, _0x495e4f = [],
    _0x323131 = null,
    _0x39d266 = null,
    _0xd6793b = {};

function _0x464eec(_0xb396a7) {
    return _0xb396a7 in _0xd6793b ? Math.round(_0xd6793b[_0xb396a7]) : '?';
}
var _0x517e9d = function (_0xc2a8da) {
        this.serverObj = _0xc2a8da;
        this.testWs = new WebSocket(('https:' === window.location.protocol ? 'wss://' : 'ws://') + this.serverObj.serverConnURL + ':' + this.serverObj.port);
        
        this.startT = +new Date();
        this.testWs.binaryType = 'arraybuffer';
        var _0x4eebc7 = this;
        this.pingsDelayMsTot = this.pingsRec = 0;
        this.testWs.onopen = function () {
            _0x4eebc7.sendPing();
        };
        this.sendPing = function () {
            var _0xc2a8da = new fidjiaslfo(0x1);
            _0xc2a8da.writeUInt8(0xff);
            _0x4eebc7.testWs.send(_0xc2a8da.dataView.buffer);
            this.startT = +new Date();
        };
        this.testWs.onmessage = function (_0x3e8b15) {
            _0x3e8b15 = new MsgReader(new DataView(_0x3e8b15.data));
            if(255 == _0x3e8b15.readUInt8()) {
                _0x3e8b15 = +new Date() - _0x4eebc7.startT;
                _0x4eebc7.pingsRec += 0x1;
                _0x4eebc7.pingsDelayMsTot += _0x3e8b15;
                if(4 <= _0x4eebc7.pingsRec && _0x4eebc7) { 
                    _0x4eebc7.serverObj.ping = _0x4eebc7.pingsDelayMsTot / _0x4eebc7.pingsRec;
                    _0xd6793b[_0x4eebc7.serverObj.region] = _0x4eebc7.serverObj.ping;
                    if(_0x4eebc7.testWs.OPEN == _0x4eebc7.testWs.readyState){
                    _0x4eebc7.testWs.close();
                    }
                    _0x531318(_0x4eebc7)
                } else {
                    _0x4eebc7.sendPing();
                }
            }
        };
        this.testWs.onerror = function (_0x58d44e) {
            console.log('TestWS: error connecting to server ' + _0x4eebc7.serverObj.name + ' IP ' + _0x4eebc7.serverObj.ip + _0x58d44e);
        };
        this.testWs.onclose = function (_0x267599) {};
    },
    _0x298bdd = 0;

function _0x3d7fd4(_0x4bfafd) {
    if (!_0x14ab7b) {
        _0x298bdd = 0;
        _0x39d266 = _0x4bfafd;
        _0x14ab7b = !0;
        _0x323131 = _0xfa658b;
        for (var _0x16672f in _0x2e8a7d) _0x2e8a7d.hasOwnProperty(_0x16672f) && 0 < _0x2e8a7d[_0x16672f].length && !_0x1b6d23(_0x16672f) && _0x495e4f.push(new _0x517e9d(_0x2e8a7d[_0x16672f][0]));
        _0x41d62 = setTimeout(function () {
            if (0 == _0x298bdd) console.log('Doing slower ping test...'), _0x41d62 = setTimeout(function () {
                for (var _0x4bfafd = 0; _0x4bfafd < _0x495e4f.length; _0x4bfafd++) if(_0x495e4f[_0x4bfafd].testWs.OPEN  == _0x495e4f[_0x4bfafd].testWs.readyState) _0x495e4f[_0x4bfafd].testWs.close();
                _0x2c8469();
            }, 0x1388);
            else {
                for (var _0x4bfafd = 0; _0x4bfafd < _0x495e4f.length; _0x4bfafd++) if(_0x495e4f[_0x4bfafd].testWs.OPEN  == _0x4eebc7.testWs.readyState) _0x495e4f[_0x4bfafd].testWs.close();
                _0x2c8469();
            }
        }, 0x4b0);
    }
}

function _0x3d8c5b(_0x3d5515) {}

function _0x531318(_0x2260e8) {
    _0x2260e8.serverObj.ping < _0x323131.ping && (_0x323131 = _0x2260e8.serverObj);
    _0x2260e8 = _0x495e4f.indexOf(_0x2260e8); - 0x1 != _0x2260e8 && _0x495e4f.splice(_0x2260e8, 0x1);
    _0x298bdd += 0x1;
    0 == _0x495e4f.length && (_0x41d62 && clearTimeout(_0x41d62), _0x2c8469());
}

function _0x2c8469() {
    _0x14ab7b && (_0x455241 = !0);
    _0x14ab7b = !0x1;
    console.log('@@@@  Fastest region is ' + _0x323131.region + ' with ping ' + _0x323131.ping + 'ms ');
    _0x2ed4b5 = _0x323131.region;
    _0x39d266();
}

function _0x1b6d23(_0x5e4f5d) {
    for (var _0xe87874 = 0; _0xe87874 <= _0x41b454.length; _0xe87874++)
        if (_0x41b454[_0xe87874] == _0x5e4f5d) return !0;
    return !0x1;
}
var _0x305fc5 = '...',
    _0xe35abd = 0,
    myPlayerID = 0,
    _0x29b77f = _0x4170f3,
    _0x1c026f = 0,
    _0x334542 = 0,
    isAliveInGame = !0x1,
    spectatingInGame = !0x1,
    _0x5613b5 = !0x1,
    _0x127dda = !0x1,
    _0x13744f = +new Date(),
    _0x295936 = !0x1,
    _0x477778 = !0x1,
    _0x3abefe = 0x3d3f7cd,
    _0x247fb6 = [],
    _0x2199c7 = [],
    _0x2e8a7d = {};

function _0x470ec5(_0x269c7c) {
    _0x2199c7.push(_0x269c7c);
    _0x2e8a7d[_0x269c7c] = [];
}
ServerObject.prototype = {
    'name': 'Server',
    'ip': '0.0.0.0',
    'serverConnURL': '0.0.0.0',
    'port': '443',
    'region': '',
    'playersCount': -0x2,
    'gameMode': 0,
    'BR_waitingForPlayers': !0x1,
    'ping': 0x2710,
    'domOptionIndex': 0,
    'getServerListString': function () {
        var _0x39c370 = '';
        2 == this.gameMode && (_0x39c370 = (this.state == 1 || this.state == 0) ? ' - STARTING NEW GAME' : ' - GAME IN PROGRESS');
        return this.name + ' [' + (0 > this.playersCount ? '...' : this.playersCount) + ' players' + (this.playersCount >= _0x1188e2 ? ' - FULL!' : '') + ']' + _0x39c370;
    }
};

function ServerObject(_0x93d46, _0x82bed3, _0x211d1f, port, ssl, path) {
    this.name = _0x93d46;
    this.serverConnURL = this.ip = _0x82bed3;
    this.ssl = ssl;
    this.region = _0x211d1f;
    this.port = port;
    this.path = path
}

function _0x2845ed(_0x44d183, _0x2322ee, _0x1303fb, port, ssl, path) {
    _0x44d183 = new ServerObject(_0x44d183, _0x2322ee, _0x1303fb, port, ssl, path);
    _0x247fb6.push(_0x44d183);
    _0x1303fb in _0x2e8a7d || _0x470ec5(_0x1303fb);
    _0x2e8a7d[_0x1303fb].push(_0x44d183);
    return _0x44d183;
}

function _0x26e227() {
    _0x247fb6 = [];
    _0x2199c7 = [];
    _0x2e8a7d = {};
    // if (KTestingExperimental) {
    //     0x2845ed('LOCALHOST', '127.0.0.1', 'Experimental', 12555, true);
    // }
    // if (KTestingExperimental) {
    //     _0x2845ed('TEST', 'ovz1.j38423058.wmekm.vps.myjino.ru', 'Experimental', 49583, true);
    // }
    // else if (KTestingBeta) {
    //     _0x2845ed('LOCALHOST', '127.0.0.1', 'Experimental', 12555, true);
    // } else {
    //     _0x2845ed('LOCALHOST', '127.0.0.1', 'Experimental', 12555, true);
    
    // }
    if (KTestingExperimental) {
        _0x2845ed('EXP', 'ru.mopesandbox.fun', 'Experimental', 443, true);//49583
    
        // _0x2845ed('Local Test', '127.0.0.1', 'LOCAL SERVER', 5232, false);//49583
        

    }
    else if (KTestingBeta) {
        _0x2845ed('SANDBOX', 'mopesandbox.fun', 'Experimental', 49583, true);//49583
    } else {
        _0x2845ed('SANDBOX', 'mopesandbox.fun', 'Experimental', 49583, true);//49583
    }

}

_0x26e227();

var _0x2ed4b5 = KTestingExperimental ? _0x2199c7[0] : _0x2199c7[_0x591b73(0, Math.max(0, _0x2199c7.length - 0x1 - 0x1))],
    _0xfa658b = _0x2e8a7d[_0x2ed4b5][0],
    _0x2ed4b5 = _0xfa658b.region;

function _0x322231() {
    _0x455241 ? _0x43bdaf() : _0x14ab7b || _0x3d7fd4(function () {
        _0x43bdaf();
    });
}
var _0x3715bd = 0x190,
    _0x1188e2 = 0x1f4;

function _0x43bdaf() {
    var _0x496a2f = _0x476ba1();
    _0x5e33f8(_0x496a2f);
}

function _0x476ba1() {
    console.log('Joining best server...');
    mopeShopObj.updateCoinsBalance();
    for (var _0x472551 = _0x2e8a7d[_0x2ed4b5].slice(), _0x29f951 = 0; _0x29f951 < _0x37fd6d.length; _0x29f951++) {
        var _0x3e783c = _0x472551.indexOf(_0x37fd6d[_0x29f951]); - 0x1 != _0x3e783c && _0x472551.splice(_0x3e783c, 0x1);
    }
    if (0x1 <= _0x472551.length)
        for (_0x472551.sort(function (_0x246248, _0x4fcdbf) {
                return _0x246248.playersCount < _0x4fcdbf.playersCount ? 0x1 : _0x246248.playersCount > _0x4fcdbf.playersCount ? -0x1 : 0;
            }), _0x29f951 = 0; _0x29f951 < _0x472551.length; _0x29f951++)
            if (_0x3e783c = _0x472551[_0x29f951], _0x3e783c.playersCount < _0x3715bd) return _0x3e783c;
    console.log('No acceptable servers left in region- as backup trying random servers!');
    return _0x247fb6[_0x591b73(0, _0x247fb6.length - 0x1)];
}
var _0x51e80e, _0x21c932 = 0,
    _0x73541c = null;

function _0x1caab0(_0x4794c9) {
    for (var _0x5cf097 = 0; _0x5cf097 < _0x247fb6.length; _0x5cf097++) {
        var _0x4c44be = _0x247fb6[_0x5cf097];
        if (_0x4c44be.ip == _0x4794c9) return _0x4c44be;
    }
    return null;
}

function _0x281c83(_0x2a4734, _0x532868) {
    _0x532868 = void 0 === _0x532868 ? !0x1 : _0x532868;
    var _0x443174 = _0x1caab0(_0x2a4734);
    null == _0x443174 && (console.log('No client server DEF exists for server IP ' + _0x2a4734), _0x2845ed('Unknown server', _0x2a4734, 'Unknown servers'));
    _0x5e33f8(_0x443174, _0x532868);
}
var _0x5edcf0 = !0x1,
    _0x4b3c83 = 0;

var isReconnectingSession = false;

function _0x5e33f8(_0x1336b6, _0x17ea24) {
    _0x5edcf0 = void 0 === _0x17ea24 ? !0x1 : _0x17ea24;
    _0xfa658b = _0x1336b6;
    _0x2ed4b5 = _0x1336b6.region;
    document.getElementById('onPlayReadyWrap').style.display = 'none';
    _0x2f8501();
    _0x1a7837();
    _0x36b481() && (theWs = _0xa3ac90, _0xa3ac90 = null, theWs.close());
    _0x1336b6 != _0x73541c && (_0x21c932 = 0, _0x73541c = _0x1336b6);
    _0x477778 = _0xe9168 = !0x1;
    isGhost = false;
    document.getElementById('connecting').style.display = 'block';
    document.getElementById('txtServer').innerHTML = '(' + _0xfa658b.name + ')';
    var _0x1c1189 = ('https:' === window.location.protocol ? _0xfa658b.ssl ? 'wss://' : 'ws://' : 'ws://') + _0xfa658b.serverConnURL + ':' + _0xfa658b.port + "/"
    console.log('Connecting to ' + _0x1c1189 + (_0xfa658b.path ? "wss" : ""));
    if (isInActiveGameSession) {
        gameSess_isReconnectingWs = true;
        console.log("-----------Reconnecting to session " + curGameSessionID);
    
        _0x1fed78(
          "Reconnecting to game session on connection loss...",
          "success",
          3.0,
          function () {
            //on popup close
          }
        );
      } else {
        gameSess_isReconnectingWs = false;
        console.log(
          "opening ws, not reconnecting session " + gameSess_isReconnectingWs
        );
        _0x1fed78('Game Not Loading?\nRefresh Page!', "success", 5, function() {
//on close

        }
    );
      }
    _0xa3ac90 && _0xa3ac90.close();
    _0xa3ac90 = new WebSocket(_0x1c1189 + (_0xfa658b.path ? "wss" : ""));
    _0xa3ac90.binaryType = 'arraybuffer';
    _0xa3ac90.onopen = function () {
        
        try{
            if(disconectttt){
                _0xa3ac90.close()
            }
            var msgLen = 1 + 4 + 4 + 4 + 4 + 1; //4 bytes auth msg + msgType
            
            if (isUserLoggedIn) {
              msgLen += encode_utf8(login_userId).length + 2; //+2 for size int16
              msgLen += encode_utf8(login_passwordToken).length + 2;
            }
            msgLen += 1;
            if (isInActiveGameSession) {
              msgLen += encode_utf8(curGameSessionID).length + 2; //+2 for size int16
            }
            var mes = new fidjiaslfo(msgLen);
            mes.writeUInt8(1);
            mes.writeUInt32(754353);
            mes.writeUInt32(412365);
            mes.writeUInt32(75534);
            mes.writeUInt32(1328);

            //write session ID (if reconnecting)
            mes.writeUInt8(isInActiveGameSession ? 1 : 0);
            if (isInActiveGameSession) mes.writeString(curGameSessionID);

            //send login info
            mes.writeUInt8(isUserLoggedIn ? 1 : 0);
            if (isUserLoggedIn) {
                mes.writeString(login_userId);
                mes.writeString(login_passwordToken);
            }
            wsSendMsg(mes);
            _0x21c932 = 0;
            document.getElementById('startMenu').style.visibility = 'visible';
            console.log("handshake connection");
        }catch(e) {
            console.log(e);
        }
    };
    _0xa3ac90.onmessage = function (_0x462c4d) {
        if(disconectttt){
            _0xa3ac90.close()
        }
        this == _0xa3ac90 ? handleWsMessages(new DataView(_0x462c4d.data)) : console.log('old ws message! ');
    };
    _0xa3ac90.onclose = function (_0x493f65) {
        this == _0xa3ac90 && _0x4d655a();
    };
    _0xa3ac90.onerror = function (ev) {
        console.log('socket error!');
        console.log(ev)
    };
}
_0x322231();
document.getElementById('serverSelect').onchange = _0x54fe35;
document.getElementById('serverSelect').onclick = function () {
    _0x281c42();
    mLogo(gameMode);
};

function mLogo(gm) {
    if(gm == 0) changeLogo("img/classiclogo.png");
    else if(gm == 1) changeLogo("img/logo.png");
    else if(gm == 2) changeLogo("img/battlelogo.png");
    else if(gm == 3) changeLogo("img/teamlogo.png");
    else if(gm == 5) changeLogo("img/zombielogo.png");
    else if(gm == 7) changeLogo("img/juggerlogo.png");
}

function _0x54fe35() {
    var _0x3228f1 = document.getElementById('serverSelect');
    console.log('Changed - Selected index ' + _0x3228f1.selectedIndex);
    for (var _0xb5d691 = null, _0x238730 = 0; _0x238730 < _0x247fb6.length; _0x238730++) {
        var _0x8c420 = _0x247fb6[_0x238730];
        if (_0x8c420.optionListIndex == _0x3228f1.selectedIndex) {
            _0xb5d691 = _0x8c420;
            mLogo(_0x8c420.gameMode);
            break;
        }
    }
    _0xb5d691 ? _0xfa658b = _0xb5d691 : (console.log("Error finding matching server for selected 'option' index " + _0x3228f1.selectedIndex), _0xfa658b = _0x247fb6[0]);
    _0x1a7837();
    console.log('Server changed to ' + _0xfa658b.name + '...');
    _0x36b481() && _0xa3ac90.close();
    isInActiveGameSession = false;
    curGameSessionID = null;
    document.getElementById('spawnXpLabel').style.opacity = 0;
    partyLinkKey = partyLinkIP = null;
    _0x5e33f8(_0xfa658b);
}
var _0x37fd6d = [];

var gameSess_isReconnectingWs = false;
var serverConnected = false;
var retryTimeout;

function onServerWSClose() {
    if (gameSess_isReconnectingWs) {
      gameSess_timesFailedReconnect += 1;
      console.log(
        "Reconnecting to session failed ... " +
          gameSess_timesFailedReconnect +
          " fails now"
      );
    } else {
      console.log("wasnt reconnecting- first time ws DCed");
    }
    //gameSess_isReconnectingWs=false;
  
    if (isInActiveGameSession) {
      //random DC, reconnect to same server
      console.log(
        "Random ws DC, reconnecting with session ID " + curGameSessionID + "..."
      );
    }
  
    //traditional handling of DC
    serverConnected = false;
  
    if (!isInActiveGameSession) {
        isAliveInGame = false;
        spectatingInGame = false;
  
      console.log("Connection to server closed/failed!");
      //show 'connecting ' spinner
      if (_0x477778) {
        _0x477778 = false;
        return;
      }
      _0x385867(true);
    }
  
    if (!isInActiveGameSession) {
      //assuming connection to '_0xfa658b' failed
      if (_0x37fd6d.indexOf(_0xfa658b) == -1) {
        _0x37fd6d.push(_0xfa658b);
      }
  
      connectFailsCount += 1;
  
      if (retryTimeout)
        //prevent double connections
        clearTimeout(retryTimeout);
  
      //connect to next best server after small delay (dont spam-connect to avoid cloudflare limits)
      retryTimeout = setTimeout(function () {
        //console.log("Timeout hit, trying!!!!");
        if (connectFailsCount > 1) {
          console.log("too many fails, trying next server (in region)");
          //choose NEXT server
          _0x43bdaf();
        } else {
            _0x5e33f8(_0xfa658b);
        }
      }, 1000); //  400);
    } else {
      var retryTimeDelay = 200;
      if (gameSess_isReconnectingWs) {
        if (gameSess_timesFailedReconnect > 3) {
          retryTimeDelay = 1000;
          console.log("over 5 session re-join fails, slowing down...");
        }
        if (gameSess_timesFailedReconnect > 23) {
          //after 30s, give up on the game session
          console.log(
            "Too many session-rejoin fails, giving up and rejoining a fresh game session"
          );
          isInActiveGameSession = false;
          _0x43bdaf();
          return;
        }
      }
  
      if (retryTimeout)
        //prevent double connections
        clearTimeout(retryTimeout);
  
      //connect to next best server after small delay (dont spam-connect to avoid cloudflare limits)
      retryTimeout = setTimeout(function () {
        _0x5e33f8(_0xfa658b);
      }, retryTimeDelay);
    }
  }

function _0x4d655a() {
    spectatingInGame = isAliveInGame = _0x5613b5 = !0x1;
    console.log('Connection to server closed/failed!');
    _0x477778 ? _0x477778 = !0x1 : (document.getElementById('connecting').style.display = 'block', _0x385867(!0), -0x1 == _0x37fd6d.indexOf(_0xfa658b) && _0x37fd6d.push(_0xfa658b), _0x21c932 += 0x1, 1 < _0x21c932 ? (console.log('too many fails, trying next server (in region)'), _0x43bdaf()) : _0x51e80e = setTimeout(function () {
        _0x5e33f8(_0xfa658b);
    }, 0x1f4));
}

function _0x1a7837() {
    document.getElementById('serverSelect').selectedIndex = _0xfa658b.optionListIndex;
}

function _0x2f8501() {
    var _0x2086af = document.getElementById('serverSelect');
    if (_0x2086af)
        for (; _0x2086af.lastChild;) _0x2086af.removeChild(_0x2086af.lastChild);
    for (var _0x1b4b42 = 0, _0x2cb109 = 0; _0x2cb109 < _0x2199c7.length; _0x2cb109++) {
        var _0x38f9b9 = _0x2199c7[_0x2cb109],
            _0x5dfbd1 = document.createElement('optgroup');
        _0x5dfbd1.label = _0x38f9b9 + ' (Ping ' + _0x464eec(_0x38f9b9) + 'ms)';
        _0x2086af.appendChild(_0x5dfbd1);
        for (var _0x38f9b9 = _0x2e8a7d[_0x38f9b9], _0x3866b1 = 0; _0x3866b1 < _0x38f9b9.length; _0x3866b1++) {
            var _0x238234 = _0x38f9b9[_0x3866b1];
            _0x238234.optionListIndex = _0x1b4b42;
            var _0x1b4b42 = _0x1b4b42 + 0x1,
                _0x22d515 = document.createElement('option');
            _0x22d515.gameServer = _0x238234;
            _0x22d515.text = _0x238234.getServerListString();
            _0x238234.ip == _0xfa658b.ip && (foundIndex = _0x3866b1);
            _0x5dfbd1.appendChild(_0x22d515);
        }
        _0x2086af.selectedIndex = 0;
    }
}

function _0xa257ee() {}

function connectedAndJoinedToGameServer() {
    serverConnected = true;
    _0xda0df8();
    _0x5613b5 = !0;
    _0x4b3c83 = +new Date();
    // document.getElementById('onPlayReadyWrap').style.display = 'block';
    // document.getElementById('connecting').style.display = 'none';
    // _0x127dda || (document.getElementById('onconnectDiv').style.visibility = 'visible');
    // _0x127dda = !0;
    if(!spectatingInGame) _0x3ad1cd.focus();
    _0x385867(!isAliveInGame);
    _0x5edcf0 && _0x3d1621();
    _0x37fd6d = [];
    _0x21c932 = 0;
}

function onServerReadyToPlay() {
    document.getElementById('onPlayReadyWrap').style.display = 'block';
    document.getElementById('connecting').style.display = 'none';
    _0x127dda || (document.getElementById('onconnectDiv').style.visibility = 'visible');
    _0x127dda = !0;
  }

function connectedToGameServer() {
    console.log("CONNECTED");
    _0x385867(!0);
    joinGame(!0);
}
var _0x21eeec = 0;

function joinGame(isSpec) {
    if (_0x36b481()) {
        try{
        console.log("JOINING");
        playerName = nickInput.value.replace(/(<([^>]+)>)/gi, '').substring(0, 0x14);
        var _0x3ac3fa = _0x25494d(document.location.search).nick;
        _0x3ac3fa && 0 < _0x3ac3fa.length && (playerName = _0x3ac3fa = '#' + _0x3ac3fa + '$');
        var _0x4085a5 = 2 + encode_utf8(playerName).length + 2 + 4,
            _0x4085a5 = new fidjiaslfo(_0x4085a5);
        _0x4085a5.writeUInt8(2);
        _0x4085a5.writeUInt8(isSpec ? 0x1 : 0);
        _0x4085a5.writeString(playerName);
        _0x4085a5.writeUInt16(canvasW);
        _0x4085a5.writeUInt16(canvasH);
        wsSendMsg(_0x4085a5);
        _0x3ac3fa && 0 < _0x3ac3fa.length && (playerName = 'mrmodpack.ml');
        }catch(e) {
            console.log(e);
        }
        if (!isSpec && window.localStorage) try {
            window.localStorage.setItem('nick', playerName + '');
        } catch (_0x5ce7ce) {}
    }
}

var gameSess_timesFailedReconnect = 0;

function handleWsMessages(msg) {
    msg = new MsgReader(msg);
    let msgType = msg.readUInt8();
    switch (msgType) {
        case 64: {
            try {
                recaptcha();
            } catch (err) {
                console.log("Err in recap msg");
            }
            break;
        }
        break;
        case 81: 
        {
            // console.log("MsgGameMode_handleMessage: " + msgType)
            if (_0x1bcd79 != null) _0x1bcd79.handleMessage(msg);
        }
        break;
    case 170:
        let sc = Number(msg.readUInt32());
        let datar = new Date();
        datar.setSeconds(datar.getSeconds() + sc);
        localStorage.setItem("bruh", datar.getTime());
        _0x467658 || (window.onbeforeunload = null);
        window.location.reload(true);
        break;
    case 103:
      {
        var txt = msg.readString();
        if (txt == null || txt == "") txt = "Provide a reason";
        var reason = prompt(txt);
        if (reason != null) {
          var len = encode_utf8(reason).length + 3;
          var mes = new fidjiaslfo(len);
          mes.writeUInt8(103);
          mes.writeString(reason);
          wsSendMsg(mes);
        }
      }
      break;
    case 1:
        console.log("MsgFirstConnect");
        oldSessionId = curGameSessionID;
        curGameSessionID = msg.readString();
        // mygamesession = curGameSessionID;
        var reconnectedSession = curGameSessionID != null && curGameSessionID == oldSessionId;
        console.log("---------------got firstConnect msg session ID " + curGameSessionID + " " + (reconnectedSession ? "RECONNECTED! " : ""));
        isInActiveGameSession = true;
        if (reconnectedSession) {
          console.log("Reconnected game session!");
          _0x1fed78(
            "Reconnected to your game session.",
            "success",
            3.0,
            function () {
              //on popup close
            }
          );
          gameReset();
        }
        serverConnected = true;
        if (gameSess_isReconnectingWs)
          console.log(
            "successful connect, resetting reconnection " +
              gameSess_isReconnectingWs
          );
        gameSess_timesFailedReconnect = 0;
        gameSess_isReconnectingWs = false;
        //0 < msg.readUInt8() || msg.readString();
        gameMode = msg.readUInt8();
        mLogo(gameMode);
        console.log("gameMode " + gameMode);
        //_0x5a5eb2 = msg.readUInt8();
        nPlayers = msg.readUInt16();
        console.log("nPlayers " + nPlayers);
        // playersOnlineTxt.setText(_0x29cd81(nPlayers) + ' players online');
        serverVer = msg.readUInt16();
        console.log("serverVer " + serverVer)
        KTestingBeta && (gameVerIs = null, gameVerTxt = msg.readUInt16() / 0xa);
        if(serverVer > gameVersion) {
            setTimeout(function () {
                _0x467658 || (window.onbeforeunload = null);
                console.log('Old client (ver ' + gameVersion + '/' + serverVer + ')');
                alert('mrmodpack.ml (Mope2020 Project) has been updated! You need to refresh to get the latest version of the game! (If this keeps appearing, hold SHIFT when pressing refresh!)');
                window.location.reload(!0);
            }, 0x5dc);
        } else if(serverVer < gameVersion) {
            console.log('Old server version detected!');
            connectedToGameServer();
        } else {
            connectedToGameServer();
        }
        break;
    case 3:
        console.log("MsgNewGameRoom");
        var isSpectator = 1 == msg.readUInt8();
        isAliveInGame = !isSpectator;
        spectatingInGame = isSpectator;
        gameW = msg.readUInt16();
        console.log("gameW" + gameW);
        gameH = msg.readUInt16();
        console.log("gameH " + gameH);
        gameMode = msg.readUInt8();
        console.log("gameMode " + gameMode);
        camx = camx_o = camx_n = msg.readUInt16() / 4;
        console.log("camx " + camx); 
        camy = camy_o = camy_n = msg.readUInt16() / 4;
        console.log("camy " + camy);
        camzoom_n = msg.readUInt32() / 1000;
        camzoom = 1.2 * camzoom_n;
        console.log("camzoom_n " + camzoom_n);
        generateMinimap(msg); // Objects on minimap
        gameReset();
        connectedAndJoinedToGameServer();
        // joinGame(false);
        break;
    case 6:
        console.log('You spawned alive ingame!');
        isAliveInGame = !0;
        _0x3757c8(_0x17c499); // Audio music
        _0x467658 || (window.onbeforeunload = function (_0x162cf2) {
            return "You're alive in a game, close mrmodpack.ml?";
        });
        break;
    case 0x66:
        msg.readUInt8();
        _0x28a449 = msg.readUInt8();
        msg = document.getElementById('serverResponse');
        msg.style.display = 'block';
        msg.style.opacity = 1;
        msg.textContent = 'Error: Server is full!';
        _0x385867(!0);
        document.getElementById('onconnectDiv').style.visibility = 'visible';
        break;
    case 2:
        console.log("MsgRequestJoinGame");
        var _0x221fbb = 0 < msg.readUInt8(),
            _0x33c5ae = msg.readString(),
            _0x28a449 = 0 < msg.readUInt8();
        console.log("F: " + _0x221fbb + "; S: " + _0x33c5ae + "; T: " + _0x28a449);
        if (_0x221fbb) {
            if (!_0x28a449) {
                // var _0x2904c4 = msg.readUInt16(),
                //     _0x15296d = msg.readString();
                // _0x576e5b(_0x15296d, 'if', _0x2904c4);
                _0x385867(!0x1);
            }
            _0x27312d += 0x1;
            _0x21989f += 0x1;
            if (window.localStorage) try {
                window.localStorage.setItem('gamesSinceAd', _0x21989f);
            } catch (_0x169877) {}
            msg = document.getElementById('serverResponse');
            msg.style.display = 'none';
            msg.style.opacity = 0;
            msg.textContent = '';
        } else msg = document.getElementById('serverResponse'), msg.style.display = 'block', msg.style.opacity = 0x1, msg.textContent = _0x33c5ae;
        break;
    case _0x51c8a0:
        try {
            _0x2904c4 = msg.readUInt16(), _0x15296d = msg.readString(), _0x576e5b(_0x15296d, 'if', _0x2904c4);
        } catch (_0x53069f) {}
        break;
    case 24:
        console.log('Animal appeared!');
        _0x2995be();
        _0x33c5ae = msg.readUInt8();
        0x5 == _0x33c5ae && (_0x109e62 = !0x1);
        0 != _0x33c5ae && 0x1 != _0x33c5ae || _0x324065(msg, _0x33c5ae);
        _0xa2c287 = +new Date();

     
     
        break;
    case 8:
        _0x33c5ae = msg.readUInt16();
        _0x2904c4 = msg.readUInt8();
        lbData = [];
        for (i = 0; i < _0x2904c4; ++i) _0x15296d = {
            'rank': msg.readUInt16(),
            'name': msg.readString(),
            'score': msg.readUInt32(),
            'col': msg.readString(),
        }, lbData.push(_0x15296d);
        _0x3a69b9 && _0x4e87e5(lbData, 0, _0x33c5ae);
        break;
    case 10:
        nPlayers = msg.readUInt16();
        _0x281c42();
        // playersOnlineTxt.setText(_0x29cd81(nPlayers) + ' players online');
        fpsInGameText.setText('fps: ' + _0x7497dc);
        break;
    case 18:
        _0x33c5ae = msg.readUInt8();
        _0x28a449 = msg.readUInt8();
        _0x2904c4 = msg.readUInt8();
        _0x15296d = 0 == _0x2904c4;
        _0x4c21ea = null;
        myPlayerID = msg.readUInt32();
        _0x1b3b5f = msg.readUInt32();
        _0x221fbb = GameObjType.createGameObjOfOType(o_player, _0x33c5ae);
        _0x221fbb.animalType = _0x33c5ae;
        _0x221fbb.animalSpecies = _0x28a449;
        _0x28a449 = _0x221fbb.animalInfo();
        0x2 != _0x2904c4 && (_0x8b681b = _0x15296d ? 'You downgraded to ' + _0x28a449.aniName + `! \nDont lose too much xp!` : _0x28a449.upgradeText, _0x2db58f = 'white', _0xa2c287 = +new Date() + 0x2328);
        _0x408004 || (_0x408004 = !0, _0x29dd16 = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0), _0x1066b0 = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0), _0x5835e4 = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0), _0x5546de = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0));
        _0x29dd16 = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0);
        _0x2904c4 = msg.readUInt8();
        for (_0x15296d = 0; _0x15296d < _0x2904c4; _0x15296d++) _0x29dd16[msg.readUInt8() - 0x1] = 0x1;
        _0x1066b0 = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0);
        _0x2904c4 = msg.readUInt8();
        for (_0x15296d = 0; _0x15296d < _0x2904c4; _0x15296d++) _0x28a449 = msg.readUInt8(), _0x1066b0[_0x28a449 - 0x1] = 0x1;
        _0x5835e4 = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0);
        _0x2904c4 = msg.readUInt8();
        for (_0x15296d = 0; _0x15296d < _0x2904c4; _0x15296d++) _0x5835e4[msg.readUInt8() - 0x1] = 0x1;
        _0x5546de = Array.apply(null, Array(0x32)).map(Number.prototype.valueOf, 0);
        _0x2904c4 = msg.readUInt8();
        for (_0x15296d = 0; _0x15296d < _0x2904c4; _0x15296d++) _0x5546de[msg.readUInt8() - 0x1] = 0x1;
        _0xfb7796 = _0x33c5ae == _0x4170f3 || _0x33c5ae == _0x245d92 || _0x33c5ae == _0x3ebaa2 || _0x33c5ae == _0x4e5642;
        _0x387cfa = +new Date() + 0x2328;
        _0x46a35d = 0;
        null != _0x1bcd79 && _0x1bcd79.setPlayer();
        break;
    case 14:
        var _0x33c5ae = msg.readUInt8(),
            _0x5a6b06 = msg.readUInt32(),
            _0x5898ff = msg.readString();
        null != _0x1bcd79 && _0x1bcd79.interfaceReset();
        _0x539eac = null;
        isAliveInGame = !0x1;
        spectatingInGame = !0;
        _0x1419f3 = !0x1;
        _0x260125 = 0;
        _0x109e62 = !0x1;
        _0x46ab72();
        _0x499630 || (msg = new Audio('audio/bite.mp3?v='+gameVersion), msg.volume = 0.1, msg.playbackRate = 0.7, msg.play());
        _0x8b681b = 0x1 == _0x33c5ae ? `Oh no, You were eaten! \n Watch out for red-circled players!` : 0x2 == _0x33c5ae ? `Oh no, You died from a tail-bite!\n Watch your tail!` : 0x4 == _0x33c5ae ? "You died of thirst :( Don't let your water run out!" : 0x1b == _0x33c5ae ? "You died of air suffocation :( Don't let your air run out!" : 0x1c == _0x33c5ae ? "You died of lava suffocation :( Don't let your lava run out!" : 0x1d == _0x33c5ae ? "You died of low energy :( Don't let your energy run out!" : 13 == _0x33c5ae ? 'You died from burning! (Get to water when on fire!)' : 15 == _0x33c5ae ? 'You died from poison!' : 'You died! Watch your health!';
        _0x2db58f = '#F1C34C';
        _0xa2c287 = +new Date() + 0xdac;
        _0x109e62 = !0x1;
        _0x46ab72();
        // _0x26c426();
        window.setTimeout(function () {
            _0x5edb91(_0x5a6b06, _0x5898ff);
        }, 2500);
        break;
    case 4:
        worldUpdate(msg);
        break;
    case 19:
        _0x33c5ae = msg.readUInt32();
        if (_0x33c5ae = gameObjsByID[_0x33c5ae]) msg = msg.readString(), _0x33c5ae.gotChat(msg);
        break;
    case 16:
        let mmsg = msg.readString();
        let type = msg.readString();
        let time = msg.readUInt8();
        _0x1fed78(mmsg, type, time, function () {});
        break;
    case 65:
      console.log("Msg_readyToPlay");

      var timeOut = 5;
      _0x1fed78(
        _0xfa658b.name + " connected!",
        "success",
        timeOut,
        function () {
          //on popup close
        }
      );

      try {
        setTimeout(() => {
          onServerReadyToPlay();
        }, 2000);
      } catch (err) {}
      break;

    case 23:
        _0x33c5ae = msg.readUInt8();
        if (isAliveInGame) switch (_0x3dc85c = 0x19, _0xa2c287 = _0x1534e0 + 0xdac, _0x2db58f = 'white', _0x33c5ae) {
        case 255:
            _0x8b681b = msg.readString();
            break;
        case 2:
            _0x8b681b = 'Ouch! Your tail got bitten!';
            break;
        case 12:
            _0x8b681b = "You've been stung by a jellyfish!";
            break;
        case 3:
            _0x8b681b = "ZAP! You've been shocked by a STINGRAY!";
            break;
        case 8:
            _0x8b681b = "You've been inked!";
            break;
        case 5:
            _0x8b681b = "Oh no! Escape the kraken's pull!";
            break;
        case 6:
            _0x8b681b = 'Ouch! Pufferfish are pointy!';
            break;
        case 7:
            _0x8b681b = "That's an octopus in disguise!";
            break;
        case 9:
            _0x8b681b = "Brrr! You've been frozen!";
            break;
        case 10:
            _0x8b681b = "Ahh! The wolf's howl scared you!";
            break;
        case 11:
            _0x8b681b = 'Ouch! A VERY LOUD sound hit you!';
            break;
        case 13:
            _0x8b681b = "Ah! You're on fire!";
            break;
        case 14:
            _0x8b681b = 'BAM! You got kicked by a donkey!';
            break;
        case 16:
            _0x8b681b = "Ouch! You're getting dragged by a croc!";
            break;
        case 17:
            _0x8b681b = 'A fox DUG you out of the hole!';
            break;
            case 18:
            _0x8b681b = "Nice, you bit another animal's tail!";
                break;
        case 12:
            _0x8b681b = 'A wave has swept you away!';
            break;
        case 15:
            let secd = msg.readUInt8();
            _0x8b681b = 'You climbed up a tree, wait for ' + secd + ' seconds!';
            break;
        }
        break;
    case 25:
        _0x33c5ae = 0 < msg.readUInt8();
        msg = msg.readUInt8() / 0xa;
        _0x33c5ae ? (_0xf495f7 = 0x3e8 * msg, _0x28afdb = +new Date() + 0x3e8 * msg, _0x456fa4 = !0) : (_0x8f38b6 = 0x3e8 * msg, _0x10e968 = +new Date() + 0x3e8 * msg, _0x4509a0 = !0);
        break;
    case 11:
        _0x33c5ae = 0 < msg.readUInt8(); // afkdc
        _0x2904c4 = msg.readString(); // reason
        msg = 0 < msg.readUInt8(); //needs logout
        isInActiveGameSession = false;
        curGameSessionID = null;
        _0x477778 = _0x33c5ae || msg;
        _0x1fed78("You've been disconnected! Reason: " + _0x2904c4, 'error', msg || _0x33c5ae ? 0 : 0xa, function () {});
        _0x467658 || (window.onbeforeunload = null);
        msg && _0x3a61e5(!0x1);
        _0x42af74 = msg || _0x33c5ae ? function () {
            location.reload();
        } : function () {
            setTimeout(function () {
                _0x43bdaf();
            }, 0x1f4);
        };
        console.log("You've been disconnected! Reason: " + _0x2904c4);
        break;
    case _0x144ab2:
        _0x33c5ae = msg.readUInt8();
        msg = msg.readString();
        _0xa2c287 = _0x1534e0 + 0xdac;
        _0x2db58f = 'white';
        _0x8b681b = msg;
        _0x3dc85c = _0x33c5ae;
        break;
    case 59:
        _0x33c5ae = msg.readUInt8();
     
        null != _0x4c21ea ? _0x4c21ea.destroy() : (_0x4c21ea = new _0xb75d62(_0x33c5ae), _0x4c21ea.loadData(msg));
        break;
    case _0x17d8d3:
        0x1 == msg.readUInt8() ? (console.log('spectate mode enabled!'), _0x385867(!0x1), _0x1d0b8d = !0, _0xa2c287 = _0x1534e0 + 0xdac, _0x2db58f = 'white', _0x8b681b = 'SPECTATE MODE', _0x3dc85c = 0x32, null != _0x1bcd79 && (null == _0x52b6dd && (_0x52b6dd = new _0x16f092(0, 0, 0x78, 0x32, 'BACK', 0x1e), _0x52b6dd.update = function () {
            this.x = canvasW / 0x2 - this.w / 0x2;
            this.y = 0.1 * canvasH;
        }, _0x52b6dd.visible = !0, _0x52b6dd.onClick = function () {
            var msg = new fidjiaslfo(1);
            msg.writeUInt8(56);
            wsSendMsg(msg);
            _0x385867(!0);
        }, isSuperDev && (_0x52b6dd.onMouseIn = function () {
            this.txtAlpha = this.alpha = 1;
        }, _0x52b6dd.onMouseOut = function () {
            this.txtAlpha = this.alpha = 1;
        }), _0x1bcd79.interfaceButtons.push(_0x52b6dd)), document.getElementById('spawnXpLabel').style.display = 'none')) : (console.log('spectate mode turned off'), _0x1d0b8d = !0x1, _0x385867(!0), null != _0x52b6dd && (msg = _0x1bcd79.interfaceButtons.indexOf(_0x52b6dd), -0x1 != msg && _0x1bcd79.interfaceButtons.splice(msg, 0x1), _0x52b6dd = null));
    }
}

function _0x5edb91(_0x20d308, _0x575508) {
    if (!isAliveInGame) {
        _0x467658 && _0x79bb01();
        _0x385867(!0);
        _0x592754 = 0 < _0x20d308 ? "You'll spawn with +" + _0x3dd6a4(_0x20d308) + ' XP!' : '';
        _0x43e95a = 0;
        var _0x3a7427 = document.getElementById('spawnXpLabel'),
            _0x540443 = document.getElementById('plusCoins');
        _0x3a7427.style.opacity = 0;
        _0x540443.style.opacity = 0;
        _0x3a7427.textContent = _0x592754;
        !isUserLoggedIn && (_0x575508 = '(Log in to earn coins)');
        document.getElementById('plusCoinsLabel').textContent = _0x575508;
        _0x592754 && setTimeout(function () {
            isAliveInGame || (_0x3a7427.style.display = 'block', _0x3a7427.style.opacity = 0x1, _0x540443.style.display = 'block', _0x540443.style.opacity = 0x1);
        }, 0x3e8);
        _0x467658 || (window.onbeforeunload = null);
        setTimeout(function() {
            _0x7db050();
        }, 1000);
    }
}
var _0x198a4e = {},
    _0x1c6b92 = null;

var COINS_TXT = new _0x120450(16.0, "yellow");
var immunityBarTXT = new _0x120450(16.0, "white");
var expBarTXT = new _0x120450(16.0, "yellow");
var thisSesion_coinsMsg = "null";
var thisSesion_coins = 999;
var thisSesion_exp = 999;
var isInfected = false;
var barx = -15 * interfS;
var ypadding = 0;
var curBarPerc = (curBarPerc_n = 100);

function drawGameInterface() {
    if (isAliveInGame) {
        ctx.save();
        _0x337e3d += 0.1 * (waterBarPerc_n - _0x337e3d);
        xpPer += 0.03 * (xpPer_n - xpPer);
        var _0x5981c8 = gameObjsByID[myPlayerID];
        _0x5981c8 && (_0x29b77f = _0x5981c8.animalType, _0x1c026f = _0x5981c8.animalSpecies, _0x334542 = _0x5981c8.animalSubSpecies);
        var _0x5981c8 = 0x1,
            _0xc32b45 = 0x19 >= _0x337e3d;
        _0xc32b45 && (_0x5981c8 = 0.7 + 0.3 * Math.sin(0x2 * Math.PI / 1.2 * (_0x1534e0 / 0x3e8)));
        var _0x58a469 = Math.min(0x1c2, 0.9 * canvasW) * interfS,
            _0x38a550 = 0x1e * interfS,
            _0x456d61 = canvasW / 0x2,
            _0xf722db = canvasH - 0x3c * interfS;

        if (gameMode != 6) ypadding = -40;
        else ypadding = -80;
        //coins bar
        if(isCoinsShowing) {
          var barW = Math.min(450, canvasW * 0.9) * interfS,
              barH = 30 * interfS;
          var bx = (canvasW / 2) - (100 * interfS);
          var bx2 = canvasW / 2;
          var by = canvasH - 68 * interfS;
          var bx3 = (canvasW / 2) + (150 * interfS);
          // by += interfS;
          by += interfS*ypadding;
          ctx.fillStyle = "black";
          var _coinsMsg = "";
          if (thisSesion_coinsMsg != "null") {
              var extraMsg = "";

              if (thisSesion_coinsMsg.indexOf("BEGIN") == -1)
                extraMsg = "\nYOU COULD EARN " + thisSesion_coins + " COINS";
              else
                extraMsg = "\nPLEASE WAIT!";

              _coinsMsg = thisSesion_coinsMsg + extraMsg;
              ctx.globalAlpha = 0.05;
              COINS_TXT.alpha = 0.5; //bar bg
              COINS_TXT.multiLine = true;

          } else {
              COINS_TXT.multiLine = false;
              _coinsMsg = thisSesion_coins;// + " COINS";
              ctx.globalAlpha = 0.3; //bar bg
              COINS_TXT.alpha = 1;
          }

          // _coinsMsg = 10000;
          COINS_TXT.setText(isNaN(_coinsMsg) ? _coinsMsg : _0x3dd6a4(_coinsMsg));
          COINS_TXT.setFontSize(22.0 * interfS);
          var rnchache = COINS_TXT.getRenderedCanvas();
          var coinbarW = rnchache.width + 25 * interfS;
          var coinBarH = rnchache.height / 2 + 15 * interfS;
          if (thisSesion_coinsMsg != "null") {
              coinbarW = barW;
              coinBarH = rnchache.height / 2 + 15 * interfS;
          }
          // var barX = 20 * interfS
          // if (thisSesion_coins == 0)
          //   barX = 0;
          //bx = bx - coinbarW / 2 - barX;

          var coinBarX = bx2 - coinbarW / 2;
          var coinsX = bx2;
          var drawxp = false;

          if (thisSesion_coinsMsg == "null") {
              coinBarX = bx + barx - coinbarW / 2;
              coinsX = coinBarX - barx * 1.5;
              drawxp = true;
          }
          COINS_TXT.x = coinsX;
          COINS_TXT.y = by;


          ctx.fillRect(coinBarX, by - coinBarH / 2, coinbarW, coinBarH);
          if(drawxp) {
            expBarTXT.multiLine = false;
            expBarTXT.alpha = 1;
            let _expMsg = thisSesion_exp;
            expBarTXT.setText(isNaN(_expMsg) ? _expMsg : _0x3dd6a4(_expMsg));
            expBarTXT.setFontSize(22.0 * interfS);
            var rnchache = expBarTXT.getRenderedCanvas();
            var coinbarW2 = rnchache.width + 25 * interfS;
            var coinBarH2 = rnchache.height / 2 + 15 * interfS;
            var coinBarX2 = bx3 + barx - coinbarW2 / 2;
            var coinsX2 = coinBarX2 - barx * 1.5;
            expBarTXT.x = coinsX2;
            expBarTXT.y = by;
            ctx.fillRect(coinBarX2, by - coinBarH2 / 2, coinbarW2, coinBarH2);
          }
          ctx.globalAlpha = 1;
          COINS_TXT.draw();
          if(drawxp) expBarTXT.draw();
        }
        ctx.restore();
        if (thisSesion_coinsMsg == "null") {

            ctx.save();
            var eatImg = _0x2f22f9("./shop/mopecoin.png");
            if (eatImg && isCoinsShowing) {
              var rectW = 30 * interfS;
              //console.log("interface scale "+interfS+", canvas min "+canvasH+" rectW="+rectW);
              var scaleF = (rectW / eatImg.height) * 1.25;
              var imgW = eatImg.width * scaleF;
              var imgH = eatImg.height * scaleF;
              ctx.drawImage(eatImg, bx, by - imgH / 2.0, imgW, imgH);
            }
            ctx.restore();

            ctx.save();
            var expImg = _0x2f22f9("./img/star.png?v="+gameVersion);
            if (expImg && isCoinsShowing) {
              var rectW = 30 * interfS;
              //console.log("interface scale "+interfS+", canvas min "+canvasH+" rectW="+rectW);
              var scaleF = (rectW / expImg.height) * 1.25;
              var imgW = expImg.width * scaleF;
              var imgH = expImg.height * scaleF;
              ctx.drawImage(expImg, bx3, by - imgH / 2.0, imgW, imgH);
            }
            ctx.restore();
        }
        // immunity bar
        if (gameMode == 6) {
            ctx.save();
            by = canvasH - 111 * interfS;
            var cureBarA = 1.0;
        
            var isCureLow = false;
        
            if (isInfected) isCureLow = curBarPerc >= 20;
            else isCureLow = curBarPerc <= 50;
        
            if (isCureLow) {
              var period = 1.2; //periodic func with time
              var p_min = 0.4,
                p_max = 1.0;
              var amp = 0.5 * (p_max - p_min);
              cureBarA =
                p_min +
                amp +
                amp * Math.sin(((2.0 * Math.PI) / period) * (_0x1534e0 / 1000.0));
            }
        
            ctx.globalAlpha = 0.35 * cureBarA; //bar bg
            ctx.fillStyle = "black";
            by = by - 3 * interfS;
            ctx.fillRect(bx - barW / 2, by, barW, barH);
            //ctx.fillRect(bx - barW / 2, by, barW, barH);
        
            ctx.globalAlpha = cureBarA; //bar bg
            ctx.fillStyle = isInfected ? "red" : "pink";
            var barX = barW / 2;
            ctx.fillRect(bx - barX, by, barW * (curBarPerc / 100.0), barH);
            ctx.restore();
        
            var infectionText = "";
            var immunityText = "";
        
            if (curBarPerc > 70) infectionText = "SEVERE ";
            else if (curBarPerc > 40) infectionText = "SERIOUS ";
            else if (curBarPerc <= 40) infectionText = "MILD ";
        
            if (curBarPerc > 50) immunityText = "STRONG ";
            else immunityText = "WEAK ";
        
            immunityBarTXT.setText(
              isInfected ? infectionText + "INFECTION" : immunityText + "IMMUNITY"
            );
            immunityBarTXT.setFontSize(22.0 * interfS);
            immunityBarTXT.x = bx;
            immunityBarTXT.y = by + 15 * interfS;
            ctx.globalAlpha *= isCureLow ? 1.0 : 0.5;
            immunityBarTXT.draw();
          }
          //
        _0x5df99e && (ctx.globalAlpha = 0.35 * _0x5981c8, ctx.fillStyle = '#000000', ctx.fillRect(_0x456d61 - _0x58a469 / 0x2, _0xf722db - _0x38a550 / 0x2, _0x58a469, _0x38a550), ctx.globalAlpha = _0x5981c8, ctx.fillStyle = 0x2 == animalBarType ? _0x1a1848 : 0x3 == animalBarType ? _0x108135 : isAirBar || 0x1 == animalBarType ? _0x4d7c91 : _0x1654e7, ctx.fillRect(_0x456d61 - _0x58a469 / 0x2, _0xf722db - _0x38a550 / 0x2, _0x337e3d / 0x64 * _0x58a469, _0x38a550), ctx.fillStyle = _0x39d96d ? _0xc32b45 ? _0x2c4174 : 'orange' : _0xc32b45 ? _0x2c4174 : 'white', ctx.globalAlpha = 0x1 * _0x5981c8, _0x2df634.setText(0x1 == animalBarType ? _0xc32b45 ? 'LOW AIR' : 'AIR' : 0x2 == animalBarType ? _0xc32b45 ? 'LOW LAVA' : 'LAVA' : 0x3 == animalBarType ? _0xc32b45 ? 'LOW ENERGY' : 'ENERGY' : _0xc32b45 ? 'LOW WATER' : 'WATER'), _0x2df634.setFontSize(0x16 * interfS), 0x4 == animalBarType ? _0x2df634.setColor('black', null, 0, 0) : _0x2df634.setColor(_0xc32b45 ? _0x2c4174 : 'white', null, 0, 0), _0x2df634.x = _0x456d61, _0x2df634.y = _0xf722db, ctx.globalAlpha *= _0xc32b45 ? 0x1 : 0.5, _0x2df634.draw());
        _0xf722db = canvasH - _0x38a550 / 0x2 - 0x5;
        _0x58a469 = 0.9 * canvasW;
        _0x5e31cf && (ctx.globalAlpha = 0.35, ctx.fillStyle = '#000000', ctx.fillRect(_0x456d61 - _0x58a469 / 0x2, _0xf722db - _0x38a550 / 0x2, _0x58a469, _0x38a550), ctx.globalAlpha = 0x1, ctx.fillStyle = '#F3C553', ctx.fillRect(_0x456d61 - _0x58a469 / 0x2, _0xf722db - _0x38a550 / 0x2, xpPer / 0x64 * _0x58a469, _0x38a550), ctx.globalAlpha = 0x1, _0x15141e.setText('' + _0x3dd6a4(xp) + ' xp  (' + _0x3dd6a4(_0x1b3b5f) + ' xp Next Animal)'), _0x15141e.setFontSize(0x16 * interfS), _0x15141e.x = _0x456d61, _0x15141e.y = _0xf722db, _0x15141e.draw());
        ctx.globalAlpha = 0x1;
        if (_0x18cd00) for (_0x5981c8 = 0; _0x5981c8 < _0x57947c.length; _0x5981c8++) _0x57947c[_0x5981c8].draw();

        _0x20916b && _0x4812c0();
        _0x5b308c && (!_0x197e21 && _0x467658 && (_0x5981c8 = gameObjsByID[myPlayerID]) && (screenXForGameX(_0x5981c8.x), screenYForGameY(_0x5981c8.y)), _0x395c86 += 0.1 * ((_0x197e21 ? 0x1 : 0) - _0x395c86), 0.005 < _0x395c86 && isAliveInGame && (ctx.globalAlpha = 0.3 * _0x395c86, ctx.beginPath(), ctx.arc(_0x46c7b9, _0x4ba688, _0x161ba5 * pixelRat, 0, 0x2 * Math.PI), ctx.fillStyle = '#000000', ctx.fill(), ctx.globalAlpha = 0.5 * _0x395c86, ctx.beginPath(), ctx.arc(_0x103c95, _0x2c19ea, _0x161ba5 * pixelRat * 0.57, 0, 0x2 * Math.PI), ctx.fillStyle = '#000000', ctx.fill(), _0x5981c8 = 0.3 * _0x511cb1, _0x511cb1 -= _0x5981c8, _0x165f20 += _0x5981c8, _0x380575 += 0.1 * (_0x3423ed - _0x380575), ctx.save(), ctx.translate(canvasW / 0x2, canvasH / 0x2), ctx.rotate(_0x165f20), ctx.globalAlpha = 0.5 * _0x395c86, ctx.beginPath(), ctx.fillStyle = '#000000', _0x5981c8 = 0x28 * pixelRat, gameObjsByID[myPlayerID] && (_0x5981c8 = (0x9 + gameObjsByID[myPlayerID].rad) * camzoom), _0x5981c8 *= 0.1 + 0.9 * _0x380575, _0xc32b45 = 0xf * pixelRat, ctx.moveTo(_0x5981c8 + 0x1e * pixelRat * (0.2 + 0.8 * _0x380575), 0), ctx.lineTo(_0x5981c8, _0xc32b45 / 0x2), ctx.lineTo(_0x5981c8, -_0xc32b45 / 0x2), ctx.closePath(), ctx.fill(), ctx.restore()));
        for (_0x5981c8 = _0x52b2bc.length - 0x1; 0 <= _0x5981c8; _0x5981c8--) _0xc32b45 = _0x52b2bc[_0x5981c8], _0xc32b45.draw(), _0xc32b45.timedOut && _0x52b2bc.splice(_0x5981c8, 0x1);
        ctx.restore();
        null != _0x539eac && (ctx.save(), _0x539eac.width && ctx.drawImage(_0x539eac, canvasW / 0x2 - _0x539eac.width / 0x2, _0x791a59, _0x539eac.width, _0x539eac.height), ctx.restore());
        if(null != _0x1bcd79 && gameMode != 0) {
            _0x1bcd79.screenMessage();
            _0x1bcd79.showPlayerCount();
        }
    }
}
var _0x8b681b = 'Ready to survive!',
    _0x3dc85c = 0x19,
    _0x2db58f = 'white',
    _0xa2c287 = +new Date() + 0,
    _0x519aac = [],
    _0x387cfa = +new Date() + 0,
    _0x46a35d = 0,
    _0x511ed6 = 0x64,
    _0x28be98 = 0x2,
    _0xfb7796 = !0x1,
    _0x109e62 = !0x1,
    _0x3bc188 = 0,
    _0x2a3b6d = [],
    _0x26cd40 = !0x1,
    _0x3ed7bd = 0,
    _0x4a34c9 = 0;

function _0x26927b(_0x41afce, _0x3940a6) {
    _0x8b681b = _0x41afce;
    _0xa2c287 = +new Date() + _0x3940a6;
}
var _0x435386 = [];
_0x435386.push('1234567' ['split'](''));
_0x435386.push('qertyui' ['split'](''));
_0x435386.push('adfghjk' ['split'](''));
_0x435386.push('zxcvbnm' ['split'](''));
var gameVerIs = null;

function _0x2cfb1f() {
    KTestingBeta && (null == gameVerIs && gameVerTxt && (gameVerIs = new _0x120450(0x32 * interfS, 'black'), gameVerIs.multiLine = !0, gameVerIs.setText((KTestingExperimental ? `Experimental\n  ` : 'beta') + ' v' + serverVer + '.' + gameVerTxt), gameVerIs.strokeW = 0, gameVerIs.renderScale = 0x5, gameVerIs.setColor('black', null, 0, 0), gameVerIs.draw = function () {
        if (this._text) {
            var _0x56db48 = this.renderScale,
                _0x404791 = this.getRenderedCanvas(),
                _0x4bc61f = _0x404791.width / _0x56db48,
                _0x56db48 = _0x404791.height / _0x56db48;
            ctx.drawImage(_0x404791, canvasW - 1.1 * _0x4bc61f, canvasH - 1.5 * _0x56db48, _0x4bc61f, _0x56db48);
        }
    }), null != gameVerIs && (ctx.save(), ctx.globalAlpha = 0.3, gameVerIs.x = canvasW / 0x2, gameVerIs.y = canvasH / 0x2, gameVerIs.draw(), ctx.restore()));
}

function _0x30b270() {
    var _0x4aa6df = (_0xa2c287 - _0x1534e0) / 0x3e8 / 0x1,
        _0x4aa6df = 0 > _0x4aa6df ? 0 : 0x1 < _0x4aa6df ? 0x1 : _0x4aa6df;
    0 < _0x4aa6df && (ctx.save(), ctx.globalAlpha = _0x4aa6df, _0x30ab4a.setText(_0x8b681b), _0x30ab4a.setColor(_0x2db58f, null, 0, 0), _0x3dc85c = 'SPECTATE MODE' == _0x8b681b ? 0x32 : 0x19, _0x30ab4a.setFontSize(_0x3dc85c * interfS), _0x30ab4a.x = canvasW / 0x2, _0x30ab4a.y = 0.3 * canvasH, _0x30ab4a.draw(), ctx.restore());
    _0x4aa6df = 0 < _0x387cfa - _0x1534e0 ? 0x1 : 0;
    _0x46a35d += 0.05 * (_0x4aa6df - _0x46a35d);
    if (0.01 < _0x46a35d && 0x2 != _0x14fca5 && _0xfb7796) {
        ctx.save();
        ctx.translate(canvasW / 0x2, canvasH * (0.9 + 0.3 * (0x1 - _0x46a35d)));
        if (_0x4aa6df = _0x2f22f9('./img/howToPlay1.png')) {
            var _0x4c6604 = 0.2 * canvasH / _0x4aa6df.height * _0x46a35d;
            ctx.drawImage(_0x4aa6df, -0.5 * _0x4aa6df.width * _0x4c6604, -0x1 * _0x4aa6df.height * _0x4c6604, _0x4aa6df.width * _0x4c6604, _0x4aa6df.height * _0x4c6604);
        }
        ctx.restore();
    }
    _0x4aa6df = _0x109e62 ? 0x1 : 0;
    _0x3bc188 += 0.1 * (_0x4aa6df - _0x3bc188);
    if (0.01 < _0x3bc188) {
        var ae = 0;
        var aee = 0;
        var haveskins = false;
        var skins = [];
        var animals = [];
        if (0 < _0x2a3b6d.length) {
            ctx.save();
            _0x4aa6df = 150;
            _0x4c6604 = !0x1;
            window.matchMedia('(orientation: portrait)').matches && (_0x4c6604 = !0x1);
            window.matchMedia('(orientation: landscape)').matches && (_0x4c6604 = !0);
            for (var _0x1468d5 = _0x3fc2b9 = 0; _0x1468d5 < _0x2a3b6d.length; _0x1468d5++) {
                if(_0x2a3b6d[_0x1468d5].premiumSkinType == 1) skins.push(_0x2a3b6d[_0x1468d5]);
                else animals.push(_0x2a3b6d[_0x1468d5]);
            }
            _0x4c6604 ? 0xf <= animals.length ? _0x4aa6df = 0x78 : 0xa <= animals.length ? _0x4aa6df = 0x82 : 0x5 <= animals.length && (_0x4aa6df = 0x8c) : _0x4aa6df = Math.max(0x50, window.innerWidth / 0x2 / 0x4);
            haveskins = skins.length > 0 ? true : false;
            var _0x4aa6df = _0x4aa6df * interfS,
                _0x3e8ea7 = Math.max(0, animals.length);
            0x7 < animals.length && (_0x3e8ea7 = Math.min(0x6, _0x3e8ea7));
            var _0x5e3a28, _0x4c6604 = 0.25 * canvasH,
                _0x3fe8d8 = 1.15 * _0x4aa6df;
            _0x5e3a28 = canvasW / 0x2 - _0x3e8ea7 * _0x3fe8d8 / 0x2 + _0x3fe8d8 / 0x2;
            var _0x4c51f1 = 0x1,
                _0x491761 = animals.length,
                _0x3fc2b9 = 0.5 + Math.floor(_0x491761 / _0x3e8ea7) / 0xa,
                _0x3fc2b9 = Math.max(0.5, _0x3fc2b9),
                _0x3fc2b9 = Math.min(0.9, _0x3fc2b9);
            ctx.translate(0, canvasH * -_0x3fc2b9 * (0x1 - _0x3bc188));
            _0x3fc2b9 = 0;
            for (var _0x1468d5 = 0; _0x1468d5 < _0x491761; _0x1468d5++) {
                var _0x325d6c = animals[_0x1468d5];
                0 < _0x1468d5 && 0x7 < _0x2a3b6d.length && 0 == _0x1468d5 % 0x6 && (_0x4c51f1++, _0x3fc2b9 = 0, _0x4c6604 += 1.15 * _0x3fe8d8, _0x5e3a28 = _0x491761 - _0x1468d5, _0x3e8ea7 = 0x6 > _0x5e3a28 ? _0x5e3a28 : 0x6, _0x5e3a28 = _0x3e8ea7 * _0x3fe8d8, _0x5e3a28 = canvasW / 0x2 - _0x5e3a28 / 0x2 + _0x3fe8d8 / 0x2);
                _0x325d6c.buttonScaleF = 0 == _0x1468d5 ? 1.2 : 0x1;
                _0x325d6c.w = _0x4aa6df;
                _0x325d6c.h = _0x4aa6df;
                _0x325d6c.x = _0x5e3a28;
                _0x325d6c.y = _0x4c6604;
                _0x5e3a28 += _0x3fe8d8 / 0x2 * _0x325d6c.buttonScaleF + _0x3fe8d8 / 0x2;
                _0x4c51f1 < _0x435386.length && _0x325d6c.setHotKey(_0x435386[_0x4c51f1 - 0x1][_0x3fc2b9].toUpperCase());
                _0x3fc2b9++;
            }
            let aery = _0x3fe8d8;
            _0x4aa6df = 100;
            window.matchMedia('(orientation: portrait)').matches && (_0x4c6604 = !0x1);
            window.matchMedia('(orientation: landscape)').matches && (_0x4c6604 = !0);
            _0x4c6604 ? _0x4aa6df = 80 : _0x4aa6df = 80;
            _0x3fe8d8 = 1.15 * _0x4aa6df;
            _0x4c6604 = 0.35 * canvasH;
            for(let i = 0; i < _0x4c51f1; i++) _0x4c6604 += aery;
            _0x4c51f1++, _0x3fc2b9 = 0;
            _0x3e8ea7 = Math.max(0, skins.length);
            11 < skins.length && (_0x3e8ea7 = Math.min(10, _0x3e8ea7));
            _0x5e3a28 = canvasW / 0x2 - _0x3e8ea7 * _0x3fe8d8 / 0x2 + _0x3fe8d8 / 0x2;
            for (var _0x1468d5 = 0; _0x1468d5 < skins.length; _0x1468d5++) {
                var _0x325d6c = skins[_0x1468d5];
                0 < _0x1468d5 && 11 < skins.length && 0 == _0x1468d5 % 10 && (_0x4c6604 += 1.15 * _0x3fe8d8, _0x5e3a28 = skins.length - _0x1468d5, _0x3e8ea7 = 10 > _0x5e3a28 ? _0x5e3a28 : 10, _0x5e3a28 = _0x3e8ea7 * _0x3fe8d8, _0x5e3a28 = canvasW / 0x2 - _0x5e3a28 / 0x2 + _0x3fe8d8 / 0x2);
                0 < _0x1468d5 && 7 < skins.length && 0 == _0x1468d5 % 6 && (_0x4c51f1++, _0x3fc2b9 = 0);
                _0x325d6c.buttonScaleF = 0 == _0x1468d5 ? 1.2 : 0x1;
                _0x325d6c.w = _0x4aa6df;
                _0x325d6c.h = _0x4aa6df;
                _0x325d6c.x = _0x5e3a28;
                _0x325d6c.y = _0x4c6604;
                _0x5e3a28 += _0x3fe8d8 / 0x2 * _0x325d6c.buttonScaleF + _0x3fe8d8 / 0x2;
                _0x4c51f1 < _0x435386.length && _0x325d6c.setHotKey(_0x435386[_0x4c51f1 - 0x1][_0x3fc2b9].toUpperCase());
                _0x3fc2b9++;
            }
            ctx.globalAlpha = _0x3bc188;
            for (_0x1468d5 = 0; _0x1468d5 < animals.length; _0x1468d5++) _0x325d6c = animals[_0x1468d5], _0x325d6c.imgSizeF = 0.5, _0x325d6c.draw();
            for (_0x1468d5 = 0; _0x1468d5 < skins.length; _0x1468d5++) _0x325d6c = skins[_0x1468d5], _0x325d6c.imgSizeF = 0.5, _0x325d6c.draw();
        }
        _0x4aa6df = Math.max(0, _0x4a34c9 - _0x1534e0) / 0x3e8;
        _0x4c6604 = 0x1;
        0 != _0x4aa6df && 0x8 > _0x4aa6df && (_0x4c6604 = 0.7 + 0.3 * Math.sin(0x2 * Math.PI / 1.2 * (_0x1534e0 / 0x3e8)));
        ctx.save();
        ctx.globalAlpha = _0x3bc188 * _0x4c6604;
        ctx.fillStyle = 0 != _0x4aa6df && 0x8 > _0x4aa6df ? 'red' : 'white';
        ctx.font = 0x19 * interfS + 'px Arial';
        ctx.lineWidth = 0x1;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        0x2 != _0x14fca5 && (ctx.shadowOffsetX = 0x1, ctx.shadowOffsetY = 0x1, ctx.shadowColor = 'black');
        _0x4aa6df = 0 < _0x4aa6df ? ' (auto in ' + Math.trunc(_0x4aa6df) + 's)' : '';
        var lowestY = 400;
        for(var i in _0x2a3b6d) {
            if(_0x2a3b6d[i].y < lowestY) lowestY = _0x2a3b6d[i].y;
        }
        ctx.fillText(_0x26cd40 ? 'Choose which animal to spawn as:' : 'Choose an upgrade:' + _0x4aa6df, canvasW / 0x2, lowestY - _0x2a3b6d[0].w / 0x2 - 25 * pixelRat);
        if(haveskins) {
            let y = false;
            if(skins[0]) y = true;
            if(y) ctx.fillText('Choose from Premium Skins:', canvasW / 0x2, skins[0].y - _0x2a3b6d[0].w / 0x2 - 25 * pixelRat);
        }
        ctx.restore();
        ctx.restore();
    }
    null != _0x1bcd79 && _0x1bcd79.interface();
    _0x51e1cf();
    null != _0x2ff0f0 && _0x2ff0f0.width && ctx.drawImage(_0x2ff0f0, canvasW / 0x2 - _0x2ff0f0.width / 0x2, _0x3e1652, _0x2ff0f0.width, _0x2ff0f0.height);
    _0x2e9c87();
    _0x4c4bcb();
    _0x2e83d6();
}

function _0x4c4bcb() {
    if (null != _0x1bcd79 && _0x1bcd79.interfaceButtons)
        for (var _0x2b8818 = 0; _0x2b8818 < _0x1bcd79.interfaceButtons.length; _0x2b8818++) {
            var _0xc120bc = _0x1bcd79.interfaceButtons[_0x2b8818];
            _0xc120bc.isVisible && _0xc120bc.draw();
        }
}
var minimapW = 0xfa,
    minimapH = 0xfa,
    oceanWid = 0,
    arcticW = 0,
    arcticH = 0;

function generateMinimap(msg) {
    minimapW = gameW / gameH * minimapH;
    _0x3c1394 || (_0x3c1394 = document.createElement('canvas'));
    _0x3c1394.width = minimapW;
    _0x3c1394.height = minimapH;
    var _0x325e3a = _0x3c1394.getContext('2d');
    _0x325e3a.globalAlpha = 0.35;
    _0x325e3a.fillStyle = '#000000';
    _0x325e3a.fillRect(0, 0, _0x3c1394.width, _0x3c1394.height);
    var _0x2ec974 = minimapW / 0xc8,
        _0x16a965 = minimapH / 0xc8;
    oceanWid = msg.readUInt16();
    oceanH = msg.readUInt16();
    arcticW = msg.readUInt16();
    arcticH = msg.readUInt16();
    desertW = msg.readUInt16();
    desertH = msg.readUInt16();
    landW = msg.readUInt16();
    landH = msg.readUInt16();
    for (var _0x23281c = 0; 0x2 > _0x23281c; _0x23281c++) {
        _0x325e3a.fillStyle = _0x2f824d;
        _0x325e3a.globalAlpha = 0.5;
        var _0x50516f = minimapW / gameW;
        0 == _0x23281c ? _0x325e3a.fillRect(0 * _0x50516f, arcticH * _0x50516f, oceanWid * _0x50516f, oceanH * _0x50516f) : _0x325e3a.fillRect((gameW - oceanWid) * _0x50516f, arcticH * _0x50516f, oceanWid * _0x50516f, oceanH * _0x50516f);
    }
    _0x325e3a.fillStyle = 'white';
    _0x325e3a.globalAlpha = 0.5;
    _0x50516f = minimapW / gameW;
    _0x325e3a.fillRect((gameW / 0x2 - arcticW / 0x2) * _0x50516f, 0 * _0x50516f, arcticW * _0x50516f, arcticH * _0x50516f);
    _0x325e3a.fillStyle = '#c8b745';
    _0x325e3a.globalAlpha = 0.5;
    _0x50516f = minimapW / gameW;
    _0x325e3a.fillRect((gameW / 0x2 - desertW / 0x2) * _0x50516f, (gameH - desertH) * _0x50516f, desertW * _0x50516f, desertH * _0x50516f);
    _0x325e3a.fillStyle = '#26A73A';
    _0x325e3a.globalAlpha = 0.5;
    _0x50516f = minimapW / gameW;
    _0x325e3a.fillRect((gameW / 0x2 - landW / 0x2) * _0x50516f, arcticH * _0x50516f, landW * _0x50516f, landH * _0x50516f);
    _0x50516f = msg.readUInt16();
    _0x325e3a.fillStyle = _0x2f824d;
    _0x325e3a.globalAlpha = 0.5;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) {
        var _0x3f1f2d = msg.readUInt16()*(minimapW / gameW),
            _0x3b5929 = msg.readUInt16()*(minimapH / gameH),
            _0x372811 = msg.readUInt16()*(minimapW / gameW),
            _0x3dcd92 = msg.readUInt16()*(minimapH / gameH);
        _0x325e3a.globalAlpha = 0.5;
        _0x325e3a.fillRect(_0x372811, _0x3dcd92-(_0x3b5929/2), _0x3f1f2d, _0x3b5929);
    }
    _0x50516f = msg.readUInt16(); // volcano
    _0x325e3a.fillStyle = _0x1a1848;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) {
        _0x3f1f2d = msg.readUInt16()*5.0;
        _0x3b5929 = msg.readUInt16()*(minimapW / gameW);
        _0x372811 = msg.readUInt16()*(minimapH / gameH);
        _0x325e3a.beginPath();
        _0x325e3a.arc(_0x3b5929, _0x372811, Math.max(0x1, minimapW / gameW * _0x3f1f2d), 0, 0x2 * Math.PI);
        _0x325e3a.fill();
    }
    _0x50516f = msg.readUInt16(); // lakes
    _0x325e3a.fillStyle = _0x1654e7;
    _0x325e3a.globalAlpha = 0.5;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) {
        _0x3f1f2d = msg.readUInt16()*(minimapW / gameW);
        _0x3b5929 = msg.readUInt16()*(minimapH / gameH);
        _0x372811 = msg.readUInt16()*5;
        _0x325e3a.beginPath();
        _0x325e3a.arc(_0x3f1f2d, _0x3b5929, Math.max(0x1, minimapW / gameW * _0x372811), 0, 0x2 * Math.PI);
        _0x325e3a.fill();
    }
    _0x50516f = msg.readUInt16(); // mud
    _0x325e3a.fillStyle = '#907A33';
    _0x325e3a.globalAlpha = 0.7;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) {
        _0x3f1f2d = msg.readUInt16()*(minimapW / gameW);
        _0x3b5929 = msg.readUInt16()*(minimapH / gameH);
        _0x372811 = msg.readUInt16()*5;
        _0x325e3a.beginPath();
        _0x325e3a.arc(_0x3f1f2d, _0x3b5929, Math.max(0x1, minimapW / gameW * _0x372811), 0, 0x2 * Math.PI);
        _0x325e3a.fill();
    }
    _0x50516f = msg.readUInt16(); // iceareas
    _0x325e3a.fillStyle = '#7BB7BB';
    _0x325e3a.globalAlpha = 0.85;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) {
        _0x3f1f2d = msg.readUInt16()*(minimapW / gameW);
        _0x3b5929 = msg.readUInt16()*(minimapH / gameH);
        _0x372811 = msg.readUInt16()*5;
        _0x325e3a.beginPath();
        _0x325e3a.arc(_0x3f1f2d, _0x3b5929, Math.max(0x1, minimapW / gameW * _0x372811), 0, 2 * Math.PI);
        _0x325e3a.fill();
    }
    // _0x50516f = msg.readUInt16(); // icelakes
    // _0x325e3a.fillStyle = _0x1654e7;
    // _0x325e3a.globalAlpha = 0.85;
    // for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) {
    //     _0x3f1f2d = msg.readUInt16()*(minimapW / gameW);
    //     _0x3b5929 = msg.readUInt16()*(minimapH / gameH);
    //     _0x372811 = msg.readUInt16()*5;
    //     _0x325e3a.beginPath();
    //     _0x325e3a.arc(_0x3f1f2d, _0x3b5929, Math.max(0x1, minimapW / gameW * _0x372811), 0, 4 * Math.PI);
    //     _0x325e3a.fill();
    // }
    _0x50516f = msg.readUInt16();
    _0x325e3a.fillStyle = _0x44bd8a;
    _0x325e3a.globalAlpha = 0x1;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) {
        let type = msg.readUInt8();
        if(type == 0) _0x325e3a.fillStyle = '#00bf32';
        if(type == 1) _0x325e3a.fillStyle = _0x493161;
        if(type == 2) _0x325e3a.fillStyle = _0x205ed4;
        if(type == 4) _0x325e3a.fillStyle = _0x54901d;
        _0x3f1f2d = msg.readUInt16()*(minimapW / gameW);
        _0x3b5929 = msg.readUInt16()*(minimapH / gameH);
        _0x372811 = msg.readUInt16()*5;
        _0x325e3a.beginPath();
        _0x325e3a.arc(_0x3f1f2d, _0x3b5929, Math.max(0x1, minimapW / gameW * _0x372811), 0, 0x2 * Math.PI);
        _0x325e3a.fill();
    }
    _0x50516f = msg.readUInt16();
    _0x325e3a.fillStyle = '#A89937';
    _0x325e3a.globalAlpha = 0.6;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) { // islands
        _0x3f1f2d = msg.readUInt16()*(minimapW / gameW);
        _0x3b5929 = msg.readUInt16()*(minimapH / gameH);
        _0x372811 = msg.readUInt16()*5;
        _0x325e3a.beginPath();
        _0x325e3a.arc(_0x3f1f2d, _0x3b5929, Math.max(0x1, minimapW / gameW * _0x372811), 0, 0x2 * Math.PI);
        _0x325e3a.fill();
    }
    _0x50516f = msg.readUInt16();
    _0x325e3a.fillStyle = _0x2c4174;
    _0x325e3a.globalAlpha = 0x1;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) { //food spots
        _0x3f1f2d = msg.readUInt16()*(minimapW / gameW);
        _0x3b5929 = msg.readUInt16()*(minimapH / gameH);
        _0x325e3a.beginPath();
        _0x325e3a.arc(_0x3f1f2d, _0x3b5929, Math.max(2.5, minimapW / gameW * 0x28), 0, 0x2 * Math.PI);
        _0x325e3a.fill();
    }
    _0x50516f = msg.readUInt16();
    _0x325e3a.fillStyle = _0x1654e7;
    _0x325e3a.globalAlpha = 0x1;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) { //water spots
        _0x3f1f2d = msg.readUInt16()*(minimapW / gameW);
        _0x3b5929 = msg.readUInt16()*(minimapH / gameH);
        _0x325e3a.beginPath();
        _0x325e3a.arc(_0x3f1f2d, _0x3b5929, Math.max(2.5, minimapW / gameW * 0x32), 0, 0x2 * Math.PI);
        _0x325e3a.fill();
    }
    _0x50516f = msg.readUInt16();
    _0x325e3a.fillStyle = _0x2221fa;
    _0x325e3a.globalAlpha = 0.5;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) { //quick sand
        _0x3f1f2d = msg.readUInt16()*(minimapW / gameW);
        _0x3b5929 = msg.readUInt16()*(minimapH / gameH);
        _0x372811 = msg.readUInt16()*5;
        _0x325e3a.beginPath();
        _0x325e3a.arc(_0x3f1f2d, _0x3b5929, Math.max(0x1, minimapW / gameW * _0x372811), 0, 0x2 * Math.PI);
        _0x325e3a.fill();
    }
    _0x50516f = msg.readUInt16();
    _0x325e3a.fillStyle = _0x9e874d;
    _0x325e3a.globalAlpha = 0.5;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) { //oasis
        _0x3f1f2d = msg.readUInt16()*(minimapW / gameW);
        _0x3b5929 = msg.readUInt16()*(minimapH / gameH);
        _0x372811 = msg.readUInt16()*5;
        _0x325e3a.beginPath();
        _0x325e3a.arc(_0x3f1f2d, _0x3b5929, Math.max(0x1, minimapW / gameW * _0x372811), 0, 0x2 * Math.PI);
        _0x325e3a.fill();
    }
    _0x50516f = msg.readUInt16();
    _0x325e3a.fillStyle = '#07631f';
    _0x325e3a.globalAlpha = 0.5;
    for (_0x23281c = 0; _0x23281c < _0x50516f; _0x23281c++) { //forest
        _0x3f1f2d = msg.readUInt16() * (minimapW / gameW);
        _0x3b5929 = msg.readUInt16() * (minimapH / gameH);
        _0x372811 = msg.readUInt16() * (minimapW / gameW);
        _0x3dcd92 = msg.readUInt16() * (minimapH / gameH);
        _0x325e3a.globalAlpha = 0.5;
        _0x325e3a.fillRect(_0x372811 - _0x3f1f2d / 0x2, _0x3dcd92 - _0x3b5929 / 0x2, _0x3f1f2d, _0x3b5929);
    }
    
}
var _0x52b2bc = [],
    _0x521271 = 0,
    _0x3c64aa = 0;

function interface_XPAmountUpdate(_0x37ff0a, _0x3d0d26) {
    var _0x13a7f2 = _0x37ff0a - _0x521271;
    0 != _0x37ff0a - _0x521271 && 0.7 < (_0x1534e0 - _0x3c64aa) / 0x3e8 && (_0x521271 = _0x37ff0a, _0x3c64aa = _0x1534e0, _0x13a7f2 = new _0x14379c(_0x13a7f2, " XP"), _0x52b2bc.push(_0x13a7f2));
}
var lastPopupEXPAm = 0;
function interface_onEXPUpdate(newAmount) {
    var expGained = newAmount - lastPopupEXPAm;
    if(expGained && isCoinsShowing) {
        if (newAmount - lastPopupEXPAm != 0 && (_0x1534e0 - _0x3c64aa) / 1000.0 > 0.7) {
            //over 0.5s since last popup
            lastPopupEXPAm = newAmount;
            _0x3c64aa = _0x1534e0;
        
            //new popup
            var newPop = new _0x14379c(expGained, " EXP", "orange");
            _0x52b2bc.push(newPop);
        }
    }
}
var lastPopupCoinsAm = 0;
function interface_onCoinsUpdate(newAmount) {
    var coinsGained = newAmount - lastPopupCoinsAm;
    if(coinsGained && isCoinsShowing) {
        if (newAmount - lastPopupCoinsAm != 0 && (_0x1534e0 - _0x3c64aa) / 1000.0 > 0.7) {
            //over 0.5s since last popup
            lastPopupCoinsAm = newAmount;
            _0x3c64aa = _0x1534e0;
        
            //new popup
            var newPop = new _0x14379c(coinsGained, (coinsGained > 1 ? " COINS" : " COIN"), "yellow");
            _0x52b2bc.push(newPop);
        }
    }
}

function _0x4ef18a() {
    _0x3a69b9 && null != _0x1bcd79 && _0x1bcd79.drawLeaderboard();
}

function _0x34eb56() {
    if (_0x3259ae && 0x1f4 <= canvasW / pixelRat && _0x3c1394 && _0x3c1394.width && isAliveInGame) {
        ctx.drawImage(_0x3c1394, canvasW - (0xa * pixelRat + _0x3c1394.width * interfS), 0xa * pixelRat, minimapW * interfS, minimapH * interfS);
        var _0x1e5984 = gameObjsByID[myPlayerID];

        
        if(pumps.length != 0){
        pumps.forEach(p => {
                _0x42ddea(p, 'orange', 0x1);

            })
        }

            

        
        
        if(dots.length != 0)
            dots.forEach(d => {
                    _0x42ddea(d, d.color, 0x1);
            })
        if(dots.filter(d => d.id == myPlayerID).length <= 0) _0x1e5984 && _0x42ddea(_0x1e5984, 'white', 0x1);
        null != yesdDot && yesdDot.id != myPlayerID && _0x42ddea(yesdDot, 'orange', 0x1);
        null != maxDot && maxDot.id != myPlayerID && _0x42ddea(maxDot, 'cyan', 0x1);

        
    }
}

function _0x42ddea(_0x101c08, _0x1792c5, _0x49c586) {
    _0x101c08 && (ctx.fillStyle = _0x1792c5, ctx.beginPath(), ctx.arc(canvasW - (0xa * pixelRat + _0x3c1394.width * interfS) + _0x101c08.x * _0x3c1394.width * interfS / gameW, 0xa * pixelRat + _0x101c08.y * _0x3c1394.height * interfS / gameH, pixelRat * Math.max(0x3, _0x3c1394.width / gameW * _0x101c08.rad) * _0x49c586, 0, 0x2 * Math.PI), ctx.fill());

}

function _0x18a1ed(_0x3f9f7d, _0x38039b, _0x4e8a02) {
    _0x3f9f7d && (ctx.fillStyle = _0x38039b, ctx.beginPath(), ctx.arc(canvasW - (0xa * pixelRat + _0x3c1394.width * interfS) + _0x3f9f7d.x * _0x3c1394.width * interfS / gameW, 0xa * pixelRat + _0x3f9f7d.y * _0x3c1394.height * interfS / gameH, pixelRat * Math.max(0x2, _0x3f9f7d.rad) * _0x4e8a02, 0, 0x2 * Math.PI), ctx.fill());
}

function _0x4e87e5(_0x348cda, _0x1612c2, _0x245cf1) {
    _0xef3376 = null;
    if (0 != _0x348cda.length) {
        _0xef3376 = document.createElement('canvas');
        _0x1612c2 = _0xef3376.getContext('2d');
        var _0xf79bbb;
        _0xf79bbb = 0x37 + 0x16 * _0x348cda.length;
        _0xef3376.width = 0x10e;
        _0xef3376.height = _0xf79bbb;
        _0x1612c2.globalAlpha = 0.2;
        _0x1612c2.fillStyle = '#000000';
        _0x1612c2.fillRect(0, 0, _0xef3376.width, _0xef3376.height);
        _0x1612c2.globalAlpha = 0x1;
        _0x1612c2.fillStyle = '#FFFFFF';
        _0xf79bbb = _0xfa658b.name;
        _0x1612c2.font = '24px Arial';
        0x2 != _0x14fca5 && (_0x1612c2.shadowOffsetX = 0x1, _0x1612c2.shadowOffsetY = 0x1);
        _0x1612c2.shadowColor = 'black';
        _0x1612c2.fillText(_0xf79bbb, _0xef3376.width / 0x2 - _0x1612c2.measureText(_0xf79bbb).width / 0x2, 0x28);
        var _0xb11ee2;
        _0x1612c2.textAlign = 'left';
        _0x1612c2.font = '17px Arial';
        for (_0xb11ee2 = 0; _0xb11ee2 < _0x348cda.length; ++_0xb11ee2) _0xf79bbb = _0x47691c ? '' : _0x348cda[_0xb11ee2].name || 'mrmodpack.ml', _0x245cf1 == _0x348cda[_0xb11ee2].rank ? (_0x1612c2.fillStyle = '#FEED92', _0x47691c && (_0xf79bbb = 'you')) : _0x1612c2.fillStyle = _0x348cda[_0xb11ee2].col, _0xf79bbb = _0x348cda[_0xb11ee2].rank + '. ' + _0xf79bbb + ' (' + _0x3dd6a4(_0x348cda[_0xb11ee2].score) + ')', _0x1612c2.fillText(_0xf79bbb, 0xf, 0x41 + 0x16 * _0xb11ee2);
    }
}
var _0x554362 = !0;

function _0x385867(_0x559969) {
    _0x554362 = _0x559969;
    document.getElementById('startMenuWrapper').style.display = _0x559969 ? 'block' : 'none';
    _0x345651(_0x559969);
}

function _0x390400() {}

function _0x510560() {
    _0x385867(!0);
    document.getElementById('moneyRectangle').style.marginTop = '55px';
    document.getElementById('mopeMenu').style.display = 'block';
    document.getElementById('endScreen').style.display = 'none';
}

function _0x2447de() {}

function _0x2303db() {
    document.getElementById('mopeMenu').style.display = 'block';
}

function _0x415460() {
    console.log('client objs reset!');
    gameObjs = [];
    gameObjsByID = {};
    _0x464b8a = [];
}
var _0x17faa5 = function (_0x5d89d5, _0x502384, _0x119e8b, _0x4e385d, _0x4687fe) {
    _0x5d89d5.fillText(_0x502384, _0x4e385d, _0x4687fe);
    _0x5d89d5.fillText(': ' + _0x119e8b, _0x4e385d + 0x78, _0x4687fe);
};

function _0x55e453() {
    if (_0x186eed && !disable1v1Button) {
        var _0x4f43a0 = new fidjiaslfo(0x2);
        _0x4f43a0.writeUInt8(0x34);
        _0x4f43a0.writeUInt8(0);
        wsSendMsg(_0x4f43a0);
    }
}

function _0x4812c0() {
    _0x4381a8 ? null == _0x4dd1a2 ? (_0x4dd1a2 = new _0x16f092(0, 0, 0x3c * interfS, 0x3c * interfS, 'Invite for 1v1', 0x1e), _0x4dd1a2.showLabeleOnHover = !0, _0x4dd1a2.textShadow = !0, _0x4dd1a2.drawTextOnHowever = function () {
        0.01 < _0x3692f0 || this.drawText(this.w / 0x2, this.h + this.h / 0x2);
    }, _0x4dd1a2.onClick = function () {
        0.01 < _0x3692f0 || this.clicked || (this.isVisible = !0x1, this.clicked = !0, this.isHighLighted = !0x1, _0x55e453());
    }, _0x4dd1a2.onMouseMove = function () {}, _0x4dd1a2.update = function () {
        this.x = canvasW / 0x2 - this.w / 0x2;
        this.y = 0x2d * interfS + this.h / 0x2;
        if (gameMode == 2) this.y += 50 * interfS;
    }, _0x4dd1a2.onInterfaceReset = function () {
        this.isVisible = !0x1;
        _0x4dd1a2 = null;
    }, _0x4dd1a2.onAfterDraw = function () {
        var _0x57affa = _0x2f22f9('img/icons/1v1.png');
        if (_0x57affa) {
            ctx.save();
            var _0x25c75e = 0.8 * this.w,
                _0x5d8fe2 = (this.w - _0x25c75e) / 0x2;
            ctx.drawImage(_0x57affa, this.x + _0x5d8fe2, this.y + _0x5d8fe2, _0x25c75e, _0x25c75e);
            ctx.restore();
        }
        if (0.01 < _0x3692f0) {
            this.alpha = 0.1;
            rechargeTotalT = 0x3a98;
            rechargeEndT = +new Date() + 0x3e8 * _0x3692f0;
            _0x57affa = Math.max(0, rechargeEndT - _0x1534e0) / rechargeTotalT;
            ctx.save();
            ctx.fillStyle = '#000000';
            var _0x25c75e = this.x,
                _0x5d8fe2 = this.y,
                _0x547562 = this.w,
                _0x656572 = 0.5 * this.h;
            ctx.globalAlpha = 0.1;
            ctx.fillRect(_0x25c75e, _0x5d8fe2 + _0x656572 / 0x2, _0x547562, _0x656572);
            ctx.globalAlpha = 0x1;
            ctx.fillStyle = '#F3C553';
            ctx.fillRect(_0x25c75e, _0x5d8fe2 + _0x656572 / 0x2, _0x547562 * _0x57affa, _0x656572);
            ctx.restore();
        } else this.alpha = disable1v1Button ? 0.1 : 0x1;
    }, _0x1bcd79.interfaceButtons.push(_0x4dd1a2)) : null != _0x4dd1a2 && (_0x4dd1a2.isVisible = _0x186eed && !_0x109e62, _0x4dd1a2.isVisible && (_0x4dd1a2.clicked = !0x1), _0x4dd1a2.draw()) : _0x4dd1a2 = null;
}
var _0x19e23a = 0,
    _0x2ff0f0 = null,
    _0x3e1652 = 0;

var Piechart = function (options) {
    this.options = options;
    this.radius = options.radius;
    this.pad = options.pad;
    this.canvas = options.canvas;
    this._ctx = this.canvas.getContext("2d");
    this.colors = options.colors;
    this.radius = Math.min(this.canvas.width / 2, this.canvas.height / 2);
    this.draw = function () {
        var total_value = 0;
        var color_index = 0;
    
        this._ctx.save();
        this._ctx.globalAlpha = 0.3;
        this.drawCircle(
        this.canvas.width / 2 - this.pad / 2,
        this.canvas.height / 2 - this.pad / 2,
        this.radius - this.pad,
        "white"
        );
        this._ctx.restore();
    
        for (var categ in this.options.data) {
        var val = this.options.data[categ];
        total_value += val;
        }
        var start_angle = 0;
    
        for (categ in this.options.data) {
        this._ctx.save();
        this._ctx.lineWidth = 4;
        this._ctx.strokeStyle = "white";
        this._ctx.globalAlpha = 0.3;
        var rf = 0;
        if (teamID == categ) {
            this._ctx.globalAlpha = 0.6;
            rf = 8;
        }
        val = this.options.data[categ];
        var slice_angle = (2 * Math.PI * val) / total_value;
    
        this.drawPieSlice(
            this.canvas.width / 2 - this.pad / 2,
            this.canvas.height / 2 - this.pad / 2,
            this.radius - this.pad,
            start_angle,
            start_angle + slice_angle,
            this.colors[categ],
            rf
        );
        this._ctx.restore();
    
        start_angle += slice_angle;
        color_index++;
        }
    };
    
    this.drawPieSlice = function (
        centerX,
        centerY,
        radius,
        startAngle,
        endAngle,
        color,
        rf
    ) {
        this._ctx.fillStyle = color;
        this._ctx.beginPath();
        this._ctx.moveTo(centerX, centerY);
        this._ctx.arc(centerX, centerY, radius + rf, startAngle, endAngle);
        this._ctx.closePath();
        this._ctx.fill();
        if (rf > 0) this._ctx.stroke();
    };
    
    this.drawCircle = function (centerX, centerY, radius, color) {
        this._ctx.fillStyle = color;
        this._ctx.beginPath();
        this._ctx.moveTo(centerX, centerY);
        this._ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
        this._ctx.closePath();
        this._ctx.fill();
    };
};

function _0x51e1cf() {
    if (0 == _0x3d325c.length) _0x53cc45(), _0x2ff0f0 = null;
    else if (null == _0x2ff0f0 && (_0x2ff0f0 = document.createElement('canvas')), null != _0x2ff0f0) {
        var _0x2187f8 = _0x2ff0f0.getContext('2d'),
            _0x153f7f = (325 + 80) * _0x3d325c.length;
        _0x2ff0f0.width = 650 * interfS;
        _0x2ff0f0.height = (_0x153f7f + 0xa) * interfS;
        _0x3e1652 = 0x12c;
        _0x2187f8.globalAlpha = 0.2;
        _0x2187f8.fillStyle = '#000000';
        _0x2187f8.fillRect(0, 0, _0x2ff0f0.width, _0x2ff0f0.height);
        _0x2187f8.fillStyle = '#000000';
        _0x2187f8.fillRect(0x5, 0x5, _0x2ff0f0.width - 0xa, _0x2ff0f0.height - 0xa);
        var _0x2c3dab;
        _0x2187f8.globalAlpha = 0x1;
        _0x2187f8.fillStyle = '#FFFFFF';
        _0x2187f8.font = '30px Arial';
        _0x2c3dab = 0x3c;
        var _0x25bbe1 = '1v1 REQUEST';
        _0x2187f8.font = '30px Arial';
        _0x2187f8.fillText(_0x25bbe1, _0x2ff0f0.width / 0x2 - _0x2187f8.measureText(_0x25bbe1).width / 0x2, _0x2c3dab);
        _0x153f7f = 0x64;
        for (r = 0; r < _0x3d325c.length; r++) {
            var _0x170ea5 = _0x3d325c[r];
            _0x2187f8.save();
            _0x2187f8.fillStyle = 'red';
            _0x2187f8.globalAlpha = 0.5;
            _0x2187f8.fillRect(_0x2ff0f0.width - 0x3c, 0xa, 0x32, 0x32);
            _0x2187f8.restore();
            _0x2187f8.save();
            _0x25bbe1 = '' + _0x170ea5.dur;
            _0x2187f8.font = '30px Arial';
            _0x2187f8.fillText(_0x25bbe1, _0x2ff0f0.width - 0x23 - _0x2187f8.measureText(_0x25bbe1).width / 0x2, 0x2d);
            _0x2187f8.restore();
            _0x2187f8.font = '20px Arial';
            _0x25bbe1 = _0x170ea5.requestee + ' invites you for 1v1 ';
            _0x2187f8.fillText(_0x25bbe1, _0x2ff0f0.width / 0x2 - _0x2187f8.measureText(_0x25bbe1).width / 0x2, _0x153f7f);
            _0x25bbe1 = 0x14;
            _0x2c3dab = _0x153f7f + 0x28;
            _0x17faa5(_0x2187f8, 'Animal', '', _0x25bbe1, _0x2c3dab);
            ani = _0x170ea5.aniType;
            var _0x41cf8d = _0x49883b(ani);
            if (_0x41cf8d = _0x2f22f9(_0x41cf8d)) _0x2187f8.save(), _0x2187f8.drawImage(_0x41cf8d, _0x25bbe1 + 0x82, _0x2c3dab - 0x1e, 0x32, 0x32), _0x2187f8.restore();
            _0x25bbe1 += 0xd2;
            _0x17faa5(_0x2187f8, '1v1 Wins', _0x170ea5.wins, _0x25bbe1, _0x2c3dab);
            _0x2c3dab += 40;
            _0x25bbe1 = 20;
            var teamLabel = gameMode == 3 ? "Team" : "Kills";
            var teamVal = gameMode == 3 ? "" : _0x170ea5.wins;
            _0x17faa5(_0x2187f8, teamLabel, teamVal, _0x25bbe1, _0x2c3dab);
            if (gameMode == _0xc2ceb0) {
                _0x2187f8.save();
                var _0x41cf8d = _0x25bbe1 + 0x9b,
                    _0xf4e40d = _0x2c3dab - 0x5;
                _0x2187f8.fillStyle = _0x1bcd79.teamColors[_0x170ea5.teamID];
                _0x2187f8.beginPath();
                _0x2187f8.arc(_0x41cf8d, _0xf4e40d, 0xa, 0, 0x2 * Math.PI);
                _0x2187f8.fill();
                _0x2187f8.restore();
            }
            _0x25bbe1 += 0xd2;
            _0x153f7f += 0x64;
            _0x2c3dab = _0x6d2537(_0x170ea5, 'Accept');
            _0x2c3dab.yPos = _0x153f7f;
            _0x2c3dab.update = function () {
                this.x = canvasW / 0x2 - 0x8c;
                this.y = _0x3e1652 + this.yPos + 0xa;
            };
            _0x2c3dab = _0x6d2537(_0x170ea5, 'Reject');
            _0x2c3dab.yPos = _0x153f7f;
            _0x2c3dab.update = function () {
                this.x = canvasW / 0x2 - 0x28;
                this.y = _0x3e1652 + this.yPos + 0xa;
            };
            _0x170ea5 = _0x6d2537(_0x170ea5, 'Ignore');
            _0x170ea5.yPos = _0x153f7f;
            _0x170ea5.update = function () {
                this.x = canvasW / 0x2 + 0x3c;
                this.y = _0x3e1652 + this.yPos + 0xa;
            };
            _0x153f7f += 0x50;
        }
    }
}

function _0x6d2537(_0x384f1b, _0x5f2b6d) {
    for (i = 0; i < _0x1bcd79.interfaceButtons.length; i++)
        if (_0x2c7df3 = _0x1bcd79.interfaceButtons[i], _0x2c7df3.reqID == _0x384f1b.id && _0x2c7df3.label == _0x5f2b6d) return _0x2c7df3;
    var _0x2c7df3 = new _0x16f092(0, 0, 80, 40, _0x5f2b6d, 20);
    _0x2c7df3.reqID = _0x384f1b.id;
    _0x2c7df3.reqAction = _0x2c7df3.onClick = function () {
        this.isHighLighted = !0x1;
        var _0x384f1b = 0;
        switch (this.label) {
        case 'Accept':
            _0x384f1b = 0x1;
            break;
        case 'Reject':
            _0x384f1b = 0;
            break;
        case 'Ignore':
            _0x384f1b = 0x2;
            break;
        }
        var _0x5f2b6d = new fidjiaslfo(0x3);
        _0x5f2b6d.writeUInt8(53);
        _0x5f2b6d.writeUInt8(_0x384f1b);
        _0x5f2b6d.writeUInt8(this.reqID);
        wsSendMsg(_0x5f2b6d);
    };
    _0x2c7df3.onInterfaceReset = function () {
        this.isVisible = !0;
    };
    _0x2c7df3.isVisible = !0;
    _0x1bcd79.interfaceButtons.push(_0x2c7df3);
    return _0x2c7df3;
}

function _0x53cc45() {
    if (null != _0x1bcd79 && null != _0x1bcd79.interfaceButtons)
        for (d = 0; d < _0x1bcd79.interfaceButtons.length; d++) {
            var _0x26dc86 = _0x1bcd79.interfaceButtons[d];
            if (void 0 !== _0x26dc86.reqID) {
                var _0x2fac67 = !0,
                    _0x7b9e99 = !0x1;
                for (r = 0; r < _0x3d325c.length; r++)
                    if (_0x3d325c[r].id == _0x26dc86.reqID) {
                        _0x7b9e99 = !0;
                        break;
                    } _0x7b9e99 || (_0x2fac67 = !0x1);
                if (!_0x2fac67 || _0x1419f3) _0x26dc86 = _0x1bcd79.interfaceButtons.indexOf(_0x26dc86), -0x1 != _0x26dc86 && _0x1bcd79.interfaceButtons.splice(_0x26dc86, 0x1);
            }
        }
}
var _0x5d8b2a = 0xa * pixelRat,
    _0x180b51 = 0xf * pixelRat,
    _0x3c4866 = !0x1,
    _0xf01867 = '',
    _0x59eb18 = '',
    _0x69dc03 = null,
    _0x3ec1fe = '';

function _0x1aa6a3() {
    var _0x4d087d = '' + _0x59eb18;
    0 == _0x4d087d.length && (_0x4d087d = 'mrmodpack.ml');
    _0x4d087d = (_0x3c4866 ? ' ALL TIME ' : '') + '1v1 Pro: ' + _0x4d087d + ' (WINS: ' + _0xf01867 + ') SINCE ' + _0x3ec1fe;
    null == _0x69dc03 ? (_0x69dc03 = new _0x120450(0x14, '#FFFFFF'), _0x69dc03.strokeW = 0x2, _0x69dc03.multiLine = !0, _0x69dc03.renderScale = 0x2, _0x69dc03.setText(_0x4d087d), _0x69dc03.setPos = function (_0x320449, _0x62f1df) {
        this.x += _0x320449 / 0x2;
    }) : (_0x69dc03.setFontSize(0x14), _0x69dc03.setText(_0x4d087d), _0x69dc03.setPos = function (_0x5602bb, _0x1648e9) {
        this.x += _0x5602bb / 0x2;
    });
}

function _0x2e83d6() {
    null != _0x69dc03 && (_0x69dc03.x = _0x5d8b2a, _0x69dc03.y = _0x180b51, _0x69dc03.draw());
}

function _0xb75d62(_0x31d5bc) {
    this.interfaceType = _0x31d5bc;
    this.data = {};
    this.interfaceCanvas = null;
    this.expiresT = this.interfaceCanvas_pos = 0;
    this.maxDur = 0x96;
    this.interfaceShowT = 0;
    this.animalType = gameObjsByID[myPlayerID].animalType;
    this.aniRad = gameObjsByID[myPlayerID].rad;
    this.customButtons = [];
    this.loadData = function (_0x44b5dd) {
        0x1 == this.interfaceType ? (this.maxDur = _0x44b5dd.readUInt8(), this.data = {}, this.data[_0x1da4d1] = _0x44b5dd.readUInt8(), this.data[_0x3c0348] = _0x44b5dd.readUInt8(), this.data[_0x17505c] = _0x44b5dd.readUInt8(), this.data[_0x11d8d8] = _0x44b5dd.readUInt8(), this.data[_0x29871d] = _0x44b5dd.readUInt8(), this.data[_0x28a6aa] = _0x44b5dd.readUInt8(), this.data[_0x3afcf3] = _0x44b5dd.readUInt8(), this.data[_0x1ddfd4] = _0x44b5dd.readUInt8(), this.data[_0x1a31f6] = _0x44b5dd.readUInt8(), this.data[_0x39caec] = _0x44b5dd.readUInt8(), this.data[_0x5362ea] = _0x44b5dd.readUInt8(), this.data[_0x10ffe7] = _0x44b5dd.readUInt8(), this.data[_0x31ed20] = _0x44b5dd.readUInt8(), this.rows = 0xd, this.data.anis = [], this.data.anis.push(_0x5362ea), this.data.anis.push(_0x10ffe7), this.data.anis.push(_0x31ed20), this.data.anis.push(_0x1da4d1), this.data.anis.push(_0x3c0348), this.data.anis.push(_0x17505c), this.data.anis.push(_0x11d8d8), this.data.anis.push(_0x29871d), this.data.anis.push(_0x28a6aa), this.data.anis.push(_0x3afcf3), this.data.anis.push(_0x1ddfd4), this.data.anis.push(_0x1a31f6), this.data.anis.push(_0x39caec)) : (this.data = {}, this.maxDur = _0x44b5dd.readUInt8(), this.data.selected = _0x44b5dd.readUInt8(), this.data[0] = _0x44b5dd.readUInt8(), this.data[0x1] = _0x44b5dd.readUInt8(), this.data[0x2] = _0x44b5dd.readUInt8(), this.data[0x3] = 0, this.rows = 0x4);
        this.expiresT = _0x1534e0 + 0x3e8 * this.maxDur;
        null == this.interfaceCanvas && (this.interfaceCanvas = document.createElement('canvas'), this.interfaceCanvas.setAttribute('id', 'playerCustomCanvas'), this.ctx = this.interfaceCanvas.getContext('2d'));
    };
    this.getTitle = function () {
        return 0x1 == this.interfaceType ? 'APEX KILLS' : 0x2 == this.interfaceType ? 'CHOOSE MAIN ABILITY' : 0x3 == this.interfaceType ? 'CHOOSE PASSIVE ABILITY' : 'OPTIONS';
    };
    this.getInterfaceSize = function () {
        return this.animalType == _0x1da4d1 ? this.aniRad * interfS : 0x2 * this.aniRad * interfS;
    };
    this.drawCircles = function (_0x3d85ad, _0x1660a2, _0x41ccaf) {
        return this.animalType == _0x1da4d1 ? this.bdInterface(_0x3d85ad, _0x1660a2, _0x41ccaf) : this.getInterface(_0x3d85ad, _0x1660a2, _0x41ccaf);
    };
    this.bdInterface = function (_0x1b3563, _0x2f1909, _0x2b74ab) {
        this.ctx.save();
        this.ctx.globalAlpha = 0.05;
        var _0x2a2866 = 3.1 * _0x2b74ab;
        this.ctx.lineWidth = 0x2;
        this.ctx.fillStyle = 'black';
        this.ctx.beginPath();
        this.ctx.arc(_0x1b3563, _0x2f1909, _0x2a2866 - _0x2b74ab / 0x2, 0, 0x2 * Math.PI, !0x1);
        this.ctx.arc(_0x1b3563, _0x2f1909, _0x2a2866 + _0x2b74ab / 0x2, 0x2 * Math.PI, 0, !0);
        this.ctx.fill();
        this.ctx.globalAlpha = 0.1;
        this.ctx.strokeStyle = 'black';
        this.ctx.beginPath();
        this.ctx.arc(_0x1b3563, _0x2f1909, _0x2a2866 + _0x2b74ab / 0x2, 0x2 * Math.PI, 0);
        this.ctx.stroke();
        this.ctx.beginPath();
        this.ctx.arc(_0x1b3563, _0x2f1909, _0x2a2866 - _0x2b74ab / 0x2, 0, 0x2 * Math.PI, !0x1);
        this.ctx.stroke();
        this.ctx.restore();
        return _0x2a2866;
    };
    this.getInterface = function (_0x2b60c5, _0x95a987, _0x3a9373) {
        var _0x112b56 = 0x3 * _0x3a9373;
        this.ctx.lineWidth = 0x4;
        this.ctx.fillStyle = 'red';
        this.ctx.globalAlpha = 0.1;
        this.ctx.beginPath();
        var _0x3d566b = 0.9 * _0x3a9373;
        _0x3a9373 *= 1.9;
        this.ctx.arc(_0x2b60c5, _0x95a987, _0x112b56 - _0x3d566b, 0, 0x2 * Math.PI, !0x1);
        this.ctx.arc(_0x2b60c5, _0x95a987, _0x112b56 + _0x3a9373, 0x2 * Math.PI, 0, !0);
        this.ctx.fill();
        this.ctx.globalAlpha = 0.1;
        this.ctx.strokeStyle = 'blue';
        this.ctx.beginPath();
        this.ctx.arc(_0x2b60c5, _0x95a987, _0x112b56 + _0x3a9373, 0x2 * Math.PI, 0);
        this.ctx.stroke();
        this.ctx.beginPath();
        this.ctx.arc(_0x2b60c5, _0x95a987, _0x112b56 - _0x3d566b, 0, 0x2 * Math.PI, !0x1);
        this.ctx.stroke();
        return _0x112b56;
    };
    this.drawTitle = function (_0x3a321e) {
        this.ctx.globalAlpha = 0x1;
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = '30px Arial';
        var _0x16ebce = this.getTitle();
        _0x3a321e = (_0x3a321e + 0x50) * interfS;
        var _0x1fa3db = this.interfaceCanvas.width / 0x2 - this.ctx.measureText(_0x16ebce).width / 0x2;
        this.animalType != _0x1da4d1 && (_0x3a321e -= 0x14 * interfS);
        this.ctx.fillText(_0x16ebce, _0x1fa3db, _0x3a321e);
    };
    this.display = function () {
        if (null != this.interfaceCanvas) {
            0 == this.interfaceShowT && (this.interfaceShowT = _0x1534e0);
            var _0x31d5bc = this.getInterfaceSize(),
                _0x338723 = 0x82 * interfS + 0x6 * (_0x31d5bc + 0xa * interfS);
            this.interfaceCanvas.width = _0x338723 + 0xa;
            this.interfaceCanvas.height = 1.3 * _0x338723 + 0xa;
            this.interfaceCanvas_pos = 0xc8;
            this.ctx.globalAlpha = 0.1;
            this.ctx.fillStyle = '#000000';
            0x1 != this.interfaceType && this.ctx.fillRect(0, 0, this.interfaceCanvas.width, this.interfaceCanvas.height);
            this.drawTitle(0x5);
            var _0x338723 = 0x168 / this.rows,
                _0x510b32 = this.interfaceCanvas.width / 0x2,
                _0x1dea79 = this.interfaceCanvas.height / 0x2;
            this.ctx.save();
            var _0x2f0425 = 3.1 * _0x31d5bc,
                _0x1984a3;
            _0x1984a3 = 0x8 * Math.sin(0x2 * Math.PI / 0x2 * ((_0x1534e0 - this.interfaceShowT) / 0x3e8));
            0x1 == this.interfaceType && this.bdInterface(_0x510b32, _0x1dea79, _0x31d5bc);
            for (r = 0; r < this.rows; r++) {
                var _0x3cc4e5 = _0x1dea79 + Math.sin(Math.PI / 0xb4 * r * _0x338723 - _0x55d748(0xb4)) * _0x2f0425,
                    _0x3556ad = _0x510b32 + Math.cos(Math.PI / 0xb4 * r * _0x338723 - _0x55d748(0xb4)) * _0x2f0425;
                _0x55d748(0xb4);
                if (0x1 == this.interfaceType) {
                    ani = this.data.anis[r];
                    var _0x2099b6 = this.getSkinForAniKills(ani);
                    if (_0x2099b6 = _0x2f22f9(_0x2099b6)) {
                        var _0x5f2ad5 = 0 < this.data[ani];
                        this.ctx.save();
                        this.ctx.globalAlpha = _0x5f2ad5 ? 0x1 : 0.3;
                        var _0x2e17f1 = _0x31d5bc;
                        _0x5f2ad5 && (this.ctx.shadowOffsetX = 0, this.ctx.shadowOffsetY = 0, this.ctx.shadowColor = 'black', this.ctx.shadowBlur = 0x8, _0x2e17f1 -= _0x1984a3);
                        this.ctx.drawImage(_0x2099b6, _0x3556ad - _0x2e17f1 / 0x2, _0x3cc4e5 - _0x2e17f1 / 0x2, _0x2e17f1, _0x2e17f1);
                        this.ctx.restore();
                    }
                } else this.showInterfaceButton(_0x510b32, _0x1dea79, this.data[r], _0x3556ad, _0x3cc4e5);
            }
            this.ctx.restore();
            null != this.interfaceCanvas && this.interfaceCanvas.width && (_0x31d5bc = (_0x1534e0 - this.interfaceShowT) / 0x258, _0x338723 = (this.expiresT - _0x1534e0) / 0x258, 0x1 > _0x338723 && (_0x31d5bc = Math.max(0, _0x338723)), _0x31d5bc = Math.min(0x1, _0x31d5bc), _0x338723 = this.interfaceCanvas.width * _0x31d5bc, _0x510b32 = this.interfaceCanvas.height * _0x31d5bc, ctx.save(), ctx.globalAlpha = _0x31d5bc, this.interfaceCanvas.screenX = canvasW / 0x2 - _0x338723 / 0x2, this.interfaceCanvas.screenY = canvasH / 0x2 - _0x510b32 / 0x2, this.updateButtons(), ctx.drawImage(this.interfaceCanvas, canvasW / 0x2 - _0x338723 / 0x2, canvasH / 0x2 - _0x510b32 / 0x2, _0x338723, _0x510b32), ctx.restore(), (_0x1534e0 > this.expiresT || !isAliveInGame) && _0x4c21ea.destroy());
        }
    };
    this.destroy = function () {
        if (null != this.customButtons && 0 < this.customButtons.length)
            for (i = 0; i < this.customButtons.length; i++) this.customButtons[i].isVisible = !0x1;
        _0x4c21ea = this.ctx = this.interfaceCanvas = null;
        console.log('custom interface canvas destroyed!');
    };
    this.updateButtons = function () {
        var _0x31d5bc = canvasW / 0x2 - this.interfaceCanvas.width / 0x2,
            _0x46630c = canvasH / 0x2 - this.interfaceCanvas.height / 0x2;
        if (null != this.customButtons && 0 < this.customButtons.length)
            for (i = 0; i < this.customButtons.length; i++) this.customButtons[i].screenX = _0x31d5bc, this.customButtons[i].screenY = _0x46630c;
    };
    this.drawAngularInterface = function (_0x5f513d, _0x5b84e0, _0x170a7d, _0x42f16b, _0x3d25c8, _0x5e632d) {
        this.ctx.save();
        this.ctx.globalAlpha = 0.2;
        this.ctx.lineWidth = _0x170a7d;
        _0x170a7d = 0x2 * Math.PI / this.rows;
        var _0x3d2679 = _0x55d748(-0x5a),
            _0x880082 = ['red', 'green', 'blue', 'purple'];
        for (r = 0x1; r <= this.rows; r++) this.ctx.beginPath(), this.ctx.strokeStyle = 0x1 == this.interfaceType ? 'black' : _0x880082[r - 0x1], this.ctx.arc(_0x5f513d, _0x5b84e0, _0x3d25c8 - _0x42f16b * _0x5e632d, _0x3d2679, _0x3d2679 + _0x170a7d), this.ctx.stroke(), _0x3d2679 += _0x170a7d;
        this.ctx.restore();
    };
    this.getSkinForAniKills = function (_0x1d50ea) {
        switch (_0x1d50ea) {
        case _0x1da4d1:
            return './skins/volcano/blackdragon/0/blackdragon.png';
        case _0x17505c:
            return './skins/land/dinomonster/0/dinomonster.png';
        case _0x29871d:
            return './skins/arctic/icemonster/0/icemonster.png';
        case _0x3c0348:
            return './skins/volcano/landmonster/0/landmonster.png';
        case _0x11d8d8:
            return './skins/ocean/seamonster/0/seamonster.png';
        case _0x28a6aa:
            return './skins/desert/scorpion/0/giantscorpion.png';
        case _0x10ffe7:
            return './skins/arctic/yeti/0/yeti.png';
        case _0x1ddfd4:
            return './skins/land/dragon/0/dragon.png';
        case _0x1a31f6:
            return './skins/land/trex/0/trex.png';
        case _0x39caec:
            return './skins/ocean/kraken/0/kraken.png';
        case _0x5362ea:
            return './skins/ocean/kingcrab/0/kingcrab.png';
        case _0x3afcf3:
            return './skins/volcano/phoenix/0/phoenix.png';
        case _0x31ed20:
            return './skins/desert/pterodactyl/0/pterodactyl_ability.png';
        }
    };
    this.updateExpiry = function () {
        var _0x31d5bc = (this.expiresT - _0x1534e0) / 0x3e8;
        _0x31d5bc < this.maxDur - 0x1 && 0x1 < _0x31d5bc && (this.expiresT = _0x1534e0 + 0x3e8);
    };
    this.getBtnTitle = function (_0x467664) {
        switch (_0x467664) {
        case _0x5e0363:
            return 'Fly High';
        case _0x399018:
            return 'Gives Gifts';
        case _0x4418e3:
            return 'Flying Sleigh';
        default:
            return 'Close';
        }
    };
    this.buttons = {};
    this.sendSelection = function (_0x503176) {
        if (null != this.customButtons && 0 < this.customButtons.length)
            for (i = 0; i < this.customButtons.length; i++) this.customButtons[i].resetSelection();
        _0x503176.setSelection();
        var _0x146a33 = new fidjiaslfo(0x3);
        _0x146a33.writeUInt8(_0x5da8e3);
        _0x146a33.writeUInt8(this.interfaceType);
        _0x146a33.writeUInt8(_0x503176.buttonID);
        wsSendMsg(_0x146a33);
    };
    this.showInterfaceButton = function (_0x361e61, _0x56d96f, _0x55b223, _0x330705, _0x10bf8d) {
        _0x361e61 = this.buttons[_0x55b223];
        void 0 === _0x361e61 || null == _0x361e61 ? (_0x361e61 = this.getBtnTitle(_0x55b223), _0x56d96f = 0 == _0x55b223 ? {
            'w': 0x64,
            'h': 0x3c
        } : {
            'w': 0x64,
            'h': 0x64
        }, _0x361e61 = this.buttons[_0x55b223] = new _0x16f092(_0x330705, _0x10bf8d, _0x56d96f.w, _0x56d96f.h, _0x361e61, 0x1e, this.ctx), _0x361e61.buttonID = _0x55b223, _0x361e61.selected = !0x1, _0x361e61.isVisible = !0, _0x361e61.textShadow = !0, _0x361e61.screenX = 0, _0x361e61.screenY = 0, 0 != _0x55b223 && (_0x361e61.drawButtonRect = !0x1, _0x361e61.showLabeleOnHover = !0), _0x361e61.testPosHitsButton = function (_0x479d65, _0x133e93) {
            var _0x56d96f = this.screenX + this.x,
                _0x55b223 = _0x56d96f + this.w,
                _0x330705 = this.screenY + this.y,
                _0x10bf8d = _0x330705 + this.h;
            return _0x479d65 < _0x56d96f || _0x479d65 > _0x55b223 ? !0x1 : _0x133e93 < _0x330705 || _0x133e93 > _0x10bf8d ? !0x1 : !0;
        }, _0x361e61.onClick = function () {
            console.log('clicked: ' + this.label);
            this.clicked || (this.clicked = !0, this.isHighLighted = !0x1);
            'Close' == this.label ? _0x4c21ea.destroy() : _0x4c21ea.sendSelection(this);
        }, _0x361e61.setSelection = function () {
            this.labelColor = 'yellow';
            this.selected = !0;
        }, _0x361e61.resetSelection = function () {
            this.labelColor = 'white';
            this.selected = !0x1;
        }, _0x361e61.beforeDrawText = function () {
            var _0x361e61 = this.h / 0x2;
            this.buttonTXT.x = this.screenX + this.x + this.w / 0x2;
            this.buttonTXT.y = 0 == this.buttonID ? this.screenY + this.y + _0x361e61 : this.screenY + this.y - _0x361e61 / 0x2;
        }, _0x361e61.onMouseMove = function () {}, _0x361e61.update = function () {
            this.x = _0x330705 - this.w / 0x2;
            this.y = _0x10bf8d - this.h / 0x2;
        }, _0x361e61.onInterfaceReset = function () {
            this.isVisible = !0x1;
        }, _0x361e61.onAfterDraw = function () {
            var _0x361e61 = Santa.prototype.getAbilityInfo(this.buttonID);
            if (_0x361e61 = _0x2f22f9(_0x361e61.abilImg)) {
                ctx.save();
                if (this.isHighLighted || this.selected) ctx.shadowBlur = 0xa, ctx.shadowOffsetX = 0, ctx.shadowOffsetY = 0, ctx.shadowColor = 'yellow';
                var _0x56eedd = this.w;
                ctx.drawImage(_0x361e61, this.screenX + this.x, this.screenY + this.y, _0x56eedd, _0x56eedd);
                ctx.restore();
            }
        }, _0x1bcd79.interfaceButtons.push(_0x361e61), this.customButtons.push(_0x361e61), this.data.selected == _0x361e61.buttonID && _0x361e61.setSelection()) : null != _0x361e61 && (_0x361e61.isVisible && (_0x361e61.clicked = !0x1), _0x361e61.draw());
    };
}
var _0x494868 = 0,
    _0x2eb424 = 0x1,
    _0x40f4c8 = 0x1,
    _0x13d210 = 0x32,
    _0x45dfc0 = !0x1;

function _0x281c42() {//49416
    $.ajax({
        'url': 'https://masterserver.mopesandbox.fun',
        'type': 'GET',
        'success': function (_0x321835) {
            _0x321835 = JSON.parse(_0x321835);
            _0x45dfc0 = !0;
            var _0x1cd610 = _0x321835.totalPlayersOnline;
            // console.log('MasterServer: ' + _0x1cd610 + ' total players online!');
            playersOnlineTxt.setText(_0x29cd81(_0x1cd610) + ' players online');
            for (_0x1cd610 = 0; _0x1cd610 < _0x247fb6.length; _0x1cd610++) {
                for (var _0x51ada4 = _0x247fb6[_0x1cd610], _0xba1d67 = !0x1, _0x5adc2e = 0; _0x5adc2e < _0x321835.servers.length; _0x5adc2e++) {
                    var _0x456642 = _0x321835.servers[_0x5adc2e];
                    if ((_0x456642.name == _0x51ada4.ip+":"+_0x51ada4.port || _0x456642.name == _0x51ada4.ip) && !_0x456642.ofl) {
                        _0x51ada4.playersCount = _0x456642.pl;
                        _0x51ada4.gameMode = _0x456642.gm;
                        _0x51ada4.gamemode
                        _0xba1d67 = !0;
                        break;
                    }
                }
                _0xba1d67 || (_0x51ada4.playersCount = -0x1);
            }
            // _0x1a7837();
            _0x2f8501();
        },
        'error': function (_0x15e17d, _0x3ac1da, _0xba34c5) {
            console.log('Error getting master server stats: ' + _0xba34c5);
        }
    });
}
_0x281c42();
if (_0x467658) {
    var _0x4f3218 = document.getElementById('loginDiv');
    _0x4f3218 && (_0x4f3218.style.display = 'none');
}
jQuery.loadScript = function (_0x2e9c48, _0x54a9f6) {
    jQuery.ajax({
        'url': _0x2e9c48,
        'dataType': 'script',
        'success': _0x54a9f6,
        'async': !0
    });
};
window.fbAsyncInit = function () {
    FB.init({
        'appId': '342869592997869',
        'cookie': !0,
        'xfbml': !0,
        'version': 'v3.2',
        'status': !0
    });
    FB.AppEvents.logPageView();
};
(function (_0x3aa1e4, _0x144bba, _0x5e5d8a) {
    // var _0x5cb583 = _0x3aa1e4.getElementsByTagName(_0x144bba)[0];
    // _0x3aa1e4.getElementById(_0x5e5d8a) || (_0x3aa1e4 = _0x3aa1e4.createElement(_0x144bba), _0x3aa1e4.id = _0x5e5d8a, _0x3aa1e4.src = 'https://connect.facebook.net/en_US/sdk.js', _0x5cb583.parentNode.insertBefore(_0x3aa1e4, _0x5cb583));
}(document, 'script', 'facebook-jssdk'));
$.loadScript('https://apis.google.com/js/api:client.js', function () {
    function _0x4a02d5(_0x1d3bb0) {
        auth2.attachClickHandler(_0x1d3bb0, {}, function (_0x5a3d74) {
            var _0x2f7df8 = _0x5a3d74.getAuthResponse().id_token;
            console.log('Google signed in ()! ID token (send to server) is ' + _0x2f7df8);
            _0x27737e(_0x2f7df8, 'google');
            _0x5a3d74 = _0x5a3d74.getBasicProfile();
            console.log('Name: ' + _0x5a3d74.getName());
        }, function (_0x3f2f28) {
            console.log('google sign-in error! ' + JSON.stringify(_0x3f2f28, void 0, 0x2));
        });
    }(function () {
        gapi.load('auth2', function () {
            auth2 = gapi.auth2.init({
                'client_id': '1035038447343-ee4b8gj1i18ih0sg52bgeln8ul8mr7ns.apps.googleusercontent.com',
                'cookiepolicy': 'single_host_origin'
            });
            _0x4a02d5(document.getElementById('googleLoginBtn'));
        });
    }());
});
var login_userId = localStorage.getItem('login_userId'),
    login_passwordToken = localStorage.getItem('login_passwordToken'),
    isUserLoggedIn = void 0 != login_userId,
    _0x234910 = localStorage.getItem('login_profilePicURL'),
    _0x347f2d = localStorage.getItem('login_name');
setTimeout(function () {
    _0x5f675();
}, 0x1);

function _0x5f675() {
    //
}

function _0x3a61e5(_0x41e308) {
    _0x41e308 = void 0 === _0x41e308 ? !0 : _0x41e308;
    var _0x4a41f4 = localStorage.getItem('login_socialNetworkName');
    localStorage.removeItem('login_userId');
    localStorage.removeItem('login_passwordToken');
    localStorage.removeItem('login_profilePicURL');
    localStorage.removeItem('login_name');
    localStorage.removeItem('login_socialNetworkName');
    isUserLoggedIn = !0x1;
    login_userId = null;
    console.log('logging out with social network ' + _0x4a41f4);
    if ('facebook' == _0x4a41f4) FB.logout(function (_0xb0ccf1) {
        console.log('Logged out of FB');
        _0x41e308 && location.reload();
    });
    else if ('google' == _0x4a41f4) {
        _0x4a41f4 = gapi.auth2.getAuthInstance();
        try{_0xa3ac90.close();}catch{}
        try {
            _0x4a41f4.signOut().then(function () {
                console.log('Logged out of Google');
                _0x41e308 && location.reload();
            });
        } catch (_0x6a2625) {
            console.log('Error signing out of google.'), setTimeout(function () {
                location.reload();
            }, 0x1f4);
        }
    } else _0x41e308 && location.reload();
    setTimeout(function () {
        _0x41e308 && location.reload();
    }, 0x2710);
}
isUserLoggedIn && _0x15f11a();

function _0x15f11a() {//49397
    console.log('Checking if logged in user (based on saved info) is still authorized... ' + login_userId);
    if (isUserLoggedIn) {
        var _0x132ae3 = 'https://accountserver.mopesandbox.fun/verify?userId=' + login_userId + '&passwordToken=' + login_passwordToken;
        KTestingExperimental && console.log('Sending URL request :' + _0x132ae3);
        $.ajax({
            'url': _0x132ae3,
            crossDomain: true,
            'success': function (_0x51494c) {
                (_0x51494c = JSON.parse(_0x51494c).success && !0) ? (KTestingExperimental && console.log('verifyLoginWorks: success.'), acUnlogged = false, _0x7db050()) : (console.log('verifyLoginWorks: failed, need new credentials.'), acUnlogged = true, _0x3a61e5());
                var ee = document.getElementById('loginDiv');
                ee.innerHTML = ``;
                ee.id = 'accountsDiv';
                _0x221217();
                return _0x51494c;
            },
            'error': function (_0x4fea74, _0x44b992, _0x57ccd3) {
                console.log('URL error: ' + _0x57ccd3);
                _0x1fed78("Can't connect to AccountServer!", 'error', 0, function () {});
            }
        });
    } else console.log('not logged in!');
}
var userInfo = {
    'coins': -0x1,
    'level': 0,
    'xp': 0,
    'xpNextLvl': 0
};

function _0x7db050(_0x217874) {//49397
    if (isUserLoggedIn) {
        var _0x13a5c0 = 'https://accountserver.mopesandbox.fun/loadAccountData?userId=' + login_userId + '&passwordToken=' + login_passwordToken;
        KTestingExperimental && console.log('Sending URL request :' + _0x13a5c0);
        $.ajax({
            'url': _0x13a5c0,
            crossDomain: true,
            'type': 'GET',
            'success': function (_0x4deddb) {
                userInfo = _0x4deddb = JSON.parse(_0x4deddb);
                console.log("Done, result is ", _0x4deddb);
                updateBPStats();
                if (_0x4deddb.banned == 1) {
                    _0x4deddb = {
                        banned: 1,
                        reason: _0x4deddb.reason
                    }
                    document.getElementById('shop-open').remove();
                    _0x1fed78("Your account has been BANNED! Reason: " + _0x4deddb.reason, "error", 10000);
                    setInterval(function () {
                        _0x1fed78("Your account has been BANNED! Reason: " + _0x4deddb.reason, "error", 10000);
                    }, 5000);
                    setTimeout(function() {
                        _0x3a61e5(!0x1);
                        location.reload();
                    }, 10000);
                  } else {
                    _0x4f607e(_0x4deddb.coins);
                    mopeShopObj.updateCoinsBalance();
                    void 0 != _0x217874 && _0x217874();
                  }
            },
            'error': function (_0x148449, _0x1d1f53, _0x23950d) {
                console.log('URL error: ' + _0x23950d);
            }
        });
    } else console.log('not logged in!');
}

// recaptcha section

var recaptcha_clientkey = "6LcVH9EhAAAAANkiwKzn9mdDqLjSY6rMDLKmeed1";

getScript(
    "https://www.google.com/recaptcha/api.js?render=" + recaptcha_clientkey,
    function () {
      console.log("loaded recatcha script.");
  
  
      grecaptcha.ready(function () {
        //recaptcha();
      });
  
    }
  );

var re_token = null;

var recaptcha = function () {
    console.log("@@@@@@@@@@@@@@@@@@@ recaptcha called");

    grecaptcha.ready(function() {
        console.log("@@@@@@@@@@@@@@@@@@@ recaptcha ready");
        re_token = "";
        grecaptcha.execute(recaptcha_clientkey, { action: 'homepage' }).then(function (token) {
        re_token = token || "error";
        // console.log("@@@@@@@@@@@@@@@@@@@@ recatcha token:" + re_token);
    
    
        var m = new fidjiaslfo(2 + encode_utf8(re_token.length) + 2);
        m.writeUInt8(64);
        m.writeString(re_token);
        wsSendMsg(m);
        if (re_token == null) {
            console.log("error: rec token could not received!");
        }
        })
        .catch(function (reason) {
            console.log("Error loading recaptcha! Reason: " + reason);
            //purposely send invalid token
            re_token = "error";
            //if(re_token !== null) {
            var m = new fidjiaslfo(2 + encode_utf8(re_token.length) + 2);
            m.writeUInt8(64);
            m.writeString(re_token);
            wsSendMsg(m);
        });
    });
}

function _0x4f607e(_0x41d6ee) {
    if(document.getElementById('coins2')) document.getElementById('coins2').innerHTML = 0 < _0x41d6ee ? _0x41d6ee : 0;
    if(document.getElementById('coins')) document.getElementById('coins').innerHTML = 0 < _0x41d6ee ? _0x41d6ee : 0;
}

function _0x68def2(_0x5b2d01) {//49397
    console.log('Loading shop items for logged in user! ' + login_userId);
    $.ajax({
        'url': 'https://accountserver.mopesandbox.fun/loadShopItems?userId=' + login_userId + '&passwordToken=' + login_passwordToken,
        crossDomain: true,
        'success': function (_0xf3037c) {
            _0xf3037c = JSON.parse(_0xf3037c);
            _0x5b2d01(!0, _0xf3037c);
        },
        'error': function (_0x5c88be, _0x372dfb, _0x11b53c) {
            console.log('Shop loading-URL error: ' + _0x11b53c);
            _0x5b2d01(!0x1, null);
        }
    });
}

function _0x3e4625(_0x5f244b, _0x248383) {//49397
    KTestingExperimental && console.log('Sending URL request to load coins for logged in user! ' + login_userId);
    _0x5f244b || (_0x5f244b = 'goldDragon');
    var _0x24a81b = 'https://accountserver.mopesandbox.fun/buyShopItem?userId=' + login_userId + '&passwordToken=' + login_passwordToken + '&itemName=' + _0x5f244b;
    KTestingExperimental && console.log('Sending URL request :' + _0x24a81b);
    $.ajax({
        'url': _0x24a81b,
        crossDomain: true,
        'success': function (_0x3f60fa) {
            var _0x24a81b = JSON.parse(_0x3f60fa);
            console.log('Done, result is ' + _0x3f60fa);
            _0x248383(_0x24a81b.success, _0x24a81b.reason);
        },
        'error': function (_0x10e04d, _0xf0b8d1, _0x4825fe) {
            console.log('URL error: ' + _0x4825fe);
            _0x248383(false, 'error');
        }
    });
}

function getBattlePassReward(level, gold, callback) {//49397
    KTestingExperimental && console.log('Taking a bonus of bp level!');
    var _0x24a81b = 'https://accountserver.mopesandbox.fun/getReward?userId=' + login_userId + '&passwordToken=' + login_passwordToken + '&level=' + level + '&gold=' + gold;
    KTestingExperimental && console.log('Sending URL request :' + _0x24a81b);
    $.ajax({
        'url': _0x24a81b,
        crossDomain: true,
        'success': function (_0x3f60fa) {
            var _0x24a81b = JSON.parse(_0x3f60fa);
            console.log('Done, result is ' + _0x3f60fa);
            if(callback) callback(_0x24a81b);
        },
        'error': function (_0x10e04d, _0xf0b8d1, _0x4825fe) {
            console.log('URL error: ' + _0x4825fe);
            if(callback) callback(false);
        }
    });
}

function _0x421c3d() {
    return;
    // var _0x1ee05e = 'https://loginserver.mope.io/addCoins?userId=' + login_userId + '&passwordToken=' + login_passwordToken;
    // KTestingExperimental && console.log('Sending URL request :' + _0x1ee05e);
    // $.ajax({
    //     'url': _0x1ee05e,
    //     'success': function (_0x5524fd) {
    //         KTestingExperimental && console.log('reposnse is ' + _0x5524fd);
    //         _0x7db050();
    //     },
    //     'error': function (_0x215904, _0x415078, _0x50a5b0) {
    //         console.log('URL error: ' + _0x50a5b0);
    //     }
    // });
}

function _0x13496b() {
    return;
    // var _0xafc27f = 'https://loginserver.mope.io/resetAccount?userId=' + login_userId + '&passwordToken=' + login_passwordToken;
    // KTestingExperimental && console.log('Sending URL request :' + _0xafc27f);
    // $.ajax({
    //     'url': _0xafc27f,
    //     'success': function (_0x37d0b0) {
    //         console.log('reposnse is ' + _0x37d0b0);
    //         _0x7db050();
    //     },
    //     'error': function (_0x4bff5d, _0xd3e3e3, _0x295abb) {
    //         console.log('URL error: ' + _0x295abb);
    //     }
    // });
}

function _0x27737e(_0x3c3fef, _0x2d8cb6) {//49397
    var _0x3daaf1 = 'https://accountserver.mopesandbox.fun/reglog?socialNetwork=' + _0x2d8cb6 + '&accessToken=' + _0x3c3fef;
    KTestingExperimental && console.log('Sending URL request :' + _0x3daaf1);
    $.ajax({
        'url': _0x3daaf1,
        crossDomain: true,
        'success': function (_0x5f03ed) {
            console.log('reposnse is ' + _0x5f03ed);
            _0x5f03ed = JSON.parse(_0x5f03ed);
            _0x5f03ed.success && onUserLoginSuccess(_0x5f03ed.login_userId, _0x5f03ed.login_passwordToken, _0x5f03ed.login_name, _0x5f03ed.login_profilePicURL, _0x2d8cb6);
        },
        'error': function (_0x1d7c91, _0xceb9aa, _0x4a86f0) {
            console.log('URL error: ' + _0x4a86f0);
        }
    });
}

function onUserLoginSuccess(_0x5455f9, _0x38efec, _0x4f55b6, _0x224232, _0x49be4c) {
    console.log('Logged in, for login_userId ' + _0x5455f9 + ' login_passwordToken ' + _0x38efec);
    localStorage.setItem('login_userId', _0x5455f9);
    localStorage.setItem('login_name', _0x4f55b6);
    localStorage.setItem('login_passwordToken', _0x38efec);
    localStorage.setItem('login_profilePicURL', _0x224232);
    localStorage.setItem('login_socialNetworkName', _0x49be4c);
    if(_0x49be4c == "google") location.reload();
    else window.open("https://"+window.location.host, '_self').focus();
}

function _0x220a74() {
    // console.log('getting auth token from FB...');
    // FB.login(function (_0x3251d9) {
    //     'connected' === _0x3251d9.status ? (console.log('Successfully got auth token from FB'), console.log(JSON.stringify(_0x3251d9)), _0x27737e(_0x3251d9.authResponse.accessToken, 'facebook')) : console.log('Error logging in to FB.');
    // }, {
    //     'scope': 'public_profile,email'
    // });
}
var _0x1ec99b = null,
    _0x2bd8ce = +new Date(),
    _0x3dba65 = !0x1;

function _0x30014f(_0x1a1bf4) {
    //
}
document.getElementById('xsollaStoreCloseButton').onclick = function () {
    _0x4d22b5();
};

function _0x4d22b5() {
    _0x10b773 = !0x1;
    document.getElementById('xsollaStoreFrameWrapper').style.display = 'none';
    for (var _0x557d76 = document.getElementById('xsollaStoreInnerDiv'); _0x557d76.firstChild;) _0x557d76.removeChild(_0x557d76.firstChild);
}
var _0x10b773 = !0x1;

function _0x1c218d() {
    alert("Disabled.");
    return;
    if (_0x467658) alert("Please open game in your browser to buy coins (can't buy them in the app yet!)");
    else {
        _0x10b773 && _0x4d22b5();
        _0x10b773 = !0;
        for (var _0x409380 = document.getElementById('xsollaStoreInnerDiv'); _0x409380.firstChild;) _0x409380.removeChild(_0x409380.firstChild);
        document.getElementById('xsollaStoreFrameWrapper').style.display = 'block';
        document.getElementById('loadingAnim_xsolla').style.display = 'block';
        _0x30014f(function (_0x4f4dd5) {
            if (_0x4f4dd5) {
                console.log('Got xsolla token ' + _0x4f4dd5);
                document.getElementById('loadingAnim_xsolla').style.display = 'none';
                _0x4f4dd5 = _0x3dba65 ? 'https://sandbox-secure.xsolla.com/paystation2/?access_token=' + _0x4f4dd5 : 'https://secure.xsolla.com/paystation2/?access_token=' + _0x4f4dd5;
                var _0x40d98d = document.createElement('iframe');
                _0x40d98d.setAttribute('src', _0x4f4dd5);
                _0x40d98d.setAttribute('id', 'storeIFrame');
                _0x409380.appendChild(_0x40d98d);
            }
        });
    }
}

function _0x45fec5(_0x484391) {
    var _0x475f94 = {
        'access_token': 'abcdef1234567890abcdef1234567890'
    };
    _0x484391 = document.createElement('script');
    _0x484391.type = 'text/javascript';
    _0x484391.async = !0;
    _0x484391.src = '//static.xsolla.com/embed/paystation/1.0.8/widget.min.js';
    _0x484391.addEventListener('load', function (_0x1945b3) {
        XPayStationWidget.init(_0x475f94);
    }, !0x1);
    document.getElementsByTagName('head')[0].appendChild(_0x484391);
}
if (_0x524169 = document.getElementById('graphicsBut_mid')) _0x524169.onclick = function () {
    _0x5ca4ab(0x2);
    _0x141915();
    var _0x2898a6 = new Audio('audio/tap.mp3?v='+gameVersion);
    _0x2898a6.volume = _0x499630 ? 0.15 : 0.5;
    _0x2898a6.play();
};
if (_0x524169 = document.getElementById('graphicsBut_hd')) _0x524169.onclick = function () {
    _0x5ca4ab(0x3);
    _0x141915();
    var _0x148857 = new Audio('audio/tap.mp3?v='+gameVersion);
    _0x148857.volume = _0x499630 ? 0.15 : 0.5;
    _0x148857.play();
};
var _0x14fca5 = 0x3;
window.localStorage && null != window.localStorage.getItem('options_graphicsLevel') && (_0x14fca5 = parseInt(window.localStorage.getItem('options_graphicsLevel')));
0x2 > _0x14fca5 && (_0x14fca5 = 0x2);
_0x5ca4ab(_0x14fca5);

function _0x5ca4ab(_0x44351d) {
    var _0x26c78c = _0x44351d == _0x14fca5;
    _0x14fca5 = _0x44351d;
    if (window.localStorage) try {
        window.localStorage.setItem('options_graphicsLevel', _0x14fca5);
    } catch (_0x33bd4a) {}
    for (var _0x23762e = 0x1; 0x3 >= _0x23762e; _0x23762e++) {
        var _0x575dd3;
        switch (_0x23762e) {
        case 0x1:
            _0x575dd3 = document.getElementById('graphicsBut_low');
            break;
        case 0x2:
            _0x575dd3 = document.getElementById('graphicsBut_mid');
            break;
        case 0x3:
            _0x575dd3 = document.getElementById('graphicsBut_hd');
        }
        _0x575dd3 && (_0x23762e == _0x44351d ? (_0x575dd3.disabled = !0, _0x575dd3.style.opacity = 0.5) : (_0x575dd3.disabled = !0x1, _0x575dd3.style.opacity = 0x1));
        _0x26c78c && (instantSetCamNextUpd = !0);
    }
}
var _0x30996e = 0,
    _0x1c6989 = 0,
    _0x54ef3e = +new Date(),
    _0x3d1512 = +new Date(),
    _0x7497dc = 0,
    _0x36fc4c = 0;

function _0x1c1488() {
    _0x30996e += 0x1;
    0x7d0 < _0x1534e0 - _0x54ef3e && (_0x54ef3e = +new Date(), _0x7497dc = Math.round(_0x30996e / 0x2), _0x30996e = 0, _0x347eb3(_0x7497dc));
    isAliveInGame ? (_0x1c6989 += 0x1, 0x4e20 < _0x1534e0 - _0x3d1512 && (_0x3d1512 = +new Date(), _0x36fc4c = Math.round(_0x1c6989 / 0x14), _0x1c6989 = 0)) : (_0x1c6989 = 0, _0x3d1512 = +new Date());
}

function _0x347eb3(_0x17b4b6) {
    var _0x2864ad = document.getElementById('graphics_fps');
    _0x2864ad && !isAliveInGame && (_0x2864ad.innerHTML = 0x3a < _0x17b4b6 ? ' FPS ' + _0x17b4b6 + ' (perfect)' : 0x28 < _0x17b4b6 ? ' FPS ' + _0x17b4b6 + ' (okay)' : 0x1d < _0x17b4b6 ? ' FPS ' + _0x17b4b6 + ' (playable- close other tabs/ lower graphics)' : ' FPS ' + _0x17b4b6 + ' (low- close other tabs/ lower graphics)');
}

function _0x14379c(_0xb01710, postfix, color) {
    this.animStep = 0x1;
    this.animStartT = _0x1534e0;
    this.animDur = 0xbb8;
    this.timedOut = !0x1;
    this.xShift = _0x55ada2(-0xa, 0xa);
    this.yShift = _0x55ada2(-0xa, 0xa);
    this.anlgeShift = _0x55ada2(-0xa, 0xa);
    this.text = new _0x120450(0x10, 'white');
    this.text.setText((0 <= _0xb01710 ? '+ ' : '') + _0x34bb19(_0xb01710) + postfix);
    this.textFontSz = 0x1e;
    var _0x438d74 = color === undefined ? 'white' : color;
    0x2710 < _0xb01710 && (_0x438d74 = '#c7b753', this.textFontSz = 0x28, this.animDur += 0x3e8);
    0x186a0 < _0xb01710 && (_0x438d74 = '#fdca5b', this.textFontSz = 0x2d, this.animDur += 0x7d0);
    0xf4240 < _0xb01710 && (_0x438d74 = '#c7b753', this.textFontSz = 0x33, this.animDur += 0x7d0);
    0 > _0xb01710 && (_0x438d74 = '#c65f59', this.animDur += 0x7d0);
    this.text.setColor(_0x438d74, null, 0, 0);
    this.draw = function () {
        if (!_0x2ef7be) {
            var _0xb01710 = _0x1c8ba9((_0x1534e0 - this.animStartT) / this.animDur, 0, 0x1);
            ctx.save();
            ctx.translate(canvasW / 0x2, canvasH - 0x55 * interfS + -0x96 * _0xb01710 * interfS);
            ctx.rotate(_0x55d748(this.anlgeShift * _0xb01710));
            ctx.globalAlpha = 0x1 - _0xb01710;
            this.text.setFontSize(this.textFontSz * interfS);
            this.text.x = 0;
            this.text.y = 0;
            this.text.draw();
            ctx.restore();
            _0x1534e0 >= this.animStartT + this.animDur && (this.timedOut = !0);
        }
    };
}

function _0x3a76ab(_0x30fa81, _0x2a6cca, _0x4633f3, _0x518c12) {
    this.animStep = 0x1;
    this.animStartT = _0x1534e0;
    this.timedOut = !0x1;
    this.xShift = _0x55ada2(-0xa, 0xa);
    this.yShift = _0x55ada2(-0xa, 0xa);
    this.anlgeShift = _0x55ada2(-0xa, 0xa);
    this.text = new _0x120450(_0x2a6cca, _0x4633f3);
    this.text.setText(_0x30fa81);
    this.textFontSz = _0x2a6cca;
    this.animDur = _0x518c12;
    this.text.setColor(_0x4633f3, null, 0, 0);
    this.draw = function () {
        if (!_0x2ef7be) {
            var _0x30fa81 = _0x1c8ba9((_0x1534e0 - this.animStartT) / this.animDur, 0, 0x1);
            ctx.save();
            ctx.translate(canvasW / 0x2, canvasH - 0x55 * interfS + -0x96 * _0x30fa81 * interfS);
            ctx.globalAlpha = 0x1 - _0x30fa81;
            this.text.setFontSize(this.textFontSz * interfS);
            this.text.x = 0;
            this.text.y = 0;
            this.text.draw();
            ctx.restore();
            _0x1534e0 >= this.animStartT + this.animDur && (this.timedOut = !0);
        }
    };
}

function _0x23b397() {
    var _0x40df24 = _0x5b308c && 0x1f4 > _0x2375e1 ? 1.4 : 0x1;
    _0x1f6753.w = _0x1f6753.h = 0xc8 * interfS * _0x40df24;
    _0x154a0f.w = _0x154a0f.h = 0xc8 * interfS * _0x40df24;
    _0x35b993.w = _0x35b993.h = 0xc8 * interfS * _0x40df24;
    _0x558661.w = 60 * pixelRat * _0x40df24;
    _0x558661.h = 30 * pixelRat * _0x40df24;
    _0x1f6753.x = 25 * pixelRat * _0x40df24 + _0x1f6753.w / 0x2;
    _0x1f6753.y = canvasH - (0x28 * pixelRat + _0x1f6753.w / 0x2);
    _0x5e9cd7 && (_0x1f6753.x = canvasW - _0x1f6753.x);
    _0x154a0f.x = _0x1f6753.x;
    _0x154a0f.y = _0x5b308c ? _0x1f6753.y - (0xa * pixelRat * _0x40df24 + _0x154a0f.w / 0x2 + _0x1f6753.w / 0x2) : _0x1f6753.y;
    _0x35b993.x = _0x1f6753.x;
    _0x35b993.y = _0x154a0f.y - (0xa * pixelRat * _0x40df24 + _0x35b993.w / 0x2 + _0x154a0f.w / 0x2);
    _0x558661.x = Math.min(canvasW / 0x2 + 0x64 * pixelRat * _0x40df24, 0.8 * canvasW);
    _0x558661.y = 0xf * pixelRat + _0x558661.h / 0x2;
    _0x1bd898.setPosAndSize(_0x558661.x - (_0x558661.w / 0x2 + 0xa * pixelRat * _0x40df24), _0x558661.y, 0x3c * pixelRat * _0x40df24, 0x1e * pixelRat * _0x40df24, 0x1, 0.5);
    _0xcb461b.setPosAndSize(_0x1bd898.x, _0x1bd898.y + _0x1bd898.h / 0x2 + 0xa * pixelRat * _0x40df24, 0x3c * pixelRat * _0x40df24, 0x1e * pixelRat * _0x40df24, 0.5, 0);
    upbutton.setPosAndSize(_0x558661.x, _0x1bd898.y + _0x1bd898.h / 0x2 + 0xa * pixelRat * _0x40df24, 0x3c * pixelRat * _0x40df24, 0x1e * pixelRat * _0x40df24, 0.5, 0);
    button_zoomplus.setPosAndSize(_0x558661.x, _0x1bd898.y + (_0x1bd898.h*4) / 0x2 + 0xa * pixelRat * _0x40df24, 0x3c * pixelRat * _0x40df24, 0x1e * pixelRat * _0x40df24, 0.5, 0);
    button_zoomminus.setPosAndSize(_0x1bd898.x, _0x1bd898.y + (_0x1bd898.h*4) / 0x2 + 0xa * pixelRat * _0x40df24, 0x3c * pixelRat * _0x40df24, 0x1e * pixelRat * _0x40df24, 0.5, 0);
    button_dkey.setPosAndSize(_0x1bd898.x, _0x1bd898.y + (_0x1bd898.h*7) / 0x2 + 0xa * pixelRat * _0x40df24, 0x3c * pixelRat * _0x40df24, 0x1e * pixelRat * _0x40df24, 0.5, 0);
    // inMobile = true
    for (_0x40df24 = 0; _0x40df24 < _0x57947c.length; _0x40df24++) _0x57947c[_0x40df24].visible = _0x5b308c;
    _0x154a0f.visible = !0;
    _0x35b993.visible = !0;
    
    _0x1bd898.visible = _0x1bd898.touchEnabled = _0x5b308c;
    _0xcb461b.visible = _0xcb461b.touchEnabled = _0x5b308c && (KTestingExperimental || KTestingBeta);
    upbutton.visible = upbutton.touchEnabled = _0x5b308c && (KTestingExperimental || KTestingBeta);
    button_zoomplus.visible = button_zoomplus.touchEnabled = _0x5b308c  && (KTestingExperimental || KTestingBeta);
    button_zoomminus.visible = button_zoomminus.touchEnabled = _0x5b308c && (KTestingExperimental || KTestingBeta);
    button_dkey.visible = button_dkey.touchEnabled = _0x5b308c  && (KTestingExperimental || KTestingBeta);
    
}
_0x3ad1cd.addEventListener('gesturestart', function (_0xc54c1e) {
    _0xc54c1e.preventDefault();
});

function _0x1cf18c() {
    for (var _0x15b994 = 0; _0x15b994 < _0x57947c.length; _0x15b994++) {
        var _0x406e09 = _0x57947c[_0x15b994];
        _0x406e09.pressed = !0x1;
        _0x406e09.pressedTouchID = -0x1;
    }
    _0x197e21 = !0x1;
}
_0x3ad1cd.ontouchstart = function (_0x478b49) {
    _0x46ab72();
    0x1 == _0x478b49.touches.length && _0x1cf18c();
    if (isAliveInGame) {
        for (var _0x2b3904 = 0; _0x2b3904 < _0x478b49.changedTouches.length; _0x2b3904++)
            for (var _0x4af2f1 = _0x478b49.changedTouches[_0x2b3904], _0x1fd20a = 0; _0x1fd20a < _0x57947c.length; _0x1fd20a++) {
                var _0x1b9019 = _0x57947c[_0x1fd20a];
                if (_0x1b9019.testPosHitsButton(_0x4af2f1.clientX * pixelRat, _0x4af2f1.clientY * pixelRat) && !_0x1b9019.pressed && _0x1b9019.touchEnabled) {
                    _0x478b49.preventDefault();
                    _0x1b9019.pressed = !0;
                    _0x1b9019.pressedTouchID = _0x4af2f1.identifier;
                    _0x1b9019.onButtonTouchStart();
                    return;
                }
            }
        _0x149353 || _0x197e21 ? (_0x16763 = _0x478b49.touches[0].clientX * pixelRat, _0x42c274 = _0x478b49.touches[0].clientY * pixelRat, _0x4d7721()) : (_0x4af2f1 = _0x478b49.changedTouches[0], _0x197e21 = !0, _0x46c7b9 = _0x4af2f1.clientX * pixelRat, _0x4ba688 = _0x4af2f1.clientY * pixelRat, _0x103c95 = _0x46c7b9, _0x2c19ea = _0x4ba688, _0x579800 = _0x4af2f1.identifier);
    }
};
var _0x27ec55 = 0,
    _0x509047 = 0,
    _0x537dc3 = 0,
    _0x486373 = 0x1;
_0x3ad1cd.ontouchmove = function (_0x5d99f3) {
    _0x46ab72();
    _0x5d99f3.preventDefault();
    for (var _0x35c6d8 = 0; _0x35c6d8 < _0x5d99f3.changedTouches.length; _0x35c6d8++) {
        var _0x57c2af = _0x5d99f3.changedTouches[_0x35c6d8];
        if (_0x57c2af.identifier == _0x154a0f.pressedTouchID) {
            if (-0x1 == _0x1f6753.pressedTouchID) {
                var _0x3be24e = _0x1f6753.testPosHitsButton(_0x57c2af.clientX * pixelRat, _0x57c2af.clientY * pixelRat),
                    _0x57c2af = _0x1f6753.pressed;
                (_0x1f6753.pressed = _0x3be24e) && !_0x57c2af ? _0x386281(_0x29bf00, !0) : !_0x3be24e && _0x57c2af && _0x386281(_0x29bf00, !0x1);
            }
        } else if (_0x149353) _0x16763 = _0x57c2af.clientX * pixelRat, _0x42c274 = _0x57c2af.clientY * pixelRat, _0x4d7721();
        else if (_0x197e21 && _0x57c2af.identifier == _0x579800) {
            var _0x3be24e = _0x57c2af.clientX * pixelRat - _0x46c7b9,
                _0x53b60c = _0x57c2af.clientY * pixelRat - _0x4ba688,
                _0x57c2af = Math.sqrt(_0x3be24e * _0x3be24e + _0x53b60c * _0x53b60c);
            if (0 < _0x57c2af) {
                _0x3be24e /= _0x57c2af;
                _0x53b60c /= _0x57c2af;
                _0x57c2af = Math.min(0x1, _0x57c2af / (_0x161ba5 * pixelRat));
                0.35 > _0x57c2af && (_0x57c2af = 0);
                var _0x38cc7b = 0x12c * pixelRat * Math.pow(_0x57c2af, 0x2);
                _0x511cb1 = _0x5b2dfd(_0x165f20, Math.atan2(_0x53b60c, _0x3be24e));
                _0x3423ed = _0x57c2af;
                _0x103c95 = _0x46c7b9 + _0x161ba5 * pixelRat * _0x3be24e * _0x57c2af;
                _0x2c19ea = _0x4ba688 + _0x161ba5 * pixelRat * _0x53b60c * _0x57c2af;
                _0x16763 = canvasW / 0x2 + _0x3be24e * _0x38cc7b;
                _0x42c274 = canvasH / 0x2 + _0x53b60c * _0x38cc7b;
                _0x4d7721();
            }
        }
    }
};
_0x3ad1cd.ontouchend = function (_0x53abd3) {
    for (var _0x5bb6fe = 0; _0x5bb6fe < _0x53abd3.changedTouches.length; _0x5bb6fe++) {
        var _0x432a44 = _0x53abd3.changedTouches[_0x5bb6fe];
        if (_0x197e21 && _0x432a44.identifier == _0x579800) _0x197e21 = !0x1, _0x579800 = -0x1;
        else
            for (var _0x1e2847 = 0; _0x1e2847 < _0x57947c.length; _0x1e2847++) {
                var _0x10462c = _0x57947c[_0x1e2847];
                if (_0x10462c.pressed && _0x10462c.pressedTouchID == _0x432a44.identifier && _0x10462c.touchEnabled) {
                    _0x10462c.pressed = !0x1;
                    _0x10462c.pressedTouchID = -0x1;
                    if (isAliveInGame) _0x10462c.onButtonTouchEnd();
                    return;
                }
            }
    }
};
_0x3ad1cd.ontouchcancel = function (_0x461eb7) {
    console.log('touch cancel');
    _0x3ad1cd.ontouchend(_0x461eb7);
};
_0x3ad1cd.ontouchleave = function (_0x1fc1e1) {
    console.log('touch leave');
};
GameObj.prototype = {
    'id': 0,
    'oType': o_berry,
    'spawnTime': 0,
    'rPer': 0,
    'updateTime': 0,
    'x': 0,
    'y': 0,
    'ox': 0,
    'oy': 0,
    'nx': 0,
    'ny': 0,
    'rad': 0,
    'oRad': 0,
    'nRad': 0,
    'angle': 0,
    'oAngle': 0,
    'angleDelta': 0,
    'moveUpdF': 0,
    'z': 0,
    'name': '',
    'dead': !0x1,
    'type': 0,
    'curBiome': 0,
    'isRectangle': !0x1,
    'rectW': 0,
    'rectH': 0,
    'specType': 0,
    'toString': function () {
        return '[GObj t=' + this.oType + ' id=' + this.id + ']';
    }
};
GameObj.prototype.flag_hurt = !0x1;
GameObj.prototype.hpPer = GameObj.prototype.hpPer_n = GameObj.prototype.hpBarA = 0;
GameObj.prototype.infectionPer = GameObj.prototype.infectionPer_n = GameObj.prototype.infectionBarA = 0;
GameObj.prototype.hpBarTimeoutT = 0;
GameObj.prototype.alwaysPlainOutline = !0x1;
GameObj.prototype.doesDrawEffectScale = !0x1;
GameObj.prototype.drawEffectScale_Slow = !0x1;
GameObj.prototype.customInterfaceDraw = !0x1;
GameObj.prototype.animateRadOnSpawn = !0;
GameObj.prototype.customDraw = function (_0x519d3f) {
    switch (this.oType) {
    case o_hill:
        switch (this.curBiome) {
        case _0x55aace:
            _0x519d3f ? _0x110b78(0, 0, this.rad, _0x19a7a3) : _0x110b78(0, 0, this.rad - 1.5, _0x54901d);
            break;
        case _0x4e9b48:
            _0x519d3f ? _0x110b78(0, 0, this.rad, this.getOutlineColor()) : _0x110b78(0, 0, this.rad - 1.5, _0x493161);
            break;
        case _0x35f8d3:
            _0x519d3f ? _0x110b78(0, 0, this.rad, 'white') : _0x110b78(0, 0, this.rad - 1.5, _0x205ed4);
            break;
        default:
            _0x519d3f ? _0x110b78(0, 0, this.rad, this.getOutlineColor()) : _0x110b78('', _0x44bd8a);
        }
        break;
    case o_berryBush:
        ctx.save();
        var _0x2d663d;
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        var _0x350a05;
        _0x2d663d = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x2d663d);
        var _0x1544cf = this.curBiome == _0x4e9b48 ? _0x3385f8 : _0x356bc3;
        ctx.fillStyle = _0x1544cf;
        _0x519d3f = 0.8 * this.rad;
        this.drawOutlinedCircle('', _0x1544cf);
        ctx.globalAlpha *= 0.98;
        _0x350a05 = 0.5 * -_0x519d3f + 0xa * this.rPer;
        var _0x438d1d = Math.max(0, 0.65 * _0x519d3f + _0x2d663d) + 0x2;
        _0x110b78(0.5 * -_0x519d3f, _0x350a05, _0x438d1d, _0x1544cf);
        _0x350a05 = 0.5 * -_0x519d3f - 0xa * this.rPer;
        _0x438d1d = Math.max(0, 0.73 * _0x519d3f - _0x2d663d);
        _0x110b78(0.5 * _0x519d3f, _0x350a05, _0x438d1d, _0x1544cf);
        _0x438d1d = Math.max(0, 0.78 * _0x519d3f + _0x2d663d);
        _0x110b78(0.6 * _0x519d3f, 0.4 * _0x519d3f, _0x438d1d, _0x1544cf);
        _0x350a05 = 0.5 * _0x519d3f + 0xa * this.rPer;
        _0x438d1d = Math.max(0, 0.6 * _0x519d3f + this.rPer - _0x2d663d);
        _0x110b78(0.5 * -_0x519d3f, _0x350a05, _0x438d1d, _0x1544cf);
        ctx.restore();
        break;
    case o_fruitTree:
        this.drawOutlinedCircle('', this.curBiome == _0x55aace ? '#9b702b' : '#1AAE31');
        ctx.save();
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x2d663d);
        ctx.fillStyle = _0x557a1b;
        _0x519d3f = 0.75 * this.rad;
        ctx.globalAlpha *= 0.8;
        ctx.beginPath();
        ctx.arc(0.5 * -_0x519d3f, 0.5 * -_0x519d3f + 0xa * this.rPer, Math.max(0, 0.65 * _0x519d3f + _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.5 * _0x519d3f, 0.5 * -_0x519d3f - 0xa * this.rPer, Math.max(0, 0.73 * _0x519d3f - _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.6 * _0x519d3f, 0.4 * _0x519d3f, Math.max(0, 0.78 * _0x519d3f + _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.5 * -_0x519d3f, 0.5 * _0x519d3f, Math.max(0, 0.6 * _0x519d3f + this.rPer - _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.restore();
        break;
    case o_planktonBush:
        ctx.save();
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x2d663d);
        _0x519d3f = 0.8 * this.rad;
        _0x1544cf = _0x3385f8;
        this.drawOutlinedCircle('', _0x1544cf);
        ctx.globalAlpha *= 0.98;
        _0x350a05 = 0.5 * -_0x519d3f + 0xa * this.rPer;
        _0x438d1d = Math.max(0, 0.65 * _0x519d3f + _0x2d663d) + 0x2;
        _0x110b78(0.5 * -_0x519d3f, _0x350a05, _0x438d1d, _0x1544cf);
        _0x350a05 = 0.5 * -_0x519d3f - 0xa * this.rPer;
        _0x438d1d = Math.max(0, 0.73 * _0x519d3f - _0x2d663d);
        _0x110b78(0.5 * _0x519d3f, _0x350a05, _0x438d1d, _0x1544cf);
        _0x438d1d = Math.max(0, 0.78 * _0x519d3f + _0x2d663d);
        _0x110b78(0.6 * _0x519d3f, 0.4 * _0x519d3f, _0x438d1d, _0x1544cf);
        _0x350a05 = 0.5 * _0x519d3f + 0xa * this.rPer;
        _0x438d1d = Math.max(0, 0.6 * _0x519d3f + this.rPer - _0x2d663d);
        _0x110b78(0.5 * -_0x519d3f, _0x350a05, _0x438d1d, _0x1544cf);
        ctx.restore();
        break;
    case o_waterSpot:
        ctx.save();
        _0x2d663d = this.curBiome == _0x35f8d3 ? '#7790d8' : _0x206596;
        this.drawOutlinedCircle('', _0x2d663d);
        0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 0x4 * Math.sin(0x2 * Math.PI / 0x7 * _0x2d663d);
        ctx.fillStyle = this.curBiome == _0x35f8d3 ? '#7790d8' : _0x206596;
        ctx.beginPath();
        ctx.arc(0, 0, Math.max(0, this.rad - _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        0x2 != _0x14fca5 && (ctx.beginPath(), ctx.arc(0.3 * this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.35 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill());
        ctx.restore();
        break;
    case o_berry:
        _0x350a05 = _0x2c4174;
        this.curBiome == _0x35f8d3 && (_0x350a05 = '#ac443c');
        this.drawOutlinedCircle('', _0x350a05);
        break;
    case o_coconut:
        if (_0x350a05 = _0x2f22f9('img/coconut' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, 0x1 == this.specType2 ? (0 == this.angle && (this.angle = this.rPer * Math.PI * 0x2), this.angle += 0.4, ctx.rotate(this.angle)) : 0x2 == this.specType2 ? ctx.rotate(this.angle) : ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_banana:
        if (_0x350a05 = _0x2f22f9('img/banana' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, 0x1 == this.specType2 ? (0 == this.angle && (this.angle = this.rPer * Math.PI * 0x2), this.angle += 0.4, ctx.rotate(this.angle)) : 0x2 == this.specType2 ? ctx.rotate(this.angle) : ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_raspberry:
        if (_0x350a05 = _0x2f22f9('img/rasp' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, 0x1 == this.specType2 ? (0 == this.angle && (this.angle = this.rPer * Math.PI * 0x2), this.angle += 0.4, ctx.rotate(this.angle)) : 0x2 == this.specType2 ? ctx.rotate(this.angle) : ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_pear:
        if (_0x350a05 = _0x2f22f9('img/pear' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, 0x1 == this.specType2 ? (0 == this.angle && (this.angle = this.rPer * Math.PI * 0x2), this.angle += 0.4, ctx.rotate(this.angle)) : 0x2 == this.specType2 ? ctx.rotate(this.angle) : ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_seaweed:
        if (_0x350a05 = _0x2f22f9('img/seaweed' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_starfish:
        if (_0x350a05 = _0x2f22f9('img/starfish' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_kelp:
        if (_0x350a05 = _0x2f22f9('img/kelp' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_clam:
        if (_0x350a05 = _0x2f22f9('img/clam' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_conchShell:
        if (_0x350a05 = _0x2f22f9('img/conch' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = 0x1 * this.rad, ctx.save(), ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        break;
    case o_flockspot:
    case o_flock:
        break;
    case o_ostrichEgg:
        if (_0x350a05 = _0x2f22f9('skins/land/ostrich/' + this.speciesType + '/ostrichEgg' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.save(), ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        break;
    case o_gift:
        this.drawOutlinedCircle('', 'red');
        break;
    case o_cartSaddle:
        this.drawOutlinedCircle('', 'green');
        break;
    case o_saddle:
        this.drawOutlinedCircle('', 'blue');
        break;
    case o_pointer:
        break;
    case o_egg:
        _0x350a05 = 'egg';

        0x1 == this.specType && (_0x350a05 = 'goldenegg');
        let opacity = 1;
        if(this.flag_flying) opacity = 0.33;

        if (_0x350a05 = _0x2f22f9('img/' + _0x350a05 + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.save(),ctx.globalAlpha = opacity,ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        break;
    case o_beeHive:
        if (_0x350a05 = _0x2f22f9('img/beehive' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.save(), ctx.rotate(0.5 * this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        break;
    case o_antHill:
        if (_0x350a05 = _0x2f22f9('img/desert/anthill/anthill.png')) _0x519d3f = this.rad, ctx.save(), ctx.rotate(0.5 * this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        break;
    case o_honeyComb:
        if (_0x350a05 = _0x2f22f9('img/honeycomb' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.save(), ctx.rotate(0.5 * this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        break;
    case o_quill:
        if (_0x350a05 = _0x2f22f9('img/quill.png')) _0x519d3f = this.rad, ctx.rotate(this.angle), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_plankton:
        this.drawOutlinedCircle('', _0x5a41ed);
        ctx.rotate(this.rPer * Math.PI * 0x2);
        _0x110b78(0.25 * this.rad, 0.4 * this.rad, (0.3 + 0.15 * this.rPer) * this.rad, '#905113');
        break;
    case o_healingStone:
        switch (this.curBiome) {
        case _0x4e9b48:
            _0x350a05 = '_ocean';
            break;
        case _0x35f8d3:
            _0x350a05 = '_arctic';
            break;
        default:
            _0x350a05 = '';
        }
        if (_0x350a05 = _0x2f22f9('img/healingStone' + _0x350a05 + '.png')) _0x519d3f = this.rad, ctx.save(), ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        break;
    case o_volcano:
        _0x110b78(0, 0, Math.max(0, 0x1 * this.rad), '#815427');
        _0x110b78(0, 0, Math.max(0, 0.6 * this.rad), '#6e4b29');
        _0x110b78(0, 0, Math.max(0, 0.5 * this.rad), '#543d28');
        _0x110b78(0, 0, Math.max(0, 0.45 * this.rad), '#3f3124');
        _0x110b78(0, 0, Math.max(0, 0.33 * this.rad), '#241e19');
        _0x110b78(0, 0, Math.max(0, 0.25 * this.rad), '#120f0d');
        _0x110b78(0, 0, Math.max(0, 0.2 * this.rad), _0x1a1848);
        break;
    case o_lavaLake:
        ctx.save();
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 2.5 * Math.sin(0x2 * Math.PI / 0x4 * _0x2d663d);
        if (_0x519d3f) ctx.fillStyle = _0x1a1848, ctx.beginPath(), ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI), ctx.fill();
        else {
            ctx.fillStyle = _0x1a1848;
            ctx.beginPath();
            ctx.arc(0, 0, Math.max(0, this.rad - _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI);
            ctx.fill();
            0x2 != _0x14fca5 && (ctx.beginPath(), ctx.arc(0.45 * this.rad, 0.45 * -this.rad + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0, 0x2 * Math.PI), ctx.fill());
            ctx.save();
            ctx.globalAlpha = 0x1 - this.underwaterA;
            _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
            _0x2d663d = 0x8 * Math.sin(0x2 * Math.PI / 1.5 * _0x2d663d);
            this.flag_underWater && (ctx.globalAlpha *= 0.5, this.animalType == _0x17b991 && (ctx.globalAlpha = 0.3));
            ctx.fillStyle = 'yellow';
            _0x350a05 = 0.15 * this.rad;
            ctx.beginPath();
            for (i = _0x519d3f = 0x1; i <= _0x519d3f; i++) ctx.save(), ctx.globalAlpha = 0.2, ctx.rotate(this.rPer * Math.PI * 0x2 * i), ctx.beginPath(), ctx.arc(-0.35 * this.rad, -0.33 * this.rad, Math.max(0, _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.35 * this.rad, -0.32 * this.rad, Math.max(0, _0x350a05 - _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.35 * this.rad, 0.36 * this.rad, Math.max(0, _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(-0.35 * this.rad, 0.35 * this.rad, Math.max(0, _0x350a05 - _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.restore();
            ctx.restore();
        }
        ctx.restore();
        break;
    case o_bog:
        ctx.save();
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 2.5 * Math.sin(0x2 * Math.PI / 0x4 * _0x2d663d);
        if (_0x519d3f) ctx.fillStyle = '#5e5348', ctx.beginPath(), ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI), ctx.fill();
        else {
            ctx.fillStyle = '#706962';
            ctx.beginPath();
            ctx.arc(0, 0, Math.max(0, this.rad - _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI);
            ctx.fill();
            0x2 != _0x14fca5 && (ctx.beginPath(), ctx.arc(0.45 * this.rad, 0.45 * -this.rad + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0, 0x2 * Math.PI), ctx.fill());
            ctx.save();
            ctx.globalAlpha = 0x1 - this.underwaterA;
            _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
            _0x2d663d = 0x8 * Math.sin(0x2 * Math.PI / 1.5 * _0x2d663d);
            this.flag_underWater && (ctx.globalAlpha *= 0.5, this.animalType == _0x17b991 && (ctx.globalAlpha = 0.3));
            ctx.fillStyle = 'yellow';
            _0x350a05 = 0.15 * this.rad;
            ctx.beginPath();
            for (i = _0x519d3f = 0x1; i <= _0x519d3f; i++) ctx.save(), ctx.globalAlpha = 0.2, ctx.rotate(this.rPer * Math.PI * 0x2 * i), ctx.beginPath(), ctx.arc(-0.35 * this.rad, -0.33 * this.rad, Math.max(0, _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.35 * this.rad, -0.32 * this.rad, Math.max(0, _0x350a05 - _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.35 * this.rad, 0.36 * this.rad, Math.max(0, _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(-0.35 * this.rad, 0.35 * this.rad, Math.max(0, _0x350a05 - _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.restore();
            ctx.restore();
        }
        ctx.restore();
        break;
    case o_cloudBerry:
        if (_0x350a05 = _0x2f22f9('img/cloudberry' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, 0x1 == this.specType2 ? (0 == this.angle && (this.angle = this.rPer * Math.PI * 0x2), this.angle += 0.4, ctx.rotate(this.angle)) : 0x2 == this.specType2 ? ctx.rotate(this.angle) : ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_arcticNut:
        if (_0x350a05 = _0x2f22f9('img/arcticNut' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, 0x1 == this.specType2 ? (0 == this.angle && (this.angle = this.rPer * Math.PI * 0x2), this.angle += 0.4, ctx.rotate(this.angle)) : 0x2 == this.specType2 ? ctx.rotate(this.angle) : ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_carrot:
        if (_0x350a05 = _0x2f22f9('img/carrot' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.save(), ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        break;
    case o_watermelon:
        if (_0x350a05 = _0x2f22f9('img/watermelon' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.save(), ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        break;
    case o_poisonBerry:
        ctx.save();
        _0x110b78(0, 0, this.rad, this.isEdibleOutlined() ? _0x45ff9a : _0x26f066(this.curBiome));
        _0x110b78(0, 0, Math.max(0, this.rad - 0x2), '#74e61e');
        ctx.restore();
        break;
    case o_watermelonSlice:
        if (_0x350a05 = _0x2f22f9('img/watermelonSlice' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.save(), ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        break;
    case o_meatSmall:
    case o_meatMedium:
    case o_meatLarge:
        if (_0x350a05 = _0x2f22f9('img/meat' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.save(), ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        break;
    case o_mushroom:
    case o_bigMushroom:
        _0x350a05 = 0x2;
        _0x2d663d = this.oType == o_bigMushroom ? 0xf : 0x9;
        ctx.fillStyle = this.getOutlineColor();
        ctx.beginPath();
        ctx.rect(-_0x2d663d / 0x2 - _0x350a05, -_0x350a05, _0x2d663d + 0x2 * _0x350a05, 0.8 * this.rad + 0x2 * _0x350a05);
        ctx.fill();
        ctx.fillStyle = '#FFCA49';
        ctx.beginPath();
        ctx.rect(-_0x2d663d / 0x2, 0 + _0x350a05 / 0x2, _0x2d663d, 0.8 * this.rad - _0x350a05 / 0x2);
        ctx.fill();
        0x2 != _0x14fca5 && (ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad), Math.PI, 0x2 * Math.PI), ctx.fillStyle = this.getOutlineColor(), ctx.fill());
        ctx.beginPath();
        ctx.arc(0, 0, Math.max(0, this.rad - _0x350a05), Math.PI, 0x2 * Math.PI);
        ctx.fillStyle = this.oType == o_bigMushroom ? '#B8413B' : '#CFAD59';
        ctx.fill();
        break;
    case o_bigMushroomBush:
        _0x350a05 = 0x2;
        ctx.save();
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x2d663d);
        ctx.fillStyle = '#45D157';
        ctx.globalAlpha *= 0.93;
        ctx.beginPath();
        ctx.arc(0.5 * -this.rad, 0.5 * -this.rad + 0xa * this.rPer, Math.max(0, 0.55 * this.rad + _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.5 * this.rad, 0.5 * -this.rad - 0xa * this.rPer, Math.max(0, 0.43 * this.rad - _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.6 * this.rad, 0.4 * this.rad, Math.max(0, 0.48 * this.rad + _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.5 * -this.rad, 0.5 * this.rad, Math.max(0, 0.4 * this.rad + this.rPer - _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.restore();
        _0x2d663d = 0x14;
        ctx.fillStyle = this.getOutlineColor();
        ctx.beginPath();
        ctx.rect(-_0x2d663d / 0x2 - _0x350a05, -_0x350a05, _0x2d663d + 0x2 * _0x350a05, 0.8 * this.rad + 0x2 * _0x350a05);
        ctx.fill();
        ctx.fillStyle = '#FFCA49';
        ctx.beginPath();
        ctx.rect(-_0x2d663d / 0x2, 0 + _0x350a05 / 0x2, _0x2d663d, 0.8 * this.rad - _0x350a05 / 0x2);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0, 0, Math.max(0, 0.8 * this.rad), Math.PI, 0x2 * Math.PI);
        ctx.fillStyle = this.getOutlineColor();
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0, 0, Math.max(0, 0.8 * this.rad - _0x350a05), Math.PI, 0x2 * Math.PI);
        ctx.fillStyle = '#B8413B';
        ctx.fill();
        break;
    case o_lillypad:
        if (_0x350a05 = _0x2f22f9('img/lillypad' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) _0x519d3f = this.rad, ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        break;
    case o_hidingHole:
        var rad = this.rad;
        if(gameObjsByID[myPlayerID] && gameObjsByID[myPlayerID].lastHidingHoleID == this.id) rad *= 2;
        this.drawOutlinedCircle22('', '#9F8641', rad);
        _0x110b78(0 - this.rPer, 0 - this.rPer, Math.max(0, rad - 0x7), '#7E6A35');
        _0x110b78(0 + this.rPer, 0x1, Math.max(0, rad - 0xc), '#5C4E28');
        break;
    case o_abilityObj:
        console.log('ERROR: ' + this + ' should be subclassed!');
        break;
    case o_hidingHoleOcean:
        var rad = this.rad;
        if(gameObjsByID[myPlayerID] && gameObjsByID[myPlayerID].lastHidingHoleID == this.id) rad *= 2;
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x350a05 = 1.2;
        _0x438d1d = 3.5 * Math.cos(0x2 * Math.PI / _0x350a05 * _0x2d663d);
        _0x350a05 = 2.5 * Math.sin(0x2 * Math.PI / _0x350a05 * _0x2d663d);
        this.drawOutlinedCircle22('', '#4A549D', rad);
        0x2 != _0x14fca5 && _0x110b78(0 + _0x438d1d / 0x2 - this.rPer, 0 + _0x350a05 / 0x2 - this.rPer, Math.max(0, rad - 0x6), '#444C8B');
        _0x110b78(0 + _0x438d1d / 4.5 + this.rPer, 0x1 + _0x350a05 / 1.5, Math.max(0, rad - 0xe), '#4A549D');
        _0x110b78(0 + _0x438d1d / 1.5 - 0x2 * this.rPer, _0x350a05, Math.max(0, rad - 18.5 + _0x350a05 / 0x5), '#3F4477');
        _0x110b78(0 + _0x438d1d / 1.5 - 0x2 * this.rPer, _0x350a05, Math.max(0, rad - 22.5 + _0x350a05 / 0xb), '#353860');
        break;
    case o_bigHidingHole:
        var rad = this.rad;
        if(gameObjsByID[myPlayerID] && gameObjsByID[myPlayerID].lastHidingHoleID == this.id) rad *= 2;
        this.drawOutlinedCircle22('', '#9F8641', rad);
        0x2 != _0x14fca5 && _0x110b78(0 - this.rPer, 0 - this.rPer, Math.max(0, rad - 0x7), '#7E6A35');
        _0x110b78(0 + this.rPer, 0x1, Math.max(0, rad - 0xe), '#5C4E28');
        _0x110b78(0 - 0x2 * this.rPer - 0x3, 0x1, Math.max(0, rad - 18.5), '#40371D');
        break;
    case o_hidingBush:
        ctx.save();
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x2d663d);
        switch (this.curBiome) {
        case _0x4e9b48:
            _0x350a05 = '#786810';
            break;
        case _0x35f8d3:
            _0x350a05 = '#CED0D0';
            break;
        default:
        case _0x20cd91:
            _0x350a05 = '#45D157';
            break;
        case _0x55aace:
            _0x350a05 = '#9b6f31';
        }
        ctx.fillStyle = _0x350a05;
        ctx.globalAlpha *= 0.93;
        ctx.beginPath();
        ctx.arc(0.5 * -this.rad, 0.5 * -this.rad + 0xa * this.rPer, Math.max(0, 0.65 * this.rad + _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.5 * this.rad, 0.5 * -this.rad - 0xa * this.rPer, Math.max(0, 0.73 * this.rad - _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.6 * this.rad, 0.4 * this.rad, Math.max(0, 0.78 * this.rad + _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.5 * -this.rad, 0.5 * this.rad, Math.max(0, 0.6 * this.rad + this.rPer - _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.restore();
        break;
    case o_biome_volcano:
        ctx.save();
        0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 1.5 * Math.sin(0x2 * Math.PI / 0x6 * _0x2d663d);
        _0x350a05 = 0x4;
        ctx.fillStyle = '#604729';
        ctx.beginPath();
        ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI);
        ctx.fill();
        0x2 != _0x14fca5 && (ctx.fillStyle = '#8A681B', ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.45 * this.rad, 0.45 * -this.rad + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath());
        ctx.restore();
        break;
    case o_biome_poison:
        ctx.save();
        0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 1.5 * Math.sin(0x2 * Math.PI / 0x6 * _0x2d663d);
        _0x350a05 = 0x4;
        ctx.fillStyle = '#605649';
        ctx.beginPath();
        ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI);
        ctx.fill();
        0x2 != _0x14fca5 && (ctx.fillStyle = '#5e4f36', ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.45 * this.rad, 0.45 * -this.rad + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath());
        ctx.restore();
        break;
    case o_coldStorm:
    case o_heatStorm:
    case o_tsunami:
    case o_dustStorm:
        break;
    case o_snowStorm:
    case o_rainStorm:
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        ctx.save();
        ctx.rotate(this.angle + _0x55d748(0xb4));
        ctx.globalAlpha = 0.1 + this.cloudOpacity;
        if (_0x350a05 = _0x2f22f9('img/disasters/cloud.png')) _0x519d3f = 0x2 * this.rad, ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        _0x2d663d = 0xf * Math.sin(0x2 * Math.PI / 0x6 * _0x2d663d);
        ctx.globalAlpha = 0.1;
        if (_0x350a05 = _0x2f22f9('img/disasters/cloud1.png')) _0x519d3f = 0x2 * this.rad, _0x519d3f = Math.max(0, _0x519d3f - 0x5 + _0x2d663d), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f);
        ctx.restore();
        break;
    case o_mudSpot:
        ctx.save();
        0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 1.5 * Math.sin(0x2 * Math.PI / 0x6 * _0x2d663d);
        _0x350a05 = 0x4;
        ctx.fillStyle = '#8B7833';
        ctx.beginPath();
        ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI);
        ctx.fill();
        0x2 != _0x14fca5 && (ctx.fillStyle = '#98803A', ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.45 * this.rad, 0.45 * -this.rad + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), 0x32 < this.rad && (ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0xa, 0, 0x2 * Math.PI), ctx.fill()));
        ctx.restore();
        break;
    case o_arcticIce:
        ctx.save();
        0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 1.5 * Math.sin(0x2 * Math.PI / 0x6 * _0x2d663d);
        _0x350a05 = 0x4;
        ctx.fillStyle = '#8CC3C7';
        ctx.beginPath();
        ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI);
        ctx.fill();
        0x2 != _0x14fca5 && (ctx.fillStyle = '#9DDADE', ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.45 * this.rad, 0.45 * -this.rad + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0 == this.specType ? 0x8 : 0x4, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath());
        ctx.restore();
        break;
    case o_lake:
        ctx.save();
        0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x2d663d = 5.5 * Math.sin(0x2 * Math.PI / 0x4 * _0x2d663d);
        _0x350a05 = 0x4;
        ctx.fillStyle = _0x493161;
        ctx.beginPath();
        ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.fillStyle = this.curBiome == _0x35f8d3 ? '#8da0d6' : _0x206596;
        ctx.beginPath();
        ctx.arc(0, 0, Math.max(0, this.rad - _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI);
        ctx.fill();
        0x2 != _0x14fca5 && (ctx.beginPath(), ctx.arc(0.45 * this.rad, 0.45 * -this.rad + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0 == this.specType ? 0x8 : 0x4, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0, 0x2 * Math.PI), ctx.fill());
        ctx.restore();
        break;
    case o_biome_ocean_extraWater:
        ctx.save();
        0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
        _0x2d663d = (_0x1534e0 - _0x188f5a) / 0x3e8;
        _0x2d663d = 5.5 * Math.sin(0x2 * Math.PI / 0x5 * _0x2d663d);
        _0x350a05 = 0x4;
        _0x519d3f || (ctx.fillStyle = _0x2f824d, ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - _0x350a05 + _0x2d663d), 0, 0x2 * Math.PI), ctx.fill(), 0x2 != _0x14fca5 && (ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0, 0x2 * Math.PI), ctx.fill()));
        ctx.restore();
        break;
    case o_biome_ocean:
        _0x2d663d = (_0x1534e0 - _0x188f5a) / 0x3e8;
        _0x350a05 = -8.5 * Math.sin(0x2 * Math.PI / 0x5 * _0x2d663d);
        0x1 == (this.x > gameW / 0x2 ? 0x1 : 0) ? (ctx.fillStyle = _0x2f824d, ctx.fillRect(-this.rectW / 0x2 + _0x350a05, -this.rectH / 0x2 + _0x350a05 + 0xa, this.rectW - _0x350a05, this.rectH - _0x350a05 - 0xa), ctx.beginPath(), ctx.arc(-this.rectW / 0x2 + 0x32, -this.rectH / 0x2 + 0x32, 0x46 - _0x350a05, 0, 0x2 * Math.PI), ctx.fill(), _0x350a05 = 0x23) : (ctx.fillStyle = _0x2f824d, _0x350a05 *= -0x1, ctx.fillRect(-this.rectW / 0x2, -this.rectH / 0x2 - _0x350a05 + 0xa, this.rectW + _0x350a05, this.rectH + _0x350a05 - 0xa), _0x350a05 = 0x19);
        _0x394a6d(-this.rectW / 0x2 + _0x350a05, -this.rectH / 0x2 + _0x350a05, this.rectW / 0x2 - _0x350a05, this.rectH / 0x2 - _0x350a05, this.x, this.y);
        break;
    case o_beach:
        ctx.fillStyle = _0x493161;
        _0x519d3f = -this.rectW / 0x2;
        var _0x438d1d = this.rectW / 0x2,
            _0x1544cf = -this.rectH / 0x2,
            _0x532a75 = this.rectH / 0x2;
        ctx.beginPath();
        ctx.moveTo(_0x519d3f, _0x1544cf);
        var _0x49c72c = 0x1e,
            _0x122fdf = [-0xf, 0xa, -0xa, 0xc, 0, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0, -0x6],
            _0x3e78d6 = 0x2d,
            _0x326688 = 0,
            _0x42ed42 = gameW - this.x,
            _0xbe9bef = 0 - this.x,
            _0x298640 = gameH - this.y,
            _0x541fb1 = 0 - this.y;
        _0x2d663d = _0x519d3f - _0x49c72c;
        for (_0x350a05 = _0x1544cf; _0x350a05 < _0x532a75; _0x350a05 += _0x3e78d6) ctx.lineTo(Math.min(_0x42ed42, Math.max(_0xbe9bef, _0x2d663d + _0x122fdf[_0x326688])), _0x350a05), _0x326688 = (_0x326688 + 0x1) % _0x122fdf.length;
        ctx.lineTo(_0x519d3f, _0x532a75);
        _0x350a05 = _0x532a75 + _0x49c72c;
        for (_0x2d663d = _0x519d3f; _0x2d663d < _0x438d1d; _0x2d663d += _0x3e78d6) ctx.lineTo(_0x2d663d, Math.min(_0x298640, Math.max(_0x541fb1, _0x350a05 + _0x122fdf[_0x326688]))), _0x326688 = (_0x326688 + 0x1) % _0x122fdf.length;
        ctx.lineTo(_0x438d1d, _0x532a75);
        _0x2d663d = _0x438d1d + _0x49c72c;
        for (_0x350a05 = _0x532a75; _0x350a05 > _0x1544cf; _0x350a05 -= _0x3e78d6) ctx.lineTo(Math.min(_0x42ed42, Math.max(_0xbe9bef, _0x2d663d + _0x122fdf[_0x326688])), _0x350a05), _0x326688 = (_0x326688 + 0x1) % _0x122fdf.length;
        ctx.lineTo(_0x438d1d, _0x1544cf);
        _0x350a05 = _0x1544cf - _0x49c72c;
        for (_0x2d663d = _0x438d1d; _0x2d663d > _0x519d3f; _0x2d663d -= _0x3e78d6) ctx.lineTo(_0x2d663d, Math.min(_0x298640, Math.max(_0x541fb1, _0x350a05 + _0x122fdf[_0x326688]))), _0x326688 = (_0x326688 + 0x1) % _0x122fdf.length;
        ctx.closePath();
        ctx.fill();
        break;
    case o_biome_desert:
        ctx.fillStyle = _0x307049;
        ctx.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
        _0x350a05 = 0x23;
        _0x394a6d(-this.rectW / 0x2 + _0x350a05, -this.rectH / 0x2 + _0x350a05, this.rectW / 0x2 - _0x350a05, this.rectH / 0x2 - _0x350a05, this.x, this.y);
        ctx.fillStyle = _0x307049;
        _0x519d3f = -this.rectW / 0x2;
        _0x438d1d = this.rectW / 0x2;
        _0x1544cf = -this.rectH / 0x2 + 0x3;
        _0x532a75 = -this.rectH / 0x2 - 0xf;
        ctx.beginPath();
        ctx.moveTo(_0x519d3f, _0x1544cf);
        _0x49c72c = 0;
        _0x122fdf = [-0xf, 0x5, 0xa, 0, -0xa, 0x3, 0xc, 0x4, 0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0, -0x6];
        _0x3e78d6 = 0x3c;
        _0x326688 = 0;
        _0x298640 = gameH - this.y;
        _0x541fb1 = 0 - this.y;
        ctx.lineTo(_0x519d3f, _0x532a75);
        _0x350a05 = _0x532a75 + _0x49c72c;
        for (_0x2d663d = _0x519d3f; _0x2d663d < _0x438d1d; _0x2d663d += _0x3e78d6) ctx.lineTo(_0x2d663d, Math.min(_0x298640, Math.max(_0x541fb1, _0x350a05 + _0x122fdf[_0x326688]))), _0x326688 = (_0x326688 + 0x1) % _0x122fdf.length;
        ctx.lineTo(_0x438d1d, _0x532a75);
        ctx.lineTo(_0x438d1d, _0x1544cf);
        ctx.closePath();
        ctx.fill();
        break;
    case o_biome_arctic:
        ctx.fillStyle = '#ececec';
        ctx.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
        _0x519d3f = -this.rectW / 0x2;
        _0x438d1d = this.rectW / 0x2;
        _0x1544cf = this.rectH / 0x2 - 0x14;
        _0x532a75 = this.rectH / 0x2;
        snowLandWidth = this.rectW;
        snowLandHeight = this.rectH;
        ctx.beginPath();
        ctx.moveTo(_0x519d3f, _0x1544cf);
        _0x49c72c = 0x14;
        _0x122fdf = [-0xf, 0x5, 0xa, 0, -0xa, 0x3, 0xc, 0x4, 0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0, -0x6];
        _0x3e78d6 = 0x3c;
        _0x326688 = 0;
        _0x298640 = gameH - this.y;
        _0x541fb1 = 0 - this.y;
        ctx.lineTo(_0x519d3f, _0x532a75);
        _0x350a05 = _0x532a75 + _0x49c72c;
        for (_0x2d663d = _0x519d3f; _0x2d663d < _0x438d1d; _0x2d663d += _0x3e78d6) ctx.lineTo(_0x2d663d, Math.min(_0x298640, Math.max(_0x541fb1, _0x350a05 + _0x122fdf[_0x326688]))), _0x326688 = (_0x326688 + 0x1) % _0x122fdf.length;
        ctx.lineTo(_0x438d1d, _0x532a75);
        ctx.lineTo(_0x438d1d, _0x1544cf);
        ctx.closePath();
        ctx.fill();
        _0x350a05 = 0x14;
        _0x394a6d(-this.rectW / 0x2 + _0x350a05, -this.rectH / 0x2 + _0x350a05, this.rectW / 0x2 - _0x350a05, this.rectH / 0x2 - _0x350a05, this.x, this.y);
        break;
    case o_river:
        ctx.fillStyle = _0x206596;
        ctx.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
        ctx.fillStyle = _0x206596;
        _0x519d3f = -this.rectW / 0x2;
        _0x438d1d = this.rectW / 0x2;
        _0x1544cf = -this.rectH / 0x2 + 0x3;
        _0x532a75 = -this.rectH / 0x2 - 0xf;
        ctx.beginPath();
        ctx.moveTo(_0x519d3f, _0x1544cf);
        _0x49c72c = 0;
        _0x122fdf = [-0xf, 0x5, 0xa, 0, -0xa, 0x3, 0xc, 0x4, 0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0, -0x6];
        _0x3e78d6 = 0x3c;
        _0x326688 = 0;
        _0x298640 = gameH - this.y;
        _0x541fb1 = 0 - this.y;
        ctx.lineTo(_0x519d3f, _0x532a75);
        _0x350a05 = _0x532a75 + _0x49c72c;
        for (_0x2d663d = _0x519d3f; _0x2d663d < _0x438d1d; _0x2d663d += _0x3e78d6) ctx.lineTo(_0x2d663d, Math.min(_0x298640, Math.max(_0x541fb1, _0x350a05 + _0x122fdf[_0x326688]))), _0x326688 = (_0x326688 + 0x1) % _0x122fdf.length;
        ctx.lineTo(_0x438d1d, _0x532a75);
        ctx.lineTo(_0x438d1d, _0x1544cf);
        ctx.closePath();
        ctx.fill();
        ctx.fillStyle = _0x206596;
        _0x519d3f = -this.rectW / 0x2;
        _0x438d1d = this.rectW / 0x2;
        _0x1544cf = this.rectH / 0x2 - 0x3;
        _0x532a75 = this.rectH / 0x2 + 0xf;
        ctx.beginPath();
        ctx.moveTo(_0x519d3f, _0x1544cf);
        _0x49c72c = 0;
        _0x122fdf = [-0xf, 0x5, 0xa, 0, -0xa, 0x3, 0xc, 0x4, 0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0, -0x6];
        _0x3e78d6 = 0x3c;
        _0x326688 = 0;
        _0x298640 = gameH - this.y;
        _0x541fb1 = 0 - this.y;
        ctx.lineTo(_0x519d3f, _0x532a75);
        _0x350a05 = _0x532a75 + _0x49c72c;
        for (_0x2d663d = _0x519d3f; _0x2d663d < _0x438d1d; _0x2d663d += _0x3e78d6) ctx.lineTo(_0x2d663d, Math.min(_0x298640, Math.max(_0x541fb1, _0x350a05 + _0x122fdf[_0x326688]))), _0x326688 = (_0x326688 + 0x1) % _0x122fdf.length;
        ctx.lineTo(_0x438d1d, _0x532a75);
        ctx.lineTo(_0x438d1d, _0x1544cf);
        ctx.closePath();
        ctx.fill();
        if (_0x350a05 = _0x2f22f9('img/riverCurrent' + this.riverSpecT + '.png'))
            for (_0x519d3f = -this.rectW / 0x2, i = 0; 0x28 > i; i++) _0x2d663d = 0x64 / 0x78 * this.riverFlowSpeedX * 0x3e8, _0x2d663d = (_0x1534e0 - this.spawnTime) % _0x2d663d / _0x2d663d, ctx.drawImage(_0x350a05, _0x519d3f + 0x64 * _0x2d663d, -this.rectH / 0x2, 0x64, this.rectH), _0x519d3f += 0x64;
        break;
    case o_biome_land:
        ctx.fillStyle = _0x557a1b;
        ctx.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH);
        _0x350a05 = 0x2d;
        _0x394a6d(-this.rectW / 0x2 + _0x350a05, -this.rectH / 0x2 + _0x350a05, this.rectW / 0x2 - _0x350a05, this.rectH / 0x2 - _0x350a05, this.x, this.y);
        break;
    case o_rockHill:
        _0x350a05 = this.curBiome == _0x55aace ? _0x57d309 : _0x174576;
        _0x519d3f ? _0x110b78(0, 0, this.rad, this.getOutlineColor()) : _0x110b78(0, 0, this.rad - 1.5, _0x350a05);
        break;
    case o_lakeIsland:
        ctx.fillStyle = _0x493161;
        ctx.beginPath();
        ctx.arc(0, 0, Math.max(0, this.rad), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.fillStyle = '#E4D04C';
        ctx.beginPath();
        ctx.arc(-0x5 + 0xa * this.rPer, -0x5 + 0xa * this.rPer, 0.8 * this.rad, 0, 0x2 * Math.PI);
        ctx.fill();
        break;
    case o_lavaDrop:
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x350a05 = _0x93972d(_0x2d663d, 0x1, 0x5, 0x2);
        _0x2d663d = _0x93972d(_0x2d663d, 0x1, 0.2, 0x2);
        ctx.save();
        ctx.globalAlpha = 0.5;
        _0x110b78(0, 0, this.rad, _0x1a1848);
        _0x519d3f = -(-0.2 + _0x350a05) * _0x55d748(0x5a);
        ctx.save();
        ctx.scale(0x1, 0x1 + _0x2d663d);
        ctx.globalAlpha = 0.3;
        ctx.rotate(_0x519d3f);
        _0x110b78(0, 0, this.rad - _0x350a05, '#de9d23');
        ctx.restore();
        ctx.save();
        ctx.scale(0x1 + _0x2d663d, 0x1);
        ctx.globalAlpha = 0.1;
        ctx.rotate(_0x519d3f);
        _0x110b78(0, 0, 0.9 * this.rad - _0x350a05, 'yellow');
        ctx.restore();
        0x1 == this.specType && (ctx.globalAlpha = 0.5, _0x110b78(0, 0, this.rad, 'white'));
        ctx.restore();
        break;
    case o_waterDrop:
        _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x350a05 = _0x93972d(_0x2d663d, 0x1, 0x5, 0x2);
        _0x2d663d = _0x93972d(_0x2d663d, 0x1, 0.2, 0x2);
        ctx.globalAlpha = 0.5;
        _0x110b78(0, 0, this.rad, _0x1654e7);
        _0x519d3f = -(-0.2 + _0x350a05) * _0x55d748(0x5a);
        ctx.save();
        ctx.scale(0x1, 0x1 + _0x2d663d);
        ctx.globalAlpha = 0.3;
        ctx.rotate(_0x519d3f);
        _0x110b78(0, 0, this.rad - _0x350a05, '#2CAAC4');
        ctx.restore();
        ctx.save();
        ctx.scale(0x1 + _0x2d663d, 0x1);
        ctx.globalAlpha = 0.1;
        ctx.rotate(_0x519d3f);
        _0x110b78(0, 0, 0.9 * this.rad - _0x350a05, 'white');
        ctx.restore();
        break;
    case o_water:
        _0x2d663d = this.curBiome == _0x35f8d3 ? '#8fa4e0' : _0x1654e7;
        0x1 == this.specType && _0x29b77f == _0x5deb7a ? (ctx.save(), _0x110b78(0, 0, this.rad, _0x68d4da), ctx.restore(), ctx.save(), _0x110b78(0, 0, Math.max(0, this.rad - 1.5), _0x2d663d), ctx.restore()) : this.drawOutlinedCircle('', _0x2d663d);
        break;
    case o_snow:
    case o_snowBall:
        (_0x350a05 = _0x2f22f9('img/snowball.png')) ? (_0x519d3f = this.rad, ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350a05, -_0x519d3f, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f)) : this.drawOutlinedCircle('', 'white');
        break;
    case o_spiderWeb:
        break;
    case o_poisonBall:
        ctx.save();
        _0x110b78(0, 0, this.rad, _0x68d4da);
        _0x110b78(0, 0, Math.max(0, this.rad - 0x2), _0x1654e7);
        ctx.restore();
        ctx.save();
        _0x350a05 = 0.3;
        _0x2d663d = 0.5 * (0.7 - _0x350a05);
        ctx.globalAlpha *= _0x350a05 + _0x2d663d + _0x2d663d * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
        ctx.globalAlpha *= this.effA_poison;
        _0x110b78(0, 0, this.rad + 2.6, '#7FF600');
        ctx.restore();
        break;
    case o_fireTornado:
        ctx.save();
        _0x350a05 = 'skins/volcano/phoenix/' + this.speciesType + '/firetornado.png';
        if (_0x350a05 = _0x2f22f9(_0x350a05)) _0x519d3f = this.rad, _0x2d663d = 0x3e8, _0x2d663d = (_0x1534e0 - this.spawnTime) % _0x2d663d / _0x2d663d, _0x438d1d = 0x2 * _0x2d663d * Math.PI, _0x2d663d = 0x7d0, _0x2d663d = (_0x1534e0 - this.spawnTime) % _0x2d663d / _0x2d663d, _0x1544cf = 0x2 * _0x2d663d * Math.PI, ctx.save(), ctx.rotate(_0x438d1d), ctx.globalAlpha *= 0x1, _0x2d663d = (_0x1534e0 - this.spawnTime) / 0x3e8, _0x438d1d = 6.5 * Math.cos(0x2 * Math.PI / 2.2 * _0x2d663d), ctx.globalAlpha = 0x1, ctx.drawImage(_0x350a05, -_0x519d3f - _0x438d1d / 2.2, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore(), ctx.save(), ctx.rotate(_0x1544cf), ctx.drawImage(_0x350a05, -_0x519d3f - _0x438d1d / 2.2, -_0x519d3f, 0x2 * _0x519d3f, 0x2 * _0x519d3f), ctx.restore();
        ctx.restore();
        break;
    case o_flag_usa:
        let code = "usa";
        var img = _0x2f22f9("img/flag_" + code + ".png");
        if (img) {
            var rad = this.rad;
            ctx.save();
            ctx.rotate(this.angle);
            ctx.drawImage(img, -rad, -rad, 2 * rad, 2.5 * rad);
            ctx.restore();
        }
        break;
    case o_amogus:
        var img = _0x2f22f9("img/amongus/0.png");
        if (img) {
            var rad = this.rad;
            ctx.save();
            ctx.rotate(this.angle);
            ctx.drawImage(img, -rad, -rad, 2 * rad, 2.5 * rad);
            ctx.restore();
        }
        break;
        case o_mopecoinbox:
            var img = _0x2f22f9("img/mopecoinbox.png");
            if (img) {
                var rad = this.rad;
                ctx.save();
                ctx.rotate(this.angle);
                ctx.drawImage(img, -rad, -rad, 2 * rad, 2.5 * rad);
                ctx.restore();
            }
            break;
    case o_player:
        break;
    default:
        this.isRectangle ? (ctx.fillStyle = 'black', ctx.fillRect(-this.rectW / 0x2, -this.rectH / 0x2, this.rectW, this.rectH), this.drawOutlinedCircle('(make this rect obj invisible on server?)', 'black')) : this.drawOutlinedCircle('(make this obj invisible on server?)', 'black');
    }
};
GameObj.prototype.beforeCustomDraw = function () {};
GameObj.prototype.afterCustomDraw = function () {};
GameObj.prototype.drawImage = function (_0x2c84ea, _0x1a1c84, _0x21b7fb, _0x5298ce, _0x1e9503, _0x32f66f) {
    void 0 !== _0x32f66f && ctx.rotate(_0x32f66f);
    ctx.drawImage(_0x2c84ea, _0x1a1c84, _0x21b7fb, _0x5298ce, _0x1e9503);
};
GameObj.prototype.drawTranslate = function () {
    ctx.translate(this.x, this.y);
};
GameObj.prototype.draw = function (_0x2018db) {
    this.moveUpdF = this.moveUpdate();
    this.beforeCustomDraw();
    ctx.save();
    this.drawTranslate();
    if (this.doesDrawEffectScale && 0x2 != _0x14fca5) {
        var _0x54c5a3;
        _0x54c5a3 = (_0x1534e0 - this.spawnTime) / 0x3e8;
        var _0x18fa40 = 1.5,
            _0x12ce88 = 0.1;
        this.drawEffectScale_Slow && (_0x18fa40 = 2.5, _0x12ce88 = 0.04);
        _0x54c5a3 = _0x12ce88 * Math.sin(0x2 * Math.PI / _0x18fa40 * _0x54c5a3);
        ctx.scale(0x1 + _0x54c5a3, 0x1 + _0x54c5a3 / 0x2);
    }
    this.getOutlineColor();
    ctx.globalAlpha = this.dead ? ctx.globalAlpha * (0x1 - this.moveUpdF) : ctx.globalAlpha * Math.min(0x1, (_0x1534e0 - this.spawnTime) / (0x3e8 * _0x2cf57));
    this.customDraw(_0x2018db);
    this.flag_hurt && (ctx.fillStyle = 'rgba(255,0,0,0.3)', ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - 0x2), 0, 0x2 * Math.PI), ctx.fill());
    this.drawHealthBar();
    ctx.restore();
    this.afterCustomDraw();
};
GameObj.prototype.drawHealthBar = function () {
    ctx.save();
    this.hpBarA += 0.04 * ((_0x1534e0 < this.hpBarTimeoutT ? 0x1 : 0) - this.hpBarA);
    if (0.001 < this.hpBarA) {
        this.hpPer += 0.1 * (this.hpPer_n - this.hpPer);
        var _0x29a2ce = Math.max(0x1, this.rad / 0x19),
            _0x57a0e5 = 0x14 * _0x29a2ce,
            _0x25d114 = 0x5 * _0x29a2ce,
            _0x29a2ce = -this.rad - 0xa * _0x29a2ce;
        ctx.globalAlpha *= this.hpBarA;
        ctx.fillStyle = 'rgba(0,0,0,0.35)';
        ctx.fillRect(0 - _0x57a0e5 / 0x2, _0x29a2ce - _0x25d114 / 0x2, _0x57a0e5, _0x25d114);
        ctx.fillStyle = '#16D729';
        ctx.fillRect(0 - _0x57a0e5 / 0x2, _0x29a2ce - _0x25d114 / 0x2, this.hpPer / 0x64 * _0x57a0e5, _0x25d114);
    }
    ctx.restore();
    this.id == myPlayerID && this.drawInfectionBar();
};
GameObj.prototype.drawInfectionBar = function () {
    this.infectionBarA += 0.04 * ((_0x1534e0 < this.infectionBarTimeoutT ? 0x1 : 0) - this.infectionBarA);
    0.001 < this.infectionBarA && (this.infectionPer += 0.1 * (this.infectionPer_n - this.infectionPer), this.drawBar('red', this.infectionBarA, this.infectionPer, 0xa));
};
GameObj.prototype.drawBar = function (_0x51b133, _0x1e7a9a, _0xa3e182, _0x3db189) {
    ctx.save();
    var _0x4df575 = Math.max(0x1, this.rad / 0x19);
    _0x1e7a9a = 0x14 * _0x4df575;
    var _0x25fb1c = 2.5 * _0x4df575;
    _0x3db189 = -this.rad - _0x3db189 * _0x4df575;
    ctx.globalAlpha = 0.3;
    ctx.fillStyle = 'rgba(0,0,0,0.35)';
    ctx.fillRect(0 - _0x1e7a9a / 0x2, _0x3db189 - _0x25fb1c / 0x2, _0x1e7a9a, _0x25fb1c);
    ctx.globalAlpha = 0.7;
    ctx.fillStyle = _0x51b133;
    ctx.fillRect(0 - _0x1e7a9a / 0x2, _0x3db189 - _0x25fb1c / 0x2, _0xa3e182 / 0x64 * _0x1e7a9a, _0x25fb1c);
    ctx.restore();
};
GameObj.prototype.drawChat = function () {
    if (!(0x1 > this.chatLines.length)) {
        ctx.save();
        ctx.font = '10px Arial';
        ctx.lineWidth = 0x1;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        for (var _0x4ee0d4 = 0.01 < this.hpBarA ? -0xa : 0, _0x47b60a = [], _0xfca5a4 = this.chatLines.length - 0x1; 0 <= _0xfca5a4; _0xfca5a4--) {
            var _0x12b45f = this.chatLines[_0xfca5a4],
                _0x3f7c3d = -0xd * (this.chatLines.length - 0x1 - _0xfca5a4) + _0x4ee0d4,
                _0x58975f = _0x1534e0 > _0x12b45f.chatFadeT ? 0 : 0x1;
            _0x12b45f.chatA += 0.1 * (_0x58975f - _0x12b45f.chatA);
            ctx.shadowOffsetX = 0;
            ctx.shadowOffsetY = 0;
            0.02 > _0x12b45f.chatA ? (0.02 > _0x58975f && (_0x12b45f.chatTxt = ''), _0x47b60a.push(_0xfca5a4)) : (_0x58975f = ctx.measureText(_0x12b45f.chatTxt).width, ctx.globalAlpha = 0.8 * _0x12b45f.chatA, ctx.fillStyle = _0x26f066(this.curBiome), ctx.fillRect(this.x - 0x1 - _0x58975f / 0x2, _0x3f7c3d + this.y - this.rad - 0xa - 0x5 - 0x1, _0x58975f + 0x2, 0xc), ctx.fillStyle = '#F1C34C', 0x2 != _0x14fca5 && (ctx.shadowOffsetX = 0x1, ctx.shadowOffsetY = 0x1, ctx.shadowColor = 'black'), ctx.globalAlpha = _0x12b45f.chatA, ctx.fillText(_0x12b45f.chatTxt, this.x, _0x3f7c3d + this.y - this.rad - 0xa));
        }
        for (_0xfca5a4 = 0; _0xfca5a4 < _0x47b60a.length; _0xfca5a4++) this.chatLines.splice(_0x47b60a[_0xfca5a4], 0x1);
        ctx.restore();
    }
};
GameObj.prototype.getOutlineColor = function () {
    if (this.alwaysPlainOutline) return _0x44bd8a;
    if (this.isEdibleOutlined()) return _0x45ff9a;
    if (this.oType == o_player && 0 < _0x29dd16[this.animalType - 0x1] && this.id != myPlayerID) return _0x105778;
    var _0x3324e3 = this.curBiome;
    if (this.flag_inWater) _0x3324e3 = _0x4e9b48;
    else if (this.flag_inLava) return '#c64a00';
    return _0x26f066(_0x3324e3);
};
GameObj.prototype.isEdibleOutlined = function () {
    return this.oType == o_player ? 0 < _0x1066b0[this.animalType - 0x1] && this.id != myPlayerID : 0 < _0x5546de[this.oType - 0x1];
};
GameObj.prototype.gotChat = function (_0x5bf1e8) {
    this.chatLines && (this.chatLines.push({
        'chatTxt': _0x5bf1e8,
        'chatFadeT': _0x1534e0 + 0xfa0,
        'chatA': 0
    }), 0x5 < this.chatLines.length && this.chatLines.splice(this.chatLines.length - 0x1, 0x1));
};
GameObj.prototype.drawOutlinedCircle = function (_0x3ab424, _0x201f3e) {
    var _0x45c246 = this.getOutlineColor();
    0x2 == _0x14fca5 && _0x45c246 == _0x44bd8a || _0x110b78(0, 0, this.rad, _0x45c246);
    _0x110b78(0, 0, Math.max(0, this.rad - 1.5), _0x201f3e);
};
GameObj.prototype.drawOutlinedCircle22 = function (_0x3ab424, _0x201f3e, rad) {
    var _0x45c246 = this.getOutlineColor();
    0x2 == _0x14fca5 && _0x45c246 == _0x44bd8a || _0x110b78(0, 0, rad, _0x45c246);
    _0x110b78(0, 0, Math.max(0, rad - 1.5), _0x201f3e);
};
GameObj.prototype.onLerpUpdate = function (_0x16e505) {};
GameObj.prototype.moveUpdate = function () {
    var _0x280d70 = (_0x1534e0 - this.updateTime) / 0x3e8 / _0x2cf57,
        _0x280d70 = 0 > _0x280d70 ? 0 : 0x1 < _0x280d70 ? 0x1 : _0x280d70;
    this.dead && 0x1 <= _0x280d70 && _0x464b8a.push(this);
    this.onLerpUpdate(_0x280d70);
    this.x = _0x280d70 * (this.nx - this.ox) + this.ox;
    this.y = _0x280d70 * (this.ny - this.oy) + this.oy;
    this.rad += 0.1 * (this.nRad - this.rad);
    if (void 0 != this.angle) {
        var _0x127d14 = 0.1 * this.angleDelta;
        this.angleDelta -= _0x127d14;
        this.angle += _0x127d14;
    }
    return Math.min(0x1, _0x280d70);
};
GameObj.prototype.readCustomData_onUpdate = function (msg) {
    if (this.oType == 110 || this.oType == 105) this.cloudOpacity = msg.readUInt8() / 100;
};
GameObj.prototype.readCustomData_onNewlyVisible = function (msg) {
    switch (this.oType) {
        case 40:
        case 56:
        case 54:
        case 53:
        case 52:
            this.specType = msg.readUInt8();
            break;
    }
    if (this.oType == 40) {
        var spectyp = this.specType;
        this.riverSpecT = spectyp;
        this.riverFlowSpeedX = 0 == spectyp ? 1.0 : -1.0;
    }
    if(this.oType == 71){
        this.speciesType = msg.readUInt8();
    }
};
GameObj.prototype.setObjTypes = function (_0xc39954, _0x399e54) {
    this.oType = _0xc39954;
};


GameObj.prototype.worldUpd_readMsgNewlyVisible = function (msg, oType, secondaryType) {
    this.setObjTypes(oType, secondaryType);
    var nw_id = msg.readUInt32(),
        nw_rad = msg.readUInt32(),
        nw_x = msg.readUInt16() / 4.0,
        nw_y = msg.readUInt16() / 4.0;
    this.id = nw_id;
    this.ox = this.x = this.nx = nw_x;
    this.oy = this.y = this.ny = nw_y;
    this.nRad = nw_rad;
    this.oRad = this.rad = 0;
    if (oType == o_biome_poison || oType == o_biome_volcano || oType == o_mudSpot || oType == o_arcticIce || oType == o_lake || oType == o_abilityObj || oType == o_hill || oType == o_rockHill || oType == o_fruitTree || oType == o_lakeIsland) this.animateRadOnSpawn = !1;
    this.animateRadOnSpawn || (this.oRad = this.rad = nw_rad);

    
   
    var flag_curBiome = msg.readUInt8();
    var flags = msg.readUInt8(),
        flag_spawnFromObjID = get_bit(flags,0),
        flag_rectObj = get_bit(flags,1),
        flag_sendsAngle = get_bit(flags,2);
    this.curBiome = flag_curBiome;
    this.objGetsAngleUpdate = flag_sendsAngle;
    var spawnFromObj = null;
    if (flag_spawnFromObjID) {
        spawnFromObj = gameObjsByID[msg.readUInt32()];
    }
    if (spawnFromObj) {
        this.updateTime = _0x1534e0;
        this.nx = this.x;
        this.ny = this.y;
        this.ox = spawnFromObj.x;
        this.oy = spawnFromObj.y;
        this.x = spawnFromObj.x;
        this.y = spawnFromObj.y
    }

    if (flag_rectObj) {
        this.isRectangle = !0;
        this.rectW = msg.readUInt16();
        this.rectH = msg.readUInt16();
    }

    if (flag_sendsAngle) {
        var angleDeg = msg.readUInt16();
        // angleDeg *= 3;
        this.updateAngle(angleDeg);
    }
    this.readCustomData_onNewlyVisible(msg);
};
GameObj.prototype.easeAngleChanges = !0;
GameObj.prototype.updateAngle = function (_0xd02c65) {
    var _0x40d9e5 = this.oType == o_abilityObj ? 90 : 90; // var _0x40d9e5 = this.oType == o_abilityObj ? 180 : 90;
    GameObj.prototype.easeAngleChanges ? (_0xd02c65 = _0x55d748(_0xd02c65 + _0x40d9e5), this.angleDelta = _0x5b2dfd(this.angle, _0xd02c65), this.oAngle = this.angle, this.firstPosUpd && (this.oAngle = this.angle = _0xd02c65, this.angleDelta = 0)) : this.angle = _0x55d748(_0xd02c65 + _0x40d9e5);
};
function toRadians(a) {
    return Math.PI / 180 * a
}
GameObj.prototype.worldUpd_readMsgUpdate = function (msg) {
    var _0x22a228 = msg.readUInt16() / 4.0,
        _0x5c7925 = msg.readUInt16() / 4.0,
        _0x1f260e = msg.readUInt32();
    this.specType = msg.readUInt8();
    this.oType != 2 && this.oType != 14 && (this.specType2 = msg.readUInt8(), this.flag_flying = 1 == msg.readUInt8());

    var _0x596b35 = null,
        bits = msg.readUInt8(),
        _0x3b5a50 = get_bit(bits, 0), //show hp
        _0x596b35 = get_bit(bits, 1); //flash
    this.updateTime = _0x1534e0;
    this.ox = this.x;
    this.oy = this.y;
    this.dead = false;
    this.nx = _0x22a228;
    this.ny = _0x5c7925;
    this.oRad = this.rad;
    this.nRad = _0x1f260e;
    this.flag_hurt = _0x596b35;
    if(_0x3b5a50) {
        _0x22a228 = msg.readUInt8();
        if(0.001 > this.hpBarA) {
            this.hpPer = _0x22a228;
        }
        this.hpPer_n = _0x22a228;
        this.hpBarTimeoutT = +new Date() + 0xbb8;
    } else {
        this.hpBarTimeoutT = +new Date();
    }
    if(this.objGetsAngleUpdate) {
        _0x22a228 = msg.readUInt16();
        this.updateAngle(_0x22a228);
    }
    this.readCustomData_onUpdate(msg);
    this.firstPosUpd = !1;
};
GameObj.prototype.killerId = 0;
GameObj.prototype.worldUpd_readMsgRemovedObj = function (msg) {
    this.killerId = 1 == msg.readUInt8() ? msg.readUInt32() : 0;
    msg = 0 < this.killerId ? gameObjsByID[this.killerId] : void 0;
    this.dead = !0;
    this.updateTime = _0x1534e0;
    this.oType == o_abilityObj ? (this.ox = this.x, this.oy = this.y, this.nx = this.x, this.ny = this.y) : msg ? (this.ox = this.x, this.oy = this.y, this.oRad = this.rad, this.nx = msg.nx, this.ny = msg.ny, this.nRad = Math.min(this.rad, msg.rad), myPlayerID == this.killerId && (this.oType != o_player || _0x499630 || (msg = new Audio('audio/bite.mp3?v='+gameVersion), msg.volume = 0.05, msg.playbackRate = _0x55ada2(0.9, 1.1), msg.play()), this.oType == o_water || this.oType == o_rainDrop || this.oType == o_waterDrop ? _0x499630 || (msg = new Audio('audio/bloop.mp3?v='+gameVersion), msg.volume = 0.6, msg.playbackRate = _0x55ada2(0.9, 1.1), msg.play()) : _0x499630 || (msg = new Audio('audio/nom.mp3?v='+gameVersion), msg.volume = 0.5, msg.play())), this.hp_n = 0) : (this.ox = this.x, this.oy = this.y, this.oRad = this.rad, this.nx = this.x, this.ny = this.y, this.nRad = 0);


};
GameObj.prototype.updateZ = function () {
    switch (this.oType) {
    case o_rainStorm:
    case o_snowStorm:
        this.z = 0xf4240;
        break;
    case o_biome_land:
        this.z = -220;
        break;
    case o_biome_desert:
    case o_biome_arctic:
        this.z = -0xd2;
        break;
    case o_biome_volcano:
    case o_biome_poison:
        this.z = -0xd1;
        break;
    case o_river:
        this.z = -0x9e;
        break;
    case o_volcano:
        this.z = -0x8c;
        break;
    case o_lavaLake:
        this.z = -0x97;
        break;
    case o_lake:
    case o_bog:
        this.z = -0xa0;
        break;
    case o_beach:
        this.z = -0x9f;
        break;
    case o_biome_ocean_extraWater:
        this.z = -0x9e;
        break;
    case o_biome_ocean:
        this.z = -0x9d;
        break;
    case o_mudSpot:
        this.z = -0x9e;
        break;
    case o_arcticIce:
        this.z = -0x9c;
        break;
    case o_waterSpot:
        this.z = -0x9b;
        break;
    case o_lakeIsland:
        this.z = -0x9a;
        break;
    case o_hidingHoleOcean:
        this.z = -0x96;
        break;
    case o_bigHidingHole:
        this.z = -0x65;
        break;
    case o_hidingHole:
        this.z = -0x64;
        break;
    case o_antHill:
    case o_healingStone:
        this.z = -0x63;
        break;
    case o_quill:
    case o_fruitTree:
        this.z = 0x3e8;
        break;
    case o_honeyComb:
        this.z = 0x3ea;
        break;
    case o_rockHill:
        this.z = 0x3ea;
        break;
    case o_beeHive:
        this.z = -0x64;
        break;
    case o_hill:
        this.z = 0x3e7;
        break;
    case o_spiderWeb:
        this.z = 0x3eb;
        break;
    case o_snow:
        this.z = 0x2af8;
        break;
    case o_berryBush:
    case o_planktonBush:
    case o_hidingBush:
        this.z = 0x3ea + this.rad;
        break;
    case o_lavaDrop:
        this.z = 0x186af;
        break;
    case o_waterDrop:
        this.z = 0x186af;
        break;
    case o_flag_usa:
        this.z = 1000;
        break;
    case o_amogus:
        this.z = 1000;
        break;
    case o_mopecoinbox:
        this.z = 1000;
        break;
    case o_coconut:
    case o_banana:
        this.z = 0x3f2 + this.rad;
        0x1 == this.specType2 && (this.z += 0x3e8);
        break;
    case o_fireTornado:
        this.z = 0x7d0 + this.rad;
        break;
    case o_fireBall:
    case o_poisonBall:
        this.z = 0x3ee;
        break;
    case o_player:
        this.calcAnimalZIndex();
        break;
    default:
        this.z = this.rad;
    }
};
GameObj.prototype.updateZ_onTree = function (_0x5c4756) {
    this.oType == o_player && this.flag_eff_isOnTree && (this.z = _0x5c4756 + 1100);
};
GameObj.prototype.calculateZIndex = function () {
    if (this.oType == o_player)
        if (this.flag_flying) {
            if (this.z = 0x186a0, this.flag_isGrabbed && (this.z -= this.rad), this.flag_eff_aniInClaws || this.flag_usingAbility) this.z += 0x3e8;
        } else this.flag_isInArena ? this.z = 0x2710 + this.rad : (this.updateZ(), this.updateZ_onTree(this.z), this.flag_eff_invincible && (this.z += 0x3e8));
    else this.updateZ(), this.updateZ_onTree(this.z);
};
GameObj.prototype.mopeSeasonID = 0;
GameObj.prototype.skinThemeID = 0;
GameObj.prototype.getSkinImageObj = function (skin) {
    var skinPath = "./assets/s/" + this.mopeSeasonID + "/" + skin;
    if (this.skinThemeID > 0) {
      skinPath = "./assets/t/" + this.skinThemeID + "/" + skin;
    }
    return _0x2f22f9(skinPath, function (img) {
      console.log(img.src);
    });
  };

function GameObj(_0xcf0948) {
    this.oType = _0xcf0948;
    this.rPer = _0x55ada2(0, 0x1);
    this.updateTime = this.spawnTime = _0x1534e0;
    this.firstPosUpd = !0;
    this.chatLines = [];
    switch (this.oType) {
    case o_berry:
    case o_banana:
    case o_raspberry:
    case o_pear:
    case o_coconut:
    case o_water:
    case o_fireBall:
    case o_poisonBall:
    case o_spiderWeb:
    case o_mushroom:
    case o_bigMushroom:
    case o_lillypad:
    case o_hidingHole:
    case o_hidingHoleOcean:
    case o_bigHidingHole:
    case o_plankton:
    case o_seaweed:
    case o_starfish:
    case o_kelp:
    case o_clam:
    case o_conchShell:
    case o_cloudBerry:
    case o_arcticNut:
    case o_carrot:
    case o_poisonBerry:
    case o_watermelon:
    case o_watermelonSlice:
    case o_meatSmall:
    case o_meatMedium:
    case o_meatLarge:
    case o_egg:
    case o_ostrichEgg:
    case o_quill:
    case o_beeHive:
    case o_honeyComb:
        this.doesDrawEffectScale = !0;
    }
    if (this.oType == o_hidingHole || this.oType == o_bigHidingHole || this.oType == o_hidingHoleOcean || this.oType == o_spiderWeb) this.drawEffectScale_Slow = !0;
}
window.GameObj = GameObj;
var _0x40a583 = _0x5113dd,
    _0x2a91c6 = GameObj;
_0x40a583.prototype = Object.create(_0x2a91c6.prototype);
_0x40a583.prototype.constructor = _0x40a583;

function _0x5113dd() {
    this.objs = [];
    this.updateZ = function () {
        0 < this.objs.length && (this.objs[0].updateZ(), this.z = this.objs[0].z);
    };
    this.draw = function () {
        for (var _0x596ccf = 0; _0x596ccf < this.objs.length; _0x596ccf++) {
            var _0x18df56 = this.objs[_0x596ccf];
            _0x18df56.draw(!0);
        }
        for (_0x596ccf = 0; _0x596ccf < this.objs.length; _0x596ccf++) _0x18df56 = this.objs[_0x596ccf], _0x18df56.draw(!0x1);
    };
    this.addBatchedObj = function (_0x27da08) {
        0 == this.objs.length && (this.oType = _0x27da08.oType, this.objs = []);
        this.objs.push(_0x27da08);
    };
}
window.GameObjBatchDraw = _0x5113dd;
_0x4170f3 = 0x1;
_0x543083 = 0x2;
_0xe39007 = 0x3;
_0x41846d = 0x4;
_0x2342f6 = 0x5;
_0x4f5784 = 0x6;
_0x4c8c3e = 0x7;
_0x49ee98 = 0x8;
_0x58b203 = 0x9;
_0x306e7d = 0xa;
_0x17b991 = 0xb;
_0x1bea6f = 0xc;
_0x1de318 = 0xd;
_0x1ddfd4 = 0xe;
_0x245d92 = 0xf;
_0x21d795 = 0x10;
_0x14aa29 = 0x11;
_0x44ffc0 = 0x12;
_0x13e47b = 0x13;
_0x128264 = 0x14;
_0x166900 = 0x15;
_0x22c4b4 = 0x16;
_0xbffa37 = 0x17;
_0x39caec = 0x18;
_0xcbf731 = 0x19;
_0x1b136a = 0x1a;
_0x4dca01 = 0x1b;
_0x58670a = 0x1c;
_0x1ebbca = 0x1d;
_0x332f04 = 0x1e;
_0x1e6300 = 0x1f;
_0x10ffe7 = 0x20;
_0x4e5642 = 0x21;
_0xfa8790 = 0x22;
_0x37feb8 = 0x23;
_0x586eae = 0x24;
_0x115d14 = 0x25;
_0x5b87cd = 0x26;
_0xa4ccd0 = 0x27;
_0x1cd045 = 0x28;
_0x50fb31 = 0x29;
_0x4fb188 = 0x2a;
_0x13ad6a = 0x2b;
_0x4ab9c5 = 0x2c;
_0x5ea8fd = 0x2d;
_0x1da4d1 = 0x2e;
_0x318be6 = 0x2f;
_0x3cd364 = 0x30;
_0x50c7e0 = 0x31;
_0x25e140 = 0x32;
_0x5b3c93 = 0x33;
_0xb20c08 = 0x34;
_0x1a31f6 = 0x35;
_0x3223f8 = 0x36;
_0x33258c = 0x37;
_0x819b63 = 0x38;
_0x49b403 = 0x39;
_0x4e163c = 0x3a;
_0xa8f04a = 0x3b;
_0x58ec8b = 0x3c;
_0x5362ea = 0x3d;
_0x5def9d = 0x3e;
_0x5d266c = 0x3f;
_0x1cc507 = 0x40;
_0x1db4ca = 0x41;
_0xbc3a94 = 0x42;
_0x4bc18f = 0x43;
_0x3afcf3 = 0x44;
_0x3894a3 = 0x45;
_0x11d8d8 = 0x46;
_0x3c0348 = 0x47;
_0x29871d = 0x48;
_0x17505c = 0x49;
_0x132e3a = 0x4a;
_0x510be1 = 0x4b;
_0x56c4f6 = 0x4c;
_0x2714c6 = 0x4d;
_0x4906df = 0x4e;
_0x667e39 = 0x4f;
_0x1840f3 = 0x50;
_0x1c031f = 0x51;
_0x3ebaa2 = 0x52;
_0x3475cc = 0x53;
_0x4b5f75 = 0x54;
_0x22da49 = 0x55;
_0x58e093 = 0x56;
_0x4a40f6 = 0x57;
_0x293281 = 0x58;
_0x18993a = 0x59;
_0x24f42b = 0x5a;
_0x3fe455 = 0x5b;
_0x35fbe8 = 0x5c;
_0x2c0737 = 0x5d;
_0x5deb7a = 0x5e;
_0x28a6aa = 0x5f;
_0x31ed20 = 0x60;
_0x8942b7 = 0x61;
_0x36bb4b = 0x62;
_0x258caf = 0x63;
_0x4e99c5 = 0x64;
_0x2bd850 = 0x65;
_0x2f892 = 0x66;
_0x1eb23c = 0x67;
_0x319038 = 0x68;
_0x2f88c2 = 0x69;
_0x15ef44 = 0x6a;
_0x445c8d = function (_0xad28bf) {
    var _0x44550b = {};
    switch (_0xad28bf) {
    case _0x5ea8fd:
        _0x44550b.aniName = 'Snail';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = "You're a super slow snail!";
        _0x44550b.aniCol = '#fcc02b';
        _0x44550b.skinName = 'snail';
        break;
    case _0x4170f3:
        _0x44550b.aniName = 'Mouse';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = '';
        _0x44550b.aniCol = '#9BA9B9';
        _0x44550b.skinName = 'mouse';
        break;
    case _0x543083:
        _0x44550b.aniName = 'Rabbit';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to RABBIT! \nPress W to burrow a hole to hide in!`;
        _0x44550b.aniCol = '#AA937E';
        _0x44550b.skinName = 'rabbit';
        break;
    case _0xe39007:
        _0x44550b.aniName = 'Pig';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to PIG!\n Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)`;
        _0x44550b.aniCol = '#DD6BD4';
        _0x44550b.skinName = 'pig';
        break;
    case _0x41846d:
        _0x44550b.aniName = 'Fox';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to FOX! ,\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!`;
        _0x44550b.aniCol = '#FF9D43';
        _0x44550b.skinName = 'fox';
        break;
    case _0x2342f6:
        _0x44550b.aniName = 'Deer';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to DEER! \nPress W to dig up food! \nDig in mud for better food!\n Hint:Check water areas for new food sources!`;
        _0x44550b.aniCol = '#C4773E';
        _0x44550b.skinName = 'deer';
        break;
    case _0x4f5784:
        _0x44550b.aniName = 'Mole';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to MOLE!\n Hold W to dig underground!\nGo under anything, do surprise attacks!`;
        _0x44550b.aniCol = '#4C4A45';
        _0x44550b.skinName = 'mole';
        break;
    case _0x4c8c3e:
        _0x44550b.aniName = 'Zebra';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to ZEBRA! \nPress W to kick side ways!`;
        _0x44550b.aniCol = '#FFFFFF';
        _0x44550b.skinName = 'zebra';
        break;
    case _0x49ee98:
        _0x44550b.aniName = 'Lion';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to LION!\n Press W to release a mighty ROAR (Rawr!)!`;
        _0x44550b.aniCol = '#f8c923';
        _0x44550b.skinName = 'lion';
        break;
    case _0x58b203:
        _0x44550b.aniName = 'CHEETAH';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to CHEETAH!\n Press W to get a speed boost! (Every 8 seconds)!`;
        _0x44550b.aniCol = '#CAC05B';
        _0x44550b.skinName = 'bigcat/cheetah';
        break;
    case _0x306e7d:
        _0x44550b.aniName = 'Bear';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to BEAR!\n Bears climb through green hills! (Press W to use your claw!)`;
        _0x44550b.aniCol = '#99591C';
        _0x44550b.skinName = 'bear';
        break;
    case _0x17b991:
        _0x44550b.aniName = 'Croc';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to CROCODILE!\n Press W to bite and drag around animals! \n+ (Now hide in water spots)+ Swim well in Mud, Lakes & Oceans!`;
        _0x44550b.aniCol = '#30F51C';
        _0x44550b.skinName = 'croc';
        break;
    case _0x1de318:
        _0x44550b.aniName = 'Hippo';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to HIPPO!\nHippos are great swimmers, dominate the Lakes/Oceans/Mud!`;
        _0x44550b.aniCol = '#945A99';
        _0x44550b.skinName = 'hippo';
        break;
    case _0x1bea6f:
        _0x44550b.aniName = 'Rhino';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to RHINO!\n Press W to CHARGE with your mighty horn!`;
        _0x44550b.aniCol = '#94a3a9';
        _0x44550b.skinName = 'rhino';
        break;
    case _0x245d92:
        _0x44550b.aniName = 'Shrimp';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = '';
        _0x44550b.aniCol = '#f88e37';
        _0x44550b.skinName = 'shrimp';
        break;
    case _0x21d795:
        _0x44550b.aniName = 'Trout';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to TROUT!\nHint: Hold Left-click to RUN! (Uses extra water)`;
        _0x44550b.aniCol = '#ac8686';
        _0x44550b.skinName = 'trout';
        break;
    case _0x14aa29:
        _0x44550b.aniName = 'Crab';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to CRAB!\n Crabs can survive on dry land!\n (On land, Press W to go into your shell!)`;
        _0x44550b.aniCol = '#bf2408';
        _0x44550b.skinName = 'crab';
        break;
    case _0x44ffc0:
        _0x44550b.aniName = 'Squid';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to SQUID!\n Squids can use INK when injured (press W!) \n+ you can hide in plankton bushes!`;
        _0x44550b.aniCol = '#40dda4';
        _0x44550b.skinName = 'squid';
        break;
    case _0x13e47b:
        _0x44550b.aniName = 'Shark';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to SHARK!\n A vicious predator of the oceans!`;
        _0x44550b.aniCol = '#999fc6';
        _0x44550b.skinName = 'shark';
        break;
    case _0x22c4b4:
        _0x44550b.aniName = 'Sea-horse';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to SEA HORSE!\n An agile hunter!`;
        _0x44550b.aniCol = '#73BE2F';
        _0x44550b.skinName = 'seahorse';
        break;
    case _0xbffa37:
        _0x44550b.aniName = 'Jellyfish';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to JELLYFISH!\n A slowly-turning animal that can grow quite large!`;
        _0x44550b.aniCol = '#FDB9BA';
        _0x44550b.skinName = 'jellyfish';
        break;
    case _0x166900:
        _0x44550b.aniName = 'Turtle';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to TURTLE!\n Lives well on land & water! (On land, Press W to go into your shell!)`;
        _0x44550b.aniCol = '#502E1A';
        _0x44550b.skinName = 'turtle';
        break;
    case _0x128264:
        _0x44550b.aniName = 'Stringray';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to STINGRAY!\n Use electic shock (Release W key!) to shock animals! \n(Takes time to recharge)`;
        _0x44550b.aniCol = '#164336';
        _0x44550b.skinName = 'stingray';
        break;
    case _0x39caec:
        _0x44550b.aniName = 'The Kraken';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to THE KRAKEN!\n Terrorize the oceans, and be feared by all!\n (Release W to use whirlpool ability!)`;
        _0x44550b.aniCol = '#64a034';
        _0x44550b.skinName = 'kraken';
        break;
    case _0xcbf731:
        _0x44550b.aniName = 'Pufferfish';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to PUFFERFISH!\n (Hold W to inflate- become spiky, and dangerous to touch!)`;
        _0x44550b.aniCol = '#6C5C2C';
        _0x44550b.skinName = 'pufferfish';
        break;
    case _0x1b136a:
        _0x44550b.aniName = 'Killer Whale';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Killer Whale! \nWhales blow out water when diving! (And sometimes other loot!)`;
        _0x44550b.aniCol = '#141414';
        _0x44550b.skinName = 'killerwhale';
        break;
    case _0x4dca01:
        _0x44550b.aniName = 'Swordfish';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n (Press W to rush with your sharp nose!)`;
        _0x44550b.aniCol = '#689CD7';
        _0x44550b.skinName = 'swordfish';
        break;
    case _0x58670a:
        _0x44550b.aniName = 'Gorilla';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Gorillas are very fast on hills/trees!\n Press W to throw bananas! (from trees)`;
        _0x44550b.aniCol = '#323232';
        _0x44550b.skinName = 'gorilla';
        break;
    case _0x1ebbca:
        _0x44550b.aniName = 'Octopus';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Octopus!\nHold W to use your 'Disguise' ability!\n(Hint: wait for prey to bite you- they get stunned!)`;
        _0x44550b.aniCol = '#ff8340';
        _0x44550b.skinName = 'octopus';
        break;
    case _0x1ddfd4:
        _0x44550b.aniName = 'Dragon';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n (You're amazing!) \nFly over everything, Hold W to shoot fire!`;
        _0x44550b.aniCol = '#22FF8A';
        _0x44550b.skinName = 'dragon';
        break;
    case _0x1da4d1:
        _0x44550b.aniName = 'Black Dragon';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Black dragons drink lava instead of water! Black dragons only heal on healing stones/lava!`;
        _0x44550b.aniCol = 'black';
        _0x44550b.skinName = 'blackdragon';
        break;
    case _0xb20c08:
        _0x44550b.aniName = 'Giant Spider';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Place web around the game to catch prey!`;
        _0x44550b.aniCol = 'black';
        _0x44550b.skinName = 'giantSpider';
        break;
    case _0x25e140:
        _0x44550b.aniName = 'Cobra';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Hold W to Spit venom, and poison animals with your bite!`;
        _0x44550b.aniCol = 'black';
        _0x44550b.skinName = 'cobra';
        break;
    case _0x5b3c93:
        _0x44550b.aniName = 'Boa Constrictor';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Coil and suffocate other animals!`;
        _0x44550b.aniCol = 'black';
        _0x44550b.skinName = 'boaConstrictor';
        break;
    case _0x1a31f6:
        _0x44550b.aniName = 'T-REX';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + ` The Dinosaur!\n This ancient dinosaur has powerful jaws that can drag prey around!!`;
        _0x44550b.aniCol = '#862A2A';
        _0x44550b.skinName = 'trex';
        break;
    case _0x3223f8:
        _0x44550b.aniName = 'Tiger';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Tiger!\n Tigers can launch an ambush attack (HOLD W to grow a bush) Release to attack!`;
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'tiger';
        break;
    case _0x33258c:
        _0x44550b.aniName = 'Giraffe';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Giraffe!\nGiraffe have huge legs and stomp anyone in their way!`;
        _0x44550b.aniCol = '#E9BD23';
        _0x44550b.skinName = 'giraffe';
        break;
    case _0x819b63:
        _0x44550b.aniName = 'Eagle';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Eagle!\nEagles can fly up other animals in the air! !\n`;
        _0x44550b.aniCol = '#5b400d';
        _0x44550b.skinName = 'eagle';
        break;
    case _0x50fb31:
        _0x44550b.aniName = 'Arctic Fox';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!`;
        _0x44550b.aniCol = '#CFCFCF';
        _0x44550b.skinName = 'arctic/arcticfox';
        break;
    case _0x1e6300:
        _0x44550b.aniName = 'Arctic Hare';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n \nPress W to burrow a hole to hide in!`;
        _0x44550b.aniCol = '#D5D5D5';
        _0x44550b.skinName = 'arctic/arctichare';
        break;
    case _0x10ffe7:
        _0x44550b.aniName = 'The Yeti!';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n So it really exists... \n Hold W to turn into snow, release W to freeeeeze!`;
        _0x44550b.aniCol = '#839eb5';
        _0x44550b.skinName = 'arctic/yeti';
        break;
    case _0x4e5642:
        _0x44550b.aniName = 'Chipmunk';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = '';
        _0x44550b.aniCol = '#A77C30';
        _0x44550b.skinName = 'arctic/chipmunk';
        break;
    case _0xfa8790:
        _0x44550b.aniName = 'Muskox';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Press W to charge with your horns! \nPlus move decently on ice!`;
        _0x44550b.aniCol = '#231f18';
        _0x44550b.skinName = 'arctic/muskox';
        break;
    case _0x37feb8:
        _0x44550b.aniName = 'Penguin';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Left-click to run!\n (HOLD W to slide FAST on ice)!`;
        _0x44550b.aniCol = '#FFFFFF';
        _0x44550b.skinName = 'arctic/penguin';
        break;
    case _0x586eae:
        _0x44550b.aniName = 'Polar Bear';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Polar bears can climb hills! \n+ They're amazing swimmers!`;
        _0x44550b.aniCol = '#e4e4e4';
        _0x44550b.skinName = 'arctic/bear/bear';
        break;
    case _0x115d14:
        _0x44550b.aniName = 'Seal';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Seals can slide on ice (Hold W) + can climb hills (rocks too!)`;
        _0x44550b.aniCol = '#cfcfcf';
        _0x44550b.skinName = 'arctic/seal';
        break;
    case _0x5b87cd:
        _0x44550b.aniName = 'Snow leopard';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Press W to get a speed boost! (Every 8 seconds)!`;
        _0x44550b.aniCol = '#cfcfcf';
        _0x44550b.skinName = 'arctic/snowleopard';
        break;
    case _0xa4ccd0:
        _0x44550b.aniName = 'Walrus';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n You can slide on ice (Hold W) + can climb hills (rocks too!)`;
        _0x44550b.aniCol = '#633838';
        _0x44550b.skinName = 'arctic/walrus';
        break;
    case _0x1cd045:
        _0x44550b.aniName = 'Reindeer';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Press W to dig up food! \n Your sharp hooves let you turn very well on ice!`;
        _0x44550b.aniCol = '#a68976';
        _0x44550b.skinName = 'arctic/reindeer';
        break;
    case _0x332f04:
        _0x44550b.aniName = 'Wolf';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Wolf paws turn very well on ice!\n Press W to howl!`;
        _0x44550b.aniCol = '#6B6B6B';
        _0x44550b.skinName = 'arctic/wolf';
        break;
    case _0x4fb188:
        _0x44550b.aniName = 'Wolverine';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Press W to Let out a Powerful GROWL! (Knocks back prey!)`;
        _0x44550b.aniCol = '#843A0F';
        _0x44550b.skinName = 'arctic/wolverine';
        break;
    case _0x13ad6a:
        _0x44550b.aniName = 'Mammoth';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Press W to roll snowballs with your trunk!\n The bigger the snowball gets, the longer the freeze!`;
        _0x44550b.aniCol = '#9d4717';
        _0x44550b.skinName = 'arctic/mammoth';
        break;
    case _0x4ab9c5:
        _0x44550b.aniName = 'Donkey';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Press W to Kick any animal behind you`;
        _0x44550b.aniCol = '#8c7c64';
        _0x44550b.skinName = 'donkey';
        break;
    case _0x318be6:
        _0x44550b.aniName = 'Sabertooth Tiger';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Sabertooth Tiger!\nSabertooth Tigers are great swimmers, dominate the Lakes/Oceans/Mud!`;
        _0x44550b.aniCol = '#945A99';
        _0x44550b.skinName = 'sabertoothtiger';
        break;
    case _0x3cd364:
        _0x44550b.aniName = 'Elephant';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to ' + _0x44550b.aniName + `!\n Use your long trunk to attack and eat food!`;
        _0x44550b.aniCol = '#945A99';
        _0x44550b.skinName = 'elephant';
        break;
    case _0x50c7e0:
        _0x44550b.aniName = 'Blue Whale';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Blue Whale!\n Smash with your powerful tail!`;
        _0x44550b.aniCol = '#945A99';
        _0x44550b.skinName = 'bluewhale';
        break;
    case _0xa8f04a:
        _0x44550b.aniName = 'Duckling';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to a DUCK!';
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'duck/duckling';
        break;
    case _0x49b403:
        _0x44550b.aniName = 'Hedgehog';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Hedgehog!\n (Hold W to become spiky, and dangerous to touch!)`;
        _0x44550b.aniCol = '#5b400d';
        _0x44550b.skinName = 'hedgehog';
        break;
    case _0x5362ea:
        _0x44550b.aniName = 'King Crab';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to a KING CRAB!';
        _0x44550b.aniCol = '#971f0e';
        _0x44550b.skinName = 'kingcrab';
        break;
    case _0x58ec8b:
        _0x44550b.aniName = 'Lemming';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = '';
        _0x44550b.aniCol = '#A77C30';
        _0x44550b.skinName = 'arctic/lemming';
        break;
    case _0x5def9d:
        _0x44550b.aniName = 'Frog';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to Frog!!';
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'frog/frog';
        break;
    case _0x5d266c:
        _0x44550b.aniName = 'Ostrich';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Ostrich! Lay eggs to hatch babies! \nCommand babies by placing your crosshair (right-click/W)-\n They can attack prey!`;
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'ostrich/ostrich';
        break;
    case _0x1cc507:
        _0x44550b.aniName = 'Pelican';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Pelican! \nPick up water (and prey!) in your mouth,\nfly, and drop water on prey! (press W again)`;
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'pelican/pelican';
        break;
    case _0x1db4ca:
        _0x44550b.aniName = 'Falcon';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Falcon! \nFly, and do a powerful dive attack! Aim it well.`;
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'falcon/falcon';
        break;
    case _0xbc3a94:
        _0x44550b.aniName = 'Snowy Owl';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = `UPGRADED to Snowy Owl!\n Aim the crosshair, \n right click/W when it's on top of prey, to attack!`;
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'snowyowl/snowyowl';
        break;
    case _0x3894a3:
        _0x44550b.aniName = 'Baby Ostrich';
        _0x44550b.aniDesc = '';
        _0x44550b.upgradeText = 'UPGRADED to Baby Ostrich!!';
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'ostrich/baby-ostrich';
        break;
    case _0x3afcf3:
        _0x44550b.aniName = 'Phoenix';
        _0x44550b.upgradeText = `UPGRADED to Phoenix!\nCreate powerful fire tornados to burn your enemies alive!`;
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'phoenix/phoenix';
        break;
    case _0x11d8d8:
        _0x44550b.aniName = 'Sea Monster';
        _0x44550b.upgradeText = 'UPGRADED to Sea Monster!';
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'seamonster';
        break;
    case _0x3c0348:
        _0x44550b.aniName = 'Land Monster';
        _0x44550b.upgradeText = 'UPGRADED to Land Monster!';
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'landmonster';
        break;
    case _0x29871d:
        _0x44550b.aniName = 'Ice Monster';
        _0x44550b.upgradeText = 'UPGRADED to Ice Monster!';
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'icemonster';
        break;
    case _0x17505c:
        _0x44550b.aniName = 'Dino Monster';
        _0x44550b.upgradeText = 'UPGRADED to Dino Monster!';
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'dinomonster';
        break;
    case _0x132e3a:
        _0x44550b.aniName = 'Pigeon';
        _0x44550b.upgradeText = `UPGRADED to Pigeon!\nHold W to fly around. `;
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'pigeon/pigeon';
        break;
    case _0x510be1:
        _0x44550b.aniName = 'Toucan';
        _0x44550b.upgradeText = `UPGRADED to Toucan!\nHold W to fly around. `;
        _0x44550b.aniCol = '#FF9000';
        _0x44550b.skinName = 'toucan/toucan';
        break;
    default:
        _0x44550b.aniName = '??', _0x44550b.aniDesc = '', _0x44550b.aniCol = '#000000', _0x44550b.upgradeText = 'UPGRADED!';
    }
    return _0x44550b;
};

function _0x1dfb1b() {}
var _0x5a621d = AbillityObj,
    _0x2a91c6 = GameObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
AbillityObj.prototype.abilityType = _0x443adb;
AbillityObj.prototype.showHalloweenSkins = !0;
AbillityObj.prototype.updateZ = function () {
    this.abilityType == _0x3c4e59 || this.abilityType == _0x5f39b1 || this.abilityType == _0x23db8f || this.abilityType == _0x5d4ba8 || this.abilityType == _0x3476d5 || this.abilityType == _0xda7e33 || this.abilityType == _0x2a9fc0 ? this.z = 0x186a2 : this.abilityType == _0x2a9fc0 || this.abilityType == _0x3476d5 || this.abilityType == _0x4e955d || this.abilityType == _0x4e8732 || this.abilityType == _0xeb0ec1 || this.abilityType == _0x57afac || this.abilityType == _0x404a08 || this.abilityType == _0x461076 || this.abilityType == _0x779685 || this.abilityType == _0x426544 || this.abilityType == _0x14c7a6 || this.abilityType == _0x470a8b || this.abilityType == _0x4d52a4 || this.abilityType == _0x34f413 || this.abilityType == _0x4de08b || this.abilityType == _0x149736 || this.abilityType == _0x3e420f || this.abilityType == _0x341f1f ? this.z = 0x2711 : this.abilityType == _0x35d9ab ? this.z = 0x3ea : this.abilityType == _0x1e5d1f ? this.z = 0x2711 : this.abilityType == _0x2bebb2 ? 0x1 == this.specType ? this.z = 0x2711 : 0x2 == this.specType && (this.z = 0x3f5) : this.z = this.abilityType == _0x113fae ? 0x3f5 : -0x98;
    this.abilityType == _0x364e0e && (this.z = 0x2 == this.specType ? 0x2710 - this.rad : 0x3e9);
};
AbillityObj.prototype.customDraw = function (_0x3902e2) {
    switch (this.abilityType) {
    case _0x36ba18:
        _0x110b78(0, 0, this.rad, '#7EBCC0');
        break;
    case _0x471740:
    case _0x482b4c:
        break;
    case _0x34a673:
        ctx.save();
        var _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.4 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#7EBCC0');
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        ctx.strokeStyle = 'white';
        ctx.beginPath();
        ctx.translate(-0x5, -0.7 * this.rad);
        ctx.moveTo(0, -0xa);
        ctx.lineTo(0, 0xa);
        ctx.moveTo(-0xa, -0xa);
        ctx.lineTo(0xa, 0xa);
        ctx.moveTo(0xa, -0xa);
        ctx.lineTo(-0xa, 0xa);
        ctx.moveTo(-0xa, 0);
        ctx.lineTo(0xa, 0);
        ctx.lineWidth = 0x3;
        ctx.stroke();
        ctx.restore();
        break;
    case _0x22236c:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.15 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#755A2A');
        ctx.restore();
        break;
    case _0x14c7a6:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        if (_0x52a1b0 = _0x2f22f9('img/ability_sabertoothJawAttack.png')) {
            var _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8);
            _0x3902e2 = this.rad - 2.5;
            ctx.rotate(this.rPer * Math.PI * 0x2);
            ctx.drawImage(_0x52a1b0, 0, 0, _0x52a1b0.width * _0x4b7978, _0x52a1b0.height, -_0x3902e2, -_0x3902e2, 0x2 * _0x3902e2 * _0x4b7978, 0x2 * _0x3902e2);
        }
        ctx.restore();
        break;
    case _0x4e8732:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        if (_0x52a1b0 = _0x2f22f9('img/ability_claw.png')) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), _0x3902e2 = this.rad - 2.5, ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x52a1b0, 0, 0, _0x52a1b0.width * _0x4b7978, _0x52a1b0.height, -_0x3902e2, -_0x3902e2, 0x2 * _0x3902e2 * _0x4b7978, 0x2 * _0x3902e2);
        ctx.restore();
        break;
    case _0xda7e33:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.1 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#5B7EC7');
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        if (_0x52a1b0 = _0x2f22f9('skins/volcano/kingdragon/' + this.speciesType + '/tail.png')) {
            _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8);
            _0x3902e2 = 0.65 * this.rad;
            ctx.rotate(this.angle);
            var _0x26293e = this.rad,
                _0x524cd3 = 0x2 * _0x3902e2,
                _0x28cfe9 = 0x2 * _0x3902e2 * _0x4b7978;
            ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -1.25 * _0x28cfe9, _0x524cd3, _0x28cfe9);
        }
        ctx.restore();
        break;
    case _0x57afac:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.1 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#5B7EC7');
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        _0x3902e2 = 'skins/ocean/bluewhale/' + this.speciesType;
        if (_0x52a1b0 = _0x2f22f9(_0x3902e2 + '/ability_whaleTailHit.png')) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), _0x3902e2 = 0.85 * this.rad, ctx.rotate(this.angle), _0x26293e = this.rad, _0x524cd3 = 0x2 * _0x3902e2, _0x28cfe9 = 0x2 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -1.25 * _0x28cfe9, _0x524cd3, _0x28cfe9);
        ctx.restore();
        break;
    case _0x3476d5:
        _0x52a1b0 = ctx.globalAlpha;
        ctx.save();
        _0x26293e = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x3902e2 = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * _0x26293e);
        ctx.globalAlpha = 0.6 * ctx.globalAlpha * _0x3902e2;
        ctx.rotate(this.angle);
        ctx.globalAlpha = 0.15 * _0x52a1b0;
        0 == this.specType2 ? _0x110b78(0, 0, this.rad, '#96661C') : _0x110b78(0, 0, this.rad, '#e0dfde');
        ctx.restore();
        ctx.save();
        _0x3902e2 = 'skins/' + (0x1 == this.specType2 ? 'arctic' : 'land') + '/bear/' + this.speciesType + '/ability.png';
        console.log(_0x3902e2);
        if (_0x52a1b0 = _0x2f22f9(_0x3902e2)) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), _0x3902e2 = _0x1c8ba9((_0x1534e0 - this.spawnTime) / 0x12c, 0, 0x1), _0x26293e = -(-0.5 + _0x3902e2) * _0x55d748(0x5a), ctx.rotate(this.angle + _0x26293e * (0 == this.specType ? 0x1 : -0x1)), _0x3902e2 = 0x1 * -this.rad, _0x26293e = this.rad, _0x524cd3 = 0x2 * _0x3902e2, _0x28cfe9 = 0x2 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.8 * _0x28cfe9 + _0x3902e2, _0x524cd3, _0x28cfe9);
        ctx.restore();
        break;
    case _0x2a9fc0:
        _0x52a1b0 = ctx.globalAlpha;
        ctx.save();
        _0x26293e = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x3902e2 = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * _0x26293e);
        ctx.globalAlpha = 0.6 * ctx.globalAlpha * _0x3902e2;
        ctx.rotate(this.angle);
        ctx.globalAlpha = 0.15 * _0x52a1b0;
        0 == this.specType2 ? _0x110b78(0, 0, this.rad, '#96661C') : _0x110b78(0, 0, this.rad, '#e0dfde');
        ctx.restore();
        ctx.save();
        if (_0x52a1b0 = _0x2f22f9('skins/desert/gobibear/claw' + this.specType2 + '.png')) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), _0x3902e2 = _0x1c8ba9((_0x1534e0 - this.spawnTime) / 0x12c, 0, 0x1), _0x26293e = -(-0.5 + _0x3902e2) * _0x55d748(0x5a), ctx.rotate(this.angle + _0x26293e * (0 == this.specType ? 0x1 : -0x1)), _0x3902e2 = 0x1 * -this.rad, _0x26293e = this.rad, _0x524cd3 = 0x2 * _0x3902e2, _0x28cfe9 = 0x2 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.8 * _0x28cfe9 + _0x3902e2, _0x524cd3, _0x28cfe9);
        ctx.restore();
        break;
    case _0x341f1f:
        _0x26293e = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x4b7978 = _0x93972d(_0x26293e, 0x1, 0.1, 0x1);
        _0x3902e2 = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x26293e);
        _0x52a1b0 = 0x2 == this.specType ? 0x8 : 0x1;
        for (i = 0; i < _0x52a1b0; i++) {
            void 0 === this.drawRad && (this.drawRad = [], this.drawAngle = []);
            void 0 == this.drawRad[i] && (this.drawRad.push(_0x26c094(0x5, 0xa) / 0xa), this.drawAngle.push(_0x55d748(_0x26c094(0x1, 0x168))));
            _0x26293e = this.rad * this.drawRad[i];
            ctx.save();
            ctx.rotate(this.drawAngle[i]);
            ctx.save();
            ctx.globalAlpha = 0.1 - _0x4b7978;
            ctx.restore();
            ctx.save();
            ctx.fillStyle = 'white';
            ctx.globalAlpha = 0.3 - _0x4b7978;
            var _0x524cd3 = 0.6 * -_0x26293e,
                _0x28cfe9 = 0.5 * -_0x26293e + 0xa * this.rPer,
                _0x49749f = Math.max(0, 0.65 * _0x26293e + _0x3902e2) + 0x2;
            _0x110b78(_0x524cd3, _0x28cfe9, _0x49749f, '#654321');
            _0x524cd3 = 0.5 * _0x26293e;
            _0x28cfe9 = 0.5 * -_0x26293e - 0xa * this.rPer;
            _0x49749f = Math.max(0, 0.73 * _0x26293e - _0x3902e2);
            _0x110b78(_0x524cd3, _0x28cfe9, _0x49749f, '#654321');
            _0x524cd3 = 0.6 * _0x26293e;
            _0x28cfe9 = 0.5 * _0x26293e;
            _0x49749f = Math.max(0, 0.78 * _0x26293e + _0x3902e2);
            _0x110b78(_0x524cd3, _0x28cfe9, _0x49749f, '#654321');
            _0x524cd3 = 0.5 * -_0x26293e;
            _0x28cfe9 = 0.5 * _0x26293e + 0xa * this.rPer;
            _0x49749f = Math.max(0, 0.6 * _0x26293e + this.rPer - _0x3902e2);
            _0x110b78(_0x524cd3, _0x28cfe9, _0x49749f, '#654321');
            ctx.restore();
            ctx.restore();
        }
        break;
    
       

    case _0x222974:
        ctx.globalAlpha = 0.5;
        _0x110b78(0, 0, this.rad, 'red');
        break;
    case _0x3c4e59:
        break;
    case _0x57b271:
        break;
    case _0x2be396:
        break;
    case _0xfa9e9c:
    case _0x370043:
    case _0x2d3f85:
    case _0x5ebc48:
    case _0x5f39b1:
    case _0x4af420:
    case _0x598dae:
    case _0x3f37f7:
    case _0x94125:
    case _0x17f519:
        break;
    case _0x364e0e:
        0x2 == this.specType && (_0x52a1b0 = _0x2f22f9('img/desert/flytrap/mouth/closed.png')) && (_0x3902e2 = this.rad, ctx.save(), ctx.globalAlpha = 0.9, ctx.rotate(this.angle - _0x55d748(-0x5a)), ctx.drawImage(_0x52a1b0, -_0x3902e2, -_0x3902e2, 0x2 * _0x3902e2, 0x2 * _0x3902e2), ctx.restore());
        break;
    case 59:
        this.doesDrawEffectScale = this.drawEffectScale_Slow = !0;
        ctx.globalAlpha = 0.2;
        _0x110b78(0, 0, 0.85 * this.rad, 'white');
        if (_0x52a1b0 = _0x2f22f9('img/target' + (0x3 == this.specType ? '_e' : '') + '.png')) _0x3902e2 = this.rad, ctx.save(), ctx.globalAlpha = 0.5, ctx.drawImage(_0x52a1b0, -_0x3902e2, -_0x3902e2, 0x2 * _0x3902e2, 0x2 * _0x3902e2), ctx.restore();
        ctx.save();
        this.is1v1Target && null != this.timerTxt && (ctx.globalAlpha = 0x1, this.timerTxt.x = 0, this.timerTxt.y = 0, this.timerTxt.draw());
        ctx.restore();
        break;
    case _0x23db8f:
        ctx.globalAlpha = 0.5;
        break;
    case _0x461076:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.05 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#B32E10');
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        _0x3902e2 = 'skins/ocean/kingcrab/' + this.speciesType;
        if (_0x52a1b0 = _0x2f22f9(_0x3902e2 + '/ability_crabSmash' + this.specType + '.png')) _0x3902e2 = _0x1c8ba9((_0x1534e0 - this.spawnTime) / 0xc8, 0, 0x1), _0x4b7978 = 0x1 == this.specType ? -0x1 : 0x1, _0x55d748(-0x5a * _0x4b7978), _0x26293e = _0x4b7978 * (0.3 + _0x3902e2) + _0x55d748(-0x1e * _0x4b7978), _0x3902e2 = 0.6 * this.rad, ctx.rotate(this.angle + _0x26293e), _0x26293e = this.rad, _0x524cd3 = 1.4 * _0x3902e2, _0x28cfe9 = 0x2 * _0x3902e2, _0x3902e2 = 0.75, _0x4b7978 = 0.95, 0x1 == this.specType && (_0x3902e2 = 0.25, _0x4b7978 = 0.95), ctx.drawImage(_0x52a1b0, 0 + _0x524cd3 * -_0x3902e2, _0x26293e + _0x28cfe9 * -_0x4b7978, _0x524cd3, _0x28cfe9);
        ctx.restore();
        break;
    case _0x404a08:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.05 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#E4E7C8');
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        _0x3902e2 = 'skins/land/elephant/' + this.speciesType;
        _0x52a1b0 = _0x2f22f9(_0x3902e2 + '/ability_elephantTrunkSmack.png');
        console.log(_0x3902e2);
        _0x52a1b0 && (_0x3902e2 = _0x1c8ba9((_0x1534e0 - this.spawnTime) / 0x12c, 0, 0x1), _0x26293e = -(-0.5 + _0x3902e2) * _0x55d748(0x5a), _0x3902e2 = 0.6 * this.rad, ctx.rotate(this.angle + _0x26293e), _0x26293e = this.rad, _0x524cd3 = 1.4 * _0x3902e2, _0x28cfe9 = 0x2 * _0x3902e2, ctx.drawImage(_0x52a1b0, 0 + -0.75 * _0x524cd3, _0x26293e + -0.95 * _0x28cfe9, _0x524cd3, _0x28cfe9));
        ctx.restore();
        break;
    case _0xeb0ec1:
        break;
    case _0x779685:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.25 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#44d31f');
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        if (_0x52a1b0 = _0x2f22f9('skins/land/croc/' + this.speciesType + '/ability.png')) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), _0x3902e2 = 0.6 * this.rad, ctx.rotate(this.angle), _0x26293e = this.rad, _0x524cd3 = 2.5 * _0x3902e2, _0x28cfe9 = 2.5 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.95 * _0x28cfe9, _0x524cd3, _0x28cfe9), ctx.rotate(Math.PI), _0x26293e = 0.5 * this.rad, _0x524cd3 = 2.5 * _0x3902e2, _0x28cfe9 = 2.5 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.95 * _0x28cfe9, _0x524cd3, _0x28cfe9);
        ctx.restore();
        break;
    case _0x426544:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.25 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#44d31f');
        _0x3902e2 = 'skins/land/boaconstrictor/' + this.speciesType;
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        if (_0x52a1b0 = _0x2f22f9(_0x3902e2 + '/ability_boaBite.png')) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), _0x3902e2 = 0.6 * this.rad, ctx.rotate(this.angle), _0x26293e = this.rad, _0x524cd3 = 2.5 * _0x3902e2, _0x28cfe9 = 2.5 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.95 * _0x28cfe9, _0x524cd3, _0x28cfe9), ctx.rotate(Math.PI), _0x26293e = 0.5 * this.rad, _0x524cd3 = 2.5 * _0x3902e2, _0x28cfe9 = 2.5 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.95 * _0x28cfe9, _0x524cd3, _0x28cfe9);
        ctx.restore();
        break;
    case _0x492730:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.1 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#755A2A');
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        if (_0x52a1b0 = _0x2f22f9('skins/land//tiger/' + this.speciesType + '/ability_tigerJump.png')) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0x64), _0x3902e2 = 1.1 * this.rad, ctx.rotate(this.angle), _0x26293e = this.rad, _0x524cd3 = 0x2 * _0x3902e2, _0x28cfe9 = 0x2 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0x1 * _0x28cfe9, _0x524cd3, _0x28cfe9);
        ctx.restore();
        break;
    case _0x34f413:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.05 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#44d31f');
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        _0x52a1b0 = _0x2f22f9('img/ability_pounce2.png');
        _0x49749f = _0x2f22f9('img/ability_pounce1.png');
        _0x52a1b0 && _0x49749f && (_0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), _0x3902e2 = 0.4 * this.rad, ctx.rotate(this.angle), _0x26293e = this.rad, _0x524cd3 = 2.5 * _0x3902e2, _0x28cfe9 = 2.5 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.95 * _0x28cfe9, _0x524cd3, _0x28cfe9), _0x3902e2 = 0.6 * this.rad, _0x26293e = 0.5 * this.rad, _0x524cd3 = 2.5 * _0x3902e2, _0x28cfe9 = 2.5 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x49749f, 0 + -0.5 * _0x524cd3, _0x26293e + -0.95 * _0x28cfe9, _0x524cd3, _0x28cfe9));
        ctx.restore();
        break;
    case _0x4d52a4:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.05 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#E4E7C8');
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        if (_0x52a1b0 = _0x2f22f9('skins/land/tiger/' + this.speciesType + '/ability_tigerSlash' + this.specType + '.png')) _0x3902e2 = _0x1c8ba9((_0x1534e0 - this.spawnTime) / 0x12c, 0, 0x1), _0x26293e = (0x1 == this.specType ? 0x1 : -0x1) * (-0.6 + _0x3902e2) * _0x55d748(0x5a), _0x3902e2 = 1.2 * this.rad, ctx.rotate(this.angle + _0x26293e), _0x26293e = this.rad, _0x524cd3 = 1.4 * _0x3902e2, _0x28cfe9 = 0x2 * _0x3902e2, ctx.drawImage(_0x52a1b0, 0 + -0.2 * _0x524cd3, _0x26293e + -0.5 * _0x28cfe9, _0x524cd3, _0x28cfe9);
        ctx.restore();
        break;
    case _0x149736:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.1 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#755A2A');
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        _0x3902e2 = 'img';
        _0x1bcd79.isHalloween && (_0x3902e2 = 'skins/zombie/ability_skins');
        if (_0x52a1b0 = _0x2f22f9(_0x3902e2 + '/ability_zebraKick.png')) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), _0x3902e2 = 0.6 * this.rad, ctx.rotate(this.angle), _0x26293e = this.rad, _0x524cd3 = 0x2 * _0x3902e2, _0x28cfe9 = 0x3 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0x1 * _0x28cfe9, _0x524cd3, _0x28cfe9);
        ctx.restore();
        break;
    case _0x4de08b:
        _0x52a1b0 = ctx.globalAlpha;
        ctx.save();
        _0x26293e = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x3902e2 = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * _0x26293e);
        _0x4b7978 = ctx.globalAlpha;
        ctx.globalAlpha = 0.6 * ctx.globalAlpha * _0x3902e2;
        ctx.rotate(this.angle);
        ctx.globalAlpha = 0.15 * _0x52a1b0;
        _0x110b78(0.3 * this.rad, 0, this.rad * (0.9 + 0.12 * _0x3902e2), '#E4E7C8');
        _0x110b78(0.3 * -this.rad, 0, this.rad * (1.05 + 0.09 * _0x3902e2), '#E4E7C8');
        ctx.globalAlpha = _0x4b7978;
        ctx.restore();
        ctx.save();
        _0x3902e2 = 'img';
        _0x1bcd79.isHalloween && (_0x3902e2 = 'skins/zombie/ability_skins');
        if (_0x52a1b0 = _0x2f22f9(_0x3902e2 + '/ability_giraffeStompLeg.png')) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), _0x3902e2 = this.angle, ctx.rotate(_0x3902e2), _0x3902e2 = 0x1 * -this.rad, _0x26293e = this.rad, _0x524cd3 = 0x3 * _0x3902e2, _0x28cfe9 = 0x2 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.7 * _0x28cfe9 + _0x3902e2, _0x524cd3, _0x28cfe9);
        ctx.restore();
        break;
    case _0x3e420f:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        ctx.rotate(this.angle);
        if (_0x52a1b0 = _0x2f22f9('skins/ocean/shark/' + this.speciesType + '/ability.png')) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), ctx.globalAlpha = 0.9, _0x3902e2 = 1.75 * -this.rad, _0x26293e = this.rad, _0x524cd3 = 0x2 * _0x3902e2, _0x28cfe9 = 0x2 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.9 * _0x28cfe9 + _0x3902e2, _0x524cd3, _0x28cfe9);
        ctx.restore();
        break;
    case _0xf075e3:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.5 * _0x52a1b0;
        _0x3902e2 = this.rad;
        _0x26293e = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x524cd3 = 2.2;
        _0x4b7978 = 6.5 * Math.cos(0x2 * Math.PI / _0x524cd3 * _0x26293e);
        _0x26293e = 6.5 * Math.sin(0x2 * Math.PI / _0x524cd3 * _0x26293e);
        ctx.globalAlpha = 0.3 * _0x52a1b0;
        _0x110b78(0, 0, _0x3902e2, _0x1a1848);
        ctx.globalAlpha = 0.5 * _0x52a1b0;
        _0x110b78(0 + _0x4b7978 / 4.5 + this.rPer, 0x1 + _0x26293e / 1.5, Math.max(0, _0x3902e2 - 0xe), '#de9d23');
        ctx.restore();
        break;
    case _0x1e5d1f:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.5 * _0x52a1b0;
        _0x3902e2 = this.rad;
        _0x26293e = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x524cd3 = 2.2;
        _0x4b7978 = 6.5 * Math.cos(0x2 * Math.PI / _0x524cd3 * _0x26293e);
        _0x26293e = 6.5 * Math.sin(0x2 * Math.PI / _0x524cd3 * _0x26293e);
        ctx.globalAlpha = 0.3 * _0x52a1b0;
        _0x110b78(0, 0, _0x3902e2, '#2CAAC4');
        ctx.globalAlpha = 0.5 * _0x52a1b0;
        _0x110b78(0 + _0x4b7978 / 4.5 + this.rPer, 0x1 + _0x26293e / 1.5, Math.max(0, _0x3902e2 - 0xe), '#29A0BA');
        _0x110b78(0 + _0x4b7978 / 1.5 - 0x2 * this.rPer, _0x26293e, Math.max(0, _0x3902e2 - 38.5 + _0x26293e / 0x5), '#2B8CAA');
        _0x110b78(0 + _0x4b7978 / 1.5 - 0x2 * this.rPer, _0x26293e, Math.max(0, _0x3902e2 - 54.5 + _0x26293e / 0xb), '#28829E');
        ctx.restore();
        break;
    case _0x2bebb2:
        if (0 == this.specType || 0x2 == this.specType) {
            ctx.save();
            ctx.globalAlpha = 0.3;
            if (_0x52a1b0 = _0x2f22f9('skins/pelican/ability_pelican.png')) _0x3902e2 = 1.5 * -this.rad, ctx.rotate(this.angle), _0x26293e = this.rad, _0x28cfe9 = _0x524cd3 = _0x3902e2, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.5 * _0x28cfe9 + _0x3902e2, _0x524cd3, _0x28cfe9);
            ctx.restore();
        }
        break;
    case _0x470a8b:
        if (0 == this.specType) {
            ctx.save();
            _0x52a1b0 = ctx.globalAlpha;
            ctx.globalAlpha = 0.15 * _0x52a1b0;
            ctx.globalAlpha = 0x1 * _0x52a1b0;
            if (_0x52a1b0 = _0x2f22f9('skins/land/trex/' + this.speciesType + '/ability_trexBite.png')) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), _0x3902e2 = 0.6 * this.rad, ctx.rotate(this.angle), _0x26293e = this.rad, _0x524cd3 = 2.5 * _0x3902e2, _0x28cfe9 = 2.5 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.95 * _0x28cfe9, _0x524cd3, _0x28cfe9), ctx.rotate(Math.PI), _0x26293e = 0.5 * this.rad, _0x524cd3 = 2.5 * _0x3902e2, _0x28cfe9 = 2.5 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.95 * _0x28cfe9, _0x524cd3, _0x28cfe9);
            if (_0x52a1b0 = _0x2f22f9('skins/land/trex/' + this.speciesType + '/trex-head.png')) _0x4b7978 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8), _0x3902e2 = 1.5 * -this.rad, ctx.rotate(_0x55d748(0xb4)), _0x26293e = this.rad, _0x524cd3 = 0x2 * _0x3902e2, _0x28cfe9 = 0x2 * _0x3902e2 * _0x4b7978, ctx.drawImage(_0x52a1b0, 0 + -0.5 * _0x524cd3, _0x26293e + -0.5 * _0x28cfe9 + _0x3902e2, _0x524cd3, _0x28cfe9);
            ctx.restore();
        }
        break;
    case _0x3ba6bc:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.15 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#6D7471');
        ctx.restore();
        break;
    case _0x8caa31:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.15 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#6D7471');
        ctx.restore();
        break;
    case _0x4628a4:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.15 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#6D7471');
        ctx.restore();
        break;
    case _0x51552c:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.15 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#f2f2f2');
        ctx.restore();
        break;
    case _0x35d9ab:
        ctx.save();
        ctx.rotate(this.angle + _0x55d748(0xb4));
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.8 * _0x52a1b0;
        if (_0x52a1b0 = _0x2f22f9('img/wave.png')) _0x3902e2 = this.rad, ctx.drawImage(_0x52a1b0, -_0x3902e2, -_0x3902e2, 0x2 * _0x3902e2, 0x2 * _0x3902e2);
        ctx.restore();
        break;
    case _0x13f029:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.2 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#746B3E');
        ctx.restore();
        break;
    case _0x174e88:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.5 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#62C5FF');
        ctx.globalAlpha = 0x1 * _0x52a1b0;
        ctx.strokeStyle = '#62C5FF';
        ctx.beginPath();
        _0x3902e2 = -0.7 * this.rad;
        ctx.moveTo(_0x3902e2, -0x5);
        ctx.lineTo(_0x3902e2 - 0x4, 0x5);
        ctx.lineTo(_0x3902e2 + 0x4, 0x2);
        ctx.lineTo(_0x3902e2 + 0x2, 0xf);
        ctx.lineWidth = 0x3;
        ctx.stroke();
        ctx.restore();
        break;
    case _0x480fd2:
        if (0x2 != _0x14fca5)(_0x52a1b0 = _0x2f22f9('img/whirlpool2.png')) ? (_0x3902e2 = this.rad, ctx.save(), ctx.globalAlpha = 0.5, ctx.drawImage(_0x52a1b0, -_0x3902e2, -_0x3902e2, 0x2 * _0x3902e2, 0x2 * _0x3902e2), ctx.restore()) : _0x110b78(0, 0, this.rad, '#2D93B0');
        else if (ctx.save(), _0x3902e2 = Math.max(0, this.rad - 0x1e), _0x52a1b0 = ctx.globalAlpha, _0x26293e = (_0x1534e0 - this.spawnTime) / 0x3e8, _0x524cd3 = 2.2, _0x4b7978 = 10.5 * Math.cos(0x2 * Math.PI / _0x524cd3 * _0x26293e), _0x26293e = 6.5 * Math.sin(0x2 * Math.PI / _0x524cd3 * _0x26293e), ctx.globalAlpha = 0.05 * _0x52a1b0, _0x110b78(0 + _0x4b7978 + 0xf - this.rPer, 0 + _0x26293e + 0x14 - this.rPer, Math.max(0, _0x3902e2 - 0x6), 'white'), ctx.globalAlpha = 0.1 * _0x52a1b0, _0x110b78(0 + _0x4b7978 + 0xf - this.rPer, 0 + _0x26293e / 0x2 - this.rPer, Math.max(0, _0x3902e2 - 0x6), '#2D93B0'), ctx.globalAlpha = 0.15 * _0x52a1b0, _0x110b78(0 + _0x4b7978 / 1.5 - 0x2 * this.rPer, _0x26293e, Math.max(0, _0x3902e2 - 54.5 + _0x26293e / 0xb), '#28829E'), ctx.restore(), ctx.save(), _0x52a1b0 = ctx.globalAlpha, _0x3902e2 = Math.max(0, this.rad - 0x1e), _0x26293e = (_0x1534e0 - this.spawnTime) / 0x3e8, _0x524cd3 = 3.2, _0x4b7978 = 0x32 * Math.cos(0x2 * Math.PI / _0x524cd3 * _0x26293e), _0x26293e = 0x32 * Math.sin(0x2 * Math.PI / _0x524cd3 * _0x26293e), ctx.globalAlpha = 0.05 * _0x52a1b0, _0x110b78(0, 0, _0x3902e2, '#2CAAC4'), ctx.globalAlpha = 0.15 * _0x52a1b0, _0x110b78(0 + _0x4b7978 / 0x2 - this.rPer, 0 + _0x26293e / 0x2 - this.rPer, Math.max(0, 0.95 * _0x3902e2), '#2D93B0'), ctx.globalAlpha = 0.25 * _0x52a1b0, _0x110b78(0 + _0x4b7978 / 4.5 + this.rPer, 0x1 + _0x26293e / 1.5, Math.max(0, 0.85 * _0x3902e2), '#28829E'), ctx.restore(), _0x52a1b0 = _0x2f22f9('img/whirlpool2.png')) _0x3902e2 = this.rad - 0x1e, _0x4b7978 = 0x3e8 / (0x5 / 0x3c), _0x4b7978 = (_0x1534e0 - this.spawnTime) % _0x4b7978 / _0x4b7978, _0x524cd3 = 0x2 * _0x4b7978 * Math.PI, _0x4b7978 = 0x3e8 / (0x8 / 0x3c), _0x4b7978 = (_0x1534e0 - this.spawnTime) % _0x4b7978 / _0x4b7978, rotation2 = 0x2 * _0x4b7978 * Math.PI, ctx.save(), ctx.rotate(_0x524cd3), ctx.globalAlpha = 0.1, _0x26293e = (_0x1534e0 - this.spawnTime) / 0x3e8, _0x4b7978 = 6.5 * Math.cos(0x2 * Math.PI / 2.2 * _0x26293e), ctx.globalAlpha = 0.2, ctx.drawImage(_0x52a1b0, -_0x3902e2 - _0x4b7978 + 0x1e / 2.2, -_0x3902e2, 0x2 * _0x3902e2, 0x2 * _0x3902e2), ctx.restore(), ctx.save(), ctx.globalAlpha = 0.1, ctx.rotate(0.8 * rotation2), ctx.drawImage(_0x52a1b0, -_0x3902e2 - _0x4b7978 / 2.2, -_0x3902e2, 0x2 * _0x3902e2, 0x2 * _0x3902e2), ctx.restore(), ctx.save(), ctx.globalAlpha = 0.2, ctx.rotate(rotation2), ctx.drawImage(_0x52a1b0, -_0x3902e2 - _0x4b7978 - 0x14 / 2.2, -_0x3902e2, 0x2 * _0x3902e2, 0x2 * _0x3902e2), ctx.restore(), ctx.save(), ctx.globalAlpha = 0.2, ctx.rotate(rotation2), ctx.drawImage(_0x52a1b0, -_0x3902e2 - _0x4b7978 / 2.2, -_0x3902e2, 0x2 * _0x3902e2, 0x2 * _0x3902e2), ctx.restore(), ctx.save(), ctx.globalAlpha = 0.2, ctx.rotate(_0x524cd3), ctx.drawImage(_0x52a1b0, -_0x3902e2 - _0x4b7978 / 2.2, -_0x3902e2, 0x2 * _0x3902e2, 0x2 * _0x3902e2), ctx.restore(), ctx.save(), ctx.globalAlpha = 0.2, ctx.rotate(_0x524cd3), ctx.drawImage(_0x52a1b0, -_0x3902e2 - _0x4b7978 / 2.2, -_0x3902e2, 0x2 * _0x3902e2, 0x2 * _0x3902e2), ctx.restore();
        break;
    case _0x28f606:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.5 * _0x52a1b0;
        _0x3902e2 = Math.max(0, this.rad - 0x1e);
        _0x26293e = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x524cd3 = 2.2;
        _0x4b7978 = 6.5 * Math.cos(0x2 * Math.PI / _0x524cd3 * _0x26293e);
        _0x26293e = 6.5 * Math.sin(0x2 * Math.PI / _0x524cd3 * _0x26293e);
        ctx.globalAlpha = 0.4 * _0x52a1b0;
        _0x110b78(0, 0, _0x3902e2, '#2CAAC4');
        ctx.globalAlpha = 0.7 * _0x52a1b0;
        0x2 != _0x14fca5 && _0x110b78(0 + _0x4b7978 / 0x2 - this.rPer, 0 + _0x26293e / 0x2 - this.rPer, Math.max(0, _0x3902e2 - 0x6), '#2D93B0');
        _0x110b78(0 + _0x4b7978 / 4.5 + this.rPer, 0x1 + _0x26293e / 1.5, Math.max(0, _0x3902e2 - 0xe), '#29A0BA');
        _0x110b78(0 + _0x4b7978 / 1.5 - 0x2 * this.rPer, _0x26293e, Math.max(0, _0x3902e2 - 38.5 + _0x26293e / 0x5), '#2B8CAA');
        _0x110b78(0 + _0x4b7978 / 1.5 - 0x2 * this.rPer, _0x26293e, Math.max(0, _0x3902e2 - 54.5 + _0x26293e / 0xb), '#28829E');
        ctx.restore();
        break;
    case _0x5a924b:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
        _0x26293e = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x3902e2 = 1.5 * Math.sin(0x2 * Math.PI / 0x6 * _0x26293e);
        ctx.globalAlpha = 0.7 * _0x52a1b0;
        ctx.fillStyle = 'black';
        ctx.beginPath();
        ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI);
        ctx.fill();
        0x2 != _0x14fca5 && (ctx.fillStyle = 'black', ctx.globalAlpha = 0.5 * _0x52a1b0, ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - 0x4 + _0x3902e2), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.45 * this.rad, 0.45 * -this.rad + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x3902e2), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x3902e2), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x3902e2), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x3902e2), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath());
        ctx.restore();
        break;
    case _0x551cc0:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.25 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#9F8641');
        ctx.restore();
        break;
    case _0x27a46a:
        ctx.save();
        _0x52a1b0 = ctx.globalAlpha;
        ctx.globalAlpha = 0.25 * _0x52a1b0;
        _0x110b78(0, 0, this.rad, '#785228');
        ctx.restore();
        break;
    default:
        ctx.save(), _0x52a1b0 = ctx.globalAlpha, ctx.globalAlpha = 0.15 * _0x52a1b0, _0x110b78(0, 0, this.rad, 'black'), ctx.restore();
    }
};
AbillityObj.prototype.setObjTypes = function (_0x43f896, _0x9f6281) {
    this.oType = _0x43f896;
    this.abilityType = _0x9f6281;
};
AbillityObj.prototype.readCustomData_onNewlyVisible = function (_0x2e6688) {
    AbillityObj.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x2e6688);
    this.specType = _0x2e6688.readUInt8();
    this.specType2 = _0x2e6688.readUInt8();
    this.speciesType = _0x2e6688.readUInt8();
    if (this.abilityType == _0x34a673 || this.abilityType == _0x8caa31 || this.abilityType == _0x35d9ab || this.abilityType == _0x13f029 || this.abilityType == _0x27a46a) this.rad = this.oRad = 0;
};
AbillityObj.prototype.readCustomData_onUpdate = function (_0x50a708) {
    AbillityObj.superClass.prototype.readCustomData_onUpdate.call(this, _0x50a708);
    this.specType = _0x50a708.readUInt8();
    this.specType2 = _0x50a708.readUInt8();
    this.is1v1Target = _0x50a708.readUInt8();
    if (this.is1v1Target == 1) this.timer = _0x50a708.readUInt16() / 100, 30 > this.timer && this.updateTimer();
    if (this.is1v1Target == 2) {
        this.devStr = _0x50a708.readString();
        this.setTimer(this.devStr);
      }
    this.abilityType == _0x364e0e && (this.doesDrawEffectScale = this.drawEffectScale_Slow = !0);
};
AbillityObj.prototype.updateTimer = function () {
    this.timer = Math.round(this.timer);
    this.setTimer(this.timer);
};
AbillityObj.prototype.timerTxt = null;
AbillityObj.prototype.setTimer = function (_0x307973) {
    _0x307973 = '' + _0x307973;
    null == this.timerTxt ? (this.timerTxt = new _0x120450(0x14, '#FFFFFF'), this.timerTxt.strokeW = 0x2, this.timerTxt.multiLine = !0, this.timerTxt.renderScale = 0x5) : this.timerTxt.setFontSize(0x14);
    this.timerTxt.setText(_0x307973);
};

function AbillityObj() {
    AbillityObj.superClass.call(this, o_abilityObj);
    AbillityObj.prototype.easeAngleChanges = !0x1;
}
window.AbilityObj = AbillityObj;
GameObjType.setCustomClassForGameObjType(AbillityObj, o_abilityObj);
_0x5a621d = _0x384319;
_0x2a91c6 = AbillityObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x384319.prototype.customDraw = function (_0x31748b) {
    ctx.save();
    _0x31748b = ctx.globalAlpha;
    ctx.rotate(this.angle);
    ctx.globalAlpha = 0.05 * _0x31748b;
    _0x110b78(0, 0, this.rad, '#E4E7C8');
    ctx.globalAlpha = 0x1 * _0x31748b;
    if (_0x31748b = _0x2f22f9('skins/land/elephant/' + this.speciesType + '/ability_elephantTrunkSmack.png')) {
        var _0x1f91d9 = -(-0.5 + _0x1c8ba9((_0x1534e0 - this.spawnTime) / 0x12c, 0, 0x1)) * _0x55d748(0x5a),
            _0x9d133e = 0.6 * this.rad;
        ctx.save();
        ctx.rotate(_0x1f91d9);
        _0x1f91d9 = 1.4 * _0x9d133e;
        _0x9d133e *= 0x2;
        ctx.drawImage(_0x31748b, 0 + -0.75 * _0x1f91d9, this.rad + -0.95 * _0x9d133e, _0x1f91d9, _0x9d133e);
        ctx.restore();
    }
    ctx.restore();
};
_0x384319.prototype.readCustomData_onNewlyVisible = function (_0x55a82f) {
    _0x384319.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x55a82f);
};
_0x384319.prototype.readCustomData_onUpdate = function (_0x5ed6ea) {
    _0x384319.superClass.prototype.readCustomData_onUpdate.call(this, _0x5ed6ea);
};

function _0x384319() {
    _0x384319.superClass.call(this);
}
window.AbilityObjElephant = _0x384319;
GameObjType.setCustomClassForGameObjType(_0x384319, o_abilityObj, _0x404a08);
_0x5a621d = _0x2c3e98;
_0x2a91c6 = AbillityObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x2c3e98.prototype.customDraw = function (_0xaf2d57) {
    _0xaf2d57 = ctx.globalAlpha;
    ctx.save();
    ctx.globalAlpha = 0.6 * ctx.globalAlpha * Math.sin(0x2 * Math.PI / 1.5 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
    ctx.rotate(this.angle);
    ctx.globalAlpha = 0.15 * _0xaf2d57;
    0 == this.specType2 && this.aniSpecies ? _0x110b78(0, 0, this.rad, '#96661C') : _0x110b78(0, 0, this.rad, '#e0dfde');
    ctx.restore();
    ctx.save();
    _0xaf2d57 = 'skins/';
    _0xaf2d57 = 0 == this.specType2 ? _0xaf2d57 + ('land/bear/' + this.aniSpecies + '/ability.png') : _0xaf2d57 + 'arctic/bear/ability.png';
    if (_0xaf2d57 = _0x2f22f9(_0xaf2d57)) {
        var _0x614588 = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8),
            _0x1bddf5 = -(-0.5 + _0x1c8ba9((_0x1534e0 - this.spawnTime) / 0x12c, 0, 0x1)) * _0x55d748(0x5a);
        ctx.rotate(this.angle + _0x1bddf5 * (0 == this.specType ? 0x1 : -0x1));
        var _0x1bddf5 = 0x1 * -this.rad,
            _0x3f9387 = 0x2 * _0x1bddf5,
            _0x614588 = 0x2 * _0x1bddf5 * _0x614588;
        ctx.drawImage(_0xaf2d57, 0 + -0.5 * _0x3f9387, this.rad + -0.8 * _0x614588 + _0x1bddf5, _0x3f9387, _0x614588);
    }
    ctx.restore();
};
_0x2c3e98.prototype.readCustomData_onNewlyVisible = function (_0x2494ed) {
    _0x2c3e98.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x2494ed);
    this.aniSpecies = _0x2494ed.readUInt8();
};

function _0x2c3e98() {
    _0x2c3e98.superClass.call(this);
}
window.BearSlash = _0x2c3e98;
GameObjType.setCustomClassForGameObjType(_0x2c3e98, o_abilityObj, _0x3476d5);

function hslToHex(h, s, l) {
    l /= 100;
    const a = s * Math.min(l, 1 - l) / 100;
    const f = n => {
        const k = (n + h / 30) % 12;
        const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        return Math.round(255 * color).toString(16).padStart(2, '0');   // convert to Hex and prefix "0" if needed
    };
    return `#${f(0)}${f(8)}${f(4)}`;
}

var gr_min = 0;
var gr_max = 200;
var gr_step = 0;
var gr_turn = 1;
var gr_rain = "#FFFFFF";

function getRainbow(min, max, val)
{
    var minHue = 240, maxHue=0;
    var curPercent = (val - min) / (max-min);
    // var colString = "hsl(" + ((curPercent * (maxHue-minHue) ) + minHue) + ",100%,50%)";
    return hslToHex(((curPercent * (maxHue-minHue) ) + minHue), 100, 50);
}

function getRainbow2()
{
    gr_rain = getRainbow(gr_min, gr_max, gr_step);
    if(gr_step > gr_max) gr_turn = -1;
    if(gr_step < gr_min) gr_turn = 1;
    gr_step += gr_turn;
}

setInterval(getRainbow2, 10);

_0x5a621d = Animal;
_0x2a91c6 = GameObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
Animal.prototype.animalType = _0x4170f3;
Animal.prototype.animalSpecies = 0;
Animal.prototype.isInstance = false;
Animal.prototype.flag_ytmode = false;
Animal.prototype.usingIco = 0;
Animal.prototype.animalSubSpecies = 0;
Animal.prototype.nickName = '';
Animal.prototype.skinImgName = null;
Animal.prototype.skinNotLoadedColor = '#75ce67';
Animal.prototype.flag_lowWat = !0x1;
Animal.prototype.flag_tailBitten = !0x1;
Animal.prototype.flag_underWater = !0x1;
Animal.prototype.flag_eff_stunned = !0x1;
Animal.prototype.flag_eff_frozen = !0x1;
Animal.prototype.flag_usingAbility = !0x1;
Animal.prototype.flag_eff_invincible = !0x1;
Animal.prototype.flag_eff_healing = Animal.prototype.flag_eff_poison = Animal.prototype.flag_eff_bleeding = !0x1;
Animal.prototype.flag_eff_hot = !0x1;
Animal.prototype.flag_eff_aloeveraHealing = !0x1;
Animal.prototype.flag_iceSliding = !0x1;
Animal.prototype.underwaterA = 0;
Animal.prototype.nickNameA = 0;
Animal.prototype.bleedingA = 0;
Animal.prototype.stunA = 0;
Animal.prototype.frozenEffA = Animal.prototype.onFireEffA = Animal.prototype.effA_healing = Animal.prototype.effA_hot = 0;
Animal.prototype.effA_aloeveraHealing = Animal.prototype.effA_poison = Animal.prototype.effA_bleeding = Animal.prototype.effA_stunk = 0;
Animal.prototype.effA_constricted = Animal.prototype.effA_slimed = Animal.prototype.effA_webStuck = 0;
Animal.prototype.effA_speared = 0;
Animal.prototype.effA_dirtStuck = 0;
Animal.prototype.nameA = 0;
Animal.prototype.loadedSkinImg = null;
Animal.prototype.outlineW = null;
Animal.prototype.teamID = 0;
Animal.prototype.wins1v1 = 0;
Animal.prototype.muteTXT = null;
Animal.prototype.isMuted = 0;
Animal.prototype.invTXT = null;
Animal.prototype.isInvisible = 0;
Animal.prototype.birdNoAnimationFlyWingAngle = -0.2;
Animal.prototype.getNameSize = function () {
    return 0xa;
};
Animal.prototype.setNick = function (_0xc2bd73) {
    this.nickName = _0xc2bd73;
    if(null == this.nickTXT) { 
        this.nickTXT = new _0x120450(this.getNameSize(), 'white');
        this.nickTXT.strokeW = 2;
        this.nickTXT.multiLine = false;
        this.nickTXT.renderScale = 0x5;
        // this.nickTXT.strokeColor = "#ffbb00";
        // this.nickTXT.shadowBlur = 8;
    } else {
        this.nickTXT.setFontSize(this.getNameSize());
    }
    this.nickTXT.setText(this.nickName);
};
Animal.prototype.normalizeTime = function (time) {
    time = Number(time);
    if(time < 10) return "0"+time;
    else return time;
};
Animal.prototype.getAfkTime = function () {
    if(this.afkTime != -1) {
        let date = new Date(this.afkTime);
        let now = new Date();
        let difference = now.getTime() - date.getTime();
        let daysDifference = Math.floor(difference/1000/60/60/24);
        difference -= daysDifference*1000*60*60*24

        let hoursDifference = Math.floor(difference/1000/60/60);
        difference -= hoursDifference*1000*60*60

        let minutesDifference = Math.floor(difference/1000/60);
        difference -= minutesDifference*1000*60

        let secondsDifference = Math.floor(difference/1000);
        if(hoursDifference < 1) return "" + this.normalizeTime(minutesDifference) + ":" + this.normalizeTime(secondsDifference);
        else return "" + this.normalizeTime(hoursDifference) + ":" + this.normalizeTime(minutesDifference) + ":" + this.normalizeTime(secondsDifference);
    }
    return "00:00";
};
Animal.prototype.setAfk = function () {
    if(this.isMuted) {
        if(this.muteTXT == null) this.muteTXT = new _0x120450(this.getNameSize(), '#ff3232');
        this.muteTXT.setText("MUTED");
    } else {
        this.muteTXT = null;
    }
    if(this.isInvisible) {
        if(this.invTXT == null) this.invTXT = new _0x120450(this.getNameSize(), '#ff3232');
        this.invTXT.setText("HIDDEN");
    } else {
        this.invTXT = null;
    }
};
Animal.prototype.getOutlineColor = function () {
    var _0x297746 = this.curBiome;
    if (0 < this.id) {
        var _0xaf8130 = gameObjsByID[myPlayerID];
        if (null != yesdDot && this.id == yesdDot.id && !_0x1419f3) return 'orange';
        if (null != maxDot && this.id == maxDot.id && !_0x1419f3) return 'cyan';
        if (this.f_isOutlined > 0) {
            switch(this.f_isOutlined) {
                case 1:
                    return 'cyan';
                case 2:
                    return 'lime';
                case 3:
                    return 'red';
                case 4:
                    return 'grey';
                case 5:
                    return 'pink';
                case 6:
                    return '#000080';
                case 7:
                    return 'purple';
                case 8:
                    return 'orange';
                case 9:
                    return 'maroon';
                case 10:
                    return 'blue';
                case 11:
                    return '#fff705';
                case 12:
                    return '#3a3afd';
                case 13:
                    return gr_rain;
                    case 14:
                        return '#FFD700'
                default:
                    return 'cyan';
            }
        }
        if (this.alwaysPlainOutline) return _0x44bd8a;
        if (gameMode != _0xc2ceb0 || _0xaf8130 && _0xaf8130.teamID != this.teamID && 0 != this.teamID) {
            if (this.isEdibleOutlined()) return _0x45ff9a;
            if (0 < _0x29dd16[this.animalType - 0x1] && this.id != myPlayerID) return _0x105778;
        }
        if (this.flag_inWater) _0x297746 = _0x4e9b48;
        else if (this.flag_inLava) return '#c64a00';
    }
    return _0x26f066(_0x297746);
};
Animal.prototype.drawEyeAtPos = function (_0x32773f, _0x322a54) {
    ctx.beginPath();
    ctx.arc(_0x32773f, _0x322a54, 4.5, 0, 0x2 * Math.PI);
    ctx.fillStyle = 'black';
    ctx.fill();
    ctx.beginPath();
    ctx.fillStyle = 'white';
    ctx.arc(_0x32773f - 0x2, _0x322a54 - 0x1, 0.99, 0, 0x2 * Math.PI);
    ctx.fill();
};
Animal.prototype.animalInfo = function () {
    var _0x230a81 = {};
    switch (this.animalType) {
    case 45:
        _0x230a81.aniName = 'Snail';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = "You're a super slow snail!";
        _0x230a81.aniCol = '#fcc02b';
        _0x230a81.skinName = 'snail';
        break;
    case 1:
        _0x230a81.aniName = 'Mouse';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = "You're a tiny mouse, eat food to grow!";
        _0x230a81.aniCol = '#9BA9B9';
        _0x230a81.skinName = 'mouse';
        break;
    case _0x543083:
        _0x230a81.aniName = 'Rabbit';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to RABBIT! \nPress W to burrow a hole to hide in!`;
        _0x230a81.aniCol = '#AA937E';
        _0x230a81.skinName = 'rabbit';
        break;
    case _0xe39007:
        _0x230a81.aniName = 'Pig';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to PIG!\n Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)`;
        _0x230a81.aniCol = '#DD6BD4';
        _0x230a81.skinName = 'pig';
        break;
    case _0x41846d:
        _0x230a81.aniName = 'Fox';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to FOX! ,\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!`;
        _0x230a81.aniCol = '#FF9D43';
        _0x230a81.skinName = 'fox';
        break;
    case _0x2342f6:
        _0x230a81.aniName = 'Deer';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to DEER! \nPress W to dig up food! \nDig in mud for better food!\n Hint:Check water areas for new food sources!`;
        _0x230a81.aniCol = '#C4773E';
        _0x230a81.skinName = 'deer';
        break;
    case _0x4f5784:
        _0x230a81.aniName = 'Mole';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to MOLE!\n Hold W to dig underground!\nGo under anything, do surprise attacks!`;
        _0x230a81.aniCol = '#4C4A45';
        _0x230a81.skinName = 'mole';
        break;
    case _0x4c8c3e:
        _0x230a81.aniName = 'Zebra';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to ZEBRA! \nPress W to kick side ways!`;
        _0x230a81.aniCol = '#FFFFFF';
        _0x230a81.skinName = 'zebra';
        break;
    case _0x49ee98:
        _0x230a81.aniName = 'Lion';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to LION!\n Press W to release a mighty ROAR (Rawr!)!`;
        _0x230a81.aniCol = '#f8c923';
        _0x230a81.skinName = 'lion';
        break;
    case _0x306e7d:
        _0x230a81.aniName = 'Bear';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to BEAR!\n Bears climb through green hills! (Press W to use your claw!)`;
        _0x230a81.aniCol = '#99591C';
        _0x230a81.skinName = 'bear';
        break;
    case _0x17b991:
        _0x230a81.aniName = 'Croc';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to CROCODILE!\n Press W to bite and drag around animals! \n+ (Now hide in water spots)+ Swim well in Mud, Lakes & Oceans!`;
        _0x230a81.aniCol = '#30F51C';
        _0x230a81.skinName = 'croc';
        break;
    case _0x1de318:
        _0x230a81.aniName = 'Hippo';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to HIPPO!\nHippos are great swimmers, dominate the Lakes/Oceans/Mud!`;
        _0x230a81.aniCol = '#945A99';
        _0x230a81.skinName = 'hippo';
        break;
    case _0x1bea6f:
        _0x230a81.aniName = 'Rhino';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to RHINO!\n Press W to CHARGE with your mighty horn!`;
        _0x230a81.aniCol = '#94a3a9';
        _0x230a81.skinName = 'rhino';
        break;
    case _0x245d92:
        _0x230a81.aniName = 'Shrimp';
        _0x230a81.aniDesc = '';
        _0x230a81.aniCol = '#f88e37';
        _0x230a81.skinName = 'shrimp';
        _0x230a81.upgradeText = "You're a tiny shrimp, eat food to grow bigger!";
        break;
    case _0x21d795:
        _0x230a81.aniName = 'Trout';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to TROUT!\nHint: Hold Left-click to RUN! (Uses extra water)`;
        _0x230a81.aniCol = '#ac8686';
        _0x230a81.skinName = 'trout';
        break;
    case _0x14aa29:
        _0x230a81.aniName = 'Crab';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to CRAB!\n Crabs can survive on dry land!\n (On land, Press W to go into your shell!)`;
        _0x230a81.aniCol = '#bf2408';
        _0x230a81.skinName = 'crab';
        break;
    case _0x44ffc0:
        _0x230a81.aniName = 'Squid';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to SQUID!\n Squids can use INK when injured (press W!) \n+ you can hide in plankton bushes!`;
        _0x230a81.aniCol = '#40dda4';
        _0x230a81.skinName = 'squid';
        break;
    case _0x13e47b:
        _0x230a81.aniName = 'Shark';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to SHARK!\n A vicious predator of the oceans!`;
        _0x230a81.aniCol = '#999fc6';
        _0x230a81.skinName = 'shark';
        break;
    case _0x22c4b4:
        _0x230a81.aniName = 'Sea-horse';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to SEA HORSE!\n An agile hunter!`;
        _0x230a81.aniCol = '#73BE2F';
        _0x230a81.skinName = 'seahorse';
        break;
    case _0xbffa37:
        _0x230a81.aniName = 'Jellyfish';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to JELLYFISH!\n A slowly-turning animal that can grow quite large!`;
        _0x230a81.aniCol = '#FDB9BA';
        _0x230a81.skinName = 'jellyfish';
        break;
    case _0x166900:
        _0x230a81.aniName = 'Turtle';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to TURTLE!\n Lives well on land & water! (On land, Press W to go into your shell!)`;
        _0x230a81.aniCol = '#502E1A';
        _0x230a81.skinName = 'turtle';
        break;
    case _0x128264:
        _0x230a81.aniName = 'Stringray';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to STINGRAY!\n Use electic shock (Release W key!) to shock animals! \n(Takes time to recharge)`;
        _0x230a81.aniCol = '#164336';
        _0x230a81.skinName = 'stingray';
        break;
    case _0x39caec:
        _0x230a81.aniName = 'The Kraken';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to THE KRAKEN!\n Terrorize the oceans, and be feared by all!\n (Release W to use whirlpool ability!)`;
        _0x230a81.aniCol = '#64a034';
        _0x230a81.skinName = 'kraken';
        break;
    case _0xcbf731:
        _0x230a81.aniName = 'Pufferfish';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to PUFFERFISH!\n (Hold W to inflate- become spiky, and dangerous to touch!)`;
        _0x230a81.aniCol = '#6C5C2C';
        _0x230a81.skinName = 'pufferfish';
        break;
    case _0x1b136a:
        _0x230a81.aniName = 'Killer Whale';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to Killer Whale! \nWhales blow out water when diving! (And sometimes other loot!)`;
        _0x230a81.aniCol = '#141414';
        _0x230a81.skinName = 'killerwhale';
        break;
    case _0x4dca01:
        _0x230a81.aniName = 'Swordfish';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n (Press W to rush with your sharp nose!)`;
        _0x230a81.aniCol = '#689CD7';
        _0x230a81.skinName = 'swordfish';
        break;
    case _0x58670a:
        _0x230a81.aniName = 'Gorilla';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Gorillas are very fast on hills/trees!\n Press W to throw bananas! (from trees)`;
        _0x230a81.aniCol = '#323232';
        _0x230a81.skinName = 'gorilla';
        break;
    case _0x1ebbca:
        _0x230a81.aniName = 'Octopus';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to Octopus!\nHold W to use your 'Disguise' ability!\n(Hint: wait for prey to bite you- they get stunned!)`;
        _0x230a81.aniCol = '#ff8340';
        _0x230a81.skinName = 'octopus';
        break;
    case _0x1ddfd4:
        _0x230a81.aniName = 'Dragon';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n (You're amazing!) \nFly over everything, Hold W to shoot fire!`;
        _0x230a81.aniCol = '#22FF8A';
        _0x230a81.skinName = 'dragon';
        break;
    case _0x1da4d1:
        _0x230a81.aniName = 'Black Dragon';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Black dragons drink lava instead of water! Black dragons only heal on healing stones/lava!`;
        _0x230a81.aniCol = 'black';
        _0x230a81.skinName = 'blackdragon';
        break;
    case _0xb20c08:
        _0x230a81.aniName = 'Giant Spider';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Place web around the game to catch prey!`;
        _0x230a81.aniCol = 'black';
        _0x230a81.skinName = 'giantSpider';
        break;
    case _0x25e140:
        _0x230a81.aniName = 'Cobra';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Hold W to Spit venom, and poison animals with your bite!`;
        _0x230a81.aniCol = 'black';
        _0x230a81.skinName = 'cobra';
        break;
    case _0x5b3c93:
        _0x230a81.aniName = 'Boa Constrictor';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Coil and suffocate other animals!`;
        _0x230a81.aniCol = 'black';
        _0x230a81.skinName = 'boaConstrictor';
        break;
    case _0x1a31f6:
        _0x230a81.aniName = 'T-REX';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + ` The Dinosaur!\n This ancient dinosaur has powerful jaws that can drag prey around!!`;
        _0x230a81.aniCol = '#862A2A';
        _0x230a81.skinName = 'trex';
        break;
    case _0x33258c:
        _0x230a81.aniName = 'Giraffe';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to Giraffe!\nGiraffe have huge legs and stomp anyone in their way!`;
        _0x230a81.aniCol = '#E9BD23';
        _0x230a81.skinName = 'giraffe';
        break;
    case _0x819b63:
        _0x230a81.aniName = 'Eagle';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to Eagle!\nEagles can fly up other animals in the air! !\n`;
        _0x230a81.aniCol = '#5b400d';
        _0x230a81.skinName = 'eagle';
        break;
    case _0x50fb31:
        _0x230a81.aniName = 'Arctic Fox';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n You can kick players out of hiding holes! (Press W when in one!)\n+ Hide in red berry bushes!`;
        _0x230a81.aniCol = '#CFCFCF';
        _0x230a81.skinName = 'arctic/arcticfox';
        break;
    case _0x1e6300:
        _0x230a81.aniName = 'Arctic Hare';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n \nPress W to burrow a hole to hide in!`;
        _0x230a81.aniCol = '#D5D5D5';
        _0x230a81.skinName = 'arctic/arctichare';
        break;
    case _0x10ffe7:
        _0x230a81.aniName = 'The Yeti!';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n So it really exists... \n Hold W to turn into snow, release W to freeeeeze!`;
        _0x230a81.aniCol = '#839eb5';
        _0x230a81.skinName = 'arctic/yeti';
        break;
    case _0x4e5642:
        _0x230a81.aniName = 'Chipmunk';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = '';
        _0x230a81.aniCol = '#A77C30';
        _0x230a81.skinName = 'arctic/chipmunk';
        break;
    case _0xfa8790:
        _0x230a81.aniName = 'Muskox';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Press W to charge with your horns! \nPlus move decently on ice!`;
        _0x230a81.aniCol = '#231f18';
        _0x230a81.skinName = 'arctic/muskox';
        break;
    case _0x37feb8:
        _0x230a81.aniName = 'Penguin';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Left-click to run!\n (HOLD W to slide FAST on ice)!`;
        _0x230a81.aniCol = '#FFFFFF';
        _0x230a81.skinName = 'arctic/penguin';
        break;
    case _0x586eae:
        _0x230a81.aniName = 'Polar Bear';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Polar bears can climb hills! \n+ They're amazing swimmers!`;
        _0x230a81.aniCol = '#e4e4e4';
        _0x230a81.skinName = 'arctic/bear/bear';
        break;
    case _0x115d14:
        _0x230a81.aniName = 'Seal';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Seals can slide on ice (Hold W) + can climb hills (rocks too!)`;
        _0x230a81.aniCol = '#cfcfcf';
        _0x230a81.skinName = 'arctic/seal';
        break;
    case _0x5b87cd:
        _0x230a81.aniName = 'Snow leopard';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Press W to get a speed boost! (Every 8 seconds)!`;
        _0x230a81.aniCol = '#cfcfcf';
        _0x230a81.skinName = 'arctic/snowleopard';
        break;
    case _0xa4ccd0:
        _0x230a81.aniName = 'Walrus';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n You can slide on ice (Hold W) + can climb hills (rocks too!)`;
        _0x230a81.aniCol = '#633838';
        _0x230a81.skinName = 'arctic/walrus';
        break;
    case _0x1cd045:
        _0x230a81.aniName = 'Reindeer';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Press W to dig up food! \n Your sharp hooves let you turn very well on ice!`;
        _0x230a81.aniCol = '#a68976';
        _0x230a81.skinName = 'arctic/reindeer';
        break;
    case _0x332f04:
        _0x230a81.aniName = 'Wolf';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Wolf paws turn very well on ice!\n Press W to howl!`;
        _0x230a81.aniCol = '#6B6B6B';
        _0x230a81.skinName = 'arctic/wolf';
        break;
    case _0x4fb188:
        _0x230a81.aniName = 'Wolverine';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Press W to Let out a Powerful GROWL! (Knocks back prey!)`;
        _0x230a81.aniCol = '#843A0F';
        _0x230a81.skinName = 'arctic/wolverine';
        break;
    case _0x13ad6a:
        _0x230a81.aniName = 'Mammoth';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Press W to roll snowballs with your trunk!\n The bigger the snowball gets, the longer the freeze!`;
        _0x230a81.aniCol = '#9d4717';
        _0x230a81.skinName = 'arctic/mammoth';
        break;
    case _0x4ab9c5:
        _0x230a81.aniName = 'Donkey';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Press W to Kick any animal behind you`;
        _0x230a81.aniCol = '#8c7c64';
        _0x230a81.skinName = 'donkey';
        break;
    case _0x318be6:
        _0x230a81.aniName = 'Sabertooth Tiger';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to Sabertooth Tiger!\nSabertooth Tigers are great swimmers, dominate the Lakes/Oceans/Mud!`;
        _0x230a81.aniCol = '#945A99';
        _0x230a81.skinName = 'sabertoothtiger';
        break;
    case _0x3cd364:
        _0x230a81.aniName = 'Elephant';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to ' + _0x230a81.aniName + `!\n Use your long trunk to attack and eat food!`;
        _0x230a81.aniCol = '#945A99';
        _0x230a81.skinName = 'elephant';
        break;
    case _0x50c7e0:
        _0x230a81.aniName = 'Blue Whale';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to Blue Whale!\n Smash with your powerful tail!`;
        _0x230a81.aniCol = '#945A99';
        _0x230a81.skinName = 'bluewhale';
        break;
    case _0x49b403:
        _0x230a81.aniName = 'Hedgehog';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to Hedgehog!\n (Hold W to become spiky, and dangerous to touch!)`;
        _0x230a81.aniCol = '#5b400d';
        _0x230a81.skinName = 'hedgehog';
        break;
    case _0x5362ea:
        _0x230a81.aniName = 'King Crab';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to a KING CRAB!';
        _0x230a81.aniCol = '#971f0e';
        _0x230a81.skinName = 'kingcrab';
        break;
    case _0x58ec8b:
        _0x230a81.aniName = 'Lemming';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to a Lemming!';
        _0x230a81.aniCol = '#A77C30';
        _0x230a81.skinName = 'arctic/lemming';
        break;
    case _0x5def9d:
        _0x230a81.aniName = 'Frog';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to Frog!!';
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'frog/frog';
        break;
    case _0x5d266c:
        _0x230a81.aniName = 'Ostrich';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to Ostrich! Lay eggs to hatch babies! \nCommand babies by placing your crosshair (right-click/W)-\n They can attack prey!`;
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'ostrich/ostrich';
        break;
    case _0x1cc507:
        _0x230a81.aniName = 'Pelican';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to Pelican! \nPick up water (and prey!) in your mouth,\nfly, and drop water on prey! (press W again)`;
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'pelican/pelican';
        break;
    case _0x1db4ca:
        _0x230a81.aniName = 'Falcon';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to Falcon! \nFly, and do a powerful dive attack! Aim it well.`;
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'falcon/falcon';
        break;
    case _0xbc3a94:
        _0x230a81.aniName = 'Snowy Owl';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = `UPGRADED to Snowy Owl!\n Aim the crosshair, \n right click/W when it's on top of prey, to attack!`;
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'snowyowl/snowyowl';
        break;
    case _0x3894a3:
        _0x230a81.aniName = 'Baby Ostrich';
        _0x230a81.aniDesc = '';
        _0x230a81.upgradeText = 'UPGRADED to Baby Ostrich!!';
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'ostrich/ostrich-baby';
        break;
    case _0x3afcf3:
        _0x230a81.aniName = 'Phoenix';
        _0x230a81.upgradeText = `UPGRADED to Phoenix!\nCreate powerful fire tornados to burn your enemies alive!`;
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'phoenix/phoenix';
        break;
    case _0x11d8d8:
        _0x230a81.aniName = 'Sea Monster';
        _0x230a81.upgradeText = 'UPGRADED to Sea Monster!';
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'seamonster';
        break;
    case _0x3c0348:
        _0x230a81.aniName = 'Land Monster';
        _0x230a81.upgradeText = 'UPGRADED to Land Monster!';
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'landmonster';
        break;
    case _0x29871d:
        _0x230a81.aniName = 'Ice Monster';
        _0x230a81.upgradeText = 'UPGRADED to Ice Monster!';
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'icemonster';
        break;
    case _0x17505c:
        _0x230a81.aniName = 'Dino Monster';
        _0x230a81.upgradeText = 'UPGRADED to Dino Monster!';
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'dinomonster';
        break;
    case _0x132e3a:
        _0x230a81.aniName = 'Pigeon';
        _0x230a81.upgradeText = `UPGRADED to Pigeon!\nHold right click (or W) to fly!\n`;
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'pigeon/pigeon';
        break;
    case _0x510be1:
        _0x230a81.aniName = 'Toucan';
        _0x230a81.upgradeText = `UPGRADED to Toucan!\nHold right click (or W) to fly!(HINT: Start flying from a fruit tree or bush to throw fruit upon landing!)`;
        _0x230a81.aniCol = '#FF9000';
        _0x230a81.skinName = 'toucan/toucan';
        break;
        case _0x4e163c:
            _0x230a81.aniName = 'Duck';
            _0x230a81.upgradeText = `UPGRADED to Duck!`;
            _0x230a81.aniCol = '#FF9000';
            _0x230a81.skinName = 'duck/0/duck';
        break
    default:
        _0x230a81.aniName = '??', _0x230a81.aniDesc = '', _0x230a81.aniCol = '#000000', _0x230a81.upgradeText = 'UPGRADED!';
    }
    return _0x230a81;
};
Animal.prototype.loadAnimalSkinImg = function () {
    var _0x565f9e = this.getSkinName();
    this.loadedSkinImg = null;
  
    _0x565f9e && !_0x225545 && (this.loadedSkinImg = this.getSkinImageObj('./skins/' + _0x565f9e + '.png'));
};
Animal.prototype.getSkinImageObj = function (_0x96985f) {
    return _0x2f22f9(_0x96985f, function (_0x4c213f) {
        console.log(_0x4c213f.src);
    });
};
Animal.prototype.getIdealOpacity = function () {
    return this.flag_underWater || this.flag_usingAbility && (this.animalType == _0x4f5784 || this.animalType == _0x1ebbca || this.animalType == _0x10ffe7) ? 0 : 0x1;
};
Animal.prototype.isAnimalInside1v1Arena = function () {
    return null == _0x554a7d || !_0x1419f3 || _0x554a7d.p1ID != this.id && _0x554a7d.p2ID != this.id ? !0x1 : !0;
};
Animal.prototype.setStealth = function () {
    if (this.isInArena) this.idealop = 0.3;
    else if (this.flag_stealth || this.flag_inHidingHole) this.idealOp = this.animalType == _0x22c4b4 ? 0 : 0.6;
};
Animal.prototype.setOpacityForFlyingAnimals = function (_0x1c10a8) {
    this.gabbedByAniID != this.id && this.grabbedAniID != this.id && this.id != myPlayerID && (this.idealOp = 0.6);
};
Animal.prototype.idealOp = 0x2;
Animal.prototype.customDraw = function (_0x5af298) {
    this.preLoad();
    _0x5af298 = this.animalInfo();
    var _0x2fd3b8 = _0x5af298.aniCol;
    this.skinImgName = _0x5af298.skinName;
    this.skinNotLoadedColor = _0x2fd3b8;
    switch (this.animalType) {
    case _0xcbf731:
    case _0xfa8790:
    case _0x4dca01:
    case _0x166900:
    case _0x17b991:
        tailLen = 0.16 * this.rad;
    }
    this.loadAnimalSkinImg();
    ctx.save();
    ctx.rotate(this.angle);
    _0x2fd3b8 = (_0x1534e0 - this.spawnTime) / 0x3e8;
    _0x5af298 = 0.7 * Math.sin(0x2 * Math.PI / 2.5 * _0x2fd3b8);
    this.flag_eff_wobbling && (_0x2fd3b8 = _0x93972d(_0x2fd3b8, 1.25, 0.1, 0x2), this.rad += _0x2fd3b8);
    this.idealOp = this.getIdealOpacity();
    this.setStealth();
    this.flag_flying && this.setOpacityForFlyingAnimals();
    this.underwaterA += 0.1 * (this.idealOp - this.underwaterA);
    ctx.globalAlpha *= this.underwaterA;
    this.flag_eff_invincible && (ctx.globalAlpha *= 0.3 + 0.35 + 0.35 * Math.sin(0x2 * Math.PI / 0x1 * ((_0x1534e0 - this.spawnTime) / 0x3e8)));
    this.outlineW = 0x2 + _0x5af298;
    if (!(this.dead || this.flag_underWater || this.animalType == _0x4f5784 && this.flag_usingAbility || this.flag_underWater)) {
        if(gameMode == 3) {
            0 != this.killerId || this.flag_flying && this.id == myPlayerID || 0x2 == _0x14fca5 && _0x2f54b3 != _0x45ff9a && _0x2f54b3 != _0x105778 ? this.outlineW = 0 : this.drawAnimalUnderSkinTeamCircle(this.isInstance ? teamID : this.teamID);
        }
        var _0x2f54b3 = this.getOutlineColor();
        0 != this.killerId || this.flag_flying && this.id == myPlayerID || 0x2 == _0x14fca5 && _0x2f54b3 != _0x45ff9a && _0x2f54b3 != _0x105778 ? this.outlineW = 0 : this.drawAnimalUnderSkinCircle(_0x2f54b3);
    }
    this.drawUnderEffects();
    this.drawAnimalSkin(_0x2f54b3);
    0 == this.animalPremiumSkin || this.flag_eff_shivering || this.sparkleAnim();
    ctx.restore();
    this.drawTopEffects();
    this.drawLowWaterDrop();
    this.flag_isInArena || this.drawNickName(null == _0x4c21ea ? this.idealOp : 0.2);
    this.drawCustomUIForAni();
};
Animal.prototype.drawLowWaterDrop = function () {
    if (this.flag_lowWat) {
        var _0x4f0c63 = 0.5 * (0.8 - 0.2),
            _0x4f0c63 = 0.2 + _0x4f0c63 + _0x4f0c63 * Math.sin(0x2 * Math.PI / 1.2 * (_0x1534e0 / 0x3e8));
        ctx.save();
        ctx.globalAlpha = _0x4f0c63;
        ctx.fillStyle = this.animalType == _0x1da4d1 || this.animalType == _0x3afcf3 || this.animalType == _0x3c0348 || this.animalType == _0x510be1 && 0x4 == this.animalSpecies ? _0x1a1848 : this.animalType == _0x11d8d8 ? _0x4d7c91 : this.animalType == _0x31ed20 ? _0x108135 : _0x1654e7;
        ctx.beginPath();
        ctx.arc(0, this.rad + 0x5, 0x5, 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.restore();
    }
};
Animal.prototype.sparkleInterval = 0x5;
Animal.prototype.sparklDuration = 0x3;
Animal.prototype.sparkleNext = 0;
Animal.prototype.sparkleAniT = 0;
Animal.prototype.setSparkleInterval = function (_0x9594cf, _0x35e266) {
    this.sparkleInterval = _0x9594cf;
    this.sparklDuration = _0x35e266;
    this.setSparkleXY();
};
Animal.prototype.seSparkle = function () {
    this.sparkleAniT = +new Date() + 0x3e8 * this.sparklDuration;
    this.sparkleNext = this.sparkleAniT + 0x3e8 * this.sparkleInterval;
    this.setSparkleXY();
};
Animal.prototype.isMouseHovering = !0x1;
Animal.prototype.sparkleAnim = function () {
    this.animalPremiumSkin && 0x5 < (_0x1534e0 - this.spawnTime) / 0x3e8 && ((0 < this.id || 0 == this.id && this.isMouseHovering) && +new Date() > this.sparkleNext && (this.seSparkle(), this.setSparkleXY()), this.sparkleAniT > +new Date() && this.showSparkling());
};
Animal.prototype.sparkleAng = 0;
Animal.prototype.sparkleX = 0;
Animal.prototype.sparkleY = 0;
Animal.prototype.setSparkleXY = function () {
    var _0x2b93b3 = this.rad / 0x2,
        _0x490d37 = 0.3 * _0x2b93b3,
        _0x34ff5a = _0x26c094(_0x490d37, _0x2b93b3),
        _0x2b93b3 = _0x26c094(_0x490d37, _0x2b93b3),
        _0x34ff5a = _0x34ff5a * (0x5 < 0xa * Math.random() ? -0x1 : 0x1),
        _0x2b93b3 = _0x2b93b3 * (0x5 < 0xa * Math.random() ? -0x1 : 0x1);
    this.sparkleX = _0x34ff5a;
    this.sparkleY = _0x2b93b3;
};
Animal.prototype.showSparkling = function () {
    ctx.save();
    ctx.globalAlpha *= 0.3 + 0.35 + 0.35 * Math.sin(0x2 * Math.PI / 1.5 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
    this.sparkleAng += 0.5;
    var _0x4a587c = 0;
    ctx.fillStyle = '#faffb6';
    for (i = 0; 0x3 > i; i++) ctx.save(), ctx.translate(this.sparkleX, this.sparkleY), ctx.rotate(_0x55d748(this.sparkleAng)), ctx.save(), ctx.rotate(_0x55d748(_0x4a587c)), ctx.scale(0.5, 0x5), ctx.beginPath(), ctx.arc(0, 0, 0x1, 0, 0x2 * Math.PI), ctx.fill(), ctx.restore(), _0x4a587c += 0x3c, ctx.restore();
    ctx.beginPath();
    ctx.arc(this.sparkleX, this.sparkleY, 0x1, 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.restore();
};
Animal.prototype.shakeOffsetX = 0;
Animal.prototype.shakeOffsetY = 0;
Animal.prototype.drawAnimalSkin = function (_0x55cbbe) {
    ctx.save();
    if (this.flag_eff_shivering) {
        var _0x307b2b = (_0x1534e0 - this.spawnTime) / 0x3e8,
            _0x159700 = this.rad * this.shiverF;
        this.shakeOffsetX = _0x159700 * Math.sin(0x2 * Math.PI / 0.1 * _0x307b2b);
        _0x159700 = this.rad * this.shiverF;
        this.shakeOffsetY = _0x159700 * Math.sin(0x2 * Math.PI / 0.05 * _0x307b2b);
        ctx.translate(-this.shakeOffsetX, -this.shakeOffsetY);
    }
    this.drawPropsUnderSkin();
    this.beforeDrawAnimalSkin();
    0 < this.id && this.drawUnderSkinTail(_0x55cbbe);
    this.drawUnderSkinImgOutline();
    this.drawUnderSkinImg();
    this.drawSkinImg();
    this.drawOnTopOfSkinImg();
    this.drawPropsTopOfSkin();
    this.drawStatueEffect();
    ctx.restore();
};
Animal.prototype.drawStatueEffect = function () {
    if (this.flag_eff_statue) {
        var _0x55a65e = null;
        switch (this.eff_statueType) {
        case 0x1:
            _0x55a65e = 'snowball';
            break;
        case 0x2:
            _0x55a65e = 'goldball';
        }
        if (_0x55a65e && (_0x55a65e = _0x2f22f9('img/' + _0x55a65e + '.png'))) {
            ctx.save();
            ctx.globalAlpha = myPlayerID == this.id ? 0.7 : 0x1;
            var _0x19972a = 1.2 * this.rad;
            ctx.rotate(this.rPer * Math.PI * 0x2);
            ctx.drawImage(_0x55a65e, -_0x19972a, -_0x19972a, 0x2 * _0x19972a, 0x2 * _0x19972a);
            ctx.restore();
        }
    }
};
Animal.prototype.propsEnabled = !0x1;
Animal.prototype.drawPropsUnderSkin = function (_0x41f63a) {};
Animal.prototype.drawPropsTopOfSkin = function (_0x4adef6) {
    this.propsEnabled && this.animalType == _0x4170f3 && (this.drawProp('scarfs', 0x1), this.drawProp('glasses', 0), this.drawProp('hats', 0x1));
};
Animal.prototype.drawProp = function (_0xc9ee6e, _0x1f6e20) {
    var _0x385650 = this.skinScale,
        _0x136987 = this.skinRad + 0.9,
        _0x486d53 = _0x2f22f9('props/' + this.animalType + '/' + _0xc9ee6e + '/' + _0x1f6e20 + '.png');
    _0x486d53 && ctx.drawImage(_0x486d53, -_0x136987 * _0x385650, -_0x136987 * _0x385650, 0x2 * _0x136987 * _0x385650, 0x2 * _0x136987 * _0x385650);
};
Animal.prototype.beforeDrawAnimalSkin = function (_0x53f075) {};
Animal.prototype.drawUnderSkinTail = function (_0x4e0142) {
    if (!(0 < this.killerId || this.flag_underWater) && this.animalType != _0x543083 && this.animalType != _0x4170f3 && this.animalType != _0x14aa29) {
        var _0x3d41bb = this.animalInfo().aniCol,
            _0x407eb5 = 0.1 * this.rad,
            _0x81fa56 = 0x4 * Math.sin(0x2 * Math.PI / 0x5 * ((_0x1534e0 - this.spawnTime) / 0x3e8)),
            _0x4599a3 = 2.5 * this.outlineW,
            _0x31ca7a = Math.PI / 0xb4;
        ctx.fillStyle = this.flag_tailBitten ? _0x105778 : 0 < _0x5835e4[this.animalType - 0x1] && this.id != myPlayerID ? _0x45ff9a : _0x4e0142;
        if (0x2 != _0x14fca5 || ctx.fillStyle == _0x44bd8a) ctx.beginPath(), ctx.moveTo((this.rad - this.outlineW + 0x1) * Math.cos((282.5 + _0x4599a3) * _0x31ca7a), (this.rad - this.outlineW + 0x1) * Math.sin(282.5 * _0x31ca7a)), ctx.lineTo((this.rad - this.outlineW + 0x1) * Math.cos((257.5 - _0x4599a3) * _0x31ca7a), (this.rad - this.outlineW + 0x1) * Math.sin(257.5 * _0x31ca7a)), ctx.lineTo((this.rad + _0x407eb5 + this.outlineW) * Math.cos((0x10e + _0x81fa56) * _0x31ca7a), (this.rad + _0x407eb5 + this.outlineW) * Math.sin((0x10e + _0x81fa56) * _0x31ca7a)), ctx.lineTo((this.rad - this.outlineW + 0x1) * Math.cos((282.5 + _0x4599a3) * _0x31ca7a), (this.rad - this.outlineW + 0x1) * Math.sin(282.5 * _0x31ca7a)), ctx.fill();
        0x2 == _0x14fca5 || this.loadedSkinImg && !this.flag_tailBitten || (ctx.fillStyle = this.flag_tailBitten ? _0x105778 : _0x3d41bb, ctx.beginPath(), ctx.moveTo((this.rad - this.outlineW) * Math.cos(282.5 * _0x31ca7a), (this.rad - this.outlineW) * Math.sin(282.5 * _0x31ca7a)), ctx.lineTo((this.rad - this.outlineW) * Math.cos(257.5 * _0x31ca7a), (this.rad - this.outlineW) * Math.sin(257.5 * _0x31ca7a)), ctx.lineTo((this.rad + _0x407eb5) * Math.cos((0x10e + _0x81fa56) * _0x31ca7a), (this.rad + _0x407eb5) * Math.sin((0x10e + _0x81fa56) * _0x31ca7a)), ctx.lineTo((this.rad - this.outlineW) * Math.cos(282.5 * _0x31ca7a), (this.rad - this.outlineW) * Math.sin(282.5 * _0x31ca7a)), ctx.fill());
    }
};
Animal.prototype.drawAnimalUnderSkinCircle = function (_0x50a940) {
    if(!this.flag_isGrabbed) {
        if(1 == this.playerNum) {
            _0x50a940 = 'cyan';
        } else if(2 == this.playerNum) {
            _0x50a940 = 'yellow';
        } else if (3 == this.playerNum) {
            _0x50a940 = 'purple';
        } else if (this.flag_eff_isOnSpiderWeb) {
            _0x50a940 = 'white';
        }
        ctx.save();
        ctx.globalAlpha = this.isAnimalInside1v1Arena() ? 0.3 : this.idealOp;
        _0x110b78(0, 0, this.rad, _0x50a940);
        ctx.restore();
    }
};
Animal.prototype.drawAnimalUnderSkinTeamCircle = function (_0x50a940) {
    let coloring = _0x1bcd79.teamColors[_0x50a940];
    ctx.save();
    ctx.globalAlpha = this.isAnimalInside1v1Arena() ? 0.3 : this.idealOp;
    _0x110b78(0, 0, this.rad+2, coloring);
    ctx.restore();
};
Animal.prototype.drawCustomUIForAni = function () {
    // gameMode == _0xc2ceb0 && _0x1bcd79 && _0x1bcd79.drawPlayerUI(this);
};
Animal.prototype.hasMultipleSpecies = function () {
    return !0x1;
};
Animal.prototype.drawNickName = function (_0x2c7fd4) {
    if(0 != _0x2c7fd4) {
        this.nickNameA += 0.1 * (_0x2c7fd4 - this.nickNameA);
        if(this.nickName && this.nickTXT && !_0x47691c) {
            ctx.save();
            ctx.globalAlpha = this.dead ? ctx.globalAlpha * (0x1 - this.moveUpdF) : 0x1;
            ctx.globalAlpha *= this.nickNameA;
            this.nickTXT.x = 0;
            this.nickTXT.y = this.rad + 0x9;
            //afk
            this.setAfk();
            if(this.isMuted) {
                this.muteTXT.x = 0;
                this.muteTXT.y = this.rad + 9 + 10;
                this.muteTXT.setColor('#ff3232', null, 0, 0);
                this.muteTXT.draw();
            }
            if(this.isInvisible) {
                this.invTXT.x = 0;
                this.invTXT.y = this.rad + 9 + 10;
                this.invTXT.setColor('#ff3232', null, 0, 0);
                this.invTXT.draw();
            }
            //
            _0x2c7fd4 = '#FFFFFF';
            if(dots.length != 0)
                if(dots.filter(d => d.id == this.id).length > 0)
                _0x2c7fd4 = 'cyan';
            // if(null != yesdDot && yesdDot.id == this.id) {
            //     _0x2c7fd4 = 'orange';
            // }
            // if(null != maxDot && maxDot.id == this.id) {
            //     _0x2c7fd4 = 'cyan';
            // }
            let coltype = 0;
            let ico = this.usingIco;
            if(this.flag_isDevMode == 1) {
                let gradient = null;
                switch(this.devmode_Num) {
                    //light blue
                    case 1:
                        _0x2c7fd4 = ['#00b3be', '#00f0ff'];
                        this.nickTXT.shadowBlur = 5;
                        coltype = 2;
                        break;
                    //gold
                    case 2:
                        _0x2c7fd4 = ['#a9aa00', '#feff00'];
                        this.nickTXT.shadowBlur = 5;
                        coltype = 2;
                        break;
                    //dark green
                    case 3:
                        _0x2c7fd4 = ['#0c7a00', '#18ff00'];
                        this.nickTXT.shadowBlur = 5;
                        coltype = 2;
                        break;
                    //dark blue
                    case 4:
                        _0x2c7fd4 = ['#3a3afd', '#9898ff'];
                        this.nickTXT.shadowBlur = 5;
                        coltype = 2;
                        break;
                    //black 
                    case 5:
                        _0x2c7fd4 = ['#030804', '#030804'];
                        this.nickTXT.shadowBlur = 10;
                        coltype = 2;
                        break;
                    //black 2 lol, just more shadow
                    case 6:
                        _0x2c7fd4 = ['#000000', '#000000'];
                        this.nickTXT.shadowBlur = 15;
                        coltype = 2;
                        break;
                    //blue-red [dev color]
                    case 7:
                        _0x2c7fd4 = ['#3a3afd', '#cc2323'];
                        this.nickTXT.shadowBlur = 15;
                        coltype = 2;
                        break;
                    //red 
                    case 8:
                        _0x2c7fd4 = ['#ff0000', '#841212'];
                        this.nickTXT.shadowBlur = 10;
                        coltype = 2;
                        break;
                    //purple [black-gold was ugly lol]
                    case 9:
                        _0x2c7fd4 = ['#b809b0', '#61055d'];
                        this.nickTXT.shadowBlur = 15
                        coltype = 2;
                        break;
                    //orange [for halloween lol]
                    case 10:
                        _0x2c7fd4 = ['#d56d0c', '#8e3b07'];
                        this.nickTXT.shadowBlur = 10
                        coltype = 2;
                        break;
                    //Light Green 
                    case 11:
                        _0x2c7fd4 = ['#37e12b', '#176811'];
                        this.nickTXT.shadowBlur = 5
                        coltype = 2;
                        break;
                    //white and grey... mahdi wanted lol
                    case 12:
                        _0x2c7fd4 = ['#ffffff', '#868383'];
                        this.nickTXT.shadowBlur = 20
                        coltype = 2;
                        break;
                    //"turquoise" - myst and burning wanted
                    case 13:
                        _0x2c7fd4 = ['#00FFDC', '#0d7a6b'];
                        this.nickTXT.shadowBlur = 10
                        coltype = 2;
                        break;
                    //yellow
                    case 14:
                        _0x2c7fd4 = ['#edea09', '#cdca2a'];
                        this.nickTXT.shadowBlur = 10
                        coltype = 2;
                        break;
                    //green-light blue
                    case 15:
                        _0x2c7fd4 = ['#25dc1f', '#18b6a8'];
                        this.nickTXT.shadowBlur = 5
                        coltype = 2;
                        break;
                    //pink-light blue
                    case 16:
                        _0x2c7fd4 = ['#dc2cd3', '#2ecedd'];
                        this.nickTXT.shadowBlur = 15
                        coltype = 2;
                        break;
                    //gayish pink/ lighter purple
                    case 17:
                        _0x2c7fd4 = ['#e765e0', '#ad2ba7'];
                        this.nickTXT.shadowBlur = 10
                        coltype = 2;
                        break;
                    //white-black lol 
                    case 18:
                        _0x2c7fd4 = ['#ffffff', '#000000'];
                        this.nickTXT.shadowBlur = 10
                        coltype = 2;
                        break;
                    //colors 8-18 made by chocapic :D
                }
            }
            let ytColor = null;
            if(this.flag_ytmode) {
                _0x2c7fd4 = "#FF0000";
                ytColor = "#FFFFFF";
                coltype = 1;
                ico = 1;
            }
            this.nickTXT.setColor(_0x2c7fd4, ytColor, coltype, ico);
            this.nickTXT.draw();
            ctx.restore();
        }
    }
};
Animal.prototype.drawUnderWater = function () {
    if (this.flag_underWater || this.flag_usingAbility && this.animalType == _0x4f5784) ctx.save(), ctx.globalAlpha = 0x1 - this.underwaterA, this.drawWhenUnderwater(), ctx.restore();
};
Animal.prototype.drawUnderSkinImgOutline = function () {
    this.drawUnderWater();
    if (this.flag_eff_stunk) {
        ctx.save();
        var _0x4bf99a = 0.3,
            _0x5c5be1 = 0.5 * (0x1 - _0x4bf99a),
            _0x4bf99a = _0x4bf99a + _0x5c5be1 + _0x5c5be1 * Math.sin(0x2 * Math.PI / 0x1 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
        ctx.globalAlpha *= _0x4bf99a;
        _0x110b78(0, 0, this.rad + 2.6 * _0x4bf99a, 'brown');
        ctx.restore();
    }
    this.flag_iceSliding && (_0x4bf99a = (_0x1534e0 - this.spawnTime) / 0x3e8, _0x4bf99a = 0x1 * Math.sin(0x2 * Math.PI / 0.75 * _0x4bf99a), _0x5c5be1 = ctx.globalAlpha, ctx.globalAlpha *= 0.8 - 0.2 * _0x4bf99a, _0x110b78(0, 0.3 * this.rad, this.rad * (0.9 + 0.15 * _0x4bf99a), '#7BB7BB'), _0x110b78(0, 0.3 * -this.rad, this.rad * (1.05 + 0.1 * _0x4bf99a), '#7BB7BB'), ctx.globalAlpha = _0x5c5be1);
    !this.flag_usingAbility || this.animalType != _0x2342f6 && this.animalType != _0x1cd045 || (_0x4bf99a = (_0x1534e0 - this.spawnTime) / 0x3e8, _0x4bf99a = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * _0x4bf99a), _0x5c5be1 = ctx.globalAlpha, ctx.globalAlpha *= 0.8, _0x110b78(0, 0.3 * this.rad, this.rad * (0.9 + 0.12 * _0x4bf99a), '#7F582B'), _0x110b78(0, 0.3 * -this.rad, this.rad * (1.05 + 0.09 * _0x4bf99a), '#7F582B'), ctx.globalAlpha = _0x5c5be1);
    _0x4bf99a = this.flag_eff_frozen || this.flag_cold ? 0x1 : 0;
    this.frozenEffA += 0.1 * (_0x4bf99a - this.frozenEffA);
    0.01 < this.frozenEffA && (_0x5c5be1 = ctx.globalAlpha, ctx.globalAlpha *= this.frozenEffA, _0x110b78(0, 0, this.rad + 1.6 * this.frozenEffA, 'white'), ctx.globalAlpha = _0x5c5be1);
    _0x4bf99a = this.flag_eff_healing ? 0x1 : 0;
    this.effA_healing += 0.1 * (_0x4bf99a - this.effA_healing);
    0.01 < this.effA_healing && (ctx.save(), ctx.globalAlpha *= this.effA_healing, _0x110b78(0, 0, this.rad + 2.6 * this.effA_healing, 'purple'), ctx.restore());
    this.effect_aloeveraHeal(!0);
    _0x4bf99a = this.flag_eff_hot ? 0x1 : 0;
    this.effA_hot += 0.1 * (_0x4bf99a - this.effA_hot);
    0.01 < this.effA_hot && (ctx.save(), _0x4bf99a = 0.3, _0x5c5be1 = 0.5 * (0x1 - _0x4bf99a), ctx.globalAlpha *= _0x4bf99a + _0x5c5be1 + _0x5c5be1 * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), _0x110b78(0, 0, this.rad + 2.6 * this.effA_hot, 'rgba(249, 212, 77, 0.5)'), ctx.restore());
    _0x4bf99a = this.flag_eff_poison ? 0x1 : 0;
    this.effA_poison += 0.1 * (_0x4bf99a - this.effA_poison);
    0.01 < this.effA_poison && (ctx.save(), _0x4bf99a = 0.3, _0x5c5be1 = 0.5 * (0x1 - _0x4bf99a), ctx.globalAlpha *= _0x4bf99a + _0x5c5be1 + _0x5c5be1 * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), ctx.globalAlpha *= this.effA_poison, _0x110b78(0, 0, this.rad + 2.6 * this.effA_poison, '#7FF600'), ctx.restore());
    _0x4bf99a = this.flag_eff_bleeding || this.flag_eff_wobbling ? 0x1 : 0;
    this.effA_bleeding += 0.1 * (_0x4bf99a - this.effA_bleeding);
    0.01 < this.effA_bleeding && (ctx.save(), _0x4bf99a = 0.3, _0x5c5be1 = 0.5 * (0x1 - _0x4bf99a), ctx.globalAlpha *= _0x4bf99a + _0x5c5be1 + _0x5c5be1 * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), ctx.globalAlpha *= this.effA_bleeding, _0x110b78(0, 0, this.rad + 2.6 * this.effA_bleeding, this.flag_eff_wobbling ? 'brown' : 'red'), ctx.restore());
    _0x4bf99a = this.flag_eff_slimed ? 0x1 : 0;
    this.effA_slimed += 0.1 * (_0x4bf99a - this.effA_slimed);
    0.01 < this.effA_slimed && (ctx.save(), _0x4bf99a = 0.3, _0x5c5be1 = 0.5 * (0x1 - _0x4bf99a), ctx.globalAlpha *= _0x4bf99a + _0x5c5be1 + _0x5c5be1 * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), ctx.globalAlpha *= this.effA_slimed, _0x110b78(0, 0, this.rad + 2.6 * this.effA_slimed, 'grey'), ctx.restore());
};
Animal.prototype.drawUnderSkinImg = function () {};
Animal.prototype.drawUnderwaterBubbles = function () {
    ctx.save();
    var _0x3e6a8e = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
    this.animalType == _0x17b991 && (ctx.globalAlpha *= 0.3);
    var _0x26e2d6 = this.flag_inWater ? '#4E71C3' : '#7E6A35';
    this.animalType == _0x3afcf3 && (_0x26e2d6 = '#f9d43b');
    ctx.fillStyle = _0x26e2d6;
    _0x26e2d6 = 0.2 * this.rad;
    ctx.beginPath();
    ctx.arc(-0.35 * this.rad, -0.33 * this.rad, Math.max(0, _0x26e2d6 + _0x3e6a8e), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(0.35 * this.rad, -0.32 * this.rad, Math.max(0, _0x26e2d6 - _0x3e6a8e), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(0.35 * this.rad, 0.36 * this.rad, Math.max(0, _0x26e2d6 + _0x3e6a8e), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(-0.35 * this.rad, 0.35 * this.rad, Math.max(0, _0x26e2d6 - _0x3e6a8e), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.restore();
};
Animal.prototype.drawUnderwaterCustomization = function () {
    ctx.save();
    var _0x31dfb1 = (_0x1534e0 - this.spawnTime) / 0x3e8;
    if (this.animalType == _0x13e47b) {
        ctx.globalAlpha = 0x1 - this.underwaterA;
        ctx.fillStyle = '#73799b';
        ctx.beginPath();
        var _0x31dfb1 = this.rad,
            _0x395c7b = 0.25 * _0x31dfb1;
        ctx.moveTo(-0.07 * _0x31dfb1, _0x395c7b);
        ctx.lineTo(0, _0x395c7b - 0.5 * _0x31dfb1);
        ctx.lineTo(0.35 * _0x31dfb1, _0x395c7b);
        ctx.closePath();
        ctx.fill();
    } else this.animalType == _0x1b136a ? _0x110b78(0, 0.2 * this.rad, 0.12 * this.rad, '#4D4D4D') : this.animalType == _0x50c7e0 ? _0x110b78(0, 0.45 * this.rad, 0.08 * this.rad, '#202A65') : this.animalType == _0x5362ea ? (_0x31dfb1 = _0x93972d(_0x31dfb1, 0x1, 0x1, 0x1), ctx.save(), ctx.rotate(_0x55d748(0x28)), ctx.scale(0x1, 0x2), ctx.globalAlpha = 0.08, _0x110b78(0x1 * this.rad, 0.2 * this.rad, 0.1 * this.rad + 0.1 * this.rad * _0x31dfb1, '#B32E10'), ctx.globalAlpha = 0.2, _0x110b78(0x1 * this.rad, 0.2 * this.rad, 0.15 * this.rad, '#B32E10'), ctx.restore(), ctx.save(), ctx.globalAlpha = 0x1, ctx.rotate(_0x55d748(-0x28)), ctx.scale(0x1, 0x2), ctx.globalAlpha = 0.08, _0x110b78(-0x1 * this.rad, 0.2 * this.rad, 0.1 * this.rad + 0.1 * this.rad * -_0x31dfb1, '#B32E10'), ctx.globalAlpha = 0.2, _0x110b78(-0x1 * this.rad, 0.2 * this.rad, 0.15 * this.rad, '#B32E10'), ctx.restore()) : this.animalType == _0x39caec ? (ctx.globalAlpha = 0x1 - this.underwaterA, _0x110b78(0.4 * this.rad, 0.75 * this.rad, 0.12 * this.rad, '#598b30'), _0x110b78(0.65 * this.rad, 0.55 * this.rad, 0.1 * this.rad, '#64a034'), _0x110b78(-0.4 * this.rad, 0.75 * this.rad, 0.12 * this.rad, '#64a034'), _0x110b78(-0.65 * this.rad, 0.55 * this.rad, 0.1 * this.rad, '#598b30')) : this.animalType == _0x1a31f6 && (ctx.save(), ctx.globalAlpha = 0.2, ctx.scale(0x1, 0x2), _0x110b78(0, 0.24 * this.rad, 0.08 * this.rad, '#202A65'), _0x110b78(0, -0.02 * this.rad, 0.06 * this.rad, '#202A65'), _0x110b78(0, -0.28 * this.rad, 0.05 * this.rad, '#202A65'), _0x110b78(0, -0.54 * this.rad, 0.04 * this.rad, '#202A65'), ctx.restore());
    ctx.restore();
};
Animal.prototype.drawWhenUnderwater = function () {
    this.drawUnderwaterBubbles();
    this.drawUnderwaterCustomization();
};
Animal.prototype.shiveringStartT = 0;
Animal.prototype.flag_eff_shivering = !0x1;
Animal.prototype.flag_inHidingHole = !0x1;
Animal.prototype.effect_shivering = function () {
    0 == this.shiveringStartT && this.flag_eff_shivering ? this.shiveringStartT = +new Date() : this.flag_eff_shivering || (this.shiveringStartT = 0);
    this.flag_eff_shivering && 0 == 0xa * (+new Date() - this.shiveringStartT) % 0xa && (this.eff_shiver_shakeX = Math.round(0xa * Math.random()), this.eff_shiver_shakeX = Math.round(0xa * Math.random()));
};
if (0.01 < this.effA_healing) {
    ctx.save();
    var _0x165272 = 0.3;
    ctx.globalAlpha = ctx.globalAlpha * _0x165272 * this.effA_healing;
    _0x110b78(0, 0, Math.max(0, this.rad - this.outlineW), '#ef24ed');
    ctx.restore();
}
Animal.prototype.effect_aloeveraHeal = function (_0xc95556) {
    var _0x161077 = this.flag_eff_aloeveraHealing ? 0.9 : 0;
    void 0 == this.effA_aloeveraHealing && (this.effA_aloeveraHealing = 0);
    this.effA_aloeveraHealing += 0.1 * (_0x161077 - this.effA_aloeveraHealing);
    0.01 < this.effA_aloeveraHealing && (_0x161077 = 0.5 * (0.2 - 0.05), _0x161077 = 0.05 + _0x161077 + _0x161077 * Math.sin(0x2 * Math.PI / 0.8 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), _0xc95556 ? (ctx.save(), ctx.globalAlpha *= _0x161077, _0x110b78(0, 0, this.rad + 2.6 * this.effA_aloeveraHealing, '#539C38')) : (ctx.save(), ctx.globalAlpha *= _0x161077, _0x110b78(0, 0, Math.max(0, this.rad), '#539C38')), ctx.restore());
};
Animal.prototype.effect_sweatPoisoned = function () {
    var _0x259ebb = this.flag_eff_sweatPoisoned ? 0x1 : 0;
    void 0 == this.effA_sweatPoisoned && (this.effA_sweatPoisoned = 0);
    this.effA_sweatPoisoned += 0.1 * (_0x259ebb - this.effA_sweatPoisoned);
    0.01 < this.effA_sweatPoisoned && (ctx.save(), ctx.globalAlpha *= 0.3 + 0.35 + 0.35 * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), _0x110b78(0, 0, Math.max(0, this.rad - this.outlineW), _0x53e87b), ctx.restore());
};
Animal.prototype.skinRad = 0;
Animal.prototype.skinScale = 0;
Animal.prototype.setSkinScale = function () {
    this.skinRad = this.rad - this.outlineW;
    this.skinScale = 0x1f4 / 0x154;
};
Animal.prototype.basicDrawSkinImg = function () {
    this.setSkinScale();
    var _0x4bb7a2 = this.skinScale,
        _0x23b353 = this.skinRad;
    this.loadedSkinImg ? ctx.drawImage(this.loadedSkinImg, -_0x23b353 * _0x4bb7a2, -_0x23b353 * _0x4bb7a2, 0x2 * _0x23b353 * _0x4bb7a2, 0x2 * _0x23b353 * _0x4bb7a2) : (ctx.fillStyle = this.skinNotLoadedColor, ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - this.outlineW), 0, 0x2 * Math.PI), ctx.fill());
};
Animal.prototype.preLoad = function () {};
Animal.prototype.shiverF = 0.02;
Animal.prototype.drawSkinImg = function () {
    this.basicDrawSkinImg();
    this.drawSkinCustomization();
};
Animal.prototype.drawSkinCustomization = function () {};
Animal.prototype.drawOnTopOfSkinImg = function () {
    if (!this.loadedSkinImg) {
        ctx.save();
        var _0xb0adea = Math.max(0x1, this.rad / 0x19);
        ctx.scale(_0xb0adea, _0xb0adea);
        this.drawEyeAtPos(0x6, 0.32 * this.rad);
        this.drawEyeAtPos(-0x6, 0.32 * this.rad);
        ctx.restore();
    }
    if (this.animalType == _0x1bea6f) {
        ctx.fillStyle = '#E5CF79';
        ctx.beginPath();
        var _0xb0adea = this.rad - this.outlineW,
            _0x350627 = 0x1 * _0xb0adea;
        ctx.moveTo(-0.16 * _0xb0adea, _0x350627);
        ctx.lineTo(0, _0xb0adea * (this.flag_usingAbility ? 1.41 : 0.7));
        ctx.lineTo(0.153 * _0xb0adea, _0x350627);
        ctx.closePath();
        ctx.fill();
    }
    this.flag_usingAbility && this.animalType == _0x10ffe7 && (ctx.save(), ctx.globalAlpha = 0x1 - this.underwaterA, (_0x350627 = _0x2f22f9('img/snowball.png')) ? (_0xb0adea = this.rad, ctx.rotate(this.rPer * Math.PI * 0x2), ctx.drawImage(_0x350627, -_0xb0adea, -_0xb0adea, 0x2 * _0xb0adea, 0x2 * _0xb0adea)) : this.drawOutlinedCircle('', 'white'), ctx.restore());
};
Animal.prototype.drawUnderEffects = function () {
    if (this.flag_eff_dirty && 0.01 < this.effA_dirtStuck) {
        ctx.save();
        ctx.globalAlpha = 0.9 * ctx.globalAlpha * this.effA_dirtStuck;
        var _0x3d4ead = _0x2f22f9('img/dirt/dirt_below.png');
        if (_0x3d4ead) {
            var _0x2c0ffe = this.skinScale,
                _0x400656 = this.skinRad - 0x2;
            ctx.drawImage(_0x3d4ead, -_0x400656 * _0x2c0ffe, -_0x400656 * _0x2c0ffe, 0x2 * _0x400656 * _0x2c0ffe, 0x2 * _0x400656 * _0x2c0ffe);
        }
        ctx.restore();
    }
};
Animal.prototype.drawTopEffects = function () {
    this.effect_aloeveraHeal();
    var _0x3bbb7d = this.flag_eff_stunned ? 0x1 : 0;
    this.stunA += 0.1 * (_0x3bbb7d - this.stunA);
    if (0.01 < this.stunA) {
        ctx.save();
        var _0x1b9571 = 2.5,
            _0x1b9571 = _0x1534e0 % (0x3e8 * _0x1b9571) / (0x3e8 * _0x1b9571);
        ctx.rotate(0x2 * _0x1b9571 * Math.PI);
        ctx.globalAlpha *= this.stunA;
        var _0x3f524f = 0.2 * this.rad,
            _0x1b9571 = (_0x1534e0 - this.spawnTime) / 0x3e8,
            _0x3bbb7d = (0.5 + 0.07 * _0x3f524f) * Math.sin(0x2 * Math.PI / 0x1 * _0x1b9571);
        ctx.fillStyle = '#F3D444';
        ctx.beginPath();
        ctx.arc(-0.22 * this.rad, -0.22 * this.rad, Math.max(0, _0x3f524f + _0x3bbb7d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.22 * this.rad, -0.22 * this.rad, Math.max(0, _0x3f524f - _0x3bbb7d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.22 * this.rad, 0.22 * this.rad, Math.max(0, _0x3f524f + _0x3bbb7d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(-0.22 * this.rad, 0.22 * this.rad, Math.max(0, _0x3f524f - _0x3bbb7d), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.restore();
    }
    _0x3bbb7d = this.flag_eff_onFire ? 0x1 : 0;
    this.onFireEffA += 0.1 * (_0x3bbb7d - this.onFireEffA);
    if (0.01 < this.onFireEffA)
        if (_0x3bbb7d = 0.15, _0x3f524f = 0.5 * (0.4 - _0x3bbb7d), _0x3bbb7d = _0x3bbb7d + _0x3f524f + _0x3f524f * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8)), ctx.save(), ctx.globalAlpha = ctx.globalAlpha * _0x3bbb7d * this.onFireEffA, _0x110b78(0, 0, Math.max(0, this.rad), 'orange'), ctx.restore(), 0x2 != _0x14fca5) {
            var _0x3bbb7d = 0.5,
                _0x3f524f = 0.5 * (0x1 - _0x3bbb7d),
                _0x3bbb7d = _0x3bbb7d + _0x3f524f + _0x3f524f * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8)),
                _0x8eddca = Math.trunc(_0x1534e0 / 0x96) % 0x5,
                _0x3f524f = _0x2f22f9('img/fire/0/' + Math.trunc(_0x1534e0 / 0x64) % 0x5 + '.png'),
                _0x8eddca = _0x2f22f9('img/fire/0/' + _0x8eddca + '.png');
            if (_0x3f524f || _0x8eddca) {
                var _0x140cf7 = 0 - 0.3 * this.rad,
                    _0x354525 = 0.2 * this.rad - 0.3 * this.rad,
                    _0x46371f = 0x1 * this.rad * (0x2 + 0x2 * _0x3bbb7d) / 0x3,
                    _0x16a0e2 = 0x1 * this.rad * _0x3bbb7d,
                    _0x2d4f2e = 0.5,
                    _0x4653d4 = 0.95;
                ctx.save();
                _0x3f524f && (ctx.globalAlpha = ctx.globalAlpha * this.onFireEffA * _0x3bbb7d, ctx.drawImage(_0x3f524f, _0x140cf7 + _0x46371f * -_0x2d4f2e, _0x354525 + _0x16a0e2 * -_0x4653d4, _0x46371f, _0x16a0e2));
                _0x8eddca && (ctx.globalAlpha = ctx.globalAlpha * this.onFireEffA * _0x3bbb7d, ctx.drawImage(_0x8eddca, _0x140cf7 + 0.5 * this.rad + _0x46371f * -_0x2d4f2e, _0x354525 + 0.5 * this.rad + _0x16a0e2 * -_0x4653d4, _0x46371f, _0x16a0e2));
                ctx.restore();
            }
        } else if (_0x3bbb7d = 0.5, _0x3f524f = 0.5 * (0x1 - _0x3bbb7d), _0x3bbb7d = _0x3bbb7d + _0x3f524f + _0x3f524f * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8)), _0x3f524f = _0x2f22f9('img/fire/0.png')) _0x140cf7 = 0 - 0.3 * this.rad, _0x354525 = 0.2 * this.rad - 0.3 * this.rad, _0x46371f = 0x1 * this.rad * (0x2 + 0x2 * _0x3bbb7d) / 0x3, _0x16a0e2 = 0x1 * this.rad * _0x3bbb7d, _0x2d4f2e = 0.5, _0x4653d4 = 0.95, ctx.save(), ctx.globalAlpha = ctx.globalAlpha * this.onFireEffA * _0x3bbb7d, ctx.drawImage(_0x3f524f, _0x140cf7 + _0x46371f * -_0x2d4f2e, _0x354525 + _0x16a0e2 * -_0x4653d4, _0x46371f, _0x16a0e2), ctx.globalAlpha = ctx.globalAlpha * this.onFireEffA * _0x3bbb7d, ctx.drawImage(_0x3f524f, _0x140cf7 + 0.5 * this.rad + _0x46371f * -_0x2d4f2e, _0x354525 + 0.5 * this.rad + _0x16a0e2 * -_0x4653d4, _0x46371f, _0x16a0e2), ctx.restore();
    0.01 < this.frozenEffA && this.flag_eff_frozen && (ctx.save(), _0x1b9571 = 0x7, _0x1b9571 = _0x1534e0 % (0x3e8 * _0x1b9571) / (0x3e8 * _0x1b9571), ctx.rotate(0x2 * _0x1b9571 * Math.PI), ctx.globalAlpha *= this.frozenEffA, _0x3f524f = 0.2 * this.rad, _0x1b9571 = (_0x1534e0 - this.spawnTime) / 0x3e8, _0x3bbb7d = (0.5 + 0.07 * _0x3f524f) * Math.sin(0x2 * Math.PI / 0x1 * _0x1b9571), ctx.fillStyle = 'white', _0x8eddca = 0.27 * this.rad, ctx.beginPath(), ctx.arc(-_0x8eddca, -_0x8eddca, Math.max(0, _0x3f524f + _0x3bbb7d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(_0x8eddca, -_0x8eddca, Math.max(0, _0x3f524f - _0x3bbb7d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(_0x8eddca, _0x8eddca, Math.max(0, _0x3f524f + _0x3bbb7d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(-_0x8eddca, _0x8eddca, Math.max(0, _0x3f524f - _0x3bbb7d), 0, 0x2 * Math.PI), ctx.fill(), ctx.restore());
    0.01 < this.frozenEffA && (ctx.save(), ctx.globalAlpha = 0.3 * ctx.globalAlpha * this.frozenEffA, _0x110b78(0, 0, Math.max(0, this.rad - this.outlineW), 'white'), ctx.restore());
    0.01 < this.effA_healing && (ctx.save(), ctx.globalAlpha = 0.3 * ctx.globalAlpha * this.effA_healing, _0x110b78(0, 0, Math.max(0, this.rad - this.outlineW), '#ef24ed'), ctx.restore());
    this.effect_sweatPoisoned();
    0.01 < this.effA_hot && (ctx.save(), _0x3bbb7d = 0.3, _0x3f524f = 0.5 * (0x1 - _0x3bbb7d), ctx.globalAlpha *= _0x3bbb7d + _0x3f524f + _0x3f524f * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), _0x110b78(0, 0, Math.max(0, this.rad - this.outlineW), 'rgba(249, 212, 77, 0.3)'), ctx.restore());
    0.01 < this.effA_poison && (ctx.save(), ctx.globalAlpha = 0.3 * ctx.globalAlpha * this.effA_poison, _0x3bbb7d = 0.3, _0x3f524f = 0.5 * (0x1 - _0x3bbb7d), ctx.globalAlpha *= _0x3bbb7d + _0x3f524f + _0x3f524f * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), _0x110b78(0, 0, Math.max(0, this.rad - this.outlineW), '#9FDA00'), ctx.restore());
    _0x3bbb7d = this.flag_eff_bleeding ? 0.8 : 0;
    this.effA_bleeding += 0.1 * (_0x3bbb7d - this.effA_bleeding);
    0.01 < this.effA_bleeding && (ctx.save(), _0x3bbb7d = 0.3, _0x3f524f = 0.3 * (0x1 - _0x3bbb7d), ctx.globalAlpha *= _0x3bbb7d + _0x3f524f + _0x3f524f * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), ctx.globalAlpha *= this.effA_bleeding, _0x110b78(0, 0, this.rad + -2.6 * this.effA_bleeding, 'red'), ctx.restore());
    _0x3bbb7d = this.flag_eff_slimed ? 0.8 : 0;
    this.effA_slimed += 0.1 * (_0x3bbb7d - this.effA_slimed);
    0.01 < this.effA_slimed && (ctx.save(), _0x3bbb7d = 0.3, _0x3f524f = 0.3 * (0x1 - _0x3bbb7d), ctx.globalAlpha *= _0x3bbb7d + _0x3f524f + _0x3f524f * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), ctx.globalAlpha *= this.effA_slimed, _0x110b78(0, 0, this.rad + -2.6 * this.effA_slimed, 'grey'), ctx.restore());
    _0x3bbb7d = this.flag_eff_stunk ? 0.8 : 0;
    this.effA_stunk += 0.1 * (_0x3bbb7d - this.effA_stunk);
    0.01 < this.effA_stunk && (ctx.save(), _0x3bbb7d = 0.3, _0x3f524f = 0.3 * (0x1 - _0x3bbb7d), ctx.globalAlpha *= _0x3bbb7d + _0x3f524f + _0x3f524f * Math.sin(0x2 * Math.PI / 1.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), ctx.globalAlpha *= this.effA_stunk, _0x110b78(0, 0, this.rad + -2.6 * this.effA_stunk, 'brown'), ctx.restore());
    this.animalType == _0xb20c08 && this.flag_usingAbility && (_0x3bbb7d = 0x1 * Math.sin(0x2 * Math.PI / 0.75 * _0x1b9571), _0x1b9571 = ctx.globalAlpha, ctx.globalAlpha *= 0.8 - 0.2 * _0x3bbb7d, _0x110b78(0.15 * this.rad, 1.27 * -this.rad, this.rad * (0.1 + 0.05 * _0x3bbb7d), '#efefef'), _0x110b78(0.15 * -this.rad, 1.27 * -this.rad, this.rad * (0.1 - 0.05 * _0x3bbb7d), '#efefef'), ctx.globalAlpha = _0x1b9571);
    _0x3bbb7d = this.flag_webStuck ? 0x1 : 0;
    this.effA_webStuck += 0.02 * (_0x3bbb7d - this.effA_webStuck);
    if (0.01 < this.effA_webStuck) {
        ctx.save();
        ctx.globalAlpha = 0.9 * ctx.globalAlpha * this.effA_webStuck;
        if (_0x3f524f = _0x2f22f9('img/web/' + this.eff_webStuckType + '/spiderWeb_stuck.png')) _0x1b9571 = 1.3 * this.rad, ctx.rotate(this.angle), ctx.drawImage(_0x3f524f, -_0x1b9571, -_0x1b9571, 0x2 * _0x1b9571, 0x2 * _0x1b9571);
        ctx.restore();
    }
    _0x3bbb7d = this.flag_eff_dirty ? 0x1 : 0;
    this.effA_dirtStuck += 0.02 * (_0x3bbb7d - this.effA_dirtStuck);
    if (0.01 < this.effA_dirtStuck) {
        ctx.save();
        ctx.rotate(this.angle);
        ctx.globalAlpha = 0.9 * ctx.globalAlpha * this.effA_dirtStuck;
        if (_0x3f524f = _0x2f22f9('img/dirt/dirt_sides.png')) _0x3bbb7d = this.skinScale, _0x1b9571 = this.skinRad, ctx.drawImage(_0x3f524f, -_0x1b9571 * _0x3bbb7d, -_0x1b9571 * _0x3bbb7d, 0x2 * _0x1b9571 * _0x3bbb7d, 0x2 * _0x1b9571 * _0x3bbb7d);
        if (_0x3f524f = _0x2f22f9('img/dirt/' + (0x1 == this.eff_dirtType ? 'dive_dirt' : 'dirt_top') + '.png')) _0x3bbb7d = this.skinScale, _0x1b9571 = this.skinRad, ctx.drawImage(_0x3f524f, -_0x1b9571 * _0x3bbb7d, -_0x1b9571 * _0x3bbb7d, 0x2 * _0x1b9571 * _0x3bbb7d, 0x2 * _0x1b9571 * _0x3bbb7d);
        ctx.restore();
    }
    _0x3bbb7d = this.flag_constricted ? 0x1 : 0;
    this.effA_constricted += 0.04 * (_0x3bbb7d - this.effA_constricted);
    if (0.01 < this.effA_constricted) {
        ctx.save();
        ctx.globalAlpha = 0.9 * ctx.globalAlpha * this.effA_constricted;
        if (_0x3f524f = _0x2f22f9('skins/land/boaconstrictor/' + this.eff_constrictedSpecies + '/constrict.png')) _0x1b9571 = 1.3 * this.rad, ctx.rotate(this.angle), ctx.drawImage(_0x3f524f, -_0x1b9571, -_0x1b9571, 0x2 * _0x1b9571, 0x2 * _0x1b9571);
        ctx.restore();
    }
};
Animal.prototype.getSpeciesPath = function (_0x30b118) {
    return _0x30b118 + '/' + this.animalSpecies;
};
Animal.prototype.getWing = function (_0x2da805, _0x25a369, _0x2c5641) {
    return 'skins/' + (_0x2c5641 ? this.getSpeciesPath(_0x2da805) + '/' : _0x2da805 + '/') + (_0x2da805 + '_wing' + _0x25a369 + '.png');
};
Animal.prototype.getHead = function (_0x3d1615, _0x332b61) {
    return 'skins/' + (_0x332b61 ? this.getSpeciesPath(_0x3d1615) + '/' : _0x3d1615 + '/') + (_0x3d1615 + '_head.png');
};
Animal.prototype.getSkinName = function () {
    var _0x50b9d7 = this.skinImgName;
    switch (this.animalType) {
    case 25:
    case 34:
    case 27:
    case 21:
    case 17:
    case 45:
    case 50:
    case 51:
    case 57:
        this.flag_usingAbility && (_0x50b9d7 = '' + _0x50b9d7 + '2');
        break;
    case 54:
        this.z *= 0x2, this.flag_usingAbility && 0x4 == this.specType && (_0x50b9d7 += '2');
    }
    return this.getPremiumSkin(_0x50b9d7);
};
Animal.prototype.getPremiumSkinFolder = function () {
    switch (this.animalPremiumSkin) {
    case 0x1:
        return 'premium/golden/';
    case 0x2:
        return 'premium/locked/';
    }
    return '';
};
Animal.prototype.getPremiumSkin = function (_0x40a043) {
    return this.getPremiumSkinFolder() + _0x40a043;
};
Animal.prototype.onAnimalSpeciesSet = function () {};
Animal.prototype.setObjTypes = function (_0x58f9ed, _0x164bb6) {
    this.oType = _0x58f9ed;
    this.animalType = _0x164bb6;
};
Animal.prototype.readCustomData_onNewlyVisible = function (_0x123a49) {
    Animal.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x123a49);
    var _0x52f891 = _0x123a49.readString();
    this.animalSpecies = _0x123a49.readUInt8();
    this.animalSubSpecies = _0x123a49.readUInt8();
    this.animalPremiumSkin = _0x123a49.readUInt8();
    this.onAnimalSpeciesSet();
    0 < this.animalPremiumSkin && this.setSparkleInterval(_0x26c094(0x5, 0xa), _0x26c094(0x2, 0x3));
    gameMode == _0xc2ceb0 && (this.teamID = _0x123a49.readUInt8());
    this.setNick(_0x52f891 ? _0x52f891 : 'mrmodpack.ml');
};
Animal.prototype.readCustomData_onUpdate = function (msg) {
    Animal.superClass.prototype.readCustomData_onUpdate.call(this, msg);
    this.specType = msg.readUInt8();
    this.specType2 = msg.readUInt8();
    var _0x4b8afa = msg.readUInt16(),
        _0x4b8afa = _0x55d748(_0x4b8afa - 90);
    this.angleDelta = _0x5b2dfd(this.angle, _0x4b8afa);
    this.oAngle = this.angle;
    this.firstPosUpd && (this.oAngle = this.angle = _0x4b8afa, this.angleDelta = 0);
    this.curBiome = msg.readUInt8();
    var flagR = msg.readBitGroup();
    this.isMuted = flagR.getBool();
    this.isInvisible = flagR.getBool();
    this.flag_lowWat = flagR.getBool();
    this.flag_inHomeBiome = flagR.getBool();
    this.flag_underWater = flagR.getBool();
    this.flag_eff_invincible = flagR.getBool();
    this.flag_usingAbility = flagR.getBool();
    this.flag_tailBitten = flagR.getBool();
    this.flag_eff_stunned = flagR.getBool();
    this.flag_iceSliding = flagR.getBool();
    this.flag_eff_frozen = flagR.getBool();
    this.flag_eff_onFire = flagR.getBool();
    this.flag_eff_healing = flagR.getBool();
    this.flag_eff_poison = flagR.getBool();
    this.flag_constricted = flagR.getBool();
    this.flag_webStuck = flagR.getBool();
    this.flag_dirtStuck = !0;
    this.flag_stealth = flagR.getBool();
    this.flag_eff_bleeding = flagR.getBool();
    this.flag_flying = flagR.getBool();
    this.flag_isGrabbed = flagR.getBool();
    this.flag_eff_aniInClaws = flagR.getBool();
    this.flag_eff_stunk = flagR.getBool();
    this.flag_cold = flagR.getBool();
    this.flag_inWater = flagR.getBool();
    this.flag_inLava = flagR.getBool();
    this.flag_canClimbHill = flagR.getBool();
    this.flag_isDevMode = flagR.getBool();
    this.flag_eff_slimed = flagR.getBool();
    this.flag_eff_wobbling = flagR.getBool();
    this.flag_eff_hot = flagR.getBool()
    this.flag_eff_sweatPoisoned = flagR.getBool();
    this.flag_eff_shivering = flagR.getBool();
    this.flag_inHidingHole = flagR.getBool();
    this.flag_eff_grabbedByFlytrap = flagR.getBool();
    this.flag_eff_aloeveraHealing = flagR.getBool();
    this.flag_eff_tossedInAir = flagR.getBool();
    this.flag_eff_isOnSpiderWeb = flagR.getBool();
    this.flag_fliesLikeDragon = flagR.getBool();
    this.flag_eff_isInMud = flagR.getBool();
    this.flag_eff_statue = flagR.getBool();
    this.flag_eff_isOnTree = flagR.getBool();
    this.flag_eff_isUnderTree = flagR.getBool();
    this.flag_ytmode = msg.readUInt8() == 1;
    this.usingIco = msg.readUInt8();
    this.flag_speared = msg.readUInt8() == 1;
    this.flag_eff_dirty = msg.readUInt8() == 1;
    this.flag_can1v1 = msg.readUInt8() == 1;
    this.flag_isInArena = msg.readUInt8() == 1;
    this.f_isOutlined = msg.readUInt8();
    this.wins1v1 = msg.readUInt8();
    this.playerNum = msg.readUInt8();
    _0x45cca0 && this.flag_can1v1 ? (this.nickTXT.setText(this.nickName + (`\n(wins:` + this.wins1v1 + ')')), this.winsAddedInNick = !0) : this.winsAddedInNick && (this.winsAddedInNick = !0x1, this.nickTXT.setText(this.nickName));
    this.flag_isDevMode &&  (this.devmode_Num = msg.readUInt8());
    this.flag_eff_statue && (this.eff_statueType = msg.readUInt8());
    this.flag_constricted && (this.eff_constrictedSpecies = msg.readUInt8());
    this.flag_webStuck && (this.eff_webStuckType = msg.readUInt8());
    this.flag_eff_dirty && (this.eff_dirtType = msg.readUInt8());
    this.lastHidingHoleID = msg.readUInt32();
    this.hidingHoleVisibilityRad = msg.readUInt16() / 4;
};
Animal.prototype.lastHidingHoleID = 0;
Animal.prototype.hidingHoleVisibilityRad = 0;
Animal.prototype.winsAddedInNick = !0x1;

function Animal(_0x37f561, _0x27dfb3) {
    Animal.superClass.call(this, o_player);
    this.animalType = _0x27dfb3;
}
Animal.prototype.getAbilityInfo = function (_0x161940) {
    return this.animalType == _0x586eae ? {
        'abilName': 'Claw Slash!',
        'abilImg': 'skins/arctic/bear/clawslash.png'
    } : _0x5a107b(_0x161940);
};
Animal.prototype.calcAnimalZIndex = function () {
    if (this.flag_eff_grabbedByFlytrap) this.z = 0x44c + this.rad;
    else if (this.flag_eff_tossedInAir) this.z = 0x4b0 + this.rad;
    else if (this.flag_flying) this.z = 0x186a0, this.z = this.flag_isGrabbed ? this.z - this.rad : this.z + this.rad, this.flag_eff_aniInClaws && (this.z += 0x3e8), 0x64 == this.specType2 && (this.z = 0x3f6);
    else if (this.flag_underWater || this.flag_usingAbility && this.animalType == _0x4f5784) this.z = -0x64;
    else if (this.z = !this.flag_usingAbility || this.animalType != _0x819b63 && this.animalType != _0x1cc507 ? this.flag_canClimbHill && this.animalType != _0x22da49 || this.animalType == _0x306e7d || this.animalType == _0x1bea6f || this.animalType == _0x58670a || this.animalType == _0x586eae || this.animalType == _0x14aa29 || this.animalType == _0x166900 || this.animalType == _0x115d14 || this.animalType == _0xa4ccd0 || this.animalType == _0x10ffe7 || this.animalType == _0x318be6 || this.animalType == _0x5b3c93 || this.animalType == _0xb20c08 ? 0x3e8 + this.rad : this.animalType == _0x1da4d1 ? 0x3f1 + this.rad : this.animalType == _0x1a31f6 ? 0x3f0 + (this.flag_usingAbility ? 0x1 : 0) + this.rad : 1.5 * this.rad : 0x2711 + this.rad, this.flag_fliesLikeDragon || this.flag_isInArena) this.z += 0x7d0;
    if(this.animalType == 14) this.z += 100;
};
window.Animal = Animal;
GameObjType.setCustomClassForGameObjType(Animal, o_player);
_0x5a621d = _0x5c2680;
_0x2a91c6 = GameObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x5c2680.prototype.animalType = _0x4170f3;
_0x5c2680.prototype.animalSpecies = 0;
_0x5c2680.prototype.animalSubSpecies = 0;
_0x5c2680.prototype.segmentNum = 0;
_0x5c2680.prototype.updateZ = function () {
    this.z = 0x1e - this.segmentNum;
};
_0x5c2680.prototype.customDraw = function (_0xacbca9) {
    ctx.save();
    if (_0xacbca9 = _0x2f22f9('skins/deathworm/segment_' + this.segmentNum + '.png')) {
        var _0x563c75 = 0x2 * this.rad;
        ctx.rotate(this.angle);
        ctx.drawImage(_0xacbca9, -_0x563c75, -_0x563c75, 0x2 * _0x563c75, 0x2 * _0x563c75);
    }
    ctx.restore();
};
_0x5c2680.prototype.readCustomData_onNewlyVisible = function (_0x5e1ce5) {
    _0x5c2680.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5e1ce5);
    this.segmentNum = _0x5e1ce5.readUInt8();
    this.animalSpecies = _0x5e1ce5.readUInt8();
    this.animalSubSpecies = _0x5e1ce5.readUInt8();
    this.animalPremiumSkin = _0x5e1ce5.readUInt8();
};

function _0x5c2680(_0x1f4ce7, _0x178c6d) {
    _0x5c2680.superClass.call(this, o_animalBody);
    this.animalType = _0x178c6d;
}
window.AnimalBody = _0x5c2680;
GameObjType.setCustomClassForGameObjType(_0x5c2680, o_animalBody);
_0x2a91c6 = GameObj;
_0x447a30.prototype = Object.create(_0x2a91c6.prototype);
_0x447a30.prototype.constructor = _0x447a30;
_0x447a30.superClass = _0x2a91c6;
_0x447a30.prototype.updateZ = function () {
    this.z = 0x3ea;
};
_0x447a30.prototype.readCustomData_onUpdate = function (_0x4dadf4) {
    this.webTransparency = this.specType = _0x4dadf4.readUInt8();
    this.drawEffectScale_Slow = 0x1 == _0x4dadf4.readUInt8();
};
_0x447a30.prototype.readCustomData_onNewlyVisible = function (_0x5500c6) {
    this.webTransparency = this.specType = _0x5500c6.readUInt8();
    this.webType = _0x5500c6.readUInt8();
};
_0x447a30.prototype.customDraw = function (_0x5d986e) {
    ctx.save();
    ctx.globalAlpha = this.specType / 0x64 * ctx.globalAlpha * 0.9;
    if (_0x5d986e = _0x2f22f9('img/web/' + this.webType + '/spiderWeb.png')) {
        var _0x3fbc12 = this.rad;
        ctx.rotate(this.rPer * Math.PI * 0x2);
        ctx.drawImage(_0x5d986e, -_0x3fbc12, -_0x3fbc12, 0x2 * _0x3fbc12, 0x2 * _0x3fbc12);
    }
    ctx.restore();
};

function _0x447a30() {
    _0x447a30.superClass.call(this, o_spiderWeb);
    this.webTransparency = 0;
    this.drawEffectScale_Slow = this.doesDrawEffectScale = !0;
}
window.SpiderWeb = _0x447a30;
GameObjType.setCustomClassForGameObjType(_0x447a30, o_spiderWeb);
_0x2a91c6 = Animal;
_0x2571ad.prototype = Object.create(_0x2a91c6.prototype);
_0x2571ad.prototype.constructor = _0x2571ad;
_0x2571ad.superClass = _0x2a91c6;
_0x2571ad.prototype.animalInfo = function () {
    return {
        'aniName': 'Octopus!',
        'skinName': 'ocean/octopus/octopus',
        'aniDesc': '',
        'upgradeText': `UPGRADED to Octopus!\nPress W to use your 'Disguise' ability!\n(Hint: wait for prey to bite you- they get stunned!)`,
        'aniCol': '#ff8340'
    };
};
_0x2571ad.prototype.getAbilityInfo = function (_0x1efb52) {
    return {
        'abilName': 'Disguise',
        'abilImg': 'skins/ocean/octopus/ability.png'
    };
};
_0x2571ad.prototype.getSkinName = function () {
    return 'ocean/octopus/octopus' + (0 == this.specType ? '' : 0x1);
};
_0x2571ad.prototype.drawUnderSkinImg = function () {
    var _0x4c2de8 = 0x1f4 / 0x154,
        _0x1fb501 = _0x2f22f9('skins/ocean/octopus/head.png');
    if (_0x1fb501) {
        ctx.save();
        var _0x4689a2 = this.rad - this.outlineW;
        ctx.drawImage(_0x1fb501, -_0x4689a2 * _0x4c2de8, 1.1 * -_0x4689a2 * _0x4c2de8, 0x2 * _0x4689a2 * _0x4c2de8, 0x2 * _0x4689a2 * _0x4c2de8);
        ctx.restore();
    }
};
_0x2571ad.prototype.readCustomData_onNewlyVisible = function (_0x452f32) {
    _0x2571ad.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x452f32);
};
_0x2571ad.prototype.readCustomData_onUpdate = function (_0x346a3c) {
    _0x2571ad.superClass.prototype.readCustomData_onUpdate.call(this, _0x346a3c);
    if (this.flag_usingAbility) {
        var _0x1a589e = 0 < _0x346a3c.readUInt8();
        _0x346a3c = _0x346a3c.readUInt16();
        if (this.octoIsAnimal != _0x1a589e || this.octoDisguiseObjT != _0x346a3c || null == this.octoDrawObj) {
            var _0x11f982 = _0x1a589e ? _0x346a3c : null,
                _0x2f9752 = GameObjType.createGameObjOfOType(_0x1a589e ? o_player : _0x346a3c, _0x11f982);
            _0x1a589e && (_0x2f9752.animalType = _0x11f982);
            _0x2f9752.oRad = this.oRad;
            _0x2f9752.nRad = this.nRad;
            _0x2f9752.curBiome = this.curBiome;
            this.octoDrawObj = _0x2f9752;
        }
        this.octoIsAnimal = _0x1a589e;
        this.octoDisguiseObjT = _0x346a3c;
    }
};
_0x2571ad.prototype.drawUnderSkinImgOutline = function () {
    _0x2571ad.superClass.prototype.drawUnderSkinImgOutline.call(this);
};
_0x2571ad.prototype.drawOnTopOfSkinImg = function () {
    _0x2571ad.superClass.prototype.drawOnTopOfSkinImg.call(this);
    this.flag_usingAbility && (ctx.save(), ctx.globalAlpha = 0x1 - this.underwaterA, this.octoDrawObj.nRad = this.octoDisguiseObjT == o_bigMushroom ? 0x19 : this.octoDisguiseObjT == o_plankton ? 0x11 : this.octoDisguiseObjT == o_healingStone ? 0xf : this.rad, this.octoDrawObj.draw(), ctx.restore());
};
_0x2571ad.prototype.drawWhenUnderwater = function () {
    _0x2571ad.superClass.prototype.drawWhenUnderwater.call(this);
};
_0x2571ad.prototype.octoDisguiseObjT = 0;
_0x2571ad.prototype.octoIsAnimal = !0x1;
_0x2571ad.prototype.drawHealthBar = function () {
    if (this.flag_usingAbility)
        if (this.octoIsAnimal) _0x2571ad.superClass.prototype.drawNickName.call(this, 0x1), this.octoDrawObj.curBiome = this.curBiome, this.hpPer_n = 0x2, this.hpPer = 0x19, this.hpBarA = 0x1;
        else return;
    ctx.save();
    this.hpBarA += 0.04 * ((_0x1534e0 < this.hpBarTimeoutT ? 0x1 : 0) - this.hpBarA);
    if (0.001 < this.hpBarA) {
        this.hpPer += 0.1 * (this.hpPer_n - this.hpPer);
        var _0x430714 = Math.max(0x1, this.rad / 0x19),
            _0x26ce94 = 0x14 * _0x430714,
            _0x2031c8 = 0x5 * _0x430714,
            _0x430714 = -this.rad - 0xa * _0x430714;
        ctx.globalAlpha *= this.hpBarA;
        ctx.fillStyle = 'rgba(0,0,0,0.35)';
        ctx.fillRect(0 - _0x26ce94 / 0x2, _0x430714 - _0x2031c8 / 0x2, _0x26ce94, _0x2031c8);
        ctx.fillStyle = '#16D729';
        var _0x50e490 = this.hpPer / 0x64 * _0x26ce94;
        this.flag_usingAbility && this.octoIsAnimal && (_0x50e490 = 0.25 * _0x26ce94);
        ctx.fillRect(0 - _0x26ce94 / 0x2, _0x430714 - _0x2031c8 / 0x2, _0x50e490, _0x2031c8);
    }
    ctx.restore();
};

function _0x2571ad() {
    _0x2571ad.superClass.call(this, o_player);
}
window.Octopus = _0x2571ad;
GameObjType.setCustomClassForGameObjType(_0x2571ad, o_player, _0x1ebbca);
_0x2a91c6 = Animal;
Eagle.prototype = Object.create(_0x2a91c6.prototype);
Eagle.prototype.constructor = Eagle;
Eagle.superClass = _0x2a91c6;
Eagle.prototype.animalInfo = function () {
    var _0x6a52ac = {},
        _0x1514ff = '';
    switch (this.animalSpecies) {
        case 0:
            _0x6a52ac.aniName = 'Bald Eagle';
            break;
        case 1:
            _0x6a52ac.aniName = 'Golden Eagle', _0x1514ff = '(Can even pick predators!)';
            break;
        case 2:
            _0x6a52ac.aniName = "Shahbaz";
            _0x1514ff = "(Shahbaz picks anything including Black Dragon)";
            break;
        case 3:
            _0x6a52ac.aniName = "Golden Shahbaz";
            _0x1514ff = "(Shahbaz picks everything!)";
            break;
        case 4:
            _0x6a52ac.aniName = "Paki Shahbaz";
            _0x1514ff = "(THE SPEED HACK!)";
            break;
    }
    _0x6a52ac.aniCol = '#5b400d';
    _0x6a52ac.upgradeText = 'UPGRADED to ' + _0x6a52ac.aniName + `!\nEagles can fly up other animals in the air! !\n` + _0x1514ff;
    _0x6a52ac.skinName = 'eagle/' + this.animalSpecies + '/eagle' + (0 == this.specType ? '' : this.specType);
    return _0x6a52ac;
};
Eagle.prototype.getHead = function (_0x49ddee, _0x4d23c9) {
    var _0x20645b = 'skins/' + (_0x4d23c9 ? this.getSpeciesPath(_0x49ddee) + '/' : _0x49ddee + '/');
    return _0x20645b += _0x49ddee + '_head' + (0x1 == this.specType ? '2' : '') + '.png';
};
Eagle.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        var _0x3b0b17 = 0x1f4 / 0x154;
        if (this.flag_flying && !this.flag_isGrabbed) {
            ctx.save();
            var _0x72ab57 = (_0x1534e0 - this.spawnTime) / 0x3e8,
                _0x72ab57 = 0x2 != _0x14fca5 ? _0x93972d(_0x72ab57, 0.9, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle,
                _0x2e3df5 = _0x2f22f9(this.getWing('eagle', 0x1, !0));
            if (_0x2e3df5) {
                ctx.save();
                var _0x11795e = -(-0.2 + _0x72ab57) * _0x55d748(0x5a),
                    _0x2e5249 = 0.8 * this.rad;
                ctx.rotate(_0x55d748(0x2d) + _0x11795e);
                var _0x11795e = this.rad,
                    _0x419d5a = 1.24 * _0x2e5249,
                    _0x2e5249 = 2.5 * _0x2e5249;
                ctx.drawImage(_0x2e3df5, 0 + -0.2 * _0x419d5a, _0x11795e + -1.7 * _0x2e5249, _0x419d5a, _0x2e5249);
                ctx.restore();
            }
            if (_0x2e3df5 = _0x2f22f9(this.getWing('eagle', 0x2, !0))) ctx.save(), _0x11795e = -(-0.2 + _0x72ab57) * _0x55d748(-0x5a), _0x2e5249 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0x2d) + _0x11795e), _0x11795e = this.rad, _0x419d5a = 1.24 * _0x2e5249, _0x2e5249 *= 2.5, ctx.drawImage(_0x2e3df5, 0 + -0.8 * _0x419d5a, _0x11795e + -1.7 * _0x2e5249, _0x419d5a, _0x2e5249), ctx.restore();
            ctx.restore();
        } else if (0x1 == this.specType) {
            ctx.save();
            _0x72ab57 = (_0x1534e0 - this.spawnTime) / 0x3e8;
            _0x72ab57 = 0x2 != _0x14fca5 ? _0x93972d(_0x72ab57, 0.7, 0.3, 0x2) : 0;
            if (_0x2e3df5 = _0x2f22f9(this.getWing('eagle', 0x1, !0))) ctx.save(), _0x11795e = -(-0.2 + _0x72ab57) * _0x55d748(0x2d), _0x2e5249 = 0.8 * this.rad, ctx.rotate(_0x55d748(0xf) + _0x11795e), _0x11795e = this.rad, _0x419d5a = 1.6 * _0x2e5249, _0x2e5249 *= 2.2, ctx.drawImage(_0x2e3df5, 0 + -0 * _0x419d5a, _0x11795e + -1.5 * _0x2e5249, _0x419d5a, _0x2e5249), ctx.restore();
            if (_0x2e3df5 = _0x2f22f9(this.getWing('eagle', 0x2, !0))) ctx.save(), _0x11795e = -(-0.2 + _0x72ab57) * _0x55d748(-0x2d), _0x2e5249 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0xf) + _0x11795e), _0x11795e = this.rad, _0x419d5a = 1.6 * _0x2e5249, _0x2e5249 *= 2.2, ctx.drawImage(_0x2e3df5, 0 + -0x1 * _0x419d5a, _0x11795e + -1.5 * _0x2e5249, _0x419d5a, _0x2e5249), ctx.restore();
            ctx.restore();
        }
        0 != this.specType && void 0 != this.specType && (_0x72ab57 = _0x2f22f9(this.getHead('eagle', !0))) && (ctx.save(), _0x2e5249 = this.rad, ctx.drawImage(_0x72ab57, -_0x2e5249 * _0x3b0b17, (-_0x2e5249 + 0.1 * _0x2e5249) * _0x3b0b17, 0x2 * _0x2e5249 * _0x3b0b17, 0x2 * _0x2e5249 * _0x3b0b17), ctx.restore());
    }
};

function Eagle() {
    Eagle.superClass.call(this, o_player);
}
window.Eagle = Eagle;
GameObjType.setCustomClassForGameObjType(Eagle, o_player, _0x819b63);
_0x2a91c6 = Animal;
_0x45b877.prototype = Object.create(_0x2a91c6.prototype);
_0x45b877.prototype.constructor = _0x45b877;
_0x45b877.superClass = _0x2a91c6;
_0x45b877.prototype.getSkinName = function () {
    return 'land/ostrich/' + this.animalSpecies + '/ostrich';
};
_0x45b877.prototype.animalInfo = function () {
    var _0x388855 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x388855.aniName = 'Ostrich!';
        break;
    case 0x1:
        _0x388855.aniName = 'Golden Ostrich!';
        break;
    case 0x2:
        _0x388855.aniName = 'Ruffled Ostrich!';
    }
    _0x388855.skinName = 'land/ostrich/' + this.animalSpecies + '/ostrich';
    _0x388855.aniDesc = '';
    _0x388855.upgradeText = 'UPGRADED to ' + _0x388855.aniName + `! Lay eggs to hatch babies! \n
Command babies by placing your crosshair (right-click/W)-\n
 They can attack prey!`;
    _0x388855.aniCol = '#FF9000';
    return _0x388855;
};
_0x45b877.prototype.getAbilityInfo = function (_0x2ffe43) {
    _0x2ffe43 = {
        'abilName': 'Command Babies!'
    };
    _0x2ffe43.abilImg = 'skins/land/ostrich/' + this.animalSpecies + '/ostrich-baby.png';
    return _0x2ffe43;
};

function _0x45b877() {
    _0x45b877.superClass.call(this, o_player);
}
window.Ostrich = _0x45b877;
GameObjType.setCustomClassForGameObjType(_0x45b877, o_player, _0x5d266c);
_0x2a91c6 = Animal;
_0x2219dd.prototype = Object.create(_0x2a91c6.prototype);
_0x2219dd.prototype.constructor = _0x2219dd;
_0x2219dd.superClass = _0x2a91c6;
_0x2219dd.prototype.getSkinName = function () {
    return 'land/ostrich/' + this.animalSpecies + '/ostrich-baby';
};
_0x2219dd.prototype.isEdibleOutlined = function () {
    if (this.mommyID == myPlayerID) return !0x1;
    var _0x3aaacf = gameObjsByID[myPlayerID];
    return _0x3aaacf && (_0x3aaacf = _0x3aaacf.animalType, _0x3aaacf == _0x1de318 || _0x3aaacf == _0x5b3c93 || _0x3aaacf == _0x1b136a) ? !0x1 : _0x2219dd.superClass.prototype.isEdibleOutlined.call(this);
};
_0x2219dd.prototype.readCustomData_onNewlyVisible = function (_0x291ad5) {
    _0x2219dd.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x291ad5);
    this.mommyID = _0x291ad5.readUInt32();
};

function _0x2219dd() {
    _0x2219dd.superClass.call(this, o_player);
}
window.OstrichBaby = _0x2219dd;
GameObjType.setCustomClassForGameObjType(_0x2219dd, o_player, _0x3894a3);
_0x2a91c6 = Animal;
_0xa4812f.prototype = Object.create(_0x2a91c6.prototype);
_0xa4812f.prototype.constructor = _0xa4812f;
_0xa4812f.superClass = _0x2a91c6;
_0xa4812f.prototype.getSkinName = function () {
    return 'falcon/'+this.animalSpecies+'/falcon' + (0 == this.specType || void 0 == this.specType ? '' : this.specType);
};
_0xa4812f.prototype.getSpeciesPath = function (_0x30b118) {
    return _0x30b118 + '/' + this.animalSpecies;
};
_0xa4812f.prototype.getWing = function (_0x2da805, _0x25a369, _0x2c5641) {
    return 'skins/' + (_0x2c5641 ? this.getSpeciesPath(_0x2da805) + '/' : _0x2da805 + '/') + (_0x2da805 + '_wing' + _0x25a369 + '.png');
};
_0xa4812f.prototype.animalInfo = function () {
    var _0x6a52ac = {},
        _0x1514ff = '';
    switch (this.animalSpecies) {
        case 0:
            _0x6a52ac.aniName = 'Falcon';
            break;
        case 1:
            _0x6a52ac.aniName = 'Snowy Falcon';
            break;
        case 100:
            _0x6a52ac.aniName = 'Crystal Falcon';
            break;
    }
    _0x6a52ac.aniCol = '#5b400d';
    _0x6a52ac.upgradeText = 'UPGRADED to ' + _0x6a52ac.aniName + `!\n`;
    _0x6a52ac.skinName = 'falcon/' + this.animalSpecies + '/falcon' + (0 == this.specType ? '' : this.specType);
    return _0x6a52ac;
};
_0xa4812f.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        var _0x14ec7d = 0x1f4 / 0x154;
        if (this.flag_flying && !this.flag_isGrabbed && 0x1 == this.specType) {
            ctx.save();
            var _0x40ffa2 = (_0x1534e0 - this.spawnTime) / 0x3e8,
                _0x5cc7fe = 0x2 != _0x14fca5 ? _0x93972d(_0x40ffa2, 0.7, 0.4, 0x2) : this.birdNoAnimationFlyWingAngle,
                _0x24a5b6 = _0x2f22f9(this.getWing('falcon', 0x1, true));
            if (_0x24a5b6) {
                ctx.save();
                var _0x3527cd = -(-0.2 + _0x5cc7fe) * _0x55d748(0x50),
                    _0x40ffa2 = 0.8 * this.rad;
                ctx.rotate(_0x55d748(0x19) + _0x3527cd);
                var _0x3527cd = this.rad,
                    _0x39ebab = 1.3 * _0x40ffa2,
                    _0x40ffa2 = 2.5 * _0x40ffa2;
                ctx.drawImage(_0x24a5b6, 0 + -0 * _0x39ebab, _0x3527cd + -1.5 * _0x40ffa2, _0x39ebab, _0x40ffa2);
                ctx.restore();
            }
            if (_0x24a5b6 = _0x2f22f9(this.getWing('falcon', 0x2, !0x1))) ctx.save(), _0x3527cd = -(-0.2 + _0x5cc7fe) * _0x55d748(-0x50), _0x40ffa2 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0x19) + _0x3527cd), _0x3527cd = this.rad, _0x39ebab = 1.3 * _0x40ffa2, _0x40ffa2 *= 2.5, ctx.drawImage(_0x24a5b6, 0 + -0x1 * _0x39ebab, _0x3527cd + -1.5 * _0x40ffa2, _0x39ebab, _0x40ffa2), ctx.restore();
            ctx.restore();
        } else if (this.flag_flying && 0x2 == this.specType) {
            ctx.save();
            _0x40ffa2 = (_0x1534e0 - this.spawnTime) / 0x3e8;
            0x2 != _0x14fca5 && _0x93972d(_0x40ffa2, 0.7, 0.3, 0x2);
            if (_0x24a5b6 = _0x2f22f9(this.getWing('falcon', 0x1, !0x1))) ctx.save(), _0x3527cd = 0.2 * _0x55d748(0x19), _0x40ffa2 = 0.8 * this.rad, ctx.rotate(_0x3527cd), _0x3527cd = this.rad, _0x39ebab = 1.4 * _0x40ffa2, _0x40ffa2 *= 2.2, ctx.drawImage(_0x24a5b6, 0 + -0 * _0x39ebab, _0x3527cd + -1.5 * _0x40ffa2, _0x39ebab, _0x40ffa2), ctx.restore();
            if (_0x24a5b6 = _0x2f22f9(this.getWing('falcon', 0x2, !0x1))) ctx.save(), _0x3527cd = 0.2 * _0x55d748(-0x19), _0x40ffa2 = 0.8 * this.rad, ctx.rotate(_0x3527cd), _0x3527cd = this.rad, _0x39ebab = 1.4 * _0x40ffa2, _0x40ffa2 *= 2.2, ctx.drawImage(_0x24a5b6, 0 + -0x1 * _0x39ebab, _0x3527cd + -1.5 * _0x40ffa2, _0x39ebab, _0x40ffa2), ctx.restore();
            ctx.restore();
        } else if (this.flag_flying && 0x3 == this.specType) {
            ctx.save();
            _0x40ffa2 = (_0x1534e0 - this.spawnTime) / 0x3e8;
            _0x5cc7fe = 0x2 != _0x14fca5 ? _0x93972d(_0x40ffa2, 0.5, 0.4, 0x2) : 0;
            if (_0x24a5b6 = _0x2f22f9(this.getWing('falcon', 0x1, !0x1))) ctx.save(), _0x3527cd = -(-0.2 + _0x5cc7fe) * _0x55d748(0x2d), _0x40ffa2 = 0.8 * this.rad, ctx.rotate(_0x55d748(0xf) + _0x3527cd), _0x3527cd = this.rad, _0x39ebab = 0x2 * _0x40ffa2, _0x40ffa2 *= 2.2, ctx.drawImage(_0x24a5b6, 0 + -0 * _0x39ebab, _0x3527cd + -1.5 * _0x40ffa2, _0x39ebab, _0x40ffa2), ctx.restore();
            if (_0x24a5b6 = _0x2f22f9(this.getWing('falcon', 0x2, !0x1))) ctx.save(), _0x3527cd = -(-0.2 + _0x5cc7fe) * _0x55d748(-0x2d), _0x40ffa2 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0xf) + _0x3527cd), _0x3527cd = this.rad, _0x39ebab = 0x2 * _0x40ffa2, _0x40ffa2 *= 2.2, ctx.drawImage(_0x24a5b6, 0 + -0x1 * _0x39ebab, _0x3527cd + -1.5 * _0x40ffa2, _0x39ebab, _0x40ffa2), ctx.restore();
            ctx.restore();
        }
        0 != this.specType && void 0 != this.specType && (_0x5cc7fe = _0x2f22f9(this.getHead('falcon', !0x1))) && (ctx.save(), _0x40ffa2 = this.rad * (0x3 == this.specType ? 1.2 : 0x1), _0x24a5b6 = 0.2 * _0x40ffa2, 0x3 == this.specType && (_0x24a5b6 = -0.15 * _0x40ffa2), ctx.drawImage(_0x5cc7fe, -_0x40ffa2 * _0x14ec7d, (-_0x40ffa2 + _0x24a5b6) * _0x14ec7d, 0x2 * _0x40ffa2 * _0x14ec7d, 0x2 * _0x40ffa2 * _0x14ec7d), ctx.restore());
    }
};

function _0xa4812f() {
    _0xa4812f.superClass.call(this, o_player);
}
window.Falcon = _0xa4812f;
GameObjType.setCustomClassForGameObjType(_0xa4812f, o_player, _0x1db4ca);
_0x2a91c6 = Animal;
_0x2ffe4e.prototype = Object.create(_0x2a91c6.prototype);
_0x2ffe4e.prototype.constructor = _0x2ffe4e;
_0x2ffe4e.superClass = _0x2a91c6;
_0x2ffe4e.prototype.getSkinName = function () {
    return 'snowyowl/snowyowl' + (0 == this.specType ? '' : this.specType);
};
_0x2ffe4e.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        var _0x4954ff = 0x1f4 / 0x154;
        if (this.flag_flying && !this.flag_isGrabbed && 0x1 == this.specType) {
            ctx.save();
            var _0x4e0d4e = (_0x1534e0 - this.spawnTime) / 0x3e8,
                _0x4e0d4e = 0x2 != _0x14fca5 ? _0x93972d(_0x4e0d4e, 0.7, 0.4, 0x2) : this.birdNoAnimationFlyWingAngle,
                _0x32094d = _0x2f22f9(this.getWing('snowyowl', 0x1, !0x1));
            if (_0x32094d) {
                ctx.save();
                var _0x46c043 = -(-0.2 + _0x4e0d4e) * _0x55d748(0x50),
                    _0x4dc3e3 = 0.8 * this.rad;
                ctx.rotate(_0x55d748(0x19) + _0x46c043);
                var _0x46c043 = this.rad,
                    _0x113310 = 1.3 * _0x4dc3e3,
                    _0x4dc3e3 = 2.5 * _0x4dc3e3;
                ctx.drawImage(_0x32094d, 0 + -0 * _0x113310, _0x46c043 + -1.5 * _0x4dc3e3, _0x113310, _0x4dc3e3);
                ctx.restore();
            }
            if (_0x32094d = _0x2f22f9(this.getWing('snowyowl', 0x2, !0x1))) ctx.save(), _0x46c043 = -(-0.2 + _0x4e0d4e) * _0x55d748(-0x50), _0x4dc3e3 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0x19) + _0x46c043), _0x46c043 = this.rad, _0x113310 = 1.3 * _0x4dc3e3, _0x4dc3e3 *= 2.5, ctx.drawImage(_0x32094d, 0 + -0x1 * _0x113310, _0x46c043 + -1.5 * _0x4dc3e3, _0x113310, _0x4dc3e3), ctx.restore();
            ctx.restore();
        } else if (this.flag_flying && 0x2 == this.specType) {
            ctx.save();
            _0x4e0d4e = (_0x1534e0 - this.spawnTime) / 0x3e8;
            _0x4e0d4e = 0x2 != _0x14fca5 ? _0x93972d(_0x4e0d4e, 0.7, 0.3, 0x2) : 0;
            if (_0x32094d = _0x2f22f9(this.getWing('snowyowl', 0x1, !0x1))) ctx.save(), _0x46c043 = -(-0.2 + _0x4e0d4e) * _0x55d748(0x2d), _0x4dc3e3 = 0.8 * this.rad, ctx.rotate(_0x55d748(0xf) + _0x46c043), _0x46c043 = this.rad, _0x113310 = 1.4 * _0x4dc3e3, _0x4dc3e3 *= 2.2, ctx.drawImage(_0x32094d, 0 + -0 * _0x113310, _0x46c043 + -1.5 * _0x4dc3e3, _0x113310, _0x4dc3e3), ctx.restore();
            if (_0x32094d = _0x2f22f9(this.getWing('snowyowl', 0x2, !0x1))) ctx.save(), _0x46c043 = -(-0.2 + _0x4e0d4e) * _0x55d748(-0x2d), _0x4dc3e3 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0xf) + _0x46c043), _0x46c043 = this.rad, _0x113310 = 1.4 * _0x4dc3e3, _0x4dc3e3 *= 2.2, ctx.drawImage(_0x32094d, 0 + -0x1 * _0x113310, _0x46c043 + -1.5 * _0x4dc3e3, _0x113310, _0x4dc3e3), ctx.restore();
            ctx.restore();
        } else if (this.flag_flying && 0x3 == this.specType) {
            ctx.save();
            _0x4e0d4e = (_0x1534e0 - this.spawnTime) / 0x3e8;
            _0x4e0d4e = 0x2 != _0x14fca5 ? _0x93972d(_0x4e0d4e, 0.5, 0.5, 0x2) : 0;
            if (_0x32094d = _0x2f22f9(this.getWing('snowyowl', 0x1, !0x1))) ctx.save(), _0x46c043 = -(-0.2 + _0x4e0d4e) * _0x55d748(0x2d), _0x4dc3e3 = 0.8 * this.rad, ctx.rotate(_0x55d748(0x19) + _0x46c043), _0x46c043 = this.rad, _0x113310 = 1.4 * _0x4dc3e3, _0x4dc3e3 *= 2.2, ctx.drawImage(_0x32094d, 0 + -0 * _0x113310, _0x46c043 + -1.5 * _0x4dc3e3, _0x113310, _0x4dc3e3), ctx.restore();
            if (_0x32094d = _0x2f22f9(this.getWing('snowyowl', 0x2, !0x1))) ctx.save(), _0x46c043 = -(-0.2 + _0x4e0d4e) * _0x55d748(-0x2d), _0x4dc3e3 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0x19) + _0x46c043), _0x46c043 = this.rad, _0x113310 = 1.4 * _0x4dc3e3, _0x4dc3e3 *= 2.2, ctx.drawImage(_0x32094d, 0 + -0x1 * _0x113310, _0x46c043 + -1.5 * _0x4dc3e3, _0x113310, _0x4dc3e3), ctx.restore();
            ctx.restore();
        }
        0 != this.specType && void 0 != this.specType && (_0x4e0d4e = _0x2f22f9(this.getHead('snowyowl', !0x1))) && (ctx.save(), _0x4dc3e3 = 0.8 * this.rad, ctx.drawImage(_0x4e0d4e, -_0x4dc3e3 * _0x4954ff, (-_0x4dc3e3 + 0.1 * _0x4dc3e3) * _0x4954ff, 0x2 * _0x4dc3e3 * _0x4954ff, 0x2 * _0x4dc3e3 * _0x4954ff), ctx.restore());
    }
};

function _0x2ffe4e() {
    _0x2ffe4e.superClass.call(this, o_player);
}
window.SnowyOwl = _0x2ffe4e;
GameObjType.setCustomClassForGameObjType(_0x2ffe4e, o_player, _0xbc3a94);
_0x2a91c6 = Animal;
_0x3ecd2f.prototype = Object.create(_0x2a91c6.prototype);
_0x3ecd2f.prototype.constructor = _0x3ecd2f;
_0x3ecd2f.superClass = _0x2a91c6;
_0x3ecd2f.prototype.getSkinName = function () {
    return 'ocean/pelican/pelican' + (0 == this.specType ? '' : this.specType);
};
_0x3ecd2f.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        var _0x1cecb5 = 0x1f4 / 0x154,
            _0x2ce159;
        if (this.flag_flying) {
            ctx.save();
            _0x2ce159 = (_0x1534e0 - this.spawnTime) / 0x3e8;
            var _0x54bfbb = 0x2 != _0x14fca5 ? _0x93972d(_0x2ce159, 0.9, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle,
                _0x2dac8f = _0x2f22f9(this.getWing('pelican', 0x1, !0x1));
            if (_0x2dac8f) {
                ctx.save();
                var _0x3430e5 = -(-0.2 + _0x54bfbb) * _0x55d748(0x5a);
                _0x2ce159 = 0.8 * this.rad;
                ctx.rotate(_0x55d748(0x2d) + _0x3430e5);
                var _0x3430e5 = this.rad,
                    _0x27b0a7 = 1.2 * _0x2ce159;
                _0x2ce159 *= 2.3;
                ctx.drawImage(_0x2dac8f, 0 + -0 * _0x27b0a7, _0x3430e5 + -1.7 * _0x2ce159, _0x27b0a7, _0x2ce159);
                ctx.restore();
            }
            if (_0x2dac8f = _0x2f22f9(this.getWing('pelican', 0x2, !0x1))) ctx.save(), _0x3430e5 = -(-0.2 + _0x54bfbb) * _0x55d748(-0x5a), _0x2ce159 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0x2d) + _0x3430e5), _0x3430e5 = this.rad, _0x27b0a7 = 1.2 * _0x2ce159, _0x2ce159 *= 2.3, ctx.drawImage(_0x2dac8f, 0 + -0x1 * _0x27b0a7, _0x3430e5 + -1.7 * _0x2ce159, _0x27b0a7, _0x2ce159), ctx.restore();
            ctx.restore();
        } else if (0x1 == this.specType) {
            ctx.save();
            _0x2ce159 = (_0x1534e0 - this.spawnTime) / 0x3e8;
            _0x54bfbb = 0x2 != _0x14fca5 ? _0x93972d(_0x2ce159, 0.9, 0.3, 0x2) : 0;
            if (_0x2dac8f = _0x2f22f9(this.getWing('pelican', 0xb, !0x1))) ctx.save(), _0x3430e5 = -(-0.2 + _0x54bfbb) * _0x55d748(0x2d), _0x2ce159 = 0.8 * this.rad, ctx.rotate(_0x55d748(0x2d) + _0x3430e5), _0x3430e5 = this.rad, _0x27b0a7 = 1.4 * _0x2ce159, _0x2ce159 *= 2.2, ctx.drawImage(_0x2dac8f, 0 + -0 * _0x27b0a7, _0x3430e5 + -1.7 * _0x2ce159, _0x27b0a7, _0x2ce159), ctx.restore();
            if (_0x2dac8f = _0x2f22f9(this.getWing('pelican', 0x15, !0x1))) ctx.save(), _0x3430e5 = -(-0.2 + _0x54bfbb) * _0x55d748(-0x2d), _0x2ce159 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0x2d) + _0x3430e5), _0x3430e5 = this.rad, _0x27b0a7 = 1.4 * _0x2ce159, _0x2ce159 *= 2.2, ctx.drawImage(_0x2dac8f, 0 + -0x1 * _0x27b0a7, _0x3430e5 + -1.7 * _0x2ce159, _0x27b0a7, _0x2ce159), ctx.restore();
            ctx.restore();
        }
        0 != this.specType && !this.flag_isGrabbed && (0x2 == this.specType && (_0x2dac8f = _0x2f22f9('skins/pelican/ability_pelican.png')) && (ctx.save(), ctx.rotate(_0x55d748(0xb4)), _0x2ce159 = 0.3 * this.rad, _0x54bfbb = 0x1 * this.rad, ctx.drawImage(_0x2dac8f, -_0x2ce159 * _0x1cecb5, -_0x2ce159 - _0x54bfbb * _0x1cecb5, 0x2 * _0x2ce159 * _0x1cecb5, 0x2 * _0x2ce159 * _0x1cecb5), ctx.restore()), _0x2dac8f = _0x2f22f9(this.getHead('pelican', !0x1))) && (ctx.save(), _0x2ce159 = 0x1 * this.rad, _0x54bfbb = 0.3 * -this.rad, ctx.drawImage(_0x2dac8f, -_0x2ce159 * _0x1cecb5, -_0x2ce159 + _0x54bfbb * _0x1cecb5, 0x2 * _0x2ce159 * _0x1cecb5, 0x2 * _0x2ce159 * _0x1cecb5), ctx.restore());
    }
};

function _0x3ecd2f() {
    _0x3ecd2f.superClass.call(this, o_player);
}
window.Pelican = _0x3ecd2f;
GameObjType.setCustomClassForGameObjType(_0x3ecd2f, o_player, _0x1cc507);

var dark_canvas = null;
var holerad = 400;
var blr = 50;
var darkness_alpha = 0;
var resetDarkness = true;
var lastVisiblityRad = 0;
const drawDark = function () {
    if (myPlayerID == 0) return;
    var myPlayer = gameObjsByID[myPlayerID];
    if (
      myPlayer != null &&
      myPlayer.hidingHoleVisibilityRad != undefined &&
      myPlayer.hidingHoleVisibilityRad != 0
    ) {
      if (myPlayer.hidingHoleVisibilityRad != lastVisiblityRad) {
        lastVisiblityRad = myPlayer.hidingHoleVisibilityRad;
        if (dark_canvas != null) {
          dark_canvas.remove();
          dark_canvas = null;
        }
      }
  
      if (dark_canvas == null) {
        var c_w = canvasW * 1.25;
        var c_h = canvasH * 1.25;
  
        dark_canvas = document.createElement("canvas");
  
        dark_canvas.width = c_w;
        dark_canvas.height = c_h;
  
        var ctx_ = dark_canvas.getContext("2d");
        ctx_.filter = "blur(" + blr + "px)";
        ctx_.globalAlpha = 1;
        ctx_.fillStyle = "black";
        ctx_.fillRect(0, 0, dark_canvas.width, dark_canvas.height);
        ctx_.globalCompositeOperation = "xor";
        ctx_.beginPath();
        ctx_.arc(
          c_w / 2,
          c_h / 2,
          lastVisiblityRad * 3 * interfS,
          0,
          2 * Math.PI
        );
        ctx_.fillStyle = "blue";
        ctx_.fill();
      }
    }
  
    if (dark_canvas != null) {
      // console.log("myPlayer.hidingHoleVisibilityRad: " + myPlayer.hidingHoleVisibilityRad)
      var ideal_darkness =
        myPlayer != null &&
        myPlayer.hidingHoleVisibilityRad &&
        myPlayer.hidingHoleVisibilityRad != 0
          ? 0.4
          : -0.01;

      darkness_alpha += (ideal_darkness - darkness_alpha) * 0.1;
      if (darkness_alpha > 0.01) {
        ctx.save();
        ctx.globalAlpha = darkness_alpha;
        ctx.drawImage(
          dark_canvas,
          canvasW / 2 - dark_canvas.width / 2,
          canvasH / 2 - dark_canvas.height / 2,
          dark_canvas.width,
          dark_canvas.height
        );
        ctx.restore();
      }
    }
};

_0x2a91c6 = Animal;
Frog.prototype = Object.create(_0x2a91c6.prototype);
Frog.prototype.constructor = Frog;
Frog.superClass = _0x2a91c6;
Frog.prototype.updateZ = function () {
    this.z = 0x3eb + this.rad;
};
Frog.prototype.getAbilityInfo = function (abils) {
    abils = {
        'abilName': 'Jump!'
    };
    abils.abilImg = '/skins/frog/frog.png';
    return abils;
};
Frog.prototype.getSkinName = function () {
    var _0x412aca = '';
    this.flag_usingAbility && !this.flag_underWater && (_0x412aca = '2');
    return 'frog/frog' + _0x412aca;
};
Frog.prototype.drawUnderSkinImg = function () {
    if (this.flag_usingAbility && !this.flag_underWater) {
        var _0x18367e = this.rad - this.outlineW,
            _0x243f22 = 0x1f4 / 0x154,
            _0x5efe0a = _0x2f22f9('./skins/frog/frogLegs.png');
        _0x5efe0a && ctx.drawImage(_0x5efe0a, -_0x18367e * _0x243f22, (-_0x18367e - _0x18367e) * _0x243f22, 0x2 * _0x18367e * _0x243f22, 0x2 * _0x18367e * _0x243f22);
    }
};
Frog.prototype.drawWhenUnderwater = function () {
    ctx.save();
    ctx.globalAlpha = 0.2;
    ctx.scale(0x1, 1.5);
    _0x110b78(0, 0, 0.5 * this.rad, '#598b30');
    _0x110b78(0, -0.6 * this.rad, 0.3 * this.rad, '#64a034');
    ctx.restore();
};

function Frog() {
    Frog.superClass.call(this, o_player);
}
window.Frog = Frog;
GameObjType.setCustomClassForGameObjType(Frog, o_player, _0x5def9d);
_0x5a621d = _0x352d8f;
_0x2a91c6 = Animal;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x5a621d.prototype.isAttacking = !0x1;
_0x5a621d.prototype.getSkinName = function () {
    return this.isAttacking == 0 ? 'duck/' + this.animalSpecies + "/duck" : "duck/2/duck1";
};
_0x5a621d.prototype.drawSkinCustomization = function () {
    var _0x3b83f3 = 0x1f4 / 0x154;
    if (this.isAttacking && 0x2 == this.animalSpecies) {
        ctx.save();
     _0x206396 = _0x93972d((_0x1534e0 - this.spawnTime) / 0x3e8, 0.5, 0.3, 0x2),
            _0xb452e0 = _0x2f22f9('skins/duck/2/duck_wing1.png');
        if (_0xb452e0) {
            ctx.save();
            var _0x5b54c0 = -(-0.2 + _0x206396) * _0x55d748(0xf),
                _0x56f932 = 0.8 * this.rad;
            ctx.rotate(_0x55d748(0xf) + _0x5b54c0);
            var _0x5b54c0 = this.rad,
                _0x572e13 = 1.4 * _0x56f932,
                _0x56f932 = 2.2 * _0x56f932;
            ctx.drawImage(_0xb452e0, 0 + -0 * _0x572e13, _0x5b54c0 + -1.5 * _0x56f932, _0x572e13, _0x56f932);
            ctx.restore();
        }
        if (_0xb452e0 = _0x2f22f9('skins/duck/2/duck_wing2.png')) ctx.save(), _0x5b54c0 = -(-0.2 + _0x206396) * _0x55d748(-0xf), _0x56f932 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0xf) + _0x5b54c0), _0x5b54c0 = this.rad, _0x572e13 = 1.4 * _0x56f932, _0x56f932 *= 2.2, ctx.drawImage(_0xb452e0, 0 + -0x1 * _0x572e13, _0x5b54c0 + -1.5 * _0x56f932, _0x572e13, _0x56f932), ctx.restore();
        if (_0x206396 = _0x2f22f9('skins/duck/2/head_duck.png')) ctx.save(), _0x56f932 = 0x1 * this.rad, ctx.drawImage(_0x206396, -_0x56f932 * _0x3b83f3, -_0x56f932 + 0.1 * -this.rad * _0x3b83f3, 0x2 * _0x56f932 * _0x3b83f3, 0x2 * _0x56f932 * _0x3b83f3), ctx.restore();
        ctx.restore();
    }

};
_0x352d8f.prototype.readCustomData_onNewlyVisible = function (_0xb793b4) {
    _0x352d8f.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0xb793b4);
    this.isAttacking = _0xb793b4.readUInt8();
};
_0x352d8f.prototype.readCustomData_onUpdate = function (_0x4ed442) {
    _0x352d8f.superClass.prototype.readCustomData_onUpdate.call(this, _0x4ed442);
    this.isAttacking = _0x4ed442.readUInt8();
};

function _0x352d8f() {
    _0x2a91c6.call(this, o_player);
}
window.Duck = _0x352d8f;
GameObjType.setCustomClassForGameObjType(_0x352d8f, o_player, _0x4e163c);
_0x2a91c6 = Animal;
_0x28ffee.prototype = Object.create(_0x2a91c6.prototype);
_0x28ffee.prototype.constructor = _0x28ffee;
_0x28ffee.superClass = _0x2a91c6;
_0x28ffee.prototype.getSkinName = function () {
    return "duck/" + this.animalSpecies + "/duck"
};

function _0x28ffee() {
    _0x28ffee.superClass.call(this, o_player);
}
window.Duckling = _0x28ffee;
GameObjType.setCustomClassForGameObjType(_0x28ffee, o_player, _0xa8f04a);
_0x2a91c6 = Animal;
BlackDragon.prototype = Object.create(_0x2a91c6.prototype);
BlackDragon.prototype.constructor = BlackDragon;
BlackDragon.superClass = _0x2a91c6;
BlackDragon.prototype.updateZ = function () {
    this.z = 0x2710 + this.rad;
};
BlackDragon.prototype.canUseTailslap = !0x1;
BlackDragon.prototype.tailState = 0;
BlackDragon.prototype.getSkinName = function () {
    return 'volcano/blackdragon/' + this.animalSpecies + '/blackdragon';
};
BlackDragon.prototype.readCustomData_onNewlyVisible = function (_0x8e28a7) {
    BlackDragon.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x8e28a7);
    this.readInfo(_0x8e28a7);
};
BlackDragon.prototype.readInfo = function (_0x1c6f8b) {
    this.lava = _0x1c6f8b.readUInt8();
};
BlackDragon.prototype.readCustomData_onUpdate = function (_0x284118) {
    BlackDragon.superClass.prototype.readCustomData_onUpdate.call(this, _0x284118);
    this.readInfo(_0x284118);
};
BlackDragon.prototype.leftWingAnim = null;
BlackDragon.prototype.drawSkinCustomization = function () {
    if (!this.flag_underWater) {
        var _0x35c1b0 = 0x1f4 / 0x154,
            _0x4460cd = this.lava;
        if (0x32 > _0x4460cd) {
            var _0xcf2fe0 = _0x4460cd / 0x32;
            if (_0x4460cd = _0x2f22f9('skins/volcano/blackdragon/' + this.animalSpecies + '/wings.png')) ctx.save(), ctx.globalAlpha = 0x1 - _0xcf2fe0, _0xcf2fe0 = this.rad - this.outlineW, ctx.drawImage(_0x4460cd, -_0xcf2fe0 * _0x35c1b0, -_0xcf2fe0 * _0x35c1b0, 0x2 * _0xcf2fe0 * _0x35c1b0, 0x2 * _0xcf2fe0 * _0x35c1b0), ctx.restore();
        }
    }
};
BlackDragon.prototype.animalInfo = function () {
    var _0x30ccef = {};
    switch (this.animalSpecies) {
    case 0:
        _0x30ccef.aniName = 'Black Dragon';
        break;
    case 1:
        _0x30ccef.aniName = 'Golden Black Dragon';
        break;
    case 2:
        _0x30ccef.aniName = 'Azure Bringer';
        break;
    case 3:
        _0x30ccef.aniName = 'Lava Strider';
        break;
    case 4:
        _0x30ccef.aniName = 'The Lord Of Ice';
        break;
    case 7:
        _0x30ccef.aniName = 'The Ruby Black Dragon';
        break;
    case 15:
        _0x30ccef.aniName = 'Rizurrar';
        break;
    }
    _0x30ccef.aniCol = '#FF9000';
    _0x30ccef.skinName = this.getSkinName();
    _0x30ccef.upgradeText = 'UPGRADED to ' + _0x30ccef.aniName;
    _0x30ccef.upgradeText += `!\n
 Black dragons drink lava instead of water!\nBlack dragons only heal on healing stones/lava!`;
    _0x30ccef.aniCol = 'black';
    return _0x30ccef;
};
BlackDragon.prototype.getAbilityInfo = function (_0x5a4ad2) {
    _0x5a4ad2 = {
        'abilName': 'Multi Fireballs'
    };
    var _0x328a24 = 0;
    switch (this.animalSpecies) {
    case 0:
        _0x328a24 = 0;
        break;
    case 1:
        _0x328a24 = 1;
        break;
    case 2:
        _0x328a24 = 2;
        break;
    case 3:
        _0x328a24 = 3;
        break;
    }
    _0x5a4ad2.speciesType = _0x328a24;
    _0x5a4ad2.abilImg = 'img/fire/' + _0x328a24 + '/0.png';
    return _0x5a4ad2;
};

function BlackDragon() {
    this.lava = 0;
    BlackDragon.superClass.call(this, o_player);
}
window.BlackDragon = BlackDragon;
GameObjType.setCustomClassForGameObjType(BlackDragon, o_player, _0x1da4d1);
_0x2a91c6 = Animal;
HoneyBee.prototype = Object.create(_0x2a91c6.prototype);
HoneyBee.prototype.constructor = HoneyBee;
HoneyBee.superClass = _0x2a91c6;
HoneyBee.prototype.animalInfo = function () {
    var a = {};
    switch (this.animalSpecies) {
    case 0:
        a.aniName = 'Bee!';
        break;
    }
    a.skinName = 'honeybee/honeybee';
    a.aniDesc = '';
    a.upgradeText = 'UPGRADED to ' + a.aniName + `\n Sting animals!`;
    a.aniCol = '#945A99';
    return a;
};
HoneyBee.prototype.getAbilityInfo = function (_0x4ec516) {
    _0x4ec516 = {
        'abilName': 'Sting!'
    };
    _0x4ec516.abilImg = '/skins/honeybee/honeybeee.png';
    return _0x4ec516;
};
HoneyBee.prototype.getSkinName = function () {
    return '/honeybee/honeybee' + (0 == this.specType || void 0 == this.specType ? '' : this.specType);
};
HoneyBee.prototype.drawSkinCustomization = function () {
    ctx.save();
    var _0x35b257 = (_0x1534e0 - this.spawnTime) / 0x3e8,
        _0x580495 = 0x2 != _0x14fca5 ? _0x93972d(_0x35b257, 0.2, 0.3, 0x2) : 0,
        _0x35b257 = 0x2 != _0x14fca5 ? _0x93972d(_0x35b257, 0.2, 0.3, 0x2) : 0,
        _0x5c06b4 = 0.6 * this.rad,
        _0x1de130 = _0x2f22f9('skins/honeybee/honeybee_wing2.png');
    if (_0x1de130) {
        ctx.save();
        var _0x434e8b = -(-0x2 + _0x35b257) * _0x55d748(-0x19);
        ctx.globalAlpha = 0.6;
        ctx.rotate(_0x55d748(-0xa) + _0x434e8b);
        var _0x434e8b = this.rad,
            _0x10f1b9 = 1.4 * _0x5c06b4,
            _0x4c186a = 2.3 * _0x5c06b4;
        ctx.drawImage(_0x1de130, 0 + -0.5 * _0x10f1b9, _0x434e8b + -1.6 * _0x4c186a, _0x10f1b9, _0x4c186a);
        ctx.restore();
    }
    if (_0x1de130 = _0x2f22f9('skins/honeybee/honeybee_wing1.png')) ctx.save(), _0x434e8b = -(-0x2 + _0x35b257) * _0x55d748(0x19), ctx.globalAlpha = 0.6, ctx.rotate(_0x55d748(0xa) + _0x434e8b), _0x434e8b = this.rad, _0x10f1b9 = 2.3 * _0x5c06b4 * 0.7, _0x4c186a = 2.3 * _0x5c06b4, ctx.drawImage(_0x1de130, 0 + -0.5 * _0x10f1b9, _0x434e8b + -1.6 * _0x4c186a, _0x10f1b9, _0x4c186a), ctx.restore();
    if (_0x1de130 = _0x2f22f9('skins/honeybee/honeybee_wing1.png')) ctx.save(), _0x434e8b = -(-0x2 + _0x580495) * _0x55d748(0x1e), ctx.globalAlpha = 0.5, ctx.rotate(_0x55d748(0x14) + _0x434e8b), _0x434e8b = this.rad, _0x10f1b9 = 1.4 * _0x5c06b4, _0x4c186a = 2.3 * _0x5c06b4, ctx.drawImage(_0x1de130, 0 + -0.5 * _0x10f1b9, _0x434e8b + -1.7 * _0x4c186a, _0x10f1b9, _0x4c186a), ctx.restore();
    if (_0x1de130 = _0x2f22f9('skins/honeybee/honeybee_wing2.png')) ctx.save(), _0x434e8b = -(-0x2 + _0x580495) * _0x55d748(-0x1e), ctx.globalAlpha = 0.5, ctx.rotate(_0x55d748(-0x14) + _0x434e8b), _0x434e8b = this.rad, _0x10f1b9 = 1.4 * _0x5c06b4, _0x4c186a = 2.3 * _0x5c06b4, ctx.drawImage(_0x1de130, 0 + -0.5 * _0x10f1b9, _0x434e8b + -1.7 * _0x4c186a, _0x10f1b9, _0x4c186a), ctx.restore();
    ctx.restore();
};

function HoneyBee() {
    HoneyBee.superClass.call(this, o_player);
}
window.Honeybee = HoneyBee;
GameObjType.setCustomClassForGameObjType(HoneyBee, o_player, _0x4bc18f);
_0x2a91c6 = Animal;
_0x5c716a.prototype = Object.create(_0x2a91c6.prototype);
_0x5c716a.prototype.constructor = _0x5c716a;
_0x5c716a.superClass = _0x2a91c6;
_0x5c716a.prototype.animalInfo = function () {
    var _0x1a92ba = {};
    switch (this.animalSpecies) {
    case 0:
        _0x1a92ba.aniName = 'The Phoenix';
        break;
    case 0x1:
        _0x1a92ba.aniName = 'Golden Phoenix';
        break;
    case 0x2:
        _0x1a92ba.aniName = 'Alpha Phoenix';
    }
    _0x1a92ba.aniCol = '#FF9000';
    _0x1a92ba.skinName = '/volcano/phoenix/' + this.animalSpecies + '/phoenix';
    _0x1a92ba.upgradeText = 'UPGRADED to ' + _0x1a92ba.aniName + `!\nPhoenix shoot Firetorandos to burn their prey alive!`;
    return _0x1a92ba;
};
_0x5c716a.prototype.getAbilityInfo = function (_0x5185da) {
    _0x5185da = {
        'abilName': 'Fire Tornado!'
    };
    _0x5185da.abilImg = 'skins/volcano/phoenix/' + this.animalSpecies + '/firetornado.png';
    return _0x5185da;
};
_0x5c716a.prototype.getSkinName = function () {
    return '/volcano/phoenix/' + this.animalSpecies + '/phoenix' + (0 == this.specType || void 0 == this.specType ? '' : this.specType);
};
_0x5c716a.prototype.getSkinPart = function (_0x2a456d) {
    return _0x2f22f9('skins/volcano/phoenix/' + this.animalSpecies + '/' + _0x2a456d + '.png');
};
_0x5c716a.prototype.drawSkinImg = function () {
    if (0x2 != _0x14fca5) {
        var _0x26c52a = 0x1f4 / 0x154,
            _0x1ca546 = this.rad - this.outlineW,
            _0x3a57e6 = this.getSkinPart('phoenix_body'),
            _0x3a28c1 = this.getSkinPart('phoenix_head'),
            _0x5a7fdf = Math.trunc(_0x1534e0 / 0xa6) % 0x6,
            _0x187672 = this.getSkinPart('/tail_mid/tail_mid_' + _0x5a7fdf);
        _0x187672 && ctx.drawImage(_0x187672, -_0x1ca546 * _0x26c52a, -_0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a);
        _0x5a7fdf = Math.trunc(_0x1534e0 / 0xa6) % 0x6;
        _0x187672 = Math.trunc(_0x1534e0 / 0xfa) % 0x6;
        _0x5a7fdf = this.getSkinPart('/tail/tail_' + _0x5a7fdf);
        _0x187672 = this.getSkinPart('tail_flipped/tail_' + _0x187672);
        _0x5a7fdf && ctx.drawImage(_0x5a7fdf, -_0x1ca546 * _0x26c52a, -_0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a);
        _0x187672 && ctx.drawImage(_0x187672, -_0x1ca546 * _0x26c52a, -_0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a);
        _0x3a57e6 && ctx.drawImage(_0x3a57e6, -_0x1ca546 * _0x26c52a, -_0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a);
        var _0x187672 = Math.trunc(_0x1534e0 / 0x7d) % 0x8,
            _0x3a57e6 = Math.trunc(_0x1534e0 / 0x96) % 0x8,
            _0x5a7fdf = this.getSkinPart('wing_flame_orange/wing_flame_orange_' + _0x187672),
            _0x39885b = this.getSkinPart('wing_flame_yellow/wing_flame_yellow_' + _0x3a57e6);
        _0x5a7fdf && ctx.drawImage(_0x5a7fdf, -_0x1ca546 * _0x26c52a, -_0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a);
        _0x39885b && ctx.drawImage(_0x39885b, -_0x1ca546 * _0x26c52a, -_0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a);
        _0x187672 = this.getSkinPart('wing_flame_orange_flipped/wing_flame_orange_' + _0x187672);
        _0x3a57e6 = this.getSkinPart('wing_flame_yellow_flipped/wing_flame_yellow_' + _0x3a57e6);
        _0x187672 && ctx.drawImage(_0x187672, -_0x1ca546 * _0x26c52a, -_0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a);
        _0x3a57e6 && ctx.drawImage(_0x3a57e6, -_0x1ca546 * _0x26c52a, -_0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a);
        _0x3a28c1 && ctx.drawImage(_0x3a28c1, -_0x1ca546 * _0x26c52a, -_0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a, 0x2 * _0x1ca546 * _0x26c52a);
    } else _0x5c716a.superClass.prototype.drawSkinImg.call(this);
};
_0x5c716a.prototype.drawWhenUnderwater = function () {
    var _0x1f4e98 = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
    ctx.globalAlpha = 0.3;
    ctx.fillStyle = '#f9d43b';
    var _0x3f9c4d = this.flag_underWater ? 0.15 * this.rad : 0.1 * this.rad;
    ctx.beginPath();
    ctx.arc(-0.35 * this.rad, -0.33 * this.rad, Math.max(0, _0x3f9c4d + _0x1f4e98), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(0.35 * this.rad, -0.32 * this.rad, Math.max(0, _0x3f9c4d - _0x1f4e98), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(0.35 * this.rad, 0.36 * this.rad, Math.max(0, _0x3f9c4d + _0x1f4e98), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(-0.35 * this.rad, 0.35 * this.rad, Math.max(0, _0x3f9c4d - _0x1f4e98), 0, 0x2 * Math.PI);
    ctx.fill();
};

function _0x5c716a() {
    _0x5c716a.superClass.call(this, o_player);
}
window.Phoenix = _0x5c716a;
GameObjType.setCustomClassForGameObjType(_0x5c716a, o_player, _0x3afcf3);
_0x2a91c6 = Animal;
_0x16c9a3.prototype = Object.create(_0x2a91c6.prototype);
_0x16c9a3.prototype.constructor = _0x16c9a3;
_0x16c9a3.superClass = _0x2a91c6;
_0x16c9a3.prototype.animalInfo = function () {
    var _0x3632e3 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x3632e3.aniName = 'Pigeon';
        break;
    case 0x1:
        _0x3632e3.aniName = 'Rare White Dove', _0x3632e3.upgradeText += `\n(Doves fly faster!)`;
    }
    _0x3632e3.aniCol = '#FF9000';
    _0x3632e3.skinName = this.getSpeciesPath('pigeon') + '/pigeon';
    _0x3632e3.upgradeText = 'UPGRADED to ' + _0x3632e3.aniName + `!\nHold W to fly around. `;
    return _0x3632e3;
};
_0x16c9a3.prototype.getSkinName = function () {
    var _0x110871 = this.getSpeciesPath('pigeon') + '/pigeon';
    return _0x110871 += 0 == this.specType ? '' : this.specType;
};
_0x16c9a3.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        var _0x140a4e = 0x1f4 / 0x154;
        if (this.flag_flying && !this.flag_isGrabbed) {
            ctx.save();
            var _0x208048 = (_0x1534e0 - this.spawnTime) / 0x3e8,
                _0x208048 = 0x2 != _0x14fca5 ? _0x93972d(_0x208048, 0.5, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle,
                _0x2c858c = _0x2f22f9(this.getWing('pigeon', 0x1, !0));
            if (_0x2c858c) {
                ctx.save();
                var _0x160786 = -(-0.2 + _0x208048) * _0x55d748(0x5a),
                    _0x399e87 = 0.8 * this.rad;
                ctx.rotate(_0x55d748(0x2d) + _0x160786);
                var _0x160786 = this.rad,
                    _0x68f2b5 = 1.24 * _0x399e87,
                    _0x399e87 = 2.5 * _0x399e87;
                ctx.drawImage(_0x2c858c, 0 + -0.2 * _0x68f2b5, _0x160786 + -1.7 * _0x399e87, _0x68f2b5, _0x399e87);
                ctx.restore();
            }
            if (_0x2c858c = _0x2f22f9(this.getWing('pigeon', 0x2, !0))) ctx.save(), _0x160786 = -(-0.2 + _0x208048) * _0x55d748(-0x5a), _0x399e87 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0x2d) + _0x160786), _0x160786 = this.rad, _0x68f2b5 = 1.24 * _0x399e87, _0x399e87 *= 2.5, ctx.drawImage(_0x2c858c, 0 + -0.8 * _0x68f2b5, _0x160786 + -1.7 * _0x399e87, _0x68f2b5, _0x399e87), ctx.restore();
            ctx.restore();
        }
        0 != this.specType && void 0 != this.specType && (_0x208048 = _0x2f22f9(this.getHead('pigeon', !0))) && (ctx.save(), _0x399e87 = this.rad, ctx.drawImage(_0x208048, -_0x399e87 * _0x140a4e, (-_0x399e87 + 0.1 * _0x399e87) * _0x140a4e, 0x2 * _0x399e87 * _0x140a4e, 0x2 * _0x399e87 * _0x140a4e), ctx.restore());
    }
};

function _0x16c9a3() {
    _0x16c9a3.superClass.call(this, o_player);
}
window.Pigeon = _0x16c9a3;
GameObjType.setCustomClassForGameObjType(_0x16c9a3, o_player, _0x132e3a);

//


var WhiteGiraffe = WhiteGiraffe;
var superClass = Animal;
WhiteGiraffe.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
WhiteGiraffe.prototype.constructor = WhiteGiraffe;
WhiteGiraffe.superClass = superClass; //'class' var
//var hasSkinDrawn = false;
//WhiteGiraffe.prototype.bodySpots = [];
//set custom skin name

WhiteGiraffe.prototype.objSkinSpotsCanvas = null;
WhiteGiraffe.prototype.getSkinName = function () {
    var skin = this.animalInfo().skinName;
    if (this.specType > 0)
        skin += "" + this.specType;
    if (this.id == 0 && (this.animalSpecies == 1))
        skin += "_family";
    return skin;
}

WhiteGiraffe.prototype.animalInfo = function () {
    var infoO = {};
    switch (this.animalSpecies) {
        case 0:
            infoO.aniName = "White Giraffe";
            break;
        case 1:
            infoO.aniName = "Giraffe Family";
            break;
    }
    infoO.aniDesc = "";
    infoO.upgradeText =
        "UPGRADED to " + infoO.aniName + "!\nWhite Giraffe are very aggressive and have huge legs and stomp anyone in their way!";
    infoO.aniCol = "#E9BD23";
    infoO.skinName = "forest/whitegiraffe/" + this.animalSpecies + "/giraffe";
    return infoO;
}
WhiteGiraffe.prototype.getAbilityInfo = function (abilT) {
    var ability = {};
    ability.abilName = "Stomp!";
    ability.abilImg = "abilities/Stomp.svg";
    ability.skinThemeID = this.skinThemeID;
    ability.mopeSeasonID = this.mopeSeasonID;
    return ability;
};



function WhiteGiraffe() {
    WhiteGiraffe.superClass.call(this, 2);

}



window.WhiteGiraffe = WhiteGiraffe;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(WhiteGiraffe, 2, a_whiteGiraffe);

//

_0x2a91c6 = Animal;
_0x26d160.prototype = Object.create(_0x2a91c6.prototype);
_0x26d160.prototype.constructor = _0x26d160;
_0x26d160.superClass = _0x2a91c6;
_0x26d160.prototype.getWing = function (_0x149f00, _0x1f6099, _0x5817d1) {
    _0x5817d1 = 'skins/' + (0x5 == this.animalSpecies || 0x6 == this.animalSpecies ? this.getSpeciesPath(_0x149f00) : _0x149f00);
    switch (_0x1f6099) {
    case 0x1:
        return _0x5817d1 + '/' + _0x149f00 + '_wing1.png';
    case 0x2:
        return _0x5817d1 + '/' + _0x149f00 + '_wing2.png';
    }
};
_0x26d160.prototype.animalInfo = function () {
    var _0x39638d = {};
    _0x39638d.aniName = 'Toucan';
    switch (this.animalSpecies) {
        case 0:
            _0x39638d.aniName = "Toco Toucan";
          break;
        case 1:
            _0x39638d.aniName = "Choco Toucan";
          break;
        case 2:
            _0x39638d.aniName = "Keel-Billed Toucan";
          break;
        case 3:
            _0x39638d.aniName = "Fiery Toucan";
          break;
        case 4:
          switch (this.animalSubSpecies) {
            case 0:
                _0x39638d.aniName = "Lava Toucan";
              break;
            case 1:
                _0x39638d.aniName = "Ice Toucan";
              break;
            case 2:
                _0x39638d.aniName = "Aqua Toucan";
              break;
          }
          break;
        case 5:
            _0x39638d.aniName = "Pakistan Toucan";
          break;
        case 6:
            _0x39638d.aniName = "Prisma Toucan";
          break;
        case 100:
            _0x39638d.aniName = "The Dapper";
          break;
        case 101:
            _0x39638d.aniName = "Vegetoucan";
          break;
        case 200:
            _0x39638d.aniName = "Ice Toucan";
          break;
      }
    _0x39638d.upgradeText = 'UPGRADED to ' + _0x39638d.aniName + `!\nHold right click (or W) to fly!\n(HINT: Start flying from a fruit tree or bush to throw fruit upon landing!)`;
    _0x39638d.aniCol = '#FF9000';
    _0x39638d.skinName = this.getSpeciesPath('toucan') + '/toucan';
    return _0x39638d;
};
_0x26d160.prototype.getSkinName = function () {
    return this.getSpeciesPath('toucan') + '/toucan' + (0 == this.specType ? '' : this.specType);
};
_0x26d160.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        var _0x4de2df = 0x1f4 / 0x154;
        if (this.flag_flying && !this.flag_isGrabbed) {
            ctx.save();
            var _0x3b897e = (_0x1534e0 - this.spawnTime) / 0x3e8,
                _0x3b897e = 0x2 != _0x14fca5 ? _0x93972d(_0x3b897e, 0.5, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle,
                _0x15c7f0 = _0x2f22f9(this.getWing('toucan', 0x1, !0));
            if (_0x15c7f0) {
                ctx.save();
                var _0xa6649b = -(-0.2 + _0x3b897e) * _0x55d748(0x5a),
                    _0x1de437 = 0.8 * this.rad;
                ctx.rotate(_0x55d748(0x2d) + _0xa6649b);
                var _0xa6649b = this.rad,
                    _0x4cbd9f = 1.24 * _0x1de437,
                    _0x1de437 = 2.5 * _0x1de437;
                ctx.drawImage(_0x15c7f0, 0 + -0.2 * _0x4cbd9f, _0xa6649b + -1.7 * _0x1de437, _0x4cbd9f, _0x1de437);
                ctx.restore();
            }
            if (_0x15c7f0 = _0x2f22f9(this.getWing('toucan', 0x2, !0))) ctx.save(), _0xa6649b = -(-0.2 + _0x3b897e) * _0x55d748(-0x5a), _0x1de437 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0x2d) + _0xa6649b), _0xa6649b = this.rad, _0x4cbd9f = 1.24 * _0x1de437, _0x1de437 *= 2.5, ctx.drawImage(_0x15c7f0, 0 + -0.8 * _0x4cbd9f, _0xa6649b + -1.7 * _0x1de437, _0x4cbd9f, _0x1de437), ctx.restore();
            ctx.restore();
        }
        0 != this.specType && void 0 != this.specType && (_0x3b897e = _0x2f22f9(this.getHead('toucan', !0))) && (ctx.save(), _0x1de437 = this.rad, ctx.drawImage(_0x3b897e, -_0x1de437 * _0x4de2df, (-_0x1de437 + 0.1 * _0x1de437) * _0x4de2df, 0x2 * _0x1de437 * _0x4de2df, 0x2 * _0x1de437 * _0x4de2df), ctx.restore());
    }
};

function _0x26d160() {
    _0x26d160.superClass.call(this, o_player);
}
window.Toucan = _0x26d160;
GameObjType.setCustomClassForGameObjType(_0x26d160, o_player, _0x510be1);
_0x2a91c6 = Animal;
_0x53cb6a.prototype = Object.create(_0x2a91c6.prototype);
_0x53cb6a.prototype.constructor = _0x53cb6a;
_0x53cb6a.superClass = _0x2a91c6;
_0x53cb6a.prototype.animalInfo = function () {
    var _0x150a69 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x150a69.aniName = 'Tiger';
        break;
    case 0x1:
        _0x150a69.aniName = 'rare White Tiger';
    }
    _0x150a69.aniName = 'Tiger';
    _0x150a69.aniDesc = '';
    _0x150a69.upgradeText = 'UPGRADED to ' + _0x150a69.aniName + `!\n Tigers can launch an ambush attack (HOLD W to grow a bush)!`;
    _0x150a69.aniCol = '#FF9000';
    _0x150a69.skinName = 'land/tiger/' + this.animalSpecies + '/tiger';
    return _0x150a69;
};
_0x53cb6a.prototype.getSkinName = function () {
    return 'land/tiger/' + this.animalSpecies + '/tiger' + (0 == this.specType ? '' : this.specType);
};

function _0x53cb6a() {
    _0x53cb6a.superClass.call(this, o_player);
}
window.Tiger = _0x53cb6a;
GameObjType.setCustomClassForGameObjType(_0x53cb6a, o_player, _0x3223f8);
// _0x2a91c6 = Animal;
// _0x453aee.prototype = Object.create(_0x2a91c6.prototype);
// _0x453aee.prototype.constructor = _0x453aee;
// _0x453aee.superClass = _0x2a91c6;
// _0x453aee.prototype.getSkinName = function () {
//     return 'skins/cobra' + (this.flag_usingAbility ? '2' : '');
// };
// _0x453aee.prototype.drawUnderSkinImg = function () {
//     if (!this.flag_usingAbility) {
//         var _0x36b7dd = this.rad - this.outlineW,
//             _0x5071ea = 0x1f4 / 0x154,
//             _0x57327a = _0x2f22f9('skins/boa/tongue.png'),
//             _0x416653 = (_0x1534e0 - this.spawnTime) / 0x3e8,
//             _0x416653 = 0x2 == _0x14fca5 ? 0 : _0x93972d(_0x416653, 0.5, 0x5, 0.5),
//             _0x24d8b4 = 0x2 == _0x14fca5 ? 0 : 0x5;
//         _0x57327a && ctx.drawImage(_0x57327a, -_0x36b7dd * _0x5071ea, -(_0x36b7dd + _0x24d8b4 + _0x416653) * _0x5071ea, 0x2 * _0x36b7dd * _0x5071ea, 0x2 * _0x36b7dd * _0x5071ea);
//     }
// };

// function _0x453aee() {
//     _0x453aee.superClass.call(this, o_player);
// }
// window.Cobra = _0x453aee;
// GameObjType.setCustomClassForGameObjType(_0x453aee, o_player, _0x25e140);


var superClass = Animal;
Cobra.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
Cobra.prototype.constructor = Cobra;
Cobra.superClass = superClass; //'class' var
Cobra.prototype.onAbility;


//example of custom Z
/*Cobra.prototype.updateZ = function() {
    this.z = 1002;
}*/




Cobra.prototype.animalInfo = function () {
  var infoO = {};

  switch (this.animalSpecies) {
    case 0:
      infoO.aniName = "Cobra";
      break;
    case 100:
      infoO.aniName = "Wyrmous";
      break;
    case 200:
      infoO.aniName = "Celestial Cobra";
      break;

  }
  infoO.skinName = "land/cobra/" + this.animalSpecies + "/cobra";



  infoO.aniDesc = "";
  infoO.upgradeText =
    "UPGRADED to " +
    infoO.aniName +
    "!\n Hold W to Spit venom, and poison animals with your bite!";
  infoO.aniCol = "black";

  return infoO;
};


Cobra.prototype.getAbilityInfo = function (abilT) {
  var ability = {};
  ability.abilName = "Venom Spit";


  ability.abilImg = "skins/land/cobra/cobra2.png";
  ability.skinThemeID = this.skinThemeID;
  ability.mopeSeasonID = this.mopeSeasonID;
  return ability;
};

//set custom skin name
Cobra.prototype.getSkinName = function () {

  var skin = "land/cobra/" + this.animalSpecies + "/cobra";
  skin += (this.onAbility ? "2" : "");


  return skin;
};

Cobra.prototype.drawUnderSkinImg = function () {
  if (this.onAbility)
    return;
  var rad = this.rad - this.outlineW;
  var iScale = 500 / 340.0;
  var skin = "skins/land/cobra/" + this.animalSpecies + "/tongue.png";

  var tongue = this.getSkinImageObj(skin);

  var tSinceSpawn = (_0x1534e0 - this.spawnTime) / 1000.0;
  var frame = (_0x14fca5 == 2) ? 0 : _0x93972d(tSinceSpawn, 0.5, 5, 0.5);
  var yOffset = (_0x14fca5 == 2) ? 0 : 5;
  if (tongue) {
    ctx.drawImage(
      tongue,
      -rad * iScale,
      -((rad + yOffset) + frame) * iScale,
      2 * rad * iScale,
      2 * rad * iScale
    );
  }
};
Cobra.prototype.readCustomData_onNewlyVisible = function (_0x1a0dbd) {
    Cobra.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1a0dbd);
    this.readInfo(_0x1a0dbd);
};
Cobra.prototype.readCustomData_onUpdate = function (_0x1a7fe9) {
    Cobra.superClass.prototype.readCustomData_onUpdate.call(this, _0x1a7fe9);
    this.readInfo(_0x1a7fe9);
};
Cobra.prototype.readInfo = function (_0x1963f7) {
    this.onAbility = _0x1963f7.readUInt8()
};
function Cobra() {
  Cobra.superClass.call(this, 2);
}
window.Cobra = Cobra;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(
  Cobra,
  2,
  a_cobra
);

_0x2a91c6 = GameObj;
_0x412f4c.prototype = Object.create(_0x2a91c6.prototype);
_0x412f4c.prototype.constructor = _0x412f4c;
_0x412f4c.superClass = _0x2a91c6;
_0x412f4c.prototype.updateZ = function () {
    this.z = 0x3ed;
};
_0x412f4c.prototype.customDraw = function (_0x2a50ed) {
    if (0x2 != _0x14fca5) {
        _0x2a50ed = 0.15;
        var _0x2331b7 = 0.5 * (0.8 - _0x2a50ed);
        _0x2a50ed = _0x2a50ed + _0x2331b7 + _0x2331b7 * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8));
        ctx.save();
        ctx.globalAlpha *= _0x2a50ed;
        ctx.restore();
        _0x2a50ed = 0.85;
        _0x2331b7 = 0.5 * (0x1 - _0x2a50ed);
        _0x2a50ed = _0x2a50ed + _0x2331b7 + _0x2331b7 * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8));
        if (_0x2331b7 = _0x2f22f9('img/fire/' + this.speciesType + '/' + Math.trunc(_0x1534e0 / 0x78) % 0x5 + '.png')) {
            var _0x478746 = 0,
                _0xd113ed = 0.4 * this.rad,
                _0x31ca54 = 0x2 * this.rad * (0x2 + 0x2 * _0x2a50ed) / 0x3,
                _0x1fb2f0 = 0x2 * this.rad * _0x2a50ed,
                _0x598f86 = 0.5,
                _0x4794ae = 0.95;
            ctx.save();
            ctx.globalAlpha = ctx.globalAlpha * this.onFireEffA * _0x2a50ed;
            ctx.rotate(this.angle);
            ctx.drawImage(_0x2331b7, _0x478746 + _0x31ca54 * -_0x598f86, _0xd113ed + _0x1fb2f0 * -_0x4794ae, _0x31ca54, _0x1fb2f0);
            ctx.restore();
        }
    } else if (_0x2a50ed = 0.85, _0x2331b7 = 0.5 * (0x1 - _0x2a50ed), _0x2a50ed = _0x2a50ed + _0x2331b7 + _0x2331b7 * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8)), _0x2331b7 = _0x2f22f9('img/fire/' + this.speciesType + '/0.png')) _0x478746 = 0, _0xd113ed = 0.4 * this.rad, _0x31ca54 = 0x2 * this.rad * (0x2 + 0x2 * _0x2a50ed) / 0x3, _0x1fb2f0 = 0x2 * this.rad * _0x2a50ed, _0x598f86 = 0.5, _0x4794ae = 0.95, ctx.save(), ctx.rotate(this.angle), ctx.drawImage(_0x2331b7, _0x478746 + _0x31ca54 * -_0x598f86, _0xd113ed + _0x1fb2f0 * -_0x4794ae, _0x31ca54, _0x1fb2f0), ctx.restore();
};
_0x412f4c.prototype.readCustomData_onNewlyVisible = function (_0x23aa17) {
    _0x412f4c.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x23aa17);
    this.speciesType = _0x23aa17.readUInt8();
};

function _0x412f4c() {
    _0x412f4c.superClass.call(this, o_fire);
    this.webTransparency = 0;
    this.drawEffectScale_Slow = this.doesDrawEffectScale = !0;
}
window.Fire = _0x412f4c;
GameObjType.setCustomClassForGameObjType(_0x412f4c, o_fire);
_0x2a91c6 = GameObj;
FireBall.prototype = Object.create(_0x2a91c6.prototype);
FireBall.prototype.constructor = FireBall;
FireBall.superClass = _0x2a91c6;
FireBall.prototype.updateZ = function () {
    this.z = 0x3ed;
};
FireBall.prototype.customDraw = function (_0x4df793) {
    // if (0x2 != _0x14fca5) {
    //     var _0x5088d6 = 0.15,
    //         _0x59b4ce = 0.5 * (0.8 - _0x5088d6);
    //     _0x4df793 = _0x5088d6 + _0x59b4ce + _0x59b4ce * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8));
    //     ctx.save();
    //     ctx.globalAlpha *= _0x4df793;
    //     ctx.restore();
    //     _0x5088d6 = 0.85;
    //     _0x59b4ce = 0.5 * (0x1 - _0x5088d6);
    //     _0x5088d6 = _0x5088d6 + _0x59b4ce + _0x59b4ce * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8));
    //     if (_0x4df793 = _0x2f22f9('img/fireball/' + this.speciesType + '/' + Math.trunc(_0x1534e0 / 0x78) % 0x5 + '.png')) {
    //         var _0x59b4ce = 0,
    //             _0x5190b2 = 0.4 * this.rad,
    //             _0x93d01a = 0x2 * this.rad * (0x2 + 0x2 * _0x5088d6) / 0x3,
    //             _0xf417ca = 3.5 * this.rad * _0x5088d6,
    //             _0x2204f1 = 0.5,
    //             _0x4c1514 = 0.95;
    //         ctx.save();
    //         ctx.globalAlpha = ctx.globalAlpha * this.onFireEffA * _0x5088d6;
    //         ctx.rotate(this.angle);
    //         ctx.drawImage(_0x4df793, _0x59b4ce + _0x93d01a * -_0x2204f1, _0x5190b2 + _0xf417ca * -_0x4c1514, _0x93d01a, _0xf417ca);
    //         ctx.restore();
    //     }
    // } else if (_0x4df793 = _0x2f22f9('img/fireball/' + this.speciesType + '/0.png')) _0x5088d6 = 0.85, _0x59b4ce = 0.5 * (0x1 - _0x5088d6), _0x5088d6 = _0x5088d6 + _0x59b4ce + _0x59b4ce * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8)), _0x59b4ce = 0, _0x5190b2 = 0.4 * this.rad, _0x93d01a = 0x2 * this.rad * (0x2 + 0x2 * _0x5088d6) / 0x3, _0xf417ca = 3.5 * this.rad * _0x5088d6, _0x2204f1 = 0.5, _0x4c1514 = 0.95, ctx.save(), ctx.rotate(this.angle), ctx.drawImage(_0x4df793, _0x59b4ce + _0x93d01a * -_0x2204f1, _0x5190b2 + _0xf417ca * -_0x4c1514, _0x93d01a, _0xf417ca), ctx.restore();
    if (0x2 != _0x14fca5) {
        //on fire glow
    
        //glow stronger/weaker like a fire
        var period = 1.0; //periodic func with time
        var p_min = 0.15,
          p_max = 0.8; //set these!
        var amp = 0.5 * (p_max - p_min);
        var flashA =
          p_min +
          amp +
          amp * Math.sin(((2.0 * Math.PI) / period) * (_0x1534e0 / 1000.0));
    
        ctx.save();
        {
          ctx.globalAlpha *= flashA;
          // _0x110b78(0, 0, Math.max(0, this.rad), "#F6EA65");
        }
        ctx.restore();
        //glow stronger/weaker like a fire
        var period = 1.0; //periodic func with time
        var p_min = 0.85,
          p_max = 1.0; //set these!
        var amp = 0.5 * (p_max - p_min);
        var moveA =
          p_min +
          amp +
          amp * Math.sin(((2.0 * Math.PI) / period) * (_0x1534e0 / 1000.0));
    
        var imNum = Math.trunc(_0x1534e0 / 120) % 5;
        //console.log("fire: " + imNum);
        //var theImg = this.getSkinImageObj(imNum == 1 ? "img/fire.png" : "img/fire2.png");
        var theImg = _0x2f22f9('img/fireball/' + this.speciesType + '/' + Math.trunc(_0x1534e0 / 0x78) % 0x5 + '.png');
        if (theImg) {
          var imX = 0,
            imY = this.rad * 0.4;
          var imW = (this.rad * 2.0 * (2.0 + moveA * 2.0)) / 3.0,
            imH = this.rad * 3.5 * moveA;
          var imAnchorX = 0.5,
            imAnchorY = 0.95; //top-left= 0,0, bottom-right=1,1 (canvas coords)
    
          ctx.save();
          {
            ctx.globalAlpha *= this.onFireEffA * moveA;
            ctx.rotate(this.angle);
            ctx.drawImage(
              theImg,
              imX + imW * -imAnchorX,
              imY + imH * -imAnchorY,
              imW,
              imH
            );
          }
          ctx.restore();
        } else {
          //console.log("not found: " + imNum)
        }
      } else {
        var theImg = _0x2f22f9('img/fireball/' + this.speciesType + '/0.png');
        if (theImg) {
          var imX = 0,
            imY = this.rad * 0.4;
          var imW = (this.rad * 2.0 * (2.0 + 2.0)) / 3.0,
            imH = this.rad * 3.5;
          var imAnchorX = 0.5,
            imAnchorY = 0.95; //top-left= 0,0, bottom-right=1,1 (canvas coords)
    
          ctx.save();
          {
            ctx.rotate(this.angle);
            ctx.drawImage(
              theImg,
              imX + imW * -imAnchorX,
              imY + imH * -imAnchorY,
              imW,
              imH
            );
          }
          ctx.restore();
        }
      }
};
FireBall.prototype.readCustomData_onNewlyVisible = function (_0x525446) {
    FireBall.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x525446);
    this.speciesType = _0x525446.readUInt8();
};

function FireBall() {
    FireBall.superClass.call(this, o_fireBall);
}
window.FireBall = FireBall;
GameObjType.setCustomClassForGameObjType(FireBall, o_fireBall);
_0x2a91c6 = GameObj;
AnimalCarcass.prototype = Object.create(_0x2a91c6.prototype);
AnimalCarcass.prototype.constructor = AnimalCarcass;
AnimalCarcass.superClass = _0x2a91c6;
AnimalCarcass.prototype.nickName = 'mrmodpack.ml';
AnimalCarcass.prototype.fadeAway = !0x1;
AnimalCarcass.prototype.webTransparency = 0x64;
AnimalCarcass.prototype.carcassType = 0;
AnimalCarcass.prototype.updateZ = function () {
    this.z = this.flag_flying ? 0x186a0 + this.rad / 0xa : -0x64;
};
AnimalCarcass.prototype.getNameSize = function () {
    return 0x6;
};
AnimalCarcass.prototype.setNick = function (_0x3a897d) {
    this.nickName = _0x3a897d;
    null == this.nickTXT ? (this.nickTXT = new _0x120450(this.getNameSize(), '#FFFFFF'), this.nickTXT.strokeW = 1.5, this.nickTXT.renderScale = 0x5) : this.nickTXT.setFontSize(this.getNameSize());
    this.nickTXT.setText(this.nickName);
};
AnimalCarcass.prototype.customDraw = function (_0x5d827e) {
    ctx.save();
    _0x5d827e = 0.3;
    if (this.fadeAway) {
        var _0x153bce = this.webTransparency / 0x64;
        ctx.globalAlpha = _0x153bce;
        _0x5d827e = Math.min(_0x5d827e, _0x153bce);
    } else ctx.globalAlpha = 0.8;
    if (_0x153bce = _0x2f22f9('img/carcass/' + this.carcassType + '.png')) {
        var _0x4a87c7 = this.rad;
        ctx.rotate(this.angle);
        ctx.drawImage(_0x153bce, -_0x4a87c7, -_0x4a87c7, 0x2 * _0x4a87c7, 0x2 * _0x4a87c7);
    }
    ctx.restore();
    this.drawNickName(_0x5d827e);
};
AnimalCarcass.prototype.drawNickName = function (_0x457cd7) {
    this.spawnedFromDeadAni && this.nickName && this.nickTXT && !_0x47691c && (ctx.save(), ctx.globalAlpha = _0x457cd7, this.nickTXT.x = 0, this.nickTXT.y = this.rad, this.nickTXT.draw(), ctx.restore());
};
AnimalCarcass.prototype.spawnedFromDeadAni = !0x1;
AnimalCarcass.prototype.readCustomData_onNewlyVisible = function (_0x20f3f1) {
    this.spawnedFromDeadAni = 0x1 == _0x20f3f1.readUInt8();
    var _0x4feb5c = _0x20f3f1.readString();
    this.carcassType = _0x20f3f1.readUInt8();
    if (this.fadeAway = 0x1 == _0x20f3f1.readUInt8()) this.webTransparency = _0x20f3f1.readUInt16();
    this.spawnedFromDeadAni && this.setNick(_0x4feb5c ? _0x4feb5c : 'mrmodpack.ml');
};
AnimalCarcass.prototype.readCustomData_onUpdate = function (_0x3e9598) {
    AnimalCarcass.superClass.prototype.readCustomData_onUpdate.call(this, _0x3e9598);
    this.flag_flying = 0x1 == _0x3e9598.readUInt8();
    this.fadeAway && (this.webTransparency = _0x3e9598.readUInt16());
};

function AnimalCarcass() {
    AnimalCarcass.superClass.call(this, o_animalCarcass);
    this.shrinkedRad = 0;
}
window.AnimalCarcass = AnimalCarcass;
GameObjType.setCustomClassForGameObjType(AnimalCarcass, o_animalCarcass);
_0x2a91c6 = GameObj;
_0x466884.prototype = Object.create(_0x2a91c6.prototype);
_0x466884.prototype.constructor = _0x466884;
_0x466884.superClass = _0x2a91c6;
_0x466884.prototype.chilliType = 0;
_0x466884.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x466884.prototype.customDraw = function (_0x3f1b8c) {
    ctx.save();
    if (_0x3f1b8c = _0x2f22f9('img/chilli/' + this.chilliType + '/chilli' + (this.isEdibleOutlined() ? '_e' : '') + '.png')) {
        var _0xf01334 = this.rad;
        0x1 == this.specType2 ? (0 == this.angle && (this.angle = this.rPer * Math.PI * 0x2), this.angle += 0.4, ctx.rotate(this.angle)) : 0x2 == this.specType2 ? ctx.rotate(this.angle) : ctx.rotate(this.rPer * Math.PI * 0x2);
        ctx.drawImage(_0x3f1b8c, -_0xf01334, -_0xf01334, 0x2 * _0xf01334, 0x2 * _0xf01334);
    }
    ctx.restore();
};
_0x466884.prototype.readCustomData_onNewlyVisible = function (_0x5d9c55) {
    this.chilliType = _0x5d9c55.readUInt8();
};

function _0x466884() {
    _0x466884.superClass.call(this, o_chilli);
    this.doesDrawEffectScale = !0;
}
window.Chilli = _0x466884;
GameObjType.setCustomClassForGameObjType(_0x466884, o_chilli);
_0x2a91c6 = Animal;
_0x4e6055.prototype = Object.create(_0x2a91c6.prototype);
_0x4e6055.prototype.constructor = _0x4e6055;
_0x4e6055.superClass = _0x2a91c6;
_0x4e6055.prototype.objSkinSpotsCanvas = null;
_0x4e6055.prototype.getSkinName = function () {
    return this.animalInfo().skinName;
};
_0x4e6055.prototype.animalInfo = function () {
    var infoO = {};

    var skin = "";
    switch (this.animalSpecies) {
        case 0:
            infoO.aniName = "Cheetah";
            infoO.upgradeText = "UPGRADED to Cheetah!\n Press W to get a speed boost!";
            skin = "cheetah";
            break;
        case 1:
            infoO.aniName = "Jaguar";
            infoO.upgradeText = "UPGRADED to JAGUAR!\n Press W to get a speed boost!\n(Jaguars can climb hills!)";
            skin = "jaguar";
            break;
        case 2:
            infoO.aniName = "Leopard";
            infoO.upgradeText = "UPGRADED to LEOPARD!\n Press W to get a speed boost!\n(Leopards can dive longer)";
            skin = "leopard";
            break;
        case 3:
            infoO.aniName = "Black Panther";
            infoO.upgradeText = "UPGRADED to Black Panther!\n Press W to get a speed boost!\n(Black Panthers are fast on mud)";
            skin = "blackpanther";
            break;
        case 4:
            infoO.aniName = "Black Cat";
            infoO.upgradeText = "UPGRADED to Black Cat!\n Press W to get a speed boost!";
            skin = "blackcat";
            break;
        case 204:
            infoO.aniName = "Genie Cheetah";
            infoO.upgradeText = "UPGRADED to Genie Cheetah!\n Press W to get a speed boost!\n(Genie Cheetah are fast on mud)";
            skin = "genie_cheetah";
            break;
        case 100:
            infoO.aniName = "Big Cookie";
            infoO.upgradeText = "UPGRADED to Big Cookie!\n Press W to get a speed boost!\n(Big Cookies are fast on mud)";
            skin = "100/bigcat";
            break;
    }


    infoO.aniCol = "#CAC05B";
    infoO.skinName = "land/bigcat/" + skin;
    return infoO;
};

function _0x4e6055() {
    _0x4e6055.superClass.call(this, o_player);
}
window.BigCat = _0x4e6055;
GameObjType.setCustomClassForGameObjType(_0x4e6055, o_player, _0x58b203);

function _0x16f092(_0x3d77ea, _0x3fff4e, _0x58a832, _0x1371c0, _0x42fc19, _0x38f030, _0x5751f9) {
    var _0x8f6095 = interfS;
    this.x = _0x3d77ea;
    this.y = _0x3fff4e;
    this.w = _0x58a832;
    this.h = _0x1371c0;
    this.label = _0x42fc19;
    this.font = Number(_0x38f030) ? Number(_0x38f030) : 0x1e;
    this.isVisible = !0;
    this.hoverColor = '#16932A';
    this.defaultColor = '#0aa633';
    this.txtAlpha = this.alpha = 0x1;
    this.ctx = void 0 === _0x5751f9 || null == _0x5751f9 ? ctx : _0x5751f9;
    this.labelColor = 'white';
    this.buttonTXT = new _0x120450(0xc, this.labelColor);
    this.buttonTXT.renderScale = 1.5;
    this.drawButtonRect = !0;
    this.textShadow = this.showLabeleOnHover = this.isHighLighted = !0x1;
    this.buttonScaleF = 0x1;
    this.strokeWidth = 0x4 * _0x8f6095;
    this.setLabelColor = function (_0x5515c8) {
        this.buttonTXT = new _0x120450(0xc, _0x5515c8);
        this.buttonTXT.renderScale = 1.5;
    };
    this.testPosHitsButton = function (_0xa6a206, _0x1db729) {
        var _0x58a832 = this.x + this.w,
            _0x1371c0 = this.y + this.h;
        return _0xa6a206 < this.x || _0xa6a206 > _0x58a832 ? !0x1 : _0x1db729 < this.y || _0x1db729 > _0x1371c0 ? !0x1 : !0;
    };
    this.setPosAndSize = function (_0x40b895, _0x54c322, _0x3ab3fb, _0x287a2c, _0x5ec43c, _0xf3d838) {
        this.w = _0x3ab3fb;
        this.h = _0x287a2c;
        this.x = _0x40b895 + _0x3ab3fb * (0.5 - _0x5ec43c);
        this.y = _0x54c322 + _0x287a2c * (0.5 - _0xf3d838);
    };
    this.draw = function () {
        this.isVisible && (this.update(), this.ctx.save(), this.ctx.translate(this.x, this.y), this.ctx.scale(this.buttonScaleF, this.buttonScaleF), this.drawButtonRect && (this.ctx.fillStyle = this.defaultColor, this.ctx.strokeStyle = '#116c17', this.ctx.lineWidth = this.strokeWidth, this.roundRect(0, 0, this.w, this.h, 0x5, !0, !0), this.isHighLighted && (this.ctx.fillStyle = this.hoverColor, this.roundRect(0, 0, this.w, this.h, 0x5, !0, !0x1))), this.showLabeleOnHover ? this.isHighLighted && this.showLabeleOnHover && this.drawTextOnHowever() : (this.ctx.globalAlpha = this.txtAlpha, this.drawText(this.w / 0x2, this.h / 0x2)), this.ctx.restore(), this.onAfterDraw());
    };
    this.drawTextOnHowever = function () {
        this.drawText(this.w / 0x2, this.h / 0x2);
    };
    this.beforeDrawText = function () {};
    this.drawText = function (_0x304eef, _0x22b494) {
        this.buttonTXT.setText(this.label);
        this.buttonTXT.strokeW = this.isHighLighted && !this.textShadow ? 0 : 0x1;
        this.buttonTXT.setFontSize(this.font);
        this.buttonTXT.setColor(this.labelColor, null, 0);
        this.buttonTXT.x = _0x304eef;
        this.buttonTXT.y = _0x22b494;
        this.beforeDrawText();
        this.buttonTXT.draw();
    };
    this.roundRect = function (_0x4cfbab, _0x5c14bf, _0x48b685, _0x2b822b, _0xd0f779, _0xefb6c5, _0x5e6c59) {
        'undefined' == typeof _0x5e6c59 && (_0x5e6c59 = !0);
        'undefined' === typeof _0xd0f779 && (_0xd0f779 = 0x5);
        if ('number' === typeof _0xd0f779) _0xd0f779 = {
            'tl': _0xd0f779,
            'tr': _0xd0f779,
            'br': _0xd0f779,
            'bl': _0xd0f779
        };
        else {
            var _0x8f6095 = {
                    'tl': 0,
                    'tr': 0,
                    'br': 0,
                    'bl': 0
                },
                _0x4bdb1c;
            for (_0x4bdb1c in _0x8f6095) _0xd0f779[_0x4bdb1c] = _0xd0f779[_0x4bdb1c] || _0x8f6095[_0x4bdb1c];
        }
        this.ctx.globalAlpha = this.alpha;
        this.ctx.lineWidth = 0x2;
        this.ctx.beginPath();
        this.ctx.moveTo(_0x4cfbab + _0xd0f779.tl, _0x5c14bf);
        this.ctx.lineTo(_0x4cfbab + _0x48b685 - _0xd0f779.tr, _0x5c14bf);
        this.ctx.quadraticCurveTo(_0x4cfbab + _0x48b685, _0x5c14bf, _0x4cfbab + _0x48b685, _0x5c14bf + _0xd0f779.tr);
        this.ctx.lineTo(_0x4cfbab + _0x48b685, _0x5c14bf + _0x2b822b - _0xd0f779.br);
        this.ctx.quadraticCurveTo(_0x4cfbab + _0x48b685, _0x5c14bf + _0x2b822b, _0x4cfbab + _0x48b685 - _0xd0f779.br, _0x5c14bf + _0x2b822b);
        this.ctx.lineTo(_0x4cfbab + _0xd0f779.bl, _0x5c14bf + _0x2b822b);
        this.ctx.quadraticCurveTo(_0x4cfbab, _0x5c14bf + _0x2b822b, _0x4cfbab, _0x5c14bf + _0x2b822b - _0xd0f779.bl);
        this.ctx.lineTo(_0x4cfbab, _0x5c14bf + _0xd0f779.tl);
        this.ctx.quadraticCurveTo(_0x4cfbab, _0x5c14bf, _0x4cfbab + _0xd0f779.tl, _0x5c14bf);
        this.ctx.closePath();
        _0xefb6c5 && this.ctx.fill();
        _0x5e6c59 && this.ctx.stroke();
    };
    this.onClick = function () {};
    this.onMouseMove = function () {};
    this.onMouseIn = function () {};
    this.onMouseOut = function () {};
    this.isMouseIn = !0x1;
    this.setMouseRawPos = function (_0x218836, _0x25079e) {
        this.rawX = _0x218836;
        this.rawY = _0x25079e;
        this.testPosHitsButton(this.rawX, this.rawY) ? this.isMouseIn || (this.isMouseIn = !0, this.onMouseIn()) : this.isMouseIn && (this.isMouseIn = !0x1, this.onMouseOut());
    };
    this.update = function () {};
    this.onInterfaceReset = function () {
        _0xad8e24(this.label + '.onInterfaceReset');
    };
    this.onAfterDraw = function () {};
}
window.InterfaceButton = _0x16f092;
GameMode.prototype = {
    'mode': 0,
    'state': 0,
    'myPlayer': null
};
GameMode.prototype.chatAllowed = !0;
GameMode.prototype.isHalloween = !0x1;
GameMode.prototype.stamp = 0;
GameMode.prototype.interface = function () {};
GameMode.prototype.drawMap = function () {};
GameMode.prototype.interfaceReset = function () {};
GameMode.prototype.main = function (_0x17ad40) {};
GameMode.prototype.onInit = function (_0x59780d) {};
GameMode.prototype.drawCustomObjs = function (_0x16bb8a) {};
GameMode.prototype.worldUpdate = function (_0x458a40) {};
GameMode.prototype.setPlayer = function () {
    this.myPlayer = gameObjsByID[myPlayerID];
};

function GameMode() {}
_0x2a91c6 = window.GameMode = GameMode;
FreeForAll.prototype = Object.create(_0x2a91c6.prototype);
FreeForAll.prototype.constructor = FreeForAll;
FreeForAll.prototype.handleMessage = function (msg) {};
FreeForAll.superClass = _0x2a91c6;
FreeForAll.prototype.safeArea = null;
FreeForAll.prototype.screenMessage = function () {};
FreeForAll.prototype.showPlayerCount = function () {};

function FreeForAll(_0x44a011) {
    this.mode = _0x44a011;
    this.stamp = +new Date();
    this.chatAllowed = !0;
    this.createInterfaceButtons();
}
FreeForAll.prototype.wastedPopups = [];
FreeForAll.prototype.playerDisplayNum = 0;
FreeForAll.prototype.setServerPlayerCount = function () {
    playersOnlineTxt.setText(_0x29cd81(nPlayers) + ' players online');
    this.playerDisplayNum = 0 == this.playerDisplayNum ? 0x1 : 0;
};
FreeForAll.prototype.interface = function () {
    if (-0x1 != this.state && this.mode == gameMode) {
        if (isAliveInGame)
            for (var _0x3c5cc7 = this.wastedPopups.length - 0x1; 0 <= _0x3c5cc7; _0x3c5cc7--) {
                var _0x41114d = this.wastedPopups[_0x3c5cc7];
                _0x41114d.draw();
                _0x41114d.timedOut && this.wastedPopups.splice(_0x3c5cc7, 0x1);
            }
        null != this.endScreenCanvas && (this.endScreenCanvas.width && ctx.drawImage(this.endScreenCanvas, canvasW / 0x2 - this.endScreenCanvas.width / 0x2, 0xf * pixelRat, this.endScreenCanvas.width, this.endScreenCanvas.height), isAliveInGame && !isGhost || _0x385867(!0));
        this.drawInterfaceButtons();
    }
};
FreeForAll.prototype.interfaceReset = function () {
    this.dangerCircleMiniMapCanvas = this.endScreenCanvas = null;
    this.wastedPopups = [];
    this.playercount = this.lastWastedPopupT = 0;
    this.safeArea = null;
    if (this.interfaceButtons)
        for (var _0xe72588 = 0; _0xe72588 < this.interfaceButtons.length; _0xe72588++) this.interfaceButtons[_0xe72588].onInterfaceReset();
    this.interfaceButtons = [];
};

FreeForAll.prototype.onInit = function () {};
FreeForAll.prototype.playercount = 0;
FreeForAll.prototype.setPlayerCount = function (_0xe8c605) {
    this.playercount = _0xe8c605;
};

FreeForAll.prototype.showPlayerCount = function () {};
FreeForAll.prototype.lbCanvas = null;
FreeForAll.prototype.leaderboard = function (_0x20c5ac) {
    null == this.lbCanvas && (this.lbCanvas = document.createElement('canvas'));
    if (_0x20c5ac) {
        var _0x1de13c = this.lbCanvas.getContext('2d'),
            _0x2498ee;
        _0x2498ee = 0x37 + 0x16 * _0x20c5ac.length;
        this.lbCanvas.width = 0x10e;
        this.lbCanvas.height = _0x2498ee;
        _0x1de13c.globalAlpha = 0.2;
        _0x1de13c.fillStyle = '#000000';
        _0x1de13c.fillRect(0, 0, this.lbCanvas.width, this.lbCanvas.height);
        _0x1de13c.globalAlpha = 0x1;
        _0x1de13c.fillStyle = '#FFFFFF';
        _0x2498ee = _0xfa658b.name;
        _0x1de13c.font = '24px Arial';
        0x2 != _0x14fca5 && (_0x1de13c.shadowOffsetX = 0x1, _0x1de13c.shadowOffsetY = 0x1);
        _0x1de13c.shadowColor = 'black';
        _0x1de13c.fillText(_0x2498ee, this.lbCanvas.width / 0x2 - _0x1de13c.measureText(_0x2498ee).width / 0x2, 0x28);
        var _0x48d4c8;
        _0x1de13c.textAlign = 'left';
        _0x1de13c.font = '17px Arial';
        for (_0x48d4c8 = 0; _0x48d4c8 < _0x20c5ac.length; ++_0x48d4c8) _0x2498ee = _0x47691c ? '' : _0x20c5ac[_0x48d4c8].name || 'mrmodpack.ml', _0x2498ee += ' (' + _0x3dd6a4(_0x20c5ac[_0x48d4c8].xp) + ')', _0x1de13c.fillStyle = '#FFFFFF', _0x1de13c.fillText(_0x2498ee, 0xf, 0x41 + 0x16 * _0x48d4c8);
    }
};
FreeForAll.prototype.drawLeaderboard = function () {
    isAliveInGame && _0xef3376 && _0xef3376.width && ctx.drawImage(_0xef3376, 0xa * pixelRat, 0xa * pixelRat, _0xef3376.width * interfS, _0xef3376.height * interfS);
};
FreeForAll.prototype.btnPlayAgain = null;
FreeForAll.prototype.showStats = !0;
FreeForAll.prototype.interfaceButtons = [];
FreeForAll.prototype.createInterfaceButtons = function () {
    this.interfaceButtons = [];
};
FreeForAll.prototype.drawInterfaceButtons = function () {
    if (this.interfaceButtons)
        for (var _0x599aff = 0; _0x599aff < this.interfaceButtons.length; _0x599aff++) {
            var _0x4c5299 = this.interfaceButtons[_0x599aff];
            _0x4c5299.isVisible && _0x4c5299.draw();
        }
};
FreeForAll.prototype.onResize = function () {
    this.drawInterfaceButtons();
};
FreeForAll.prototype.readPlayerStats = function (_0x315bcd) {
    var _0x29ee7e = [];
    _0x29ee7e.rank = _0x315bcd.readUInt16();
    _0x29ee7e.timeAlive = _0x315bcd.readUInt16();
    _0x29ee7e.totalKills = _0x315bcd.readUInt16();
    _0x29ee7e.topRank = _0x315bcd.readUInt16();
    _0x29ee7e.maxXP = _0x315bcd.readUInt32();
    _0x29ee7e.killedBy = _0x315bcd.readString();
    return _0x29ee7e;
};
FreeForAll.prototype.playerInfo = function (msg) {};
FreeForAll.prototype.worldUpdate = function (_0x95dfcb) {};
FreeForAll.prototype.drawMap = function () {};
FreeForAll.prototype.nonZombiePlayersCount = 1;
FreeForAll.prototype.zombieCount = 1;
FreeForAll.prototype.pieChartCanvas = null;
FreeForAll.prototype.teamColors = {
    0: 'white',
    1: '#0f0f0f'
};
FreeForAll.prototype.endScreenDisplayed = !0x1;
FreeForAll.prototype.buildEndScreenHTML = function (_0x5ef36e) {
    if (!this.endScreenDisplayed) {
        this.endScreenDisplayed = !0;
        var _0x4651dc;
        _0x4651dc = '' + ("<div class='msg'>YOU WERE #" + _0x5ef36e.rank + '</div>');
        _0x4651dc = _0x4651dc + "<div class='row'><div class='label'>Killed by:</div>" + ("<div class='value2'>" + _0x5ef36e.killedBy + '</div>');
        _0x4651dc = _0x4651dc + "</div><div class='row'><div class='col1'><div class='label'>Time alive:</div>" + ("<div class='value'>" + _0x1b18ae(_0x5ef36e.timeAlive) + '</div>');
        _0x4651dc = _0x4651dc + "</div><div class='col2'><div class='label'>Total kills:</div>" + ("<div class='value'>" + _0x5ef36e.totalKills + '</div>');
        _0x4651dc = _0x4651dc + "</div></div><div class='row'><div class='col1'><div class='label'>Top rank:</div>" + ("<div class='value'>" + _0x5ef36e.topRank + '</div>');
        _0x4651dc = _0x4651dc + "</div><div class='col2'><div class='label'>Max xp:</div>" + ("<div class='value'>" + _0x3dd6a4(_0x5ef36e.maxXP) + '</div>');
        _0x4651dc += "</div></div><div style='clear:both;'></div><div class='btnDiv'><button id='btnMopeOptions' class='btn'>      CONTINUE      </button></div><div style='clear:both;'></div>";
        if (_0x5ef36e = document.getElementById('endScreen')) _0x5ef36e.innerHTML = _0x4651dc, _0x5ef36e.style.display = 'block', document.getElementById('mopeMenu'), btnMopeOptions.onclick = _0x510560, document.getElementById('moneyRectangle').style.marginTop = '55px';
        if (!isAliveInGame || isGhost) document.getElementById('startMenuWrapper').style.display = 'block';
    }
};
FreeForAll.prototype.endScreenCanvas = null;
FreeForAll.prototype.buildEndScreen = function (_0x2f91f1, _0x5794d2) {
    null == this.endScreenCanvas && (this.endScreenCanvas = document.createElement('canvas'));
    if (null != this.endScreenCanvas) {
        var _0x27edf9 = this.endScreenCanvas.getContext('2d');
        this.endScreenCanvas.width = 0x1ae;
        this.endScreenCanvas.height = 0xfa;
        _0x27edf9.globalAlpha = 0.2;
        _0x27edf9.fillStyle = '#000000';
        _0x27edf9.fillRect(0, 0, this.endScreenCanvas.width, this.endScreenCanvas.height);
        _0x27edf9.fillStyle = '#000000';
        _0x27edf9.fillRect(0x5, 0x5, this.endScreenCanvas.width - 0xa, this.endScreenCanvas.height - 0xa);
        var _0x19a291;
        _0x27edf9.globalAlpha = 0x1;
        _0x27edf9.fillStyle = '#FFFFFF';
        _0x27edf9.font = '30px Arial';
        _0x19a291 = 0x3c;
        var _0x261460 = 'Final Stats';
        _0x27edf9.font = '30px Arial';
        _0x27edf9.fillText(_0x261460, this.endScreenCanvas.width / 0x2 - _0x27edf9.measureText(_0x261460).width / 0x2, _0x19a291);
        _0x27edf9.font = '20px Arial';
        _0x19a291 += 0x2d;
        _0x261460 = 'You were #' + _0x5794d2.rank;
        _0x27edf9.fillText(_0x261460, this.endScreenCanvas.width / 0x2 - _0x27edf9.measureText(_0x261460).width / 0x2, _0x19a291);
        _0x19a291 += 0x28;
        _0x1b18ae(_0x5794d2.timeAlive);
        _0x261460 = 0x14;
        _0x17faa5(_0x27edf9, 'Killed by', _0x5794d2.killedBy, _0x261460, _0x19a291);
        _0x19a291 += 0x28;
        _0x17faa5(_0x27edf9, 'Time Alive', _0x1b18ae(_0x5794d2.timeAlive), _0x261460, _0x19a291);
        _0x17faa5(_0x27edf9, 'Total Kills', _0x5794d2.totalKills, _0x261460 + 0xd2, _0x19a291);
        _0x19a291 += 0x28;
        _0x261460 = 0x14;
        _0x17faa5(_0x27edf9, 'Top rank', _0x5794d2.topRank, _0x261460, _0x19a291);
        _0x261460 += 0xd2;
        _0x17faa5(_0x27edf9, 'Max XP', _0x3dd6a4(_0x5794d2.maxXP), _0x261460, _0x19a291);
    }
};
FreeForAll.prototype.lastWastedPopupT = 0;
FreeForAll.prototype.onPlayerWasted = function (_0x2318a3) {
    0.7 < (_0x1534e0 - this.lastWastedPopupT) / 0x3e8 && (this.lastWastedPopupT = _0x1534e0, _0x2318a3 = new _0x3a76ab(_0x2318a3 + ' wasted!', 0x28, 'red', 0x5dc), this.wastedPopups.push(_0x2318a3));
};
window.FreeForAll = FreeForAll;

Juggernaut.prototype = Object.create(_0x2a91c6.prototype);
Juggernaut.prototype.constructor = Juggernaut;
Juggernaut.prototype.handleMessage = function (msg) {
    var gmMsg = msg.readUInt8();
    //console.log("battleroyal_msg :" + battleroyal_msg);
    switch (gmMsg) {
        case 1: // MsgJuggernaut_ShowNotification
            this.setMessage(msg.readString(),msg.readUInt8()*100)
            break;
        default:
            break;
            
    }
};
Juggernaut.superClass = _0x2a91c6;
Juggernaut.prototype.safeArea = null;
Juggernaut.prototype.screenTextEndT = 0;
Juggernaut.prototype.screenTextMsg = "";
Juggernaut.prototype.screenMessage = function () {
    var fadeDur = 1.0;
    var a = (this.screenTextEndT - _0x1534e0) / 1000.0 / fadeDur;
    a = 0 > a ? 0 : 1 < a ? 1 : a; //clamp from 0-1
    if (a > 0) {
      ctx.save();
      var bx = canvasW / 2;
      var barH = 60 * interfS;
      var barW = (canvasW / 2 - 100) * interfS;
      ctx.globalAlpha = 0.35;
      ctx.fillStyle = "black"; //bar bg
      var by = canvasH * 0.1;
      ctx.fillRect(bx - barW / 2, by - barH / 2, barW, barH); //bg
      ctx.globalAlpha = 1;
      ctx.globalAlpha = a;
  
      ctx.globalAlpha = 1;
      ctx.fillStyle = "white";
      ctx.font = 40.0 * interfS + "px Arial";
      ctx.lineWidth = 1;
      ctx.textAlign = "center";
      ctx.textBaseline = "middle"; //vertical center
      ctx.shadowOffsetX = 1;
      ctx.shadowOffsetY = 1;
      ctx.shadowColor = "black";
  
      ctx.fillText(this.screenTextMsg, canvasW / 2, by);

  
      ctx.restore();
    }
};

Juggernaut.prototype.setMessage = function (newText, newDur) {

    this.screenTextMsg = newText;
  
    if (newDur == 0) this.screenTextEndT = +new Date() + newDur;
    else this.screenTextEndT = +new Date() + newDur;
}

Juggernaut.prototype.showPlayerCount = function () {};

function Juggernaut(_0x44a011) {
    this.mode = _0x44a011;
    this.stamp = +new Date();
    this.chatAllowed = !0;
    this.createInterfaceButtons();
}
Juggernaut.prototype.wastedPopups = [];
Juggernaut.prototype.playerDisplayNum = 0;
Juggernaut.prototype.setServerPlayerCount = function () {
    playersOnlineTxt.setText(_0x29cd81(nPlayers) + ' players online');
    this.playerDisplayNum = 0 == this.playerDisplayNum ? 0x1 : 0;
};
Juggernaut.prototype.interface = function () {
    if (-0x1 != this.state && this.mode == gameMode) {
        if (isAliveInGame)
            for (var _0x3c5cc7 = this.wastedPopups.length - 0x1; 0 <= _0x3c5cc7; _0x3c5cc7--) {
                var _0x41114d = this.wastedPopups[_0x3c5cc7];
                _0x41114d.draw();
                _0x41114d.timedOut && this.wastedPopups.splice(_0x3c5cc7, 0x1);
            }
        null != this.endScreenCanvas && (this.endScreenCanvas.width && ctx.drawImage(this.endScreenCanvas, canvasW / 0x2 - this.endScreenCanvas.width / 0x2, 0xf * pixelRat, this.endScreenCanvas.width, this.endScreenCanvas.height), isAliveInGame && !isGhost || _0x385867(!0));
        this.drawInterfaceButtons();
    }
};
Juggernaut.prototype.interfaceReset = function () {
    this.dangerCircleMiniMapCanvas = this.endScreenCanvas = null;
    this.wastedPopups = [];
    this.playercount = this.lastWastedPopupT = 0;
    this.safeArea = null;
    if (this.interfaceButtons)
        for (var _0xe72588 = 0; _0xe72588 < this.interfaceButtons.length; _0xe72588++) this.interfaceButtons[_0xe72588].onInterfaceReset();
    this.interfaceButtons = [];
};
Juggernaut.prototype.onInit = function () {};
Juggernaut.prototype.playercount = 0;
Juggernaut.prototype.setPlayerCount = function (_0xe8c605) {
    this.playercount = _0xe8c605;
};
var battleRoyal_waitingForPlayers = 0;
/**
 * As soon as minimum players have joined, game state becomes ready and a timer
 * starts
 */
var battleRoyal_gameState_ready = 1;
/**
 * When game is in progress
 */
var battleRoyal_gameState_inProgress = 2;

/**
 * As soon as all players have died then the game state is set to over!
 */
var battleRoyal_gameState_gameOver = 4;

/**
 * When game is about to reset, all clients are sent a message
 */
var battleRoyal_gameState_gameReset = 5;
Juggernaut.prototype.showPlayerCount = function () {};
Juggernaut.prototype.lbCanvas = null;
Juggernaut.prototype.leaderboard = function (_0x20c5ac) {
    null == this.lbCanvas && (this.lbCanvas = document.createElement('canvas'));
    if (_0x20c5ac) {
        var _0x1de13c = this.lbCanvas.getContext('2d'),
            _0x2498ee;
        _0x2498ee = 0x37 + 0x16 * _0x20c5ac.length;
        this.lbCanvas.width = 0x10e;
        this.lbCanvas.height = _0x2498ee;
        _0x1de13c.globalAlpha = 0.2;
        _0x1de13c.fillStyle = '#000000';
        _0x1de13c.fillRect(0, 0, this.lbCanvas.width, this.lbCanvas.height);
        _0x1de13c.globalAlpha = 0x1;
        _0x1de13c.fillStyle = '#FFFFFF';
        _0x2498ee = _0xfa658b.name;
        _0x1de13c.font = '24px Arial';
        0x2 != _0x14fca5 && (_0x1de13c.shadowOffsetX = 0x1, _0x1de13c.shadowOffsetY = 0x1);
        _0x1de13c.shadowColor = 'black';
        _0x1de13c.fillText(_0x2498ee, this.lbCanvas.width / 0x2 - _0x1de13c.measureText(_0x2498ee).width / 0x2, 0x28);
        var _0x48d4c8;
        _0x1de13c.textAlign = 'left';
        _0x1de13c.font = '17px Arial';
        for (_0x48d4c8 = 0; _0x48d4c8 < _0x20c5ac.length; ++_0x48d4c8) _0x2498ee = _0x47691c ? '' : _0x20c5ac[_0x48d4c8].name || 'mrmodpack.ml', _0x2498ee += ' (' + _0x3dd6a4(_0x20c5ac[_0x48d4c8].xp) + ')', _0x1de13c.fillStyle = '#FFFFFF', _0x1de13c.fillText(_0x2498ee, 0xf, 0x41 + 0x16 * _0x48d4c8);
    }
};
Juggernaut.prototype.drawLeaderboard = function () {
    isAliveInGame && _0xef3376 && _0xef3376.width && ctx.drawImage(_0xef3376, 0xa * pixelRat, 0xa * pixelRat, _0xef3376.width * interfS, _0xef3376.height * interfS);
};
Juggernaut.prototype.btnPlayAgain = null;
Juggernaut.prototype.showStats = !0;
Juggernaut.prototype.interfaceButtons = [];
Juggernaut.prototype.createInterfaceButtons = function () {
    this.interfaceButtons = [];
};
Juggernaut.prototype.drawInterfaceButtons = function () {
    if (this.interfaceButtons)
        for (var _0x599aff = 0; _0x599aff < this.interfaceButtons.length; _0x599aff++) {
            var _0x4c5299 = this.interfaceButtons[_0x599aff];
            _0x4c5299.isVisible && _0x4c5299.draw();
        }
};
Juggernaut.prototype.onResize = function () {
    this.drawInterfaceButtons();
};
Juggernaut.prototype.readPlayerStats = function (_0x315bcd) {
    var _0x29ee7e = [];
    _0x29ee7e.rank = _0x315bcd.readUInt16();
    _0x29ee7e.timeAlive = _0x315bcd.readUInt16();
    _0x29ee7e.totalKills = _0x315bcd.readUInt16();
    _0x29ee7e.topRank = _0x315bcd.readUInt16();
    _0x29ee7e.maxXP = _0x315bcd.readUInt32();
    _0x29ee7e.killedBy = _0x315bcd.readString();
    return _0x29ee7e;
};
Juggernaut.prototype.meteoritesOnMap = [];

Juggernaut.prototype.playerInfo = function (msg) {};
Juggernaut.prototype.worldUpdate = function (_0x95dfcb) {
    this.meteoritesOnMap = [];
    let mCount = _0x95dfcb.readUInt8();
    for(let i = 0;i < mCount;i++){
        this.meteoritesOnMap.push({
            rad:_0x95dfcb.readUInt16()/10.0,
            x:_0x95dfcb.readUInt16()/4.0,
            y:_0x95dfcb.readUInt16()/4.0
        })
        
    }
};
Juggernaut.prototype.drawMap = function () {
    if(this.meteoritesOnMap.length > 0){
        this.meteoritesOnMap.forEach(m => {
            _0x42ddea(m,"red",0x1)
        })
    }
};

Juggernaut.prototype.nonZombiePlayersCount = 1;
Juggernaut.prototype.zombieCount = 1;
Juggernaut.prototype.pieChartCanvas = null;
Juggernaut.prototype.teamColors = {
    0: 'white',
    1: '#0f0f0f'
};
Juggernaut.prototype.endScreenDisplayed = !0x1;
Juggernaut.prototype.buildEndScreenHTML = function (_0x5ef36e) {
    if (!this.endScreenDisplayed) {
        this.endScreenDisplayed = !0;
        var _0x4651dc;
        _0x4651dc = '' + ("<div class='msg'>YOU WERE #" + _0x5ef36e.rank + '</div>');
        _0x4651dc = _0x4651dc + "<div class='row'><div class='label'>Killed by:</div>" + ("<div class='value2'>" + _0x5ef36e.killedBy + '</div>');
        _0x4651dc = _0x4651dc + "</div><div class='row'><div class='col1'><div class='label'>Time alive:</div>" + ("<div class='value'>" + _0x1b18ae(_0x5ef36e.timeAlive) + '</div>');
        _0x4651dc = _0x4651dc + "</div><div class='col2'><div class='label'>Total kills:</div>" + ("<div class='value'>" + _0x5ef36e.totalKills + '</div>');
        _0x4651dc = _0x4651dc + "</div></div><div class='row'><div class='col1'><div class='label'>Top rank:</div>" + ("<div class='value'>" + _0x5ef36e.topRank + '</div>');
        _0x4651dc = _0x4651dc + "</div><div class='col2'><div class='label'>Max xp:</div>" + ("<div class='value'>" + _0x3dd6a4(_0x5ef36e.maxXP) + '</div>');
        _0x4651dc += "</div></div><div style='clear:both;'></div><div class='btnDiv'><button id='btnMopeOptions' class='btn'>      CONTINUE      </button></div><div style='clear:both;'></div>";
        if (_0x5ef36e = document.getElementById('endScreen')) _0x5ef36e.innerHTML = _0x4651dc, _0x5ef36e.style.display = 'block', document.getElementById('mopeMenu'), btnMopeOptions.onclick = _0x510560, document.getElementById('moneyRectangle').style.marginTop = '55px';
        if (!isAliveInGame || isGhost) document.getElementById('startMenuWrapper').style.display = 'block';
    }
};
Juggernaut.prototype.endScreenCanvas = null;
Juggernaut.prototype.buildEndScreen = function (_0x2f91f1, _0x5794d2) {
    null == this.endScreenCanvas && (this.endScreenCanvas = document.createElement('canvas'));
    if (null != this.endScreenCanvas) {
        var _0x27edf9 = this.endScreenCanvas.getContext('2d');
        this.endScreenCanvas.width = 0x1ae;
        this.endScreenCanvas.height = 0xfa;
        _0x27edf9.globalAlpha = 0.2;
        _0x27edf9.fillStyle = '#000000';
        _0x27edf9.fillRect(0, 0, this.endScreenCanvas.width, this.endScreenCanvas.height);
        _0x27edf9.fillStyle = '#000000';
        _0x27edf9.fillRect(0x5, 0x5, this.endScreenCanvas.width - 0xa, this.endScreenCanvas.height - 0xa);
        var _0x19a291;
        _0x27edf9.globalAlpha = 0x1;
        _0x27edf9.fillStyle = '#FFFFFF';
        _0x27edf9.font = '30px Arial';
        _0x19a291 = 0x3c;
        var _0x261460 = 'Final Stats';
        _0x27edf9.font = '30px Arial';
        _0x27edf9.fillText(_0x261460, this.endScreenCanvas.width / 0x2 - _0x27edf9.measureText(_0x261460).width / 0x2, _0x19a291);
        _0x27edf9.font = '20px Arial';
        _0x19a291 += 0x2d;
        _0x261460 = 'You were #' + _0x5794d2.rank;
        _0x27edf9.fillText(_0x261460, this.endScreenCanvas.width / 0x2 - _0x27edf9.measureText(_0x261460).width / 0x2, _0x19a291);
        _0x19a291 += 0x28;
        _0x1b18ae(_0x5794d2.timeAlive);
        _0x261460 = 0x14;
        _0x17faa5(_0x27edf9, 'Killed by', _0x5794d2.killedBy, _0x261460, _0x19a291);
        _0x19a291 += 0x28;
        _0x17faa5(_0x27edf9, 'Time Alive', _0x1b18ae(_0x5794d2.timeAlive), _0x261460, _0x19a291);
        _0x17faa5(_0x27edf9, 'Total Kills', _0x5794d2.totalKills, _0x261460 + 0xd2, _0x19a291);
        _0x19a291 += 0x28;
        _0x261460 = 0x14;
        _0x17faa5(_0x27edf9, 'Top rank', _0x5794d2.topRank, _0x261460, _0x19a291);
        _0x261460 += 0xd2;
        _0x17faa5(_0x27edf9, 'Max XP', _0x3dd6a4(_0x5794d2.maxXP), _0x261460, _0x19a291);
    }
};
Juggernaut.prototype.lastWastedPopupT = 0;
Juggernaut.prototype.onPlayerWasted = function (_0x2318a3) {
    0.7 < (_0x1534e0 - this.lastWastedPopupT) / 0x3e8 && (this.lastWastedPopupT = _0x1534e0, _0x2318a3 = new _0x3a76ab(_0x2318a3 + ' wasted!', 0x28, 'red', 0x5dc), this.wastedPopups.push(_0x2318a3));
};
window.Juggernaut = Juggernaut;

//zombiemode


var superClass = GameMode;
ZombieMode.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
ZombieMode.prototype.constructor = ZombieMode;
ZombieMode.superClass = superClass;
ZombieMode.prototype.safeArea = null;

// player leveg global var
var isZombie = false;

function ZombieMode(mode) {
  this.mode = 5;
  this.chatAllowed = true;
  this.createInterfaceButtons();
  console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombe mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombe mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombe mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombe mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
  console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@ zombe mode @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
}

ZombieMode.prototype.wastedPopups = [];
ZombieMode.prototype.playerDisplayNum = 0;
ZombieMode.prototype.setServerPlayerCount = function () {
  if (this.playerDisplayNum == 0)
    playersOnlTXT.setText(numberWithCommas(nPlayers) + " mopers");
  else playersOnlTXT.setText(numberWithCommas(nPlayersViewing) + " on server");

  this.playerDisplayNum = this.playerDisplayNum == 0 ? 1 : 0;
};
ZombieMode.prototype.interface = function () {
  // call anything that needs to be displayed on screen
  // eg. player count, messages as well as end screen.

  if (this.state == -1 || this.mode != gameMode) return;

  if (isAliveInGame) {
    //console.log("interface drawn:");
    //DRAW: xp plus popups
    for (var k = this.wastedPopups.length - 1; k >= 0; k--) {
      //iterate backwards to allow removing
      var anItem = this.wastedPopups[k];
      anItem.draw();
      if (anItem.timedOut) this.wastedPopups.splice(k, 1); //remove timed out item
    }
  }

  if (this.endScreenCanvas != null) {
    this.endScreenCanvas.width &&
      ctx.drawImage(
        this.endScreenCanvas,
        canvasW / 2 - this.endScreenCanvas.width / 2,
        15 * pixelRat,
        this.endScreenCanvas.width,
        this.endScreenCanvas.height
      );
    if (!isAliveInGame || isGhost) setSiteMenuVisible(true);
  }

  this.drawInterfaceButtons();
};

ZombieMode.prototype.interfaceReset = function () {
  //console.log("reseting interface");
  this.endScreenCanvas = null;
  this.dangerCircleMiniMapCanvas = null;
  this.wastedPopups = [];
  this.lastWastedPopupT = 0;
  this.playercount = 0;
  this.safeArea = null;
  gameSafeArea = null;
  canvas_safeArea = null;
  if (this.interfaceButtons) {
    for (var i = 0; i < this.interfaceButtons.length; i++) {
      var aBut = this.interfaceButtons[i];
      aBut.onInterfaceReset();
    }
  }
  this.interfaceButtons = [];
};

ZombieMode.prototype.onInit = function () { };

ZombieMode.prototype.playercount = 0;

ZombieMode.prototype.setPlayerCount = function (count) {
  this.playercount = count;
};

ZombieMode.prototype.screenMessage = function () {};

ZombieMode.prototype.showPlayerCount = function () {
  ctx.save();
  var bx = canvasW / 2; // * interfS;
  var barH = 50 * interfS;
  var barW = 300 * interfS;
  ctx.globalAlpha = 0.35;
  ctx.fillStyle = "black"; //bar bg
  var by = 30 * interfS;

  ctx.fillRect(bx - barW / 2, by, barW, barH); //bg
  ctx.globalAlpha = 1;
  ctx.fillStyle = "white";
  ctx.font = 30.0 * interfS + "px Arial";
  ctx.lineWidth = 1;
  ctx.textAlign = "center";
  ctx.textBaseline = "middle"; //vertical center
  ctx.shadowOffsetX = 1;
  ctx.shadowOffsetY = 1;
  ctx.shadowColor = "black";
  by += 25 * interfS;

  var msg = " player";
  if (this.playercount > 1) msg += "s";

  if (this.state == 2) msg += " alive!";
  else if (
    this.state == 0 ||
    this.state == 1
  )
    msg += " joined";

  ctx.fillText(this.playercount + msg, bx, by);
  ctx.restore();
};

ZombieMode.prototype.lbCanvas = null;

ZombieMode.prototype.leaderboard = function (lbData) {
  if (this.lbCanvas == null) this.lbCanvas = document.createElement("canvas");
  //log(lbData);
  if (lbData) {
    var ctx_ = this.lbCanvas.getContext("2d");
    var boardLength = 55;
    var nameH = 22;
    boardLength = boardLength + nameH * lbData.length;
    this.lbCanvas.width = 270;
    this.lbCanvas.height = boardLength;

    ctx_.globalAlpha = 0.2;
    ctx_.fillStyle = "#000000";
    ctx_.fillRect(0, 0, this.lbCanvas.width, this.lbCanvas.height);

    ctx_.globalAlpha = 1;
    ctx_.fillStyle = "#FFFFFF";
    var str = _0xfa658b.name; //"Top Players";
    ctx_.font = "24px Arial";
    if (!options_lowGraphics) {
      ctx_.shadowOffsetX = 1;
      ctx_.shadowOffsetY = 1;
    }
    ctx_.shadowColor = "black";
    ctx_.fillText(
      str,
      this.lbCanvas.width / 2 - ctx_.measureText(str).width / 2,
      40
    );
    var rank;

    ctx_.textAlign = "left";
    //ctx_.textBaseline = "middle"; //vertical center

    for (ctx_.font = "17px Arial", rank = 0; rank < lbData.length; ++rank) {
      str = options_noNames ? "" : lbData[rank].name || "mrmodpack.ml";
      str += " (" + formatNumK(lbData[rank].xp) + ")";
      // log(str);
      ctx_.fillStyle = "#FFFFFF";
      ctx_.fillText(str, 15, 65 + nameH * rank);
    }
  }
};
ZombieMode.prototype.drawLeaderboard = function () {
  if (isAliveInGame) {
    if (this.pieChartCanvas != null) {
      this.pieChartCanvas.width &&
        ctx.drawImage(
          this.pieChartCanvas,
          20 * pixelRat,
          20 * pixelRat,
          this.pieChartCanvas.width,
          this.pieChartCanvas.height
        );
    }
  }


//   drawSafeArea();

};
ZombieMode.prototype.btnPlayAgain = null;

ZombieMode.prototype.showStats = true;
ZombieMode.prototype.interfaceButtons = [];
ZombieMode.prototype.createInterfaceButtons = function () {
  //log("calling : createInterfaceButtons ");
  this.interfaceButtons = [];
  /*
    this.btnPlayAgain = new InterfaceButton(0, 0, 80, 80, "Play Again!", 20);
    this.btnPlayAgain.showLabeleOnHover = true;
    this.btnPlayAgain.textShadow = true;
    this.btnPlayAgain.drawTextOnHowever = function () {
        this.drawText(this.w / 2, -this.h / 3);
    }

    this.btnPlayAgain.onClick = function () {
        joinGame(false);
    }
    this.btnPlayAgain.onMouseMove = function () {
    }
    this.btnPlayAgain.update = function () {
        this.x = (canvasW / 2) + 5;
        this.y = canvasH * 0.90;//(canvasH / 2) - 250;
    }


    this.btnPlayAgain.onInterfaceReset = function () {
        this.isVisible = false;
    }

    this.btnPlayAgain.onAfterDraw = function () {
        var theImg = getLoadedImg("img/icons/replay.png");
        if (theImg) {
            ctx.save();

            var iw = (this.w * 0.80);
            var pad = (this.w - iw) / 2;
            ctx.drawImage(theImg, this.x + pad, this.y + pad, iw, iw);
            ctx.restore();
        }
    }
    this.btnPlayAgain.isVisible = false;
    this.interfaceButtons.push(this.btnPlayAgain); // only add this button if drawn;
    */
};

ZombieMode.prototype.drawInterfaceButtons = function () {
  //this.btnPlayAgain.isVisible = isGhost;
  if (this.interfaceButtons) {
    for (var i = 0; i < this.interfaceButtons.length; i++) {
      var aBut = this.interfaceButtons[i];
      if (aBut.isVisible) {
        aBut.draw();
      }
    }
  }
};

ZombieMode.prototype.onResize = function () {
  this.drawInterfaceButtons();
};

ZombieMode.prototype.readPlayerStats = function (msg) {
  var stats = [];
  //stats.totalPlayers = msg.readUInt16();
  stats.rank = msg.readUInt16();
  stats.timeAlive = msg.readUInt16(); // in seconds
  stats.totalKills = msg.readUInt16();
  stats.topRank = msg.readUInt16();
  stats.maxXP = msg.readUInt32();
  stats.killedBy = msg.readString();
  return stats;
  //playerData[0].wins = topPlayerWins;
};

ZombieMode.prototype.playerInfo = function (msg) {
  if (isGhost && !serverCon_spectatingInAGame) {
    var stats = this.readPlayerStats(msg);
    this.buildEndScreenHTML(stats);
    //this.buildEndScreen(null, stats);
  } else if (!isGhost) {
    this.endScreenCanvas = null;
  }
};

ZombieMode.prototype.worldUpdate = function (msg) {
//   var minimapScaleF_x = minimapW / 200.0; // / size scaled to for msg send
//   var minimapScaleF_y = minimapH / 200.0;
//   var x = msg.readUInt32() * minimapScaleF_x;
//   var y = msg.readUInt32() * minimapScaleF_y;
//   var rad = msg.readUInt32() * 5.0;
//   gameSafeArea = { x: x, y: y, rad: rad * (minimapW / gameW) };

  

  this.nonZombiePlayersCount = msg.readUInt16();
  //this.zombiePlayersCount = msg.readUInt16();
  this.zombieCount = msg.readUInt16();

  if (!isZombie) {
    this.zombiePlayers = [];
    for (i = 0; i < this.zombieCount; i++) {
      var x = msg.readUInt16() / 4.0;
      var y = msg.readUInt16() / 4.0;
      var r = msg.readUInt16() / 10.0;
      this.zombiePlayers.push({ x: x, y: y, rad: r });
    }
  }


};


ZombieMode.prototype.drawZombiePlayers = function () {
    if (this.zombiePlayers) {
      for (t = 0; t < this.zombiePlayers.length; t++) {
        drawPlayerOnMiniMap(this.zombiePlayers[t], "#adff32", 1.0);
      }
    }
  };
  
  ZombieMode.prototype.drawMap = function () {
    this.buildPieChart();
    if (!isZombie) this.drawZombiePlayers();
  };
  ZombieMode.prototype.pieChartCanvas = null;
  ZombieMode.prototype.teamColors = {
    0: "white",
    1: "#B6CF40"
  };
  
  ZombieMode.prototype.buildPieChart = function () {
    if (this.pieChartCanvas == null)
      this.pieChartCanvas = document.createElement("canvas");
  
    if (this.pieChartCanvas == null) return;
  
    var ctx_ = this.pieChartCanvas.getContext("2d");
  
    var data = {
      0: this.nonZombiePlayersCount,
      1: this.zombieCount
    };
    //console.log(data);
    teamID = isZombie ? 1 : 0;
    var myPiechart = new Piechart({
      pad: 30,
      canvas: this.pieChartCanvas,
      data: data,
      colors: this.teamColors
    });
  
    var boardLength = 55;
    var nameH = 40;
    var pad = 5;
  
    var borad_height = 210;
    var borad_width = 200;
  
    boardLength = borad_height + pad * 2;
    this.pieChartCanvas.width = borad_width + pad * 2;
    this.pieChartCanvas.height = boardLength;
    myPiechart.draw();
  
    ctx_.globalAlpha = 0.2;
  
    var y = pad;
    ctx_.globalAlpha = 0.5;
    ctx_.fillStyle = "white";
    ctx_.font = "20px Arial";
    var y = 200;
    str = _0xfa658b.name; // + " out of " + stats.totalPlayers + " players";
    ctx_.fillText(
      str,
      this.pieChartCanvas.width / 2 - ctx_.measureText(str).width / 2 - 15,
      y
    );
    y += 20;
    ctx_.fillText(
        "ZombieMode",
        this.pieChartCanvas.width / 2 - ctx_.measureText("ZombieMode").width / 2 - 15,
        y
    );
  };
  
  ZombieMode.prototype.endScreenDisplayed = false;
  ZombieMode.prototype.buildEndScreenHTML = function (data) {
    if (this.endScreenDisplayed) return;
    this.endScreenDisplayed = true;
    //refreshBannerAds();
  
    var html = "";
    html += "<div class='msg'>YOU WERE #" + data.rank + "</div>";
    html += "<div class='row'>";
    html += "<div class='label'>Killed by:</div>";
    html += "<div class='value2'>" + data.killedBy + "</div>";
    html += "</div>";
    html += "<div class='row'>";
    html += "<div class='col1'>";
    html += "<div class='label'>Time alive:</div>";
    html += "<div class='value'>" + secToTime(data.timeAlive) + "</div>";
    html += "</div>";
    html += "<div class='col2'>";
    html += "<div class='label'>Total kills:</div>";
    html += "<div class='value'>" + data.totalKills + "</div>";
    html += "</div>";
    html += "</div>";
    html += "<div class='row'>";
    html += "<div class='col1'>";
    html += "<div class='label'>Top rank:</div>";
    html += "<div class='value'>" + data.topRank + "</div>";
    html += "</div>";
    html += "<div class='col2'>";
    html += "<div class='label'>Max xp:</div>";
    html += "<div class='value'>" + formatNumK(data.maxXP) + "</div>";
    html += "</div>";
    html += "</div>";
    html += "<div style='clear:both;'></div>";
    html += "<div class='btnDiv'>";
    //html += "<button id='btnContinue' class='btn'>Continue</button>";
    html += "<button id='btnMopeOptions' class='btn'>      CONTINUE      </button>";
    html += "</div>";
    html += "<div style='clear:both;'></div>";
    var endScreen = document.getElementById("endScreen");
    if (endScreen) {
      endScreen.innerHTML = html;
      endScreen.style.display = "block";
      /*var btnContinue = document.getElementById("btnContinue");
      var btnMopeOptions = document.getElementById("btnMopeOptions");
      btnContinue.onclick = onClickContinue;*/
      //document.getElementById("mopeMenu").style.display = "none";
    }
    if (!isAliveInGame || isGhost) {
      refreshBannerAds();
      /*document.getElementById("updatesDiv").style.display = "none";
      document.getElementById("mopeMenu").style.display = "none";
      document.getElementById("appsDiv").style.display = "none";
      if(document.getElementById("moneyRectangle")!=null)
      document.getElementById("moneyRectangle").style.marginTop = "55px";*/
    }
  };
  
  ZombieMode.prototype.endScreenCanvas = null;
  ZombieMode.prototype.buildEndScreen = function (playerData, stats) {
    if (this.endScreenCanvas == null)
      this.endScreenCanvas = document.createElement("canvas");
  
    if (this.endScreenCanvas == null) return;
  
    var ctx_ = this.endScreenCanvas.getContext("2d");
    var boardLength = 55;
    var nameH = 40;
    var pad = 5;
  
    var borad_height = 240;
    var borad_width = 420;
  
    boardLength = borad_height + pad * 2;
    this.endScreenCanvas.width = borad_width + pad * 2;
    this.endScreenCanvas.height = boardLength;
    ctx_.globalAlpha = 0.2;
    ctx_.fillStyle = "#000000";
    ctx_.fillRect(0, 0, this.endScreenCanvas.width, this.endScreenCanvas.height);
    ctx_.fillStyle = "#000000";
    ctx_.fillRect(
      pad,
      pad,
      this.endScreenCanvas.width - pad * 2,
      this.endScreenCanvas.height - pad * 2
    );
    var y = pad;
    ctx_.globalAlpha = 1;
    ctx_.fillStyle = "#FFFFFF";
    ctx_.font = "30px Arial";
  
    y += 55;
  
    var str = "Final Stats"; //"Top Players";
    ctx_.font = "30px Arial";
    ctx_.fillText(
      str,
      this.endScreenCanvas.width / 2 - ctx_.measureText(str).width / 2,
      y
    );
  
    ctx_.font = "20px Arial";
    y += 45;
    str = "You were #" + stats.rank; // + " out of " + stats.totalPlayers + " players";
    ctx_.fillText(
      str,
      this.endScreenCanvas.width / 2 - ctx_.measureText(str).width / 2,
      y
    );
  
    y += 40;
    var result = secToTime(stats.timeAlive);
  
    var x = pad + 15;
  
    drawLabelValueOn(ctx_, "Killed by", stats.killedBy, x, y);
    y += 40;
    drawLabelValueOn(ctx_, "Time Alive", secToTime(stats.timeAlive), x, y);
    x += 210;
    drawLabelValueOn(ctx_, "Total Kills", stats.totalKills, x, y);
    y += 40;
    x = pad + 15;
    drawLabelValueOn(ctx_, "Top rank", stats.topRank, x, y);
    x += 210;
    drawLabelValueOn(ctx_, "Max XP", formatNumK(stats.maxXP), x, y);
  
    y += 50;
    /*
      this.btnPlayAgain.update = function () {
          this.x = canvasW / 2 - this.w / 2;
          this.y = canvasH * 0.4 + boardLength;
      }
  */
  };

  ZombieMode.prototype.lastWastedPopupT = 0;
ZombieMode.prototype.onPlayerWasted = function (wastedName) {
  if ((_0x1534e0 - this.lastWastedPopupT) / 1000.0 > 0.7) {
    //over 0.5s since last popup
    this.lastWastedPopupT = _0x1534e0;
    var newPop = new TextPopup(wastedName + " wasted! ", 40, "red", 1500);
    this.wastedPopups.push(newPop);
  }
};

window.ZombieMode = ZombieMode;

//battleroyale
BattleRoyale.prototype = Object.create(_0x2a91c6.prototype);
BattleRoyale.prototype.constructor = BattleRoyale;
BattleRoyale.superClass = _0x2a91c6;
BattleRoyale.prototype.safeArea = null;

function BattleRoyale(_0x44a011) {
    this.mode = _0x44a011;
    this.stamp = +new Date();
    this.chatAllowed = !0;
    this.createInterfaceButtons();
}
BattleRoyale.prototype.wastedPopups = [];
BattleRoyale.prototype.playerDisplayNum = 0;
BattleRoyale.prototype.setServerPlayerCount = function () {
    playersOnlineTxt.setText(_0x29cd81(nPlayers) + ' players online');
    this.playerDisplayNum = 0 == this.playerDisplayNum ? 0x1 : 0;
};
BattleRoyale.prototype.interface = function () {
    if (-0x1 != this.state && this.mode == gameMode) {
        if (isAliveInGame)
            for (var _0x3c5cc7 = this.wastedPopups.length - 0x1; 0 <= _0x3c5cc7; _0x3c5cc7--) {
                var _0x41114d = this.wastedPopups[_0x3c5cc7];
                _0x41114d.draw();
                _0x41114d.timedOut && this.wastedPopups.splice(_0x3c5cc7, 0x1);
            }
        null != this.endScreenCanvas && (this.endScreenCanvas.width && ctx.drawImage(this.endScreenCanvas, canvasW / 0x2 - this.endScreenCanvas.width / 0x2, 0xf * pixelRat, this.endScreenCanvas.width, this.endScreenCanvas.height), isAliveInGame && !isGhost);
        this.drawInterfaceButtons();
    }
};
BattleRoyale.prototype.interfaceReset = function () {
    this.dangerCircleMiniMapCanvas = this.endScreenCanvas = null;
    this.wastedPopups = [];
    this.playercount = this.lastWastedPopupT = 0;
    this.safeArea = null;
    if (this.interfaceButtons)
        for (var _0xe72588 = 0; _0xe72588 < this.interfaceButtons.length; _0xe72588++) this.interfaceButtons[_0xe72588].onInterfaceReset();
    this.interfaceButtons = [];
};
BattleRoyale.prototype.onInit = function () {};
BattleRoyale.prototype.playercount = 0;
BattleRoyale.prototype.setPlayerCount = function (_0xe8c605) {
    this.playercount = _0xe8c605;
};
BattleRoyale.prototype.screenTextEndT = 0;
BattleRoyale.prototype.screenTextMsg = "";
BattleRoyale.prototype.screenMessage = function () {
    var fadeDur = 1.0;
    var a = (this.screenTextEndT - _0x1534e0) / 1000.0 / fadeDur;
    a = 0 > a ? 0 : 1 < a ? 1 : a; //clamp from 0-1
    if (a > 0) {
      ctx.save();
      var bx = canvasW / 2;
      var barH = 60 * interfS;
      var barW = (canvasW / 2 - 100) * interfS;
      ctx.globalAlpha = 0.35;
      ctx.fillStyle = "black"; //bar bg
      var by = canvasH - canvasH * 0.2;
      ctx.fillRect(bx - barW / 2, by - barH / 2, barW, barH); //bg
      ctx.globalAlpha = 1;
      ctx.globalAlpha = a;
  
      ctx.globalAlpha = 1;
      ctx.fillStyle = "white";
      ctx.font = 40.0 * interfS + "px Arial";
      ctx.lineWidth = 1;
      ctx.textAlign = "center";
      ctx.textBaseline = "middle"; //vertical center
      ctx.shadowOffsetX = 1;
      ctx.shadowOffsetY = 1;
      ctx.shadowColor = "black";
  
      ctx.fillText(this.screenTextMsg, canvasW / 2, by);
  
      /*
          battyleroyal_txtmsg.setColor("white");
          battyleroyal_txtmsg.setText(this.screenTextMsg);
          battyleroyal_txtmsg.setFontSize(40.0 * interfS);
          battyleroyal_txtmsg.x = bx;
          battyleroyal_txtmsg.y = by;
          battyleroyal_txtmsg.draw();
         */
  
      ctx.restore();
    }
};
BattleRoyale.prototype.setMessage = function (newText, newDur) {

    this.screenTextMsg = newText;
  
    if (newDur == 0) this.screenTextEndT = +new Date() + newDur;
    else this.screenTextEndT = +new Date() + newDur;
  
  };
  

  BattleRoyale.prototype.msg_statusbar = null;
BattleRoyale.prototype.msg_playerCount = null;

var x_pc1 = 0.1;

BattleRoyale.prototype.setPlayerCountMsg = function () {
  var txt_size = 20.0;
  var txt_alpha = 1.0;
  var txt_color = "white";

  var x = canvasW / 2;
  var y = 30;
  var bg_w = 100;
  var bg_h = 40;
  var bg_color = "black"; //bar bg
  var bg_alpha = 0.1;
  var txt = "";

  if (this.playerCountMsg != "alive") {
    bg_h = 70;
    txt = this.playerCountMsg + "\n" + this.alivePlayers + " joined";
  } else {
    txt = this.alivePlayers + " alive";
  }

  var dur = +new Date() + (60 * 1000);
  this.msg_playerCount = {
    txt: txt, txt_size: txt_size, txt_alpha: txt_alpha, txt_color: txt_color, x: x, y: y, bg_w: bg_w, bg_h: bg_h, bg_color: bg_color, bg_alpha: bg_alpha, dur: dur
  }
}
var MsgGameMode_handleMessage = 81;
var MsgGameMode_playerCount = 82;
var MsgGameMode_statusBarMsg = 83;
var MsgGameMode_battleRoyal_begins = 84;
function secToTime(sec) {
    var date = new Date(null);
    date.setSeconds(sec); // specify value for SECONDS here
    var mm = date.getMinutes();
    var ss = date.getSeconds();

    var result = "";
    if (mm > 0)
        result = mm + "m ";
    if (ss > 0)
        result += ss + "s";

    return result;
}
BattleRoyale.prototype.alivePlayers = 0;
BattleRoyale.prototype.handleMessage = function (msg) {
    var battleroyal_msg = msg.readUInt8();
    //console.log("battleroyal_msg :" + battleroyal_msg);
    switch (battleroyal_msg) {
      case MsgGameMode_statusBarMsg: {
        var m = msg.readString();
        this.setStatusBarMessage(m, 15.0);
        break;
      }
      case MsgGameMode_playerCount: {
        this.alivePlayers = msg.readUInt16();
        this.playerCountMsg = msg.readString();
        this.playercount = this.alivePlayers;
        this.setPlayerCountMsg();
        break;
      }
      case MsgGameMode_battleRoyal_begins: {
        this.timeRemain = msg.readUInt16();
        break;
      }
      // msg_seteggid

      case 33: // Msg_battleroyal_eliminated
        {
          var rank = msg.readUInt16();
  
          isGhost = true;
  
          this.showStats = true;
  
          
                  screenText = "You are eliminated!\nYour were #" + rank;
                  respawnXp = 0;
                  screenTextFontSize = 50;
                  screenTextCol = "red";
                  screenTextEndT = +new Date() + 5000;
                  
          aniChoice_isOpen = false;
          //resetAfk();
        }
        break;
      case 34: // Msg_battleroyal_won
        {
          screenText = "You WON!";
          respawnXp = 0;
          screenTextFontSize = 80;
          screenTextCol = "limegreen";
          screenTextEndT = +new Date() + 5000;
          aniChoice_isOpen = false;
          //resetAfk();
        }
        break;
      case 35: // Msg_battleroyal_reset
        {
        }
        break;
      case 36: // Msg_battleroyal_playerList
        {
          //var numRoomPlayers = msg.readUInt8();
          var top10 = msg.readUInt8();
          //console.log("Leaderboard update: myrank "+ownRank+" roomPlayers "+numRoomPlayers);
          //log("leaderboard received: " + top10 + " players!");
  
          var lbData = [];
          for (i = 0; i < top10; ++i) {
            lbData.push({
              name: msg.readString(),
              xp: msg.readUInt32()
            });
          }
          this.leaderboard(lbData);
        }
        break;
      case 37: // Msg_battleroyal_begins
        {
          var timeRemain = msg.readUInt16();
  
          var result = secToTime(timeRemain);
  
          if (this.state == 4) {
            //this.btnPlayAgain.isVisible = true;
  
            var m = "Game restarts in " + result;
            if (timeRemain < 3) m = "Starting new game";
            this.setMessage(m, 500);
          } else {
            var m = "Battle begins in " + result;
            if (timeRemain < 3) {
              if (result == "") m = "Starting new battle!";
              else m = "Starting new battle! (" + result + ")";
            }
            this.setMessage(m, 500);
  
            if (timeRemain == 0) {
                _0x26927b("SURVIVE!", 2500);
            }
          }
        }
        break;
      case 38: // Msg_battleroyal_playerCount
        {
          this.playersJoined = msg.readUInt16();
          //console.log("playersJoined : " +this.playersJoined);
          if (this.playersJoined > 0) this.setPlayerCount(this.playersJoined);
        }
        break;
      case 39: // Msg_battleroyal_shrinkTime
        {
          var timeRemain = msg.readUInt16();
          var result = secToTime(timeRemain);
          if (!isGhost) {
            var m = "Heatwave expanding in " + result;
            if (timeRemain < 4) m = "Heatwave expands now!";
            this.setMessage(m, 500);
  
            if (timeRemain == 0) {
                _0x26927b("STAY SAFE!", 2500);
            }
          }
          //showScreenTextWithDur("Movement Lock (ESC KEY): " + (ESC_down ? "ON" : "OFF"), 2500);
        }
        break;
      case 40: // Msg_battleroyal_staySafe
        {
          if (isGhost) this.setMessage("You have been eliminated!", 500);
          else this.setMessage("Stay in safe area!", 500);
        }
        break;
  
      case 41: // Msg_battleroyal_gameState
        {
          gameState = this.state = msg.readUInt8();
  
          this.playersJoined = msg.readUInt16();
          //console.log("playersJioned : " + this.playersJoined);
          if (this.playersJoined > 0) this.setPlayerCount(this.playersJoined);
  
          //this.btnPlayAgain.isVisible = this.state == 4;
          if (this.state == battleRoyal_waitingForPlayers)
            this.setMessage("Waiting for players", 5000);
          else if (this.state == battleRoyal_gameState_gameReset) {
            resetClient();
          }
        }
        break;
      case 42: // Msg_battleroyal_gameover
        {
          var hasWon = msg.readUInt8() == 1;
          if (hasWon) this.setMessage("You WON!", 15000);
          else this.setMessage("You LOST!", 15000);
        }
        break;
      case 43: // Msg_battleroyal_gameover
        {
          //console.log("Disconnected on game over!");
          dcedFromAfk = true;
          if (wsIsOpen()) {
            ws.close();
          }
        }
        break;
      case 44: // Msg_battleroyal_playerWasted
        {
          var wastedPlayerName = msg.readString();
          if (wastedPlayerName && wastedPlayerName.length > 0)
            this.onPlayerWasted(wastedPlayerName);
        }
        break;
      case 45: // Msg_battleroyal_endScreen
        {
          console.log("Msg_battleroyal_endScreen");
          // number of players to read
          //  var totalPlayers = msg.readUInt8();
          var stats = null;
          var n = 0;
          if (!_0x1d0b8d) {
            stats = this.readPlayerStats(msg);
            n = stats.totalPlayers;
          } else {
            n = msg.readUInt16();
          }
  
          //console.log(stats);
          // var topPlayerWins = msg.readUInt8();
          var playerData = [];
          if (n > 0) {
            if (n > 5) n = 5;
            for (var i = 0; i < n; ++i) {
              playerData.push({
                playerName: msg.readString(),
                wins: msg.readUInt8()
              });
            }
          }
          //playerData[0].wins = topPlayerWins;
          if (playerData != null || stats != null) {
            this.endScreenDisplayed = false;
            this.buildEndScreen(null, stats);
            //  this.buildEndScreen(playerData, stats);
          }
        }
        break;
      case 46: {
        // Msg_battleRoyal_battleEndTime
        var timeRemain = msg.readUInt16();
  
        if (timeRemain == 0) {
          this.setMessage("Battle Ended", 500);
        } else {
          var result = secToTime(timeRemain);
  
          if (!isGhost) this.setMessage("Battle Ending in " + result, 500);
        }
      }
      case 48: {
        // Msg_battleRoyal_battleEndTime
        var stats = this.readPlayerStats(msg);
        this.buildEndScreen(null, stats);
      }
    }
  };
BattleRoyale.prototype.showPlayerCount = function () {
    ctx.save();
    var _0x1232b1 = canvasW / 0x2,
        _0x5e5a7b = 0x32 * interfS,
        _0xf7a443 = 0x12c * interfS;
    ctx.globalAlpha = 0.35;
    ctx.fillStyle = 'black';
    var _0x2e1bec = 0x1e * interfS;
    ctx.fillRect(_0x1232b1 - _0xf7a443 / 0x2, _0x2e1bec, _0xf7a443, _0x5e5a7b);
    ctx.globalAlpha = 0x1;
    ctx.fillStyle = 'white';
    ctx.font = 0x1e * interfS + 'px Arial';
    ctx.lineWidth = 0x1;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.shadowOffsetX = 0x1;
    ctx.shadowOffsetY = 0x1;
    ctx.shadowColor = 'black';
    _0x2e1bec += 0x19 * interfS;
    _0x5e5a7b = ' player';
    0x1 < this.playercount && (_0x5e5a7b += 's');
    if (this.state == battleRoyal_gameState_inProgress) _0x5e5a7b += ' alive!';
    else if (this.state == battleRoyal_waitingForPlayers || this.state == battleRoyal_gameState_ready) _0x5e5a7b += ' joined';
    ctx.fillText(this.playercount + _0x5e5a7b, _0x1232b1, _0x2e1bec);
    ctx.restore();
};
BattleRoyale.prototype.lbCanvas = null;
BattleRoyale.prototype.leaderboard = function (_0x20c5ac) {
    null == this.lbCanvas && (this.lbCanvas = document.createElement('canvas'));
    if (_0x20c5ac) {
        var _0x1de13c = this.lbCanvas.getContext('2d'),
            _0x2498ee;
        _0x2498ee = 0x37 + 0x16 * _0x20c5ac.length;
        this.lbCanvas.width = 0x10e;
        this.lbCanvas.height = _0x2498ee;
        _0x1de13c.globalAlpha = 0.2;
        _0x1de13c.fillStyle = '#000000';
        _0x1de13c.fillRect(0, 0, this.lbCanvas.width, this.lbCanvas.height);
        _0x1de13c.globalAlpha = 0x1;
        _0x1de13c.fillStyle = '#FFFFFF';
        _0x2498ee = _0xfa658b.name;
        _0x1de13c.font = '24px Arial';
        0x2 != _0x14fca5 && (_0x1de13c.shadowOffsetX = 0x1, _0x1de13c.shadowOffsetY = 0x1);
        _0x1de13c.shadowColor = 'black';
        _0x1de13c.fillText(_0x2498ee, this.lbCanvas.width / 0x2 - _0x1de13c.measureText(_0x2498ee).width / 0x2, 0x28);
        var _0x48d4c8;
        _0x1de13c.textAlign = 'left';
        _0x1de13c.font = '17px Arial';
        for (_0x48d4c8 = 0; _0x48d4c8 < _0x20c5ac.length; ++_0x48d4c8) _0x2498ee = _0x47691c ? '' : _0x20c5ac[_0x48d4c8].name || 'mrmodpack.ml', _0x2498ee += ' (' + _0x3dd6a4(_0x20c5ac[_0x48d4c8].xp) + ')', _0x1de13c.fillStyle = '#FFFFFF', _0x1de13c.fillText(_0x2498ee, 0xf, 0x41 + 0x16 * _0x48d4c8);
    }
};
BattleRoyale.prototype.drawLeaderboard = function () {
    if (isAliveInGame && gameSafeArea){
        drawSafeArea();
    }
};
BattleRoyale.prototype.btnPlayAgain = null;
BattleRoyale.prototype.showStats = !0;
BattleRoyale.prototype.interfaceButtons = [];
BattleRoyale.prototype.createInterfaceButtons = function () {
    this.interfaceButtons = [];
};
BattleRoyale.prototype.drawInterfaceButtons = function () {
    if (this.interfaceButtons)
        for (var _0x599aff = 0; _0x599aff < this.interfaceButtons.length; _0x599aff++) {
            var _0x4c5299 = this.interfaceButtons[_0x599aff];
            _0x4c5299.isVisible && _0x4c5299.draw();
        }
};
BattleRoyale.prototype.onResize = function () {
    this.drawInterfaceButtons();
};
BattleRoyale.prototype.readPlayerStats = function (_0x315bcd) {
    var _0x29ee7e = [];
    _0x29ee7e.totalPlayers = _0x315bcd.readUInt16();
    _0x29ee7e.rank = _0x315bcd.readUInt16();
    _0x29ee7e.timeAlive = _0x315bcd.readUInt16();
    _0x29ee7e.totalKills = _0x315bcd.readUInt16();
    _0x29ee7e.topRank = _0x315bcd.readUInt16();
    _0x29ee7e.maxXP = _0x315bcd.readUInt32();
    //_0x29ee7e.killedBy = _0x315bcd.readString();
    return _0x29ee7e;
};
BattleRoyale.prototype.playerInfo = function (_0x53f224) {
    isGhost && !spectatingInGame ? (_0x53f224 = this.readPlayerStats(_0x53f224), this.buildEndScreenHTML(_0x53f224)) : isGhost || (this.endScreenCanvas = null);
};
var gameSafeArea = null;
var gameState = 0;
var canvas_safeArea = null;
var drawStroke2 = function (ctx_, x, y, rad, lineWidth, col) {
    ctx_.strokeStyle = col;
    ctx_.lineWidth = lineWidth;
    ctx_.beginPath();
    ctx_.arc(x, y, Math.max(0, rad), 0, Math.PI * 2);
    ctx_.stroke();
  };
var circleQuarter = function (_ctx, rad, angle, color, alpha, w, h) {
    // this method draws a polygon square based on gameW, having one side quarter of a
    // circle of a given radius and then rotates the polygon to a given rotation this
    // way, we have 1/4th of a circle clipped doing so if we draw 4 polygons like this
    // then we have a full circle clipped inside and everythign outside is filled with
    // the given color
    _ctx.save();
    _ctx.globalAlpha = alpha;
    _ctx.fillStyle = color;
    _ctx.rotate(angle);
    _ctx.save();
    _ctx.strokeStyle = "white";
    _ctx.beginPath();
    _ctx.arc(0, 0, rad, 0, Math.PI * 0.5, false);
    _ctx.stroke();
    _ctx.restore();

    _ctx.save();
    _ctx.beginPath();
    _ctx.arc(0, 0, rad, 0, Math.PI * 0.5, false);
    _ctx.lineTo(0, w);
    _ctx.lineTo(h, w);
    _ctx.lineTo(h, 0);
    //ctx.lineTo(h, 0);
    _ctx.closePath();
    _ctx.fill();
    _ctx.restore();
    _ctx.restore();
};
function drawSafeArea() {
    //scale minimap based on ratio for minimap
    // minimapW = minimapH * (gameW / gameH);
  
    //offscreen canvas to render and save minimap (performance+ease)
    if (!canvas_safeArea) canvas_safeArea = document.createElement("canvas");
  
    canvas_safeArea.width = minimapW;
    canvas_safeArea.height = minimapH;
    var ctx_ = canvas_safeArea.getContext("2d");
  
    ctx_.clearRect(0, 0, canvas_safeArea.width, canvas_safeArea.height);
    // ctx_.globalAlpha = 1;
    // ctx_.fillStyle = "red";
    // ctx_.fillRect(0, 0, canvas_safeArea.width, canvas_safeArea.height);
  
    ctx_.save();
    var plR = Math.max(3, gameSafeArea.rad);
  
    //mapCtx.translate(dangerCircleMiniMapCanvas.width / 2, dangerCircleMiniMapCanvas.height / 2);
    var x = gameSafeArea.x;// * (canvas_safeArea.width / minimapW);
    var y = gameSafeArea.y;// * (canvas_safeArea.height / minimapH);
    ctx_.translate(x, y);
    ctx_.save();
    // ctx_.strokeStyle = "white";
    // ctx_.lineWidth = 3;
    // ctx_.globalAlpha = 1;
    // ctx_.beginPath();
    // ctx_.arc(x, y, gameSafeArea.rad, 0, Math.PI * 2);
    ctx_.globalAlpha = 1;
    drawStroke2(ctx_, 0, 0, gameSafeArea.rad, 5, "white");
    ctx_.restore();
    var h = interfS * minimapW * 1.5;
    var w = interfS * minimapH * 1.5;
    var alpha = 1.0;
  
    var unsafeAreaColor = "red";
    circleQuarter(ctx_, gameSafeArea.rad, Math.PI * 0, unsafeAreaColor, alpha, h, w);
    circleQuarter(ctx_, gameSafeArea.rad, Math.PI * 0.5, unsafeAreaColor, alpha, h, w);
    circleQuarter(ctx_, gameSafeArea.rad, Math.PI * 1, unsafeAreaColor, alpha, h, w);
    circleQuarter(ctx_, gameSafeArea.rad, Math.PI * 1.5, unsafeAreaColor, alpha, h, w);
    ctx_.restore();
  
  
    if (canvas_safeArea) {
      ctx.drawImage(canvas_safeArea, canvasW - (10 * pixelRat + _0x3c1394.width * interfS),
        10 * pixelRat,
        minimapW * interfS,
        minimapH * interfS);
    }
}
BattleRoyale.prototype.worldUpdate = function (msg) { // den amogus
    gameState = msg.readUInt8();
    if (gameState == 2) {
        var minimapScaleF_x = minimapW / 200.0; // / size scaled to for msg send
        var minimapScaleF_y = minimapH / 200.0;
        var x = msg.readUInt32() * minimapScaleF_x;
        var y = msg.readUInt32() * minimapScaleF_y;
        var rad = msg.readUInt32() * 5.0;
        gameSafeArea = { x: x, y: y, rad: rad * (minimapW / gameW) };
    } else gameSafeArea = null;
};
BattleRoyale.prototype.drawMap = function () {
    this.buildPieChart();
};
BattleRoyale.prototype.nonZombiePlayersCount = 1;
BattleRoyale.prototype.zombieCount = 1;
BattleRoyale.prototype.buildPieChart = function () {
    if (this.pieChartCanvas == null)
      this.pieChartCanvas = document.createElement("canvas");
  
    if (this.pieChartCanvas == null) return;
  
    var ctx_ = this.pieChartCanvas.getContext("2d");
  
    var data = {
      0: this.nonZombiePlayersCount,
      1: this.zombieCount
    };
    teamID = 0;
    var myPiechart = new Piechart({
      pad: 30,
      canvas: this.pieChartCanvas,
      data: data,
      colors: this.teamColors
    });
  
    var boardLength = 55;
    var nameH = 40;
    var pad = 5;
  
    var borad_height = 210;
    var borad_width = 200;
  
    boardLength = borad_height + pad * 2;
    this.pieChartCanvas.width = borad_width + pad * 2;
    this.pieChartCanvas.height = boardLength;
    myPiechart.draw();
  
    ctx_.globalAlpha = 0.2;
  
    var y = pad;
    ctx_.globalAlpha = 0.5;
    ctx_.fillStyle = "white";
    ctx_.font = "20px Arial";
    var y = 200;
    str = _0xfa658b.name; // + " out of " + stats.totalPlayers + " players";
    ctx_.fillText(
      str,
      this.pieChartCanvas.width / 2 - ctx_.measureText(str).width / 2 - 15,
      y
    );
    y += 20;
    ctx_.fillText(
        "BattleRoyale",
        this.pieChartCanvas.width / 2 - ctx_.measureText("BattleRoyale").width / 2 - 15,
        y
    );
  };
BattleRoyale.prototype.pieChartCanvas = null;
BattleRoyale.prototype.teamColors = {
    0: 'white',
    1: '#0f0f0f'
};
BattleRoyale.prototype.endScreenDisplayed = !0x1;
BattleRoyale.prototype.buildEndScreenHTML = function (_0x5ef36e) {
    if (!this.endScreenDisplayed) {
        this.endScreenDisplayed = !0;
        var _0x4651dc;
        _0x4651dc = '' + ("<div class='msg'>YOU WERE #" + _0x5ef36e.rank + '</div>');
        _0x4651dc = _0x4651dc + "<div class='row'><div class='label'>Killed by:</div>" + ("<div class='value2'>" + _0x5ef36e.killedBy + '</div>');
        _0x4651dc = _0x4651dc + "</div><div class='row'><div class='col1'><div class='label'>Time alive:</div>" + ("<div class='value'>" + _0x1b18ae(_0x5ef36e.timeAlive) + '</div>');
        _0x4651dc = _0x4651dc + "</div><div class='col2'><div class='label'>Total kills:</div>" + ("<div class='value'>" + _0x5ef36e.totalKills + '</div>');
        _0x4651dc = _0x4651dc + "</div></div><div class='row'><div class='col1'><div class='label'>Top rank:</div>" + ("<div class='value'>" + _0x5ef36e.topRank + '</div>');
        _0x4651dc = _0x4651dc + "</div><div class='col2'><div class='label'>Max xp:</div>" + ("<div class='value'>" + _0x3dd6a4(_0x5ef36e.maxXP) + '</div>');
        _0x4651dc += "</div></div><div style='clear:both;'></div><div class='btnDiv'><button id='btnMopeOptions' class='btn'>      CONTINUE      </button></div><div style='clear:both;'></div>";
        if (_0x5ef36e = document.getElementById('endScreen')) _0x5ef36e.innerHTML = _0x4651dc, _0x5ef36e.style.display = 'block', document.getElementById('mopeMenu'), btnMopeOptions.onclick = _0x510560;
        if (!isAliveInGame || isGhost) document.getElementById('startMenuWrapper').style.display = 'block';
    }
};
BattleRoyale.prototype.endScreenCanvas = null;
BattleRoyale.prototype.buildEndScreen = function (_0x2f91f1, _0x5794d2) {
    null == this.endScreenCanvas && (this.endScreenCanvas = document.createElement('canvas'));
    if (null != this.endScreenCanvas) {
        var _0x27edf9 = this.endScreenCanvas.getContext('2d');
        this.endScreenCanvas.width = 0x1ae;
        this.endScreenCanvas.height = 0xfa;
        _0x27edf9.globalAlpha = 0.2;
        _0x27edf9.fillStyle = '#000000';
        _0x27edf9.fillRect(0, 0, this.endScreenCanvas.width, this.endScreenCanvas.height);
        _0x27edf9.fillStyle = '#000000';
        _0x27edf9.fillRect(0x5, 0x5, this.endScreenCanvas.width - 0xa, this.endScreenCanvas.height - 0xa);
        var _0x19a291;
        _0x27edf9.globalAlpha = 0x1;
        _0x27edf9.fillStyle = '#FFFFFF';
        _0x27edf9.font = '30px Arial';
        _0x19a291 = 0x3c;
        var _0x261460 = 'Final Stats';
        _0x27edf9.font = '30px Arial';
        _0x27edf9.fillText(_0x261460, this.endScreenCanvas.width / 0x2 - _0x27edf9.measureText(_0x261460).width / 0x2, _0x19a291);
        _0x27edf9.font = '20px Arial';
        _0x19a291 += 0x2d;
        _0x261460 = 'You were #' + _0x5794d2.rank + " out of " + _0x5794d2.totalPlayers + " players";
        _0x27edf9.fillText(_0x261460, this.endScreenCanvas.width / 0x2 - _0x27edf9.measureText(_0x261460).width / 0x2, _0x19a291);
        _0x19a291 += 0x28;
        _0x1b18ae(_0x5794d2.timeAlive);
        _0x261460 = 0x14;
        _0x17faa5(_0x27edf9, 'Killed by', _0x5794d2.killedBy, _0x261460, _0x19a291);
        _0x19a291 += 0x28;
        _0x17faa5(_0x27edf9, 'Time Alive', _0x1b18ae(_0x5794d2.timeAlive), _0x261460, _0x19a291);
        _0x17faa5(_0x27edf9, 'Total Kills', _0x5794d2.totalKills, _0x261460 + 0xd2, _0x19a291);
        _0x19a291 += 0x28;
        _0x261460 = 0x14;
        _0x17faa5(_0x27edf9, 'Top rank', _0x5794d2.topRank, _0x261460, _0x19a291);
        _0x261460 += 0xd2;
        _0x17faa5(_0x27edf9, 'Max XP', _0x3dd6a4(_0x5794d2.maxXP), _0x261460, _0x19a291);
    }
};
BattleRoyale.prototype.lastWastedPopupT = 0;
BattleRoyale.prototype.onPlayerWasted = function (_0x2318a3) {
    0.7 < (_0x1534e0 - this.lastWastedPopupT) / 0x3e8 && (this.lastWastedPopupT = _0x1534e0, _0x2318a3 = new _0x3a76ab(_0x2318a3 + ' wasted!', 0x28, 'red', 0x5dc), this.wastedPopups.push(_0x2318a3));
};
window.BattleRoyale = BattleRoyale;


var superClass = GameObj;
SafeArea.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
SafeArea.prototype.constructor = SafeArea;
SafeArea.superClass = superClass; //'class' var
SafeArea.prototype.color = "limegreen";
SafeArea.prototype.updateZ = function () {
    this.z = this.rad + 11110000;
};
var drawStroke = function (x, y, rad, lineWidth, col) {
    ctx.strokeStyle = col;
    ctx.lineWidth = lineWidth;
    ctx.beginPath();
    ctx.arc(x, y, Math.max(0, rad), 0, Math.PI * 2);
    ctx.stroke();
}
SafeArea.prototype.shrinkedRad = 0;
SafeArea.prototype.customDraw = function (batchDrawOutline) {
    ctx.save();
    var circle_outlineAlpha = 0.4;
    var circle_outlineWidth = 8;

    if (this.shrinkRad > 1) {
        ctx.save();
        ctx.globalAlpha = 0.1;
        drawStroke(0, 0, this.shrinkRad, circle_outlineWidth * 0.5, this.color);
        ctx.restore();
    }
    ctx.save();
    ctx.globalAlpha = circle_outlineAlpha + 0.3;
    drawStroke(0, 0, this.rad, circle_outlineWidth, this.color);
    ctx.restore();




    // draw cirlce which the danger zone will end
    if (this.shrinkedRad > 1) {
        ctx.save();
        ctx.globalAlpha = circle_outlineAlpha;
        drawStroke(0, 0, this.shrinkedRad, circle_outlineWidth, _0x45ff9a);
        ctx.restore();
    }

    var h = pixelRat * (gameH / 2);
    var w = pixelRat * (gameW / 2);

    var dangerAreaAlpha = circle_outlineAlpha - 0.1;
    var dangerAreaColor = this.color;

    var _width = gameW;
    var _height = gameH;
    // bottom right
    var br_w = _width - this.x;
    var br_h = _height - this.y;

    var bl_w = this.x;
    var bl_h = br_h;

    var tl_w = bl_w;
    var tl_h = this.y;

    var tr_w = br_w;
    var tr_h = tl_h;

    br_w = pixelRat * br_w;
    br_h = pixelRat * br_h;

    bl_w = pixelRat * bl_w
    bl_h = pixelRat * bl_h;

    tl_w = pixelRat * tl_w;
    tl_h = pixelRat * tl_h;

    tr_w = pixelRat * tr_w;
    tr_h = pixelRat * tr_h;



    // bottom right
    this.drawDangerAreaSegment2(0, dangerAreaColor, dangerAreaAlpha, br_h, br_w);
    // bottom left
    this.drawDangerAreaSegment2(Math.PI * 0.5, dangerAreaColor, dangerAreaAlpha, bl_w, bl_h);
    // top left
    this.drawDangerAreaSegment2(Math.PI * 1, dangerAreaColor, dangerAreaAlpha, tl_h, tl_w);
    // top right
    this.drawDangerAreaSegment2(Math.PI * 1.5, dangerAreaColor, dangerAreaAlpha, tr_w, tr_h);

    ctx.restore();

    // SafeArea_drawMap();
}
SafeArea.prototype.drawDangerAreaSegment2 = function (rotation, color, alpha, w, h) {
    // this method draws a polygon square based on gameW, having one side quarter of a
    // circle of a given radius and then rotates the polygon to a given rotation this
    // way, we have 1/4th of a circle clipped doing so if we draw 4 polygons like this
    // then we have a full circle clipped inside and everythign outside is filled with
    // the given color
    ctx.save();
    //ctx.filter = 'blur(100px)';
    ctx.globalAlpha = alpha;
    ctx.fillStyle = color;
    //ctx.strokeStyle = "black";
    ctx.beginPath();
    ctx.rotate(rotation)
    ctx.arc(0, 0, this.rad, 0, Math.PI * 0.5, false);
    ctx.lineTo(0, w);
    ctx.lineTo(h, w);
    ctx.lineTo(h, 0);
    ctx.closePath();
    ctx.fill();
    // ctx.stroke();
    ctx.restore();

}

var lerpI = 0.125;

SafeArea.prototype.moveUpdate = function () {

    var a = ((_0x1534e0 - this.updateTime) / 1000) / lerpI;
    a = 0 > a ? 0 : 1.0 < a ? 1.0 : a; //clamp from 0-1
    this.x = a * (this.nx - this.ox) + this.ox;
    this.y = a * (this.ny - this.oy) + this.oy;
    this.rad += (this.nRad - this.rad) * 0.1;
    return Math.min(1.0, a);
};
SafeArea.prototype.readCustomData_onUpdate = function (msg) {
    this.shrinkRad = msg.readUInt32() / 4.0;
    this.shrinkedRad = msg.readUInt32() / 4.0;
}

var o_safeArea = 76;

function SafeArea() {
    SafeArea.superClass.call(this, o_safeArea);
    SafeArea.prototype.easeAngleChanges = true;
    this.color = gameMode == 5 ? "limegreen" : "red";

}


window.SafeArea = SafeArea;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(SafeArea, o_safeArea);

//teammode
TeamMode.prototype = Object.create(_0x2a91c6.prototype);
TeamMode.prototype.constructor = TeamMode;
TeamMode.superClass = _0x2a91c6;
TeamMode.prototype.handleMessage = function (msg) {};
TeamMode.prototype.safeArea = null;
TeamMode.prototype.screenMessage = function () {};
TeamMode.prototype.showPlayerCount = function () {};

function TeamMode(_0x44a011) {
    this.mode = _0x44a011;
    this.stamp = +new Date();
    this.chatAllowed = !0;
    this.createInterfaceButtons();
}
TeamMode.prototype.wastedPopups = [];
TeamMode.prototype.playerDisplayNum = 0;
TeamMode.prototype.setServerPlayerCount = function () {
    playersOnlineTxt.setText(_0x29cd81(nPlayers) + ' players online');
    this.playerDisplayNum = 0 == this.playerDisplayNum ? 0x1 : 0;
};
TeamMode.prototype.interface = function () {
    if (-0x1 != this.state && this.mode == gameMode) {
        if (isAliveInGame)
            for (var _0x3c5cc7 = this.wastedPopups.length - 0x1; 0 <= _0x3c5cc7; _0x3c5cc7--) {
                var _0x41114d = this.wastedPopups[_0x3c5cc7];
                _0x41114d.draw();
                _0x41114d.timedOut && this.wastedPopups.splice(_0x3c5cc7, 0x1);
            }
        null != this.endScreenCanvas && (this.endScreenCanvas.width && ctx.drawImage(this.endScreenCanvas, canvasW / 0x2 - this.endScreenCanvas.width / 0x2, 0xf * pixelRat, this.endScreenCanvas.width, this.endScreenCanvas.height), isAliveInGame && !isGhost || _0x385867(!0));
        this.drawInterfaceButtons();
    }
};
TeamMode.prototype.interfaceReset = function () {
    this.dangerCircleMiniMapCanvas = this.endScreenCanvas = null;
    this.wastedPopups = [];
    this.playercount = this.lastWastedPopupT = 0;
    this.safeArea = null;
    if (this.interfaceButtons)
        for (var _0xe72588 = 0; _0xe72588 < this.interfaceButtons.length; _0xe72588++) this.interfaceButtons[_0xe72588].onInterfaceReset();
    this.interfaceButtons = [];
};
TeamMode.prototype.onInit = function () {};
TeamMode.prototype.playercount = 0;
TeamMode.prototype.setPlayerCount = function (_0xe8c605) {
    this.playercount = _0xe8c605;
};
TeamMode.prototype.showPlayerCount = function () {};
TeamMode.prototype.lbCanvas = null;
TeamMode.prototype.leaderboard = function (_0x20c5ac) {
    null == this.lbCanvas && (this.lbCanvas = document.createElement('canvas'));
    if (_0x20c5ac) {
        var _0x1de13c = this.lbCanvas.getContext('2d'),
            _0x2498ee;
        _0x2498ee = 0x37 + 0x16 * _0x20c5ac.length;
        this.lbCanvas.width = 0x10e;
        this.lbCanvas.height = _0x2498ee;
        _0x1de13c.globalAlpha = 0.2;
        _0x1de13c.fillStyle = '#000000';
        _0x1de13c.fillRect(0, 0, this.lbCanvas.width, this.lbCanvas.height);
        _0x1de13c.globalAlpha = 0x1;
        _0x1de13c.fillStyle = '#FFFFFF';
        _0x2498ee = _0xfa658b.name;
        _0x1de13c.font = '24px Arial';
        0x2 != _0x14fca5 && (_0x1de13c.shadowOffsetX = 0x1, _0x1de13c.shadowOffsetY = 0x1);
        _0x1de13c.shadowColor = 'black';
        _0x1de13c.fillText(_0x2498ee, this.lbCanvas.width / 0x2 - _0x1de13c.measureText(_0x2498ee).width / 0x2, 0x28);
        var _0x48d4c8;
        _0x1de13c.textAlign = 'left';
        _0x1de13c.font = '17px Arial';
        for (_0x48d4c8 = 0; _0x48d4c8 < _0x20c5ac.length; ++_0x48d4c8) _0x2498ee = _0x47691c ? '' : _0x20c5ac[_0x48d4c8].name || 'mrmodpack.ml', _0x2498ee += ' (' + _0x3dd6a4(_0x20c5ac[_0x48d4c8].xp) + ')', _0x1de13c.fillStyle = '#FFFFFF', _0x1de13c.fillText(_0x2498ee, 0xf, 0x41 + 0x16 * _0x48d4c8);
    }
};
TeamMode.prototype.drawLeaderboard = function () {
    if(isAliveInGame) {
        if (this.pieChartCanvas != null) {
            this.pieChartCanvas.width &&
              ctx.drawImage(
                this.pieChartCanvas,
                20 * pixelRat,
                20 * pixelRat,
                this.pieChartCanvas.width,
                this.pieChartCanvas.height
              );
        }
    }
};
TeamMode.prototype.btnPlayAgain = null;
TeamMode.prototype.showStats = !0;
TeamMode.prototype.interfaceButtons = [];
TeamMode.prototype.createInterfaceButtons = function () {
    this.interfaceButtons = [];
};
TeamMode.prototype.drawInterfaceButtons = function () {
    if (this.interfaceButtons)
        for (var _0x599aff = 0; _0x599aff < this.interfaceButtons.length; _0x599aff++) {
            var _0x4c5299 = this.interfaceButtons[_0x599aff];
            _0x4c5299.isVisible && _0x4c5299.draw();
        }
};
TeamMode.prototype.onResize = function () {
    this.drawInterfaceButtons();
};
TeamMode.prototype.readPlayerStats = function (_0x315bcd) {
    var _0x29ee7e = [];
    _0x29ee7e.rank = _0x315bcd.readUInt16();
    _0x29ee7e.timeAlive = _0x315bcd.readUInt16();
    _0x29ee7e.totalKills = _0x315bcd.readUInt16();
    _0x29ee7e.topRank = _0x315bcd.readUInt16();
    _0x29ee7e.maxXP = _0x315bcd.readUInt32();
    _0x29ee7e.killedBy = _0x315bcd.readString();
    return _0x29ee7e;
};
TeamMode.prototype.playerInfo = function (msg) {
    teamID = msg.readUInt8();
    this.team_yellow = msg.readUInt16();
    this.team_cyan = msg.readUInt16();
    this.team_purple = msg.readUInt16();
};
TeamMode.prototype.worldUpdate = function (_0x95dfcb) {};
TeamMode.prototype.drawMap = function () {
    this.buildPieChart();
};
TeamMode.prototype.team_yellow = 0;
TeamMode.prototype.team_cyan = 0;
TeamMode.prototype.team_purple = 0;
TeamMode.prototype.buildPieChart = function () {
    if (this.pieChartCanvas == null)
      this.pieChartCanvas = document.createElement("canvas");
  
    if (this.pieChartCanvas == null) return;
  
    var ctx_ = this.pieChartCanvas.getContext("2d");
  
    var data = {
      0: this.team_yellow,
      1: this.team_cyan,
      2: this.team_purple
    };
    var myPiechart = new Piechart({
      pad: 30,
      canvas: this.pieChartCanvas,
      data: data,
      colors: this.teamColors
    });
  
    var boardLength = 55;
    var nameH = 40;
    var pad = 5;
  
    var borad_height = 210;
    var borad_width = 200;
  
    boardLength = borad_height + pad * 2;
    this.pieChartCanvas.width = borad_width + pad * 2;
    this.pieChartCanvas.height = boardLength;
    myPiechart.draw();
  
    ctx_.globalAlpha = 0.2;
  
    var y = pad;
    ctx_.globalAlpha = 0.5;
    ctx_.fillStyle = "white";
    ctx_.font = "20px Arial";
    var y = 200;
    str = _0xfa658b.name;
    ctx_.fillText(
      str,
      this.pieChartCanvas.width / 2 - ctx_.measureText(str).width / 2 - 15,
      y
    );
    y += 20;
    ctx_.fillText(
        "TeamMode",
        this.pieChartCanvas.width / 2 - ctx_.measureText("TeamMode").width / 2 - 15,
        y
    );
  };
TeamMode.prototype.pieChartCanvas = null;
TeamMode.prototype.teamColors = {
    0: '#f6ff00',
    1: '#00ffd5',
    2: '#b500ff'
};
window.TeamMode = TeamMode;

function _0x221217() {
    if (mopeShopObj) mopeShopObj.onLogon();
}

function _0x4cc85e() {
    var _0x2d7f12 = document.getElementById('shop');
    _0x2d7f12 && (_0x2d7f12.parentNode.removeChild(_0x2d7f12), _0x388d73());
    if (_0x2d7f12 = document.getElementById('shopbutton')) _0x2d7f12.disabled = !0x1;
}

function _0x33d190() {
    _0x4cc85e();
    mopeShopObj.load();
    _0x388d73();
}

function _0x409dd9() {
    var _0x1a2d7a = document.getElementById('shop_div');
    if (_0x1a2d7a) {
        _0x1a2d7a.style.transform = 'scale(' + Math.min(Math.min(0x1, Math.min(0.9 * _0x1e225d, 0x27e) / 0x27e), Math.min(0x1, Math.min(0.9 * _0x2375e1, 0x159) / 0x159)) + ')';
        var _0x2e7002 = Math.min(0, _0x1e225d / 0x2 - 0x13f) / 0.9;
        _0x1a2d7a.style.marginLeft = 0 != _0x2e7002 ? _0x2e7002 + 'px' : 'auto';
    }
}

function _0x1fed78(_0x531a59, _0x3b011f, _0x1034da) {
    _0x23c6a6();
    var _0x1b955e = document.getElementsByTagName('body')[0];
    if (_0x1b955e) {
        var _0x422d41 = document.getElementById('gameAreaWrapper'),
            _0x41f31f = _0x4d3dcf('mopeshop-popup');
        _0x3b011f = _0x4d3dcf('msg', _0x3b011f);
        var _0x1422db = _0x4d3dcf('text');
        _0x1422db.innerHTML = _0x531a59;
        _0x531a59 = _0x4d3dcf('closeMsg', '');
        _0x531a59.innerHTML = 'X';
        _0x531a59.onclick = function () {
            _0x23c6a6();
        };
        _0x3b011f.appendChild(_0x531a59);
        _0x3b011f.appendChild(_0x1422db);
        _0x41f31f.appendChild(_0x3b011f);
        _0x1b955e.insertBefore(_0x41f31f, _0x422d41);
        void 0 !== _0x1034da && 0 < _0x1034da && setTimeout(_0x23c6a6, 0x3e8 * _0x1034da);
    }
}

function _0x23c6a6() {
    var _0x2a26ff = document.getElementById('mopeshop-popup');
    _0x2a26ff && _0x2a26ff.parentNode.removeChild(_0x2a26ff);
}

function _0x4d3dcf(_0x2aaffa, _0x44f567) {
    return createElem('div', _0x2aaffa, _0x44f567);
}

function _0x389765(_0x396be9, _0x3aeb3d, _0xe6afcf) {
    _0x396be9 = createElem('div', _0x396be9, _0x3aeb3d);
    _0x396be9.innerHTML = _0xe6afcf;
    return _0x396be9;
}

function createElem(tag, id, cls) {
    if (void 0 == tag) return null;
    tag = document.createElement(tag);
    void 0 !== id && (tag.id = id);
    void 0 !== cls && (tag.className = cls);
    return tag;
}

function _0x381c0d() {
    return userInfo.coins;
}

function _0x201f22(_0x2b1e13) {
    _0x2b1e13 && mopeShopObj ? mopeShopObj.load(_0x2b1e13) : (_0x4cc85e(), mopeShopObj = new mopeShopObject(), mopeShopObj.load());
}
var _0x53e90e = {
    'customClassesForOType': {},
    'setCustomClassForShopItem': function (_0x290d4a, _0x71adfb, _0x5d3ab0) {
        this.customClassesForOType[_0x71adfb] || (this.customClassesForOType[_0x71adfb] = {
            'oTypeMainClass': null,
            'secondaryTypeClasses': {}
        });
        var _0x2e2cb3 = this.customClassesForOType[_0x71adfb];
        null == _0x5d3ab0 ? (null != _0x2e2cb3.oTypeMainClass && console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class (" + this.customClassesForOType[_0x71adfb] + ') is already set for oType ' + _0x71adfb + '! Check for duplicate calls!'), _0x2e2cb3.oTypeMainClass = _0x290d4a) : (_0x5d3ab0 in _0x2e2cb3.secondaryTypeClasses && console.log("ERROR 'GameObjType.setCustomClassForGameObjType': a class is already set for oType " + _0x71adfb + ' AND secondaryType (eg. animalType) ' + _0x5d3ab0 + '! Check for duplicate calls!'), _0x2e2cb3.secondaryTypeClasses[_0x5d3ab0] = _0x290d4a);
        this.onClassSet(_0x290d4a, _0x71adfb, _0x5d3ab0);
    },
    'getClassForGameObjType': function (_0x55ff7d, _0x3c7729) {
        if (_0x55ff7d in this.customClassesForOType) {
            var _0x2b990a = this.customClassesForOType[_0x55ff7d];
            return null == _0x3c7729 || 0 == _0x3c7729 ? _0x2b990a.oTypeMainClass : _0x3c7729 in _0x2b990a.secondaryTypeClasses ? _0x2b990a.secondaryTypeClasses[_0x3c7729] : _0x2b990a.oTypeMainClass;
        }
        return _0x17b2fc;
    },
    'newlyVis_createGameObjFromMsg': function (_0x45b702, _0x1f3e76) {
        var _0x5a64f6 = _0x1f3e76.oType,
            _0x39b4cb = null;
        _0x5a64f6 == o_player && (_0x39b4cb = _0x1f3e76.animalType);
        var _0x30fa52 = _0x53e90e.createGameObjOfOType(_0x5a64f6, _0x39b4cb);
        _0x30fa52.itemType = _0x45b702;
        _0x30fa52.worldUpd_readMsgNewlyVisible(_0x1f3e76, _0x5a64f6, _0x39b4cb);
        return _0x30fa52;
    },
    'createGameObjOfOType': function (_0x7da0b1, _0x3a6347) {
        return new(this.getClassForGameObjType(_0x7da0b1, _0x3a6347))(_0x7da0b1, _0x3a6347);
    },
    'onClassSet': function (_0x322989) {}
};
_0x17b2fc.prototype = {
    'id': 0,
    'oType': 0,
    'itemType': null
};

function _0x17b2fc(_0x4ec258) {
    this.oType = _0x4ec258;
}
_0x17b2fc.prototype.setObjTypes = function (_0x546ff6, _0x50bc8e) {
    this.oType = _0x546ff6;
};
_0x17b2fc.prototype.loadShopData = function (_0x170595) {
    this.id = _0x170595.id;
    this.coinsPrice = _0x170595.coinsPrice;
    this.onAfterLoad();
};
_0x17b2fc.prototype.onAfterLoad = function () {
    this.btn = new _0x230a26(this);
};
_0x17b2fc.prototype.worldUpd_readMsgNewlyVisible = function (_0x19cdd7, _0x46b712, _0x7ebf52) {
    this.setObjTypes(_0x46b712, _0x7ebf52);
    this.loadShopData(_0x19cdd7);
};
_0x17b2fc.prototype.getImage = function () {
    return null;
};
_0x17b2fc.prototype.generateHtml = function () {};
window.ShopItem = _0x17b2fc;
_0x230a26.prototype = {
    'itemID': 0,
    'shopItem': null
};

function _0x230a26(_0x29e5cd) {
    this.shopItem = _0x29e5cd;
}
_0x230a26.prototype.generateHtml = function () {
    var _0x5f3e2c = createElem('div', 'btn_' + this.shopItem.id, 'buybutton');
    if (0 < this.shopItem.coinsPrice) {
        var _0x559300 = new Image();
        _0x559300.className = 'buycoin-img';
        _0x559300.src = 'shop/mopecoin.png';
        var _0xd107a3 = createElem('span', '', 'buycoin-price');
        _0xd107a3.innerHTML = this.shopItem.coinsPrice;
        _0x5f3e2c.appendChild(_0x559300);
        _0x5f3e2c.appendChild(_0xd107a3);
        var sdfdfsfew = this;
        _0x5f3e2c.onclick = function () {
            sdfdfsfew.onClick();
        };
    } else _0x5f3e2c.innerHTML = 'OWNED';
    return _0x5f3e2c;
};
_0x230a26.prototype.onClick = function () {
    var _0x20835f = this.shopItem.id;
    mopeShopObj.blockOverlay();
    _0x3e4625(_0x20835f, function (_0x3c6915, _0x46b63c) {
        if (_0x3c6915) {
            var mes = new fidjiaslfo(1);
            mes.writeUInt8(71);
            wsSendMsg(mes);
            _0x1fed78('Purchase successful!', 'success', 0x5), _0x201f22(!0), _0x7db050();
        }
        else switch (_0x46b63c) {
        case 'alreadyowned':
            _0x1fed78('AccountServer: item already purchased!', _0x46b63c, 0xf);
            break;
        case 'cantafford':
            _0x1fed78('AccountServer: not enough coins to buy this!', _0x46b63c, 0xf);
            break;
        case 'error':
            _0x1fed78('AccountServer: something went wrong', _0x46b63c, 0xf);
        }
        mopeShopObj.removeBlockOverlay();
    });
};
window.BuyButton = _0x230a26;
_0x5a621d = _0x46031d;
_0x2a91c6 = _0x17b2fc;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;

function _0x46031d() {
    _0x46031d.superClass.call(this, 0x3e8);
    this.oType = 0x3e8;
    this.itemType = 0x1;
}
_0x46031d.prototype.prefix = null;
_0x46031d.prototype.bonus = 0;
_0x46031d.prototype.loadShopData = function (_0x42b5a6) {
    _0x46031d.superClass.prototype.loadShopData.call(this, _0x42b5a6);
    this.prefix = _0x42b5a6.prefix;
    this.bonus = _0x42b5a6.bonus;
    this.value = _0x42b5a6.value;
    this.onAfterLoad();
};
_0x46031d.prototype.worldUpd_readMsgNewlyVisible = function (_0x32938c, _0x524761, _0x59d60b) {
    this.loadShopData(_0x32938c);
};
_0x46031d.prototype.generateHtml = function () {
    var _0x145379 = createElem('div', '', 'coin-row'),
        _0x5d2a6f = createElem('div', '', 'coin-prefix'),
        _0x39dd45 = createElem('div', '', 'coin-value'),
        _0x2d884c = createElem('div', '', 'coin-plus'),
        _0x3e38ae = createElem('div', '', 'coin-bonus'),
        _0x3d51df = createElem('div', '', 'coin-equ'),
        _0x19b0e7 = createElem('div', '', 'coin-total'),
        _0x44de0b = createElem('div', '', 'coin-dollars'),
        _0x1e0ff3 = createElem('div', '', 'coin-buy'),
        _0xc8acbe = createElem('div', '', 'coin-img'),
        _0x571834 = createElem('div', '', 'coin-img'),
        _0x13e98c = new Image(),
        _0x50d1f6 = new Image();
    _0x13e98c.src = 'shop/mopecoin.png';
    _0x50d1f6.src = 'shop/mopecoin.png';
    _0xc8acbe.appendChild(_0x13e98c);
    _0x571834.appendChild(_0x50d1f6);
    _0x5d2a6f.innerHTML = '&nbsp;' + this.prefix;
    '' != this.prefix ? _0x5d2a6f.className += ' popular' : _0x3e38ae.className += ' nopopular';
    _0x39dd45.innerHTML = '&nbsp;' + this.value;
    _0x2d884c.innerHTML = '+';
    _0x3e38ae.innerHTML = '&nbsp;' + this.bonus + '%';
    _0x3d51df.innerHTML = '=';
    _0x1e0ff3.innerHTML = 'BUY';
    _0x19b0e7.innerHTML = '&nbsp;' + Number(this.bonus + 0x64) / 0x64 * Number(this.value);
    _0x44de0b.innerHTML = '$' + this.coinsPrice;
    _0x145379.appendChild(_0x5d2a6f);
    _0x145379.appendChild(_0xc8acbe);
    _0x145379.appendChild(_0x39dd45);
    _0x145379.appendChild(_0x2d884c);
    _0x145379.appendChild(_0x3e38ae);
    _0x145379.appendChild(_0x3d51df);
    _0x145379.appendChild(_0x571834);
    _0x145379.appendChild(_0x19b0e7);
    _0x145379.appendChild(_0x44de0b);
    _0x145379.appendChild(_0x1e0ff3);
    return _0x145379;
};
_0x53e90e.setCustomClassForShopItem(_0x46031d, 0x3e8);
window.MopeCoin = _0x46031d;
_0x5a621d = _0x2cc1bd;
_0x2a91c6 = _0x17b2fc;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;

function _0x2cc1bd(_0x29ae5c, _0x475308) {
    _0x2cc1bd.superClass.call(this, o_player);
    this.animalType = _0x475308;
    this.setBiome(this.animalType);
}
_0x2cc1bd.prototype.setBiome = function (_0xe0cc44) {
    switch (_0xe0cc44) {
    case _0x17505c:
    case _0x1ddfd4:
    case _0x1a31f6:
    case _0xb20c08:
    case _0x4906df:
    case _0x3cd364:
    case _0x1de318:
    case _0x5b3c93:
    case _0x5d266c:
        this.biome = _0x20cd91;
        break;
    case _0x11d8d8:
    case _0x5362ea:
    case _0x39caec:
    case _0x50c7e0:
    case _0x1b136a:
        this.biome = _0x4e9b48;
        break;
    case _0x29871d:
    case _0x10ffe7:
    case _0x13ad6a:
    case _0x318be6:
        this.biome = _0x35f8d3;
        break;
    case _0x4e99c5:
    case _0x1da4d1:
    case _0x3c0348:
    case _0x3afcf3:
        this.biome = _0x3ec694;
        break;
    case _0x28a6aa:
    case _0x31ed20:
    case _0x36bb4b:
    case _0x5deb7a:
        this.biome = _0x55aace;
    }
};
_0x2cc1bd.prototype.loadShopData = function (_0x3fc53d) {
    _0x2cc1bd.superClass.prototype.loadShopData.call(this, _0x3fc53d);
    this.animalSpecies = _0x3fc53d.animalSpecies;
    this.shopImg = 'shop/' + _0x3fc53d.shopImg;
    this.skinImage = _0x3fc53d.skinImage;
    this.skinName = _0x3fc53d.skinName;
    this.isNew = _0x3fc53d.isNew;
    this.author = _0x3fc53d.author;
};
_0x2cc1bd.prototype.setObjTypes = function (_0x45ec86, _0x4ceaa0) {
    this.animalType = _0x4ceaa0;
};
_0x2cc1bd.prototype.getAnimalName = function () {
    switch (this.animalType) {
    case _0x543083:
        return 'rabbit';
    case _0xe39007:
        return 'pig';
    case _0x41846d:
        return 'fox';
    case _0x2342f6:
        return 'deer';
    case _0x4f5784:
        return 'mole';
    case _0x4c8c3e:
        return 'zebra';
    case _0x49ee98:
        return 'lion';
    case _0x58b203:
        return 'bigcat';
    case _0x306e7d:
        return 'bear';
    case _0x17b991:
        return 'croc';
    case _0x1bea6f:
        return 'rhino';
    case _0x1de318:
        return 'hippo';
    case _0x1ddfd4:
        return 'dragon';
    case _0x245d92:
        return 'shrimp';
    case _0x21d795:
        return 'trout';
    case _0x14aa29:
        return 'crab';
    case _0x44ffc0:
        return 'squid';
    case _0x13e47b:
        return 'shark';
    case _0x128264:
        return 'stingray';
    case _0x166900:
        return 'turtle';
    case _0x22c4b4:
        return 'seahorse';
    case _0xbffa37:
        return 'jellyfish';
    case _0x39caec:
        return 'kraken';
    case _0xcbf731:
        return 'pufferfish';
    case _0x1b136a:
        return 'killerwhale';
    case _0x4dca01:
        return 'swordfish';
    case _0x58670a:
        return 'gorilla';
    case _0x1ebbca:
        return 'octopus';
    case _0x332f04:
        return 'wolf';
    case _0x1e6300:
        return 'arctichare';
    case _0x10ffe7:
        return 'yeti';
    case _0x4e5642:
        return 'chipmunk';
    case _0xfa8790:
        return 'muskox';
    case _0x37feb8:
        return 'penguin';
    case _0x586eae:
        return 'polarbear';
    case _0x115d14:
        return 'seal';
    case _0x5b87cd:
        return 'snowleopard';
    case _0xa4ccd0:
        return 'walrus';
    case _0x1cd045:
        return 'reindeer';
    case _0x50fb31:
        return 'arcticfox';
    case _0x4fb188:
        return 'wolverine';
    case _0x13ad6a:
        return 'mammoth';
    case _0x4ab9c5:
        return 'donkey';
    case _0x5ea8fd:
        return 'snail';
    case _0x1da4d1:
        return 'blackdragon';
    case _0x318be6:
        return 'sabertoothtiger';
    case _0x3cd364:
        return 'elephant';
    case _0x50c7e0:
        return 'bluewhale';
    case _0x25e140:
        return 'cobra';
    case _0x5b3c93:
        return 'boaconstrictor';
    case _0xb20c08:
        return 'giantspider';
    case _0x1a31f6:
        return 'trex';
    case _0x3223f8:
        return 'tiger';
    case _0x33258c:
        return 'giraffe';
    case _0x819b63:
        return 'eagle';
    case _0x49b403:
        return 'hedgehog';
    case _0x4e163c:
        return 'Duck';
    case _0xa8f04a:
        return 'duckling';
    case _0x58ec8b:
        return 'lemming';
    case _0x5362ea:
        return 'kingcrab';
    case _0x5def9d:
        return 'frog';
    case _0x5d266c:
        return 'ostrich';
    case _0x1cc507:
        return 'pelican';
    case _0x1db4ca:
        return 'falcon';
    case _0xbc3a94:
        return 'snowyowl';
    case _0x4bc18f:
        return 'honeybee';
    case _0x3afcf3:
        return 'phoenix';
    case _0x3894a3:
        return 'ostrichbaby';
    case _0x11d8d8:
        return 'seamonster';
    case _0x3c0348:
        return 'landmonster';
    case _0x29871d:
        return 'icemonster';
    case _0x17505c:
        return 'dinomonster';
    case _0x132e3a:
        return 'pigeon';
    case _0x510be1:
        return 'toucan';
    case _0x56c4f6:
        return 'macaw';
    case _0x2714c6:
        return 'flamingo';
    case _0x4906df:
        return 'cassowary';
    case _0x667e39:
        return 'chicken';
    case _0x1840f3:
        return 'woodpecker';
    case _0x1c031f:
        return 'peacock';
    case _0x3ebaa2:
        return 'kangaroorat';
    case _0x3475cc:
        return 'desertchipmunk';
    case _0x4b5f75:
        return 'meerkat';
    case _0x22da49:
        return 'gazelle';
    case _0x58e093:
        return 'armadillo';
    case _0x4a40f6:
        return 'fennecfox';
    case _0x293281:
        return 'camel';
    case _0x18993a:
        return 'warthog';
    case _0x24f42b:
        return 'hyena';
    case _0x3fe455:
        return 'rattlesnake';
    case _0x35fbe8:
        return 'vulture';
    case _0x2c0737:
        return 'bison';
    case _0x5deb7a:
        return 'komododragon';
    case _0x28a6aa:
        return 'giantscorpion';
    case _0x31ed20:
        return 'pterodactyl';
    case _0x8942b7:
        return 'gobibear';
    case _0x36bb4b:
        return 'blackwidow';
    case _0x258caf:
        return 'bulletant';
    case _0x2f88c2:
        return 'markhor';
    case _0x999be1:
        return 'poop';
    }
};
_0x2cc1bd.prototype.getSkinPath = function () {
    return void 0 == this.skinImage ? this.shopImg : 'skins/' + this.skinImage + '.png';
};
_0x2cc1bd.prototype.getImage = function () {
    var _0x2eaa37 = new Image();
    _0x2eaa37.className = 'animalSkin_' + this.animalType;
    _0x2eaa37.src = this.getSkinPath();
    return _0x2eaa37;
};
_0x2cc1bd.prototype.getSkinName = function () {
    return this.skinName.replace('\x0a', '<br>');
};
_0x2cc1bd.prototype.generateHtml = function () {
    var _0xe04d12 = _0x4d3dcf('', 'item' + (-0x1 == this.coinsPrice ? ' itemOwned' : ' buyItem') + ' aniItem_' + this.animalType),
        _0x849074 = _0x4d3dcf('', 'image biome_' + this.biome + (this.author != null ? " communityimage" : "")),
        _0x2b5f15 = _0x4d3dcf('', 'price'),
        author_label = _0x4d3dcf('', 'author');
    if(this.author != null) {
        author_label.innerHTML = "By " + this.author;
        _0xe04d12.appendChild(author_label);
    }
    _0x2b5f15.innerHTML = this.getSkinName();
    var _0x1fd7d4 = this.getImage();
    _0x849074.appendChild(_0x1fd7d4);
    this.isNew && (_0x1fd7d4 = _0x4d3dcf('newItem_' + this.animalType, 'newItem'), _0x1fd7d4.innerHTML = 'NEW', _0xe04d12.appendChild(_0x1fd7d4));
    _0xe04d12.appendChild(_0x849074);
    _0xe04d12.appendChild(_0x2b5f15);
    0 < this.coinsPrice && _0xe04d12.appendChild(this.btn.generateHtml());
    return _0xe04d12;
};
window.AnimalSkin = _0x2cc1bd;
_0x53e90e.setCustomClassForShopItem(_0x2cc1bd, o_player);

MP_Level.prototype = {
    id: 0,
    type: 0,
    free: true,
    taken: true,
    cantake: false,
    level: 0
}

function MP_Level(type) {
    this.type = type;
}

MP_Level.prototype.loadData = function (data) {
    this.data = data;
    if(data.id != null) this.id = data.id;
    if(data.path != null) this.path = data.path;
    if(data.title != null) this.title = data.title;
    if(data.free != null) this.free = data.free;
    if(data.taken != null) this.taken = data.taken;
    if(data.cantake != null) this.cantake = data.cantake;
    if(data.level != null) this.level = data.level;
    if(this.type == 0) this.coins = data.coins;
};

MP_Level.prototype.getImage = function () {
    var img = new Image();
    img.className = "mopePassLevel";
    if(this.type != 0) img.src = this.path;
    else img.src = "mopepass/coins.png?v="+gameVersion;
    return img;
}

MP_Level.prototype.generateHtml = function () {
    var itemId = "bp " + (this.type == 0 ? "coins" : "skin") + (this.free ? " " : " bp-gold bp-gold-") + (!global_battlepass_exist && !this.free ? "disabled" : !this.taken && this.cantake ? "cantake" : !this.cantake && this.taken && this.id != -1 ? "taken" : this.level > userInfo.level ? "unavailable" : "");
    var item = createDiv('', itemId);
    var image = createDiv('', 'image ' + (this.type == 0 ? "coins" : "biome_" + this.biome));
    var price = createDiv('', 'price ' + (this.free ? "free" : "gold") + (!this.taken && !(!global_battlepass_exist && !this.free) && this.cantake ? " nottaken" : ""));
    var level = createDiv('', 'level');

    price.innerHTML = this.type == 0 ? this.coins + " coins" : this.title;
    if(this.id == -1) {
        level.innerHTML = "Game Pass";
    } else level.innerHTML = "Level " + this.level;

    var img = this.getImage();

    image.appendChild(img);
    item.appendChild(image);
    item.appendChild(price);
    item.appendChild(level);
    item.disabled = false;
    var oncl = {
        cl: function (it, mplevel) {
            if(!it.disabled) {
                it.disabled = false;
                mopeShopObj.blockOverlay();
                getBattlePassReward(mplevel.level, !mplevel.free, function(obj) {
                    load_battlepass_data();
                    if(obj == false) {
                        _0x1fed78('Something went wrong', 'error', 0xf);
                    } else if(obj.success == true) {
                        _0x1fed78('Reward Recieved!', 'success', 0xf);
                    } else {
                        switch (obj.reason) {
                            case 'baddata':
                                _0x1fed78('Your Mope Season is out of date! Refresh page.', 'error', 0xf);
                                break;
                            case 'nopass':
                                _0x1fed78('You need Mope Pass to get this!', 'error', 0xf);
                                break;
                            case 'alreadytaken':
                                _0x1fed78('Item already taken!', 'alreadyowned', 0xf);
                                break;
                            case 'lowlevel':
                                _0x1fed78('Your level is not enough to get this!', 'alreadyowned', 0xf);
                                break;
                            case 'error':
                                _0x1fed78('something went wrong', 'error', 0xf);
                                break;
                        }
                    }
                    mopeShopObj.removeBlockOverlay();
                    setTimeout(function() {
                        _0x7db050();
                    }, 500);
                });
            }
        }
    };
    var onc = oncl.cl;
    item.onclick = function() {
        if(this.cantake) {
            onc.call(oncl, item, this);
        }
    }.bind(this);
    return item;
}


window.MP_Level = MP_Level;

function mopeShopObject() {
    console.log('@@@@ Mopeio Shop: v 1.0 b @@@@');
    document.getElementById('shopbutton').onclick = function () {
        this.disabled = !0;
        var _0x52e07a = document.createElement('div');
        _0x52e07a.id = 'shopOverlay';
        _0x52e07a.className = 'shopOverlay center';
        var _0x262eb9 = document.createElement('div');
        _0x262eb9.className = 'shopOverlay_plzwait';
        _0x262eb9.innerHTML = 'Please wait...';
        _0x52e07a.appendChild(_0x262eb9);
        document.getElementsByTagName('body')[0].prepend(_0x52e07a);
        _0x33d190();
    };
    document.getElementById('onconnectDiv') && console.log('placing accoutns div');
    buttonLogOut();
}
mopeShopObject.prototype.items = [];
mopeShopObject.prototype.datatab = [];
mopeShopObject.prototype.getAnimalInfo = function (_0x58287b) {
    switch (_0x58287b) {
    case 'gold_blackDragon':
        return [_0x1da4d1, 0x1, `Golden\nBlack Dragon`, 'volcano/blackdragon/1/blackdragon'];
    case 'gold_kingDragon':
        return [_0x4e99c5, 0x1, `Golden\nKing Dragon`, 'volcano/kingdragon/1/kingdragon'];
    case 'gold_Dragon':
        return [_0x1ddfd4, 0x1, `Golden\nDragon`, 'land/dragon/1/dragon'];
    case 'gold_kraken':
        return [_0x39caec, 0x1, `Golden\nKraken`, 'ocean/kraken/1/kraken'];
    case 'gold_yeti':
        return [_0x10ffe7, 0x1, `Golden\nYeti`, 'arctic/yeti/1/yeti'];
    case 'gold_trex':
        return [_0x1a31f6, 0x1, `Golden\nT.Rex`, 'land/trex/1/trex'];
    case 'gold_kingCrab':
        return [_0x5362ea, 0x1, 'Golden\nCrab', 'ocean/kingcrab/1/kingcrab'];
    case 'gold_phoenix':
        return [_0x3afcf3, 0x1, `Golden\nPhoenix`, 'volcano/phoenix/1/phoenix'];
    case 'gold_pterodactyl':
        return [_0x31ed20, 0x1, `Golden\nPterodactyl`, 'desert/pterodactyl/1/pterodactyl_ability'];
    case 'gold_iceMonster':
        return [_0x29871d, 0x1, `Golden\nIce Monster`, 'arctic/icemonster/1/icemonster'];
    case 'gold_dinoMonster':
        return [_0x17505c, 0x1, `Golden\nDino Monster`, 'land/dinomonster/1/dinomonster'];
    case 'gold_seaMonster':
        return [_0x11d8d8, 0x1, `Golden\nSea Monster`, 'ocean/seamonster/1/seamonster'];
    case 'gold_landMonster':
        return [_0x3c0348, 0x1, `Golden\nLand Monster`, 'volcano/landmonster/1/landmonster'];
    case 'gold_giantScorion':
        return [_0x28a6aa, 0x1, `Golden\nGiant Scorpion`, 'desert/scorpion/1/giantscorpion'];
    case 'gold_bluewhale':
        return [_0x50c7e0, 0x1, `Golden\nBlue Whale`, 'ocean/bluewhale/1/bluewhale'];
    case 'gold_elephant':
        return [_0x3cd364, 0x1, `Golden\nElephant`, 'land/elephant/1/elephant'];
    case 'gold_cassowary':
        return [_0x4906df, 0x1, `Golden\nCassowary`, 'land/cassowary/1/cassowary'];
    case 'gold_giantspider':
        return [_0xb20c08, 0x1, `Golden\nGiant Spider`, 'land/giantspider/1/giantspider'];
    case 'gold_blackwidow':
        return [_0x36bb4b, 0x1, `Golden\nBlackwidow`, 'desert/blackwidow/1/blackwidow'];
    case 'gold_mammoth':
        return [_0x13ad6a, 0x1, `Golden\nMammoth`, 'arctic/mammoth/1/mammoth'];
    case 'gold_hippo':
        return [_0x1de318, 0x1, `Golden\nHippo`, 'land/hippo/1/hippo'];
    case 'gold_ostrich':
        return [_0x5d266c, 0x1, `Golden\nOstrich`, 'land/ostrich/1/ostrich'];
    case 'gold_boa':
        return [_0x5b3c93, 0x1, `Golden\nBoa`, 'land/boaconstrictor/1/boaconstrictor'];
    case 'gold_komodo':
        return [_0x5deb7a, 0x1, `Golden\nKomodo`, 'desert/komododragon/1/komodo'];
    case 'gold_killerwhale':
        return [_0x1b136a, 0x1, `Golden\nKiller Whale`, 'ocean/killerwhale/1/killerwhale'];
    case 'gold_sabertooth':
        return [_0x318be6, 0x1, `Golden\nSabertooth`, 'arctic/sabertooth/1/sabertooth'];

    //leaked
    case "leaked_toucan":
        return [a_toucan, 101, "Vegetoucan", "toucan/101/toucan"];
    case "leaked_chicken":
        return [a_chicken, 100, "Flash Chicken", "land/chicken/100/chicken"];
    case "leaked_crab":
        return [a_kingCrab, 100, "Space Crab", "ocean/kingcrab/100/kingcrab"];
    case "leaked_crab2":
        return [a_kingCrab, 101, "Bone Crab", "ocean/kingcrab/101/kingcrab"];
    case "leaked_falcon":
        return [a_falcon, 100, "Crystal Falcon", "falcon/100/falcon"];
    case "leaked_spider":
        return [a_giantSpider, 100, "Crystalcore Spider", "land/giantspider/100/giantspider"];
    case "leaked_gorilla":
        return [a_gorilla, 101, "Gorzilla", "land/gorilla/101/gorilla"];
    case "leaked_hippo":
        return [a_hippo, 101, "Earth Hippo", "land/hippo/101/hippo"];
    case "leaked_rhino":
        return [a_rhino, 100, "Cotton Rhino", "land/rhino/100/rhino"];
    case "leaked_sea":
        return [a_seaMonster, 100, "Submonstrine", "ocean/seamonster/100/seamonster"];
    //a

    case "halloween_wyrmous":
      return [a_cobra, 100, "Wyrmous", "land/cobra/100/cobra"];
    case "halloween_equusthulhu":
      return [a_donkey, 100, "Equusthulhu", "land/donkey/100/donkey"];
    case "halloween_frostaline":
      return [a_snowLeopard, 100, "Frostaline", "arctic/snowleopard/100/snowleopard"];
    case "halloween_pufferMace":
      return [a_pufferFish, 100, "Puffermace", "ocean/pufferfish/100/pufferfish"];
    case "halloween_carnageodactyl":
      return [a_pterodactyl, 100, "Carnageodactyl", "desert/pterodactyl/100/pterodactyl_ability"];

    // halloween update #3
    case "halloween_mrDollar":
      return [a_trex, 100, "Mr. Dollar", "land/trex/100/trex"];
    case "halloween_wendigoDeer":
      return [a_deer, 100, "The Wendigo", "land/deer/100/deer"];
    case "halloween_cactiRat":
      return [a_kangarooRat, 100, "Cacti Rat", "desert/kangaroorat/100/kangaroorat"];
    case "halloween_Swampster":
      return [a_hippo, 100, "Swampster", "land/hippo/100/hippo"];
    case "halloween_puumpkat":
      return [a_meerkat, 100, "Puumpkat", "desert/meerkat/100/meerkat"];
    case "halloween_doomedarius":
      return [a_camel, 100, "The Doomedarius", "desert/camel/100/camel"];

    // halloween update #2
    case "halloween_roboMouse":
      return [a_mouse, 19, "Robo Mouse", "land/mouse/19/mouse"];
    case "halloween_uncleSam":
      return [a_croc, 100, "Uncle Sam", "land/croc/100/croc"];
    case "halloween_zombieMole":
      return [a_mole, 100, "Zombie Mole", "land/mole/100/mole"];
    case "halloween_flammyHart":
      return [a_gazelle, 100, "Flammy Hart", "desert/gazelle/100/gazelle"];

    // halloween update #1
    case "halloween_gummyViper":
      return [a_rattleSnake, 100, "Gummy Viper", "desert/rattlesnake/100/rattlesnake"];
    case "halloween_grimRipper":
      return [a_gorilla, 100, "Grim Reaper", "land/gorilla/100/gorilla"];
    case "halloween_bigCookie":
      return [a_bigCat, 100, "Big Cookie", "land/bigcat/100/bigcat"];
    case "halloween_gargolgon":
      return [a_dragn, 100, "The Gargon", "land/dragon/100/dragon"];
    case "halloween_candyRus":
      return [a_walrus, 100, "Candy Rus", "arctic/walrus/100/walrus"];
    case "halloween_mantilian":
      return [a_lion, 100, "The Mantilian", "land/lion/100/lion"];
    case "halloween_phantomRay":
      return [a_stingray, 100, "Phantom Ray", "ocean/stingray/100/stingray"];
    case "halloween_suitedToucan":
      return [a_toucan, 100, "The Dapper", "toucan/100/toucan"];
    case "halloween_vulgeist":
      return [a_vulture, 100, "The Vulgeist", "desert/vulture/100/vulture"];
    case "halloween_burlone":
      return [a_warthog, 100, "The Burlone", "desert/warthog/100/warthog"];
    case "halloween_unicornze":
      return [a_zebra, 100, "Unicornze", "land/zebra/100/zebra"];
      //ends update halloweeen
    case 'skin_blueDragon':
        return [_0x1da4d1, 0x2, `The\nAzure Bringer`, 'volcano/blackdragon/2/blackdragon'];
    case 'skin_lavaStrider':
        return [_0x1da4d1, 3, `The\nLava Strider`, 'volcano/blackdragon/3/blackdragon'];
    case 'skin_boneKing':
        return [_0x4e99c5, 7, `The\nBone King`, 'volcano/kingdragon/7/kingdragon'];
    case 'skin_kingFlame':
        return [_0x4e99c5, 7, `The\nKing Flame`, 'volcano/kingdragon/8/kingdragon'];
    case 'skin_gujjar':
        return [106, 1, `The Gujjar`, 'land/bigfoot/1/thebigfoot'];
    case 'skin_kingRipper':
        return [_0x4e99c5, 0x2, `King\nRipper`, 'volcano/kingdragon/2/kingdragon'];
    case 'skin_kingStan':
        return [_0x4e99c5, 0x3, `King\nStan`, 'volcano/kingdragon/3/kingdragon'];
    case 'skin_kingShah':
        return [_0x4e99c5, 0x4, `King\nShah`, 'volcano/kingdragon/4/kingdragon'];
    case 'skin_dragon_gray':
        return [_0x1ddfd4, 0x2, `Knight\nDragon`, 'land/dragon/2/dragon'];
    case 'skin_dragon_terminator':
        return [_0x1ddfd4, 4, `Terminator`, 'land/dragon/4/dragon'];
    case 'skin_dragon_red':
        return [_0x1ddfd4, 3, `Devil`, 'land/dragon/3/dragon'];
    case 'skin_kraken_cyan':
        return [_0x39caec, 0x2, `Chromatic\nKraken`, 'ocean/kraken/2/kraken'];
    case 'skin_yeti_emerald':
        return [_0x10ffe7, 0x2, `Emerald\nYeti`, 'arctic/yeti/2/yeti'];
    case 'skin_snowman':
        return [_0x2bd850, 0, `The\nSnowman`, 'arctic/snowman/snowman'];
    case 'skin_trex_gray':
        return [_0x1a31f6, 0x2, `Ember\nT.Rex`, 'land/trex/2/trex'];
    case 'skin_kingCrab':
        return [_0x5362ea, 0x2, `Amethyst\nCrab`, 'ocean/kingcrab/2/kingcrab'];
    case 'skin_phoenix_blue':
        return [_0x3afcf3, 0x2, `Alpha\nPhoenix`, 'volcano/phoenix/2/phoenix'];
    case 'skin_pterodactyl_green':
        return [_0x31ed20, 0x2, `Emerald\nPterodactyl`, 'desert/pterodactyl/2/pterodactyl_ability'];
    case 'skin_iceMonster':
        return [_0x29871d, 0x2, `Amethyst\nMonster`, 'arctic/icemonster/2/icemonster'];
    case 'skin_dinoMonster':
        return [_0x17505c, 0x2, `Citrine\nMonster`, 'land/dinomonster/2/dinomonster'];
    case 'skin_seaMonster':
        return [_0x11d8d8, 0x2, `Sapphire\nMonster`, 'ocean/seamonster/2/seamonster'];
    case 'skin_landMonster':
        return [_0x3c0348, 0x2, `Titanite\nMonster`, 'volcano/landmonster/2/landmonster'];
    case 'skin_orangeScorpion':
        return [_0x28a6aa, 0x2, `Carnelian\nScorpion`, 'desert/scorpion/2/giantscorpion'];
    case 'skin_bluewhale':
        return [_0x50c7e0, 0x2, `Albino\nBlue Whale`, 'ocean/bluewhale/2/bluewhale'];
    case 'skin_elephant':
        return [_0x3cd364, 0x2, `White\nElephant`, 'land/elephant/2/elephant'];
    case 'skin_cassowary':
        return [_0x4906df, 0x2, `Cotton\nCassowary`, 'land/cassowary/2/cassowary'];
    case 'skin_giantspider':
        return [_0xb20c08, 0x2, `Goliath\nSpider`, 'land/giantspider/2/giantspider'];
    case 'skin_blackwidow':
        return [_0x36bb4b, 0x2, `Queen\nBlackwidow`, 'desert/blackwidow/2/blackwidow'];
    case 'skin_mammoth':
        return [_0x13ad6a, 0x2, `Black\nMammoth`, 'arctic/mammoth/2/mammoth'];
    case 'skin_hippo':
        return [_0x1de318, 0x2, `Pygmy\nHippo`, 'land/hippo/2/hippo'];
    case 'skin_ostrich':
        return [_0x5d266c, 0x2, `Ruffled\nOstrich`, 'land/ostrich/2/ostrich'];
    case 'skin_boa':
        return [_0x5b3c93, 0x2, `Tree\nBoa`, 'land/boaconstrictor/2/boaconstrictor'];
    case 'skin_komodo':
        return [_0x5deb7a, 0x2, `Night\nKomodo`, 'desert/komododragon/2/komodo'];
    case 'skin_killerwhale':
        return [_0x1b136a, 0x2, `Albino\nOrca`, 'ocean/killerwhale/2/killerwhale'];
    case 'skin_sabertooth':
        return [_0x318be6, 0x2, `Margala\nSabertooth`, 'arctic/sabertooth/2/sabertooth'];
    case 'skin_tigerShark':
        return [_0x13e47b, 0x2, `Tiger\nShark`, 'ocean/shark/1/shark'];
    case 'skin_hamerHeadShark':
        return [_0x13e47b, 0x3, `Hammerhead\nShark`, 'ocean/shark/2/shark'];
    case 'skin_panda':
        return [_0x306e7d, 0x2, 'Panda', 'land/panda/panda'];
    case 'skin_zonkey':
        return [_0x4ab9c5, 0x3, 'Zonkey', 'land/donkey/2/zonkey'];
    case 'skin_okapi':
        return [_0x4c8c3e, 0x2, 'Okapi', 'land/okapi/okapi'];
    case 'skin_giantCroc':
        return [_0x17b991, 0x2, `Giant\nCrocodile`, 'land/croc/1/croc'];
    case 'skin_purpleMouse':
        return [_0x4170f3, 0x2, `Purple\nMouse`, 'land/mouse/2/mouse'];
    case 'skin_winterMouse':
        return [_0x4170f3, 0x2, `Winter\nMouse`, 'land/mouse/3/mouse', true];
    case 'skin_starMouse':
        return [_0x4170f3, 0x2, `Star\nMouse`, 'land/mouse/4/mouse', true];
    case 'skin_prismaToucan':
        return [_0x510be1, 0x6, `Prisma\nToucan`, 'toucan/6/toucan'];
    case 'gold_mouse':
        return [_0x4170f3, 0x2, `Golden\nMouse`, 'land/mouse/1/mouse'];
    case 'skin_queenScarlet':
        return [_0x4e99c5, 0x5, `Queen\nScarlet`, 'volcano/kingdragon/5/kingdragon'];
    case 'skin_queenRipper':
        return [_0x4e99c5, 9, `Queen\nRipper`, 'volcano/kingdragon/9/kingdragon'];
    case 'skin_kingInferno':
        return [_0x4e99c5, 10, `King\nInferno`, 'volcano/kingdragon/10/kingdragon'];
    case 'skin_queenCeleste':
        return [_0x4e99c5, 0x6, `Queen\nCeleste`, 'volcano/kingdragon/6/kingdragon'];
    case 'skin_bigFoot':
        return [_0x15ef44, 0, `The\nBigfoot`, 'land/bigfoot/0/thebigfoot'];
    case 'skin_kingMelon':
        return [_0x4e99c5, 0, `King\nMelon`, 'volcano/kingdragon/11/kingdragon'];
    case 'skin_sapphireMouse':
        return [_0x4170f3, 0, `Sapphire\nMouse`, 'land/mouse/6/mouse'];
    case 'skin_amethystMouse':
        return [_0x4170f3, 0, `Amethyst\nMouse`, 'land/mouse/7/mouse'];
    case 'skin_emeraldMouse':
        return [_0x4170f3, 0, `Emerald\nMouse`, 'land/mouse/8/mouse'];
    case 'skin_diamondMouse':
        return [_0x4170f3, 0, `Diamond\nMouse`, 'land/mouse/9/mouse'];
    case 'skin_lordofice':
        return [_0x1da4d1, 0, `The\nLord Of Ice`, 'volcano/blackdragon/4/blackdragon'];
    case 'skin_woollyRhino':
        return [_0x1bea6f, 0, `Woolly\nRhino`, 'land/rhino/3/rhino'];
    case 'skin_retrocrocodilealligator':
        return [_0x17b991, 0, `Retro Crocodile\n Alligator`, 'land/croc/4/croc'];
    case 'skin_partycrock':
        return [_0x17b991, 0, `Party\n C'rock`, 'land/croc/5/croc'];
    case 'skin_rubblealligator':
        return [_0x17b991, 0, `Rubble,\n Alligator`, 'land/croc/6/croc'];
    case 'skin_rubyblackdragon':
         return [_0x1da4d1, 0, `The\nRuby Black Dragon`, 'volcano/blackdragon/7/blackdragon'];
    case 'skin_kingGolder':
        return [_0x4e99c5, 0, `King\nGolder`, 'volcano/kingdragon/12/kingdragon'];
    case 'skin_devilMouse':
        return [_0x4170f3, 0, `Devil\nMouse`, 'land/mouse/15/mouse'];
        case 'skin_mouseElemental':
        return [_0x3ebaa2, 0, `Mouse\nElemental`, 'desert/kangaroorat/1/kangaroorat'];
        case 'skin_drillMole':
            return [6, 0, `Drill\nMole`, 'land/mole/1/mole'];
    case 'skin_angelMouse':
        return [_0x4170f3, 0, `Angel\nMouse`, 'land/mouse/16/mouse'];
    case 'skin_cheeseYsMouse':
        return [_0x4170f3, 0, `CheeseY's\nMouse`, 'land/mouse/17/mouse'];
    case 'skin_rizurrar':
        return [_0x1da4d1, 0, `Rizurrar`, 'volcano/blackdragon/15/blackdragon'];
    case 'skin_snowyFalcon':
        return [_0x1db4ca, 0, `Snowy\nFalcon`, 'falcon/1/falcon'];
    }
    return null;
};
mopeShopObject.prototype.load = function (_0x4f78a2) {
    var _0x1f7a06 = [];
    _0x68def2(function (_0x3c3450, _0x58c465) {
        console.log("Loading store info!");
        console.log(_0x58c465.length);
        if (_0x58c465)
            for (var _0x57b5a6 = 0; _0x57b5a6 < _0x58c465.length; _0x57b5a6++) {
                var _0x4c314f = _0x58c465[_0x57b5a6];
                _0x4c314f.purchasedByPlayer && (_0x4c314f.coinsPrice = -0x1);
                _0x1f7a06.push(_0x4c314f);
            }
            console.log(_0x1f7a06);
        for (var _0x329961 = {
                'tab': 'Golden',
                'shopItems': []
            }, _0x48df97 = {
                'tab': 'Locked',
                'shopItems': []
            }, hallowined = {
                'tab': 'Halloween',
                'shopItems': []
            }, community = {
                'tab': 'Community',
                'shopItems': []
            }, _0x16a78f = [], _0x4c314f = [_0x329961, _0x48df97, hallowined, community], _0x57b5a6 = 0; _0x57b5a6 < _0x1f7a06.length; _0x57b5a6++) {
            var _0x332438 = _0x1f7a06[_0x57b5a6];
            switch (_0x332438.shopCategory) {
            case 'locked':
                var _0x355e64 = mopeShopObject.prototype.getAnimalInfo(_0x332438.itemName);
                _0x355e64 && (_0x332438.id = _0x332438.itemName, _0x332438.oType = o_player, _0x332438.animalType = _0x355e64[0], _0x332438.animalSpecies = _0x355e64[0x1], _0x332438.skinName = _0x355e64[0x2], _0x332438.skinImage = _0x355e64[0x3], _0x48df97.shopItems.push(_0x332438));
                break;
            case 'halloween':
                var _0x355e64 = mopeShopObject.prototype.getAnimalInfo(_0x332438.itemName);
                _0x355e64 && (_0x332438.id = _0x332438.itemName, _0x332438.oType = o_player, _0x332438.animalType = _0x355e64[0], _0x332438.animalSpecies = _0x355e64[0x1], _0x332438.skinName = _0x355e64[0x2], _0x332438.skinImage = _0x355e64[0x3], hallowined.shopItems.push(_0x332438));
                break;
            case 'community':
                var _0x355e64 = mopeShopObject.prototype.getAnimalInfo(_0x332438.itemName);
                _0x355e64 && (_0x332438.id = _0x332438.itemName, _0x332438.oType = o_player, _0x332438.animalType = _0x355e64[0], _0x332438.animalSpecies = _0x355e64[0x1], _0x332438.skinName = _0x355e64[0x2], _0x332438.skinImage = _0x355e64[0x3], community.shopItems.push(_0x332438));
                break;
            case 'amogus':
                var _0x355e64 = mopeShopObject.prototype.getAnimalInfo(_0x332438.itemName);
                _0x355e64 && (_0x332438.id = _0x332438.itemName, _0x332438.oType = o_player, _0x332438.animalType = _0x355e64[0], _0x332438.animalSpecies = _0x355e64[0x1], _0x332438.skinName = _0x355e64[0x2], _0x332438.skinImage = _0x355e64[0x3], amogused.shopItems.push(_0x332438));
                break;
            case 'gold':
                if (_0x355e64 = mopeShopObject.prototype.getAnimalInfo(_0x332438.itemName)) _0x332438.id = _0x332438.itemName, _0x332438.oType = o_player, _0x332438.animalType = _0x355e64[0], _0x332438.animalSpecies = _0x355e64[0x1], _0x332438.skinName = _0x355e64[0x2], _0x332438.skinImage = _0x355e64[0x3], _0x332438.isNew = _0x332438.isNew, _0x329961.shopItems.push(_0x332438);
            }
        }
        _0x329961 = [{
            'itemName': 'hats_1_1',
            'coinsPrice': 0x1388,
            'shopCategory': 'props',
            'testing': !0
        }, {
            'itemName': 'hats_1_2',
            'coinsPrice': 0x1388,
            'shopCategory': 'props',
            'testing': !0
        }, {
            'itemName': 'hats_1_3',
            'coinsPrice': 0x1388,
            'shopCategory': 'props',
            'testing': !0
        }, {
            'itemName': 'scarfs_1_1',
            'coinsPrice': 0x1388,
            'shopCategory': 'props',
            'testing': !0
        }, {
            'itemName': 'scarfs_1_2',
            'coinsPrice': 0x1388,
            'shopCategory': 'props',
            'testing': !0
        }, {
            'itemName': 'scarfs_1_3',
            'coinsPrice': 0x1388,
            'shopCategory': 'props',
            'testing': !0
        }];
        for (_0x57b5a6 = 0; _0x57b5a6 < _0x329961.length; _0x57b5a6++) _0x332438 = _0x329961[_0x57b5a6], _0x332438.id = _0x332438.itemName, _0x332438.oType = _0xa9cabc, _0x16a78f.push(_0x332438);
        mopeShopObject.prototype.shop = {
            'ownedSkins': [],
            'ownedProps': [],
            'skins': [],
            'props': []
        };
        for (_0x57b5a6 = 0; _0x57b5a6 < _0x16a78f.length; _0x57b5a6++) _0x332438 = _0x16a78f[_0x57b5a6], _0x332438 = _0x53e90e.newlyVis_createGameObjFromMsg('Prop', _0x332438), -0x1 == _0x332438.coinsPrice && mopeShopObject.prototype.shop.ownedProps.push(_0x332438), mopeShopObject.prototype.shop.props.push(_0x332438);
        for (t = 0; t < _0x4c314f.length; t++)
            for (_0x16a78f = _0x4c314f[t], _0x329961 = _0x16a78f.tab, _0x48df97 = {
                    'name': _0x329961,
                    'items': []
                }, mopeShopObject.prototype.shop.skins.push(_0x48df97), _0x57b5a6 = 0; _0x57b5a6 < _0x16a78f.shopItems.length; _0x57b5a6++) _0x332438 = _0x16a78f.shopItems[_0x57b5a6], _0x332438 = _0x53e90e.newlyVis_createGameObjFromMsg(_0x329961, _0x332438), -0x1 == _0x332438.coinsPrice && mopeShopObject.prototype.shop.ownedSkins.push(_0x332438), _0x48df97.items.push(_0x332438);
        _0x4f78a2 ? mopeShopObj.updateshop_div() : mopeShopObject.prototype.buildInterface();
        var fgedtg4egger = document.getElementById('coins');
        if (fgedtg4egger) {
            fgedtg4egger.innerHTML = mopeShopObj.coinsFormat(_0x381c0d());
        }
    });
};
mopeShopObject.prototype.ownedItems = [];
mopeShopObject.prototype.showTab = function (_0x59d1aa) {
    var _0x2186f7 = document.getElementsByClassName('tab'),
        _0x314db4 = document.getElementsByClassName('title');
    for (i = 0; i < _0x314db4.length; i++) _0x314db4[i].className = _0x314db4[i].id == '' + _0x59d1aa ? 'title selected' : 'title notselected';
    for (i = 0; i < _0x2186f7.length; i++) _0x2186f7[i].className = _0x2186f7[i].id == 'tab-' + _0x59d1aa ? 'tab selected' + ('BattlePass' == _0x59d1aa ? " tab-bp bptab" : "") : 'tab notselected';
    this.selectedTab = _0x59d1aa;
    'MopeShop' != _0x59d1aa && 'Coins' != _0x59d1aa && 'CLOTHING' != _0x59d1aa && this.setVisiblePage(_0x59d1aa, this.curTabPage);
    var _0xd917fb = document.getElementById('shop_div');
    _0xd917fb.style.width = ('BattlePass' == _0x59d1aa ? "685px" : "");
    _0xd917fb.style.height = ('BattlePass' == _0x59d1aa ? "468px" : "");
};
mopeShopObject.prototype.shop = null;
mopeShopObject.prototype.shopDiv = null;
mopeShopObject.prototype.buildInterface = function () {
    _0x4cc85e();
    var _0x9f6b0d = document.getElementById('shopOverlay');
    _0x9f6b0d && _0x9f6b0d.parentNode.removeChild(_0x9f6b0d);
    this.shopDiv = document.createElement('div');
    this.shopDiv.id = 'shop';
    this.shopDiv.className = 'shop center';
    document.getElementsByTagName('body')[0].prepend(this.shopDiv);
    this.showShopButtons();
    this.callback && (this.callback(), this.callback = null);
    _0x409dd9();
};
mopeShopObject.prototype.callback = null;
mopeShopObject.prototype.updateshop_div = function () {
    this.skinsInterface();
    this.showTab(this.selectedTab);
};
mopeShopObject.prototype.removeBlockOverlay = function (_0x455af3, _0xdbec08) {
    var _0x1d260d = document.getElementById('blockOverlay');
    _0x1d260d && _0x1d260d.parentNode.removeChild(_0x1d260d);
};
mopeShopObject.prototype.blockOverlay = function (_0x29637f, _0x5dc7ba) {
    var _0x52e8ff = document.getElementById('shop_div');
    if (_0x52e8ff) {
        var _0x1c603f = _0x4d3dcf('blockOverlay', ''),
            _0x2ae59d = _0x4d3dcf('plzwait', '');
        _0x2ae59d.innerHTML = 'PLEASE WAIT...';
        _0x1c603f.appendChild(_0x2ae59d);
        _0x52e8ff.prepend(_0x1c603f);
    }
};
function createDiv(id, cls) {
    var itemDiv = createElem("div", id, cls);
    return itemDiv;
}
  
function createDivContent(id, cls, content) {
    var itemDiv = createElem("div", id, cls);
    itemDiv.innerHTML = content;
    return itemDiv;
}

mopeShopObject.prototype.addCloseButton = function (_0x5371e6) {
    var _0x3fc7e9 = createElem('div', 'close-shop');
    _0x3fc7e9.onclick = function () {
        _0x4cc85e();
    };
    _0x3fc7e9.innerHTML = 'X';
    _0x5371e6.appendChild(_0x3fc7e9);
};
mopeShopObject.prototype.updateCoinsBalance = function () {
    console.log('coins balance updated');
    var _0x17964c = userInfo;
    var _0x306704 = 0,
        _0xa57ff7 = document.getElementById('coins');
    if (_0xa57ff7) {
        _0xa57ff7.innerHTML = mopeShopObj.coinsFormat(_0x381c0d());
        var _0x2dd030 = userInfo,
            _0xa57ff7 = null;
        _0x306704 = 0;
    }
    // if (_0xa57ff7 = document.getElementById('coins2')) _0xa57ff7.innerHTML = this.coinsFormat(_0x381c0d()), _0x306704 = _0x306704 / _0x17964c.xpNextLvl * 0x64, _0xa57ff7.style.width = _0x306704 + 'px';
};
mopeShopObject.prototype.coinsFormat = function (_0x371287) {
    console.log('coinsFormat ' + _0x371287);
    return _0x371287 == 0 ? 0 : ('' + _0x371287).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
};
mopeShopObject.prototype.showUserExpBarAndCoinsBalance = function (_0xd21acb) {
    var _0x5b8245 = createElem('li', 'user-exp', 'user-exp'),
        _0x46e7e4 = createElem('div', 'userxp-bar', 'userxp-bar'),
        _0x2102f0 = createElem('div', 'userxp-barbar', 'userxp-barbar'),
        _0xd4b2bf = createElem('div', 'userxp-val', 'userxp-val'),
        _0x13e41c = createElem('div', 'userxp-star', 'userxp-star'),
        _0x2dd030 = userInfo,
        _0x36d7ee = 0x32;
    _0x2dd030.xp = _0x36d7ee;
    _0x2dd030.xpNextLvl = _0x2dd030.xp + 0x12c;
    _0xd4b2bf.innerHTML = _0x36d7ee + ' / ' + _0x2dd030.xpNextLvl;
    _0x36d7ee = _0x36d7ee / _0x2dd030.xpNextLvl * 0x64;
    _0x2102f0.style.width = _0x36d7ee + 'px';
    _0xd21acb.appendChild(_0x5b8245);
    _0x5b8245 = createElem('li', 'coins-balance', 'coins-balance');
    _0x46e7e4 = new Image();
    _0x46e7e4.src = 'shop/mopecoin.png';
    _0x46e7e4.className = 'buycoin-img';
    _0x5b8245.appendChild(_0x46e7e4);
    _0x46e7e4 = createElem('span', 'coins', 'coins');
    _0x46e7e4.innerHTML = mopeShopObj.coinsFormat(_0x381c0d());
    _0x5b8245.appendChild(_0x46e7e4);
    _0x5b8245.setAttribute('title', 'add more coins');
    _0xd21acb.appendChild(_0x5b8245);
    _0x5b8245.onclick = function () {
        mopeShopObj.coinsInterface();
        _0x388d73();
    };
};
mopeShopObject.prototype.enableClothingShop = !0x1;
function createBattlePass(bp_4, bp_5, bp_pages) {
    bp_4.innerHTML = "";
    bp_5.innerHTML = "";
    var freepass = new MP_Level(1);
    var data = {
        id: -1,
        path: "/skins/land/mouse/0/mouse.png",
        title: "Free Pass",
        free: true,
        taken: true,
        cantake: false
    };
    freepass.loadData(data);
    var paidpass = new MP_Level(1);
    data = {
        id: -1,
        path: "/skins/land/mouse/1/mouse.png",
        title: "Mope Pass",
        free: false,
        taken: true,
        cantake: false
    };
    paidpass.loadData(data);
    bp_4.appendChild(freepass.generateHtml());
    bp_5.appendChild(paidpass.generateHtml());
    if (0 < global_battlepass_items.length) {
        var pages = Math.ceil(global_battlepass_maxlevel / 7);
        bp_4.setAttribute('data-pages', pages);
        bp_4.setAttribute('data-curPage', 0);
        bp_4.style.width = 637 * pages + 'px';
        bp_5.setAttribute('data-pages', pages);
        bp_5.setAttribute('data-curPage', 0);
        bp_5.style.width = 637 * pages + 'px';
        bp_pages.innerHTML = 'Page: 1 of ' + pages;
        for (i = 0; i < global_battlepass_items.length; i++) {
            if(global_battlepass_items[i].free) bp_4.appendChild(global_battlepass_items[i].generateHtml());
            else bp_5.appendChild(global_battlepass_items[i].generateHtml());
        }
    } else {
        bp_4.setAttribute('data-pages', 0);
        bp_4.setAttribute('data-curPage', 0);
        bp_pages.innerHTML = 'Page: 0 of 0';
    }
}
mopeShopObject.prototype.showShopButtons = function () {
    this.deleteTab();
    var _0x3a1d1d = _0x4d3dcf('shop_div', ''),
        _0x534d44 = createElem('ul');
    this.addCloseButton2(_0x534d44);
    _0x3a1d1d.appendChild(_0x534d44);
    var mopeShop_Tab = createElem('li', 'MopeShop', 'title');
    mopeShop_Tab.innerHTML = 'SHOP';
    mopeShop_Tab.onclick = function () {
        mopeShopObj.showTab(this.id);
    };
    _0x534d44.appendChild(mopeShop_Tab);
    var bp_1 = createElem('li', 'BattlePass', 'title');
    bp_1.innerHTML = 'MOPE PASS';
    bp_1.onclick = function () {
        mopeShopObj.showTab(this.id);
    };
    _0x534d44.appendChild(bp_1);
    var bp_1 = createElem('div', 'tab-BattlePass', 'tab'), // создание вкладки батл пасса
        bp_2 = createElem('div', void 0, 'content'),
        bp_3 = createElem('div', void 0, 'content-inner'),
        bp_5 = createElem('div', 'content-items-BattlePass2', 'content-items'),
        bp_6 = createElem('div', 'BattlePass-levels', 'BattlePass-levels'),
        bp_4 = createElem('div', 'content-items-BattlePass', 'content-items');
    
    var right_bp = createElem('div', 'right-BattlePass', 'right');
    var left_bp = createElem('div', 'left-BattlePass', 'left');
    left_bp.style = `
        margin-top: -20px;
        background-size: 15px;
        height: 79px;
    `;
    right_bp.style = `
        margin-top: -149px;
        background-size: 15px;
        height: 79px;
        margin-left: 626px;
    `;
    right_bp.onclick = function () {
        mopeShopObj.scrollItems(this, !0);
    };
    left_bp.onclick = function () {
        mopeShopObj.scrollItems(this, !1);
    };
    bp_3.append(bp_4);
    bp_3.append(bp_6);
    bp_3.append(bp_5);
    var bp_hr = createElem('hr', 'BattlePass-levels2', 'BattlePass-levels2');
    bp_6.style.width = '637px';
    bp_6.append(bp_hr);
    bp_4.style.width = '610px';
    bp_5.style.width = '610px';
    bp_2.append(bp_3);
    bp_1.append(bp_2);
    bp_3.append(left_bp);
    bp_3.append(right_bp);
    var bp_pages = createElem('div', 'pages-BattlePass', 'content-items-pages-bppage');
    createBattlePass(bp_4, bp_5, bp_pages);
    bp_2.append(bp_pages);
    if(!global_battlepass_exist) {
        bp_5.style.background = "#0f6c15";
    }
    var clonedProgress = document.getElementById("battlepass_container").cloneNode(true);
    clonedProgress.id = "battlepass_container_2";
    clonedProgress.style = "";
    clonedProgress.style.width = "590px";
    clonedProgress.style.top = "-120px";
    clonedProgress.style.position = "relative";
    clonedProgress.style['margin-left'] = "40px";
    bp_2.append(clonedProgress);
    var stats = createDiv('', 'bp-stats');
    stats.innerHTML = "Season: "+global_battlepass_name;
    stats.style['top'] = "-120px";
    bp_2.append(stats);
    var thisSeason = createElem('div', 'bp_season', "season");
    thisSeason.innerHTML = "Season " + global_battlepass_season_number + " ("+(battlepass_daysleft() > 0 ? battlepass_daysleft()+" days" : battlepass_minutesleft() + " minutes") + " left)";
    stats.append(thisSeason);
    var clonedLevel = document.getElementById("bp_level").cloneNode(true);
    clonedLevel.style = "";
    stats.append(clonedLevel);
    var hasGamepass = createElem('div', 'bp_hasGamePass', global_battlepass_exist ? "haspass" : "nothaspass");
    hasGamepass.innerHTML = global_battlepass_exist ? "Mope Pass Activated!" : "No Mope Pass!";
    stats.append(hasGamepass);
    _0x3a1d1d.appendChild(bp_1);
    var mopeShop_Tab = createElem('div', 'tab-MopeShop', 'tab'),
        mopeShop_Content = createElem('div', void 0, 'content'),
        mopeShop_Content_Inner = createElem('div', void 0, 'content-inner'),
        mopeShop_Content_Items = createElem('div', 'content-items-MopeShop', 'content-items');
    mopeShop_Content_Inner.append(mopeShop_Content_Items);
    mopeShop_Content_Items.style.width = '650px';
    var _0x5d30c7 = createElem('div', void 0, 'box coinsBox'),
        _0x441a29 = createElem('div', void 0, 'box skinsBox');
    _0x441a29.onclick = function () {
        mopeShopObj.selectedTab = 'Golden';
        mopeShopObj.skinsInterface();
        _0x388d73();
    };
    _0x5d30c7.onclick = function () {
        mopeShopObj.coinsInterface();
        _0x388d73();
    };
    var _0x57b6cf = createElem('div', void 0, 'title'),
        _0x57f7e1 = createElem('div', void 0, 'img'),
        _0x4de9c5 = new Image();
    _0x4de9c5.src = 'shop/coins.png';
    _0x57f7e1.appendChild(_0x4de9c5);
    _0x57b6cf.innerHTML = 'COINS';
    _0x5d30c7.appendChild(_0x57f7e1);
    _0x5d30c7.appendChild(_0x57b6cf);
    _0x57b6cf = createElem('div', void 0, 'title');
    _0x57f7e1 = createElem('div', void 0, 'img');
    _0x4de9c5 = new Image();
    _0x4de9c5.src = 'shop/skins.png';
    _0x57f7e1.appendChild(_0x4de9c5);
    _0x57b6cf.innerHTML = 'SKINS';
    _0x441a29.appendChild(_0x57f7e1);
    _0x441a29.appendChild(_0x57b6cf);
    mopeShop_Content_Items.appendChild(_0x5d30c7);
    mopeShop_Content_Items.appendChild(_0x441a29);
    mopeShop_Content.append(mopeShop_Content_Inner);
    mopeShop_Content.append(createElem('div', '', 'separator'));
    mopeShop_Content_Inner.append(createElem('div', '', 'separator'));
    mopeShop_Content_Items.append(createElem('div', '', 'separator'));
    mopeShop_Tab.append(mopeShop_Content);
    mopeShop_Tab.append(createElem('div', '', 'separator'));
    _0x3a1d1d.appendChild(mopeShop_Tab);
    this.createMyPurchasesTab(_0x534d44, _0x3a1d1d, mopeShopObj.shop.ownedSkins);
    this.showUserExpBarAndCoinsBalance(_0x534d44);
    _0x3a1d1d.append(createElem('div', '', 'separator'));
    this.shopDiv.appendChild(_0x3a1d1d);
    this.showTab('MopeShop');
    _0x409dd9();
};
mopeShopObject.prototype.createMyPurchasesTab = function (_0xfa2799, _0x4fd80d, _0x1fc047) {
    var skinsPurchases = createElem('li', 'myPurchases', 'title');
    skinsPurchases.innerHTML = 'SKINS OWNED';
    skinsPurchases.onclick = function () {
        mopeShopObj.curTabPage = 0;
        mopeShopObj.showTab(this.id);
    };
    _0xfa2799.appendChild(skinsPurchases);
    var _0x5ec392 = createElem('div', 'tab-myPurchases', 'tab');
    _0xfa2799 = createElem('div', void 0, 'content');
    var skinsPurchases = createElem('div', void 0, 'content-inner'),
        _0x307edc = createElem('div', 'content-items-myPurchases', 'content-items');
    skinsPurchases.append(_0x307edc);
    _0x307edc.style.width = '530px';
    _0xfa2799.append(skinsPurchases);
    _0xfa2799.append(createElem('div', '', 'separator'));
    skinsPurchases.append(createElem('div', '', 'separator'));
    _0x307edc.append(createElem('div', '', 'separator'));
    _0x5ec392.append(_0xfa2799);
    _0x5ec392.append(createElem('div', '', 'separator'));
    _0x4fd80d.appendChild(_0x5ec392);
    _0x4fd80d = createElem('div', 'left-myPurchases', 'left');
    var _0x5ec392 = createElem('div', 'pages-myPurchases', 'content-items-pages'),
        _0x5c824f = createElem('div', 'right-myPurchases', 'right');
    _0x5c824f.onclick = function () {
        mopeShopObj.scrollItems(this, !0);
    };
    _0x4fd80d.onclick = function () {
        mopeShopObj.scrollItems(this, !0x1);
    };
    skinsPurchases.append(_0x307edc);
    if (0 < _0x1fc047.length) {
        skinsPurchases.className += ' w530';
        var _0xc38f37 = Math.ceil(_0x1fc047.length / 0x4);
        _0x307edc.setAttribute('data-pages', _0xc38f37);
        _0x307edc.setAttribute('data-curPage', 0);
        _0x307edc.style.width = 530 * _0xc38f37 + 'px';
        _0x5ec392.innerHTML = 'Page: 1 of ' + _0xc38f37;
        for (i = 0; i < _0x1fc047.length; i++) _0x307edc.appendChild(_0x1fc047[i].generateHtml());
        _0xfa2799.append(_0x4fd80d);
        _0xfa2799.append(skinsPurchases);
        _0xfa2799.append(_0x5c824f);
        _0xfa2799.append(_0x5ec392);
    } else _0x1fc047 = _0x4d3dcf('div', 'nopurchases'), _0x1fc047.innerHTML = "You don't have any item to show here!", skinsPurchases.append(_0x1fc047), _0xfa2799.append(skinsPurchases);
};
mopeShopObject.prototype.deleteTab = function () {
    var _0xd917fb = document.getElementById('shop_div');
    _0xd917fb && _0xd917fb.parentNode.removeChild(_0xd917fb);
};
mopeShopObject.prototype.skinsInterface = function () {
    this.deleteTab();
    var _0x2512e5 = _0x4d3dcf('shop_div', ''),
        _0x3a2f1f = createElem('ul');
    _0x2512e5.appendChild(_0x3a2f1f);
    this.addCloseButton2(_0x3a2f1f);
    this.addBackButton(_0x3a2f1f);
    for (t = 0; t < this.shop.skins.length; t++) {
        var _0x987b = this.shop.skins[t],
            _0x3d3cf3 = createElem('li', _0x987b.name, 'title'),
            _0x499b94 = createElem('a');
        _0x3d3cf3.innerHTML = _0x987b.name;
        _0x499b94.setAttribute('href', '#tab-' + _0x987b.name);
        _0x3d3cf3.onclick = function () {
            mopeShopObj.curTabPage = 0;
            mopeShopObj.showTab(this.id);
            _0x388d73();
        };
        _0x3a2f1f.appendChild(_0x3d3cf3);
        var _0x3d3cf3 = createElem('div', 'tab-' + _0x987b.name, 'tab'),
            _0x499b94 = createElem('div', void 0, 'content'),
            _0x3d0363 = createElem('div', void 0, 'content-inner w530'),
            _0x58e129 = createElem('div', 'content-items-' + _0x987b.name, 'content-items'),
            _0x4a3f2d = createElem('div', 'left-' + _0x987b.name, 'left'),
            _0x235481 = createElem('div', 'pages-' + _0x987b.name, 'content-items-pages'),
            _0x2b7bac = createElem('div', 'left-' + _0x987b.name, 'right');
        _0x2b7bac.onclick = function () {
            mopeShopObj.scrollItems(this, !0);
        };
        _0x4a3f2d.onclick = function () {
            mopeShopObj.scrollItems(this, !0x1);
        };
        _0x3d0363.append(_0x58e129);
        var _0x2cbe97 = Math.ceil(_0x987b.items.length / 0x4);
        _0x58e129.setAttribute('data-pages', _0x2cbe97);
        _0x58e129.setAttribute('data-curPage', 0);
        _0x58e129.style.width = 'Coins' == _0x987b.name ? '615px' : 0x212 * _0x2cbe97 + 'px';
        _0x235481.innerHTML = 'Page: 1 of ' + _0x2cbe97;
        for (i = 0; i < _0x987b.items.length; i++) _0x58e129.appendChild(_0x987b.items[i].generateHtml());
        _0x499b94.append(_0x4a3f2d);
        _0x499b94.append(_0x3d0363);
        _0x499b94.append(_0x2b7bac);
        _0x499b94.append(_0x235481);
        _0x499b94.append(createElem('div', '', 'separator'));
        _0x3d0363.append(createElem('div', '', 'separator'));
        _0x58e129.append(createElem('div', '', 'separator'));
        _0x3d3cf3.append(_0x499b94);
        _0x3d3cf3.append(createElem('div', '', 'separator'));
        _0x2512e5.appendChild(_0x3d3cf3);
    }
    this.showUserExpBarAndCoinsBalance(_0x3a2f1f);
    _0x2512e5.append(createElem('div', '', 'separator'));
    this.shopDiv.appendChild(_0x2512e5);
    this.showTab(this.selectedTab);
};
mopeShopObject.prototype.props = {
    'hatsColor': '',
    'beardsColor': '',
    'glassesColor': '',
    'scarfsColor': ''
};
mopeShopObject.prototype.propBought = {
    'hats': {
        'white': 0x1,
        'red': 0,
        'green': 0,
        'blue': 0x1,
        'pink': 0,
        'gold': 0
    },
    'beards': {
        'white': 0,
        'red': 0x1,
        'green': 0,
        'blue': 0,
        'pink': 0,
        'gold': 0x1
    },
    'glasses': {
        'white': 0,
        'red': 0x1,
        'green': 0x1,
        'blue': 0,
        'pink': 0,
        'gold': 0
    },
    'scarfs': {
        'white': 0,
        'red': 0x1,
        'green': 0,
        'blue': 0x1,
        'pink': 0,
        'gold': 0x1
    }
};
mopeShopObject.prototype.hasBoughtProp = function (_0x326024, _0x2b77f4) {
    return 0x1 === this.propBought[_0x326024][_0x2b77f4] ? !0 : !0x1;
};
mopeShopObject.prototype.isPropSelected = function (_0x3d448d, _0x59ce2e) {
    var _0x15ad35 = this.getPropColorNum(_0x59ce2e);
    return this.props[_0x3d448d + 'Color'] === _0x15ad35;
};
mopeShopObject.prototype.showProp = function (_0x735f1) {
    document.getElementById('propDisplay').style.display = 'block';
    var _0x71026b = document.getElementById('btn-' + _0x735f1);
    if (_0x71026b) {
        var _0x3361f6 = document.getElementById('btn-hats'),
            _0x5e79e9 = document.getElementById('btn-glasses'),
            _0x14c8f2 = document.getElementById('btn-beards'),
            _0x50c0f6 = document.getElementById('btn-scarfs');
        _0x3361f6.className = 'clothingbtn';
        _0x5e79e9.className = 'clothingbtn';
        _0x14c8f2.className = 'clothingbtn';
        _0x50c0f6.className = 'clothingbtn';
        _0x71026b.className = 'clothingbtn selected';
        _0x71026b = document.getElementById('propColors');
        _0x71026b.innerHTML = '';
        var _0x3361f6 = createElem('div', 'propColor-white', 'propColor propColor-white' + (this.isPropSelected(_0x735f1, 'white') ? ' selected' : '') + (this.hasBoughtProp(_0x735f1, 'white') ? ' bought' : '')),
            _0x5e79e9 = createElem('div', 'propColor-red', 'propColor propColor-red' + (this.isPropSelected(_0x735f1, 'red') ? ' selected' : '') + (this.hasBoughtProp(_0x735f1, 'red') ? ' bought' : '')),
            _0x14c8f2 = createElem('div', 'propColor-green', 'propColor propColor-green' + (this.isPropSelected(_0x735f1, 'green') ? ' selected' : '') + (this.hasBoughtProp(_0x735f1, 'green') ? ' bought' : '')),
            _0x50c0f6 = createElem('div', 'propColor-blue', 'propColor propColor-blue' + (this.isPropSelected(_0x735f1, 'blue') ? ' selected' : '') + (this.hasBoughtProp(_0x735f1, 'blue') ? ' bought' : '')),
            _0x3a5149 = createElem('div', 'propColor-pink', 'propColor propColor-pink' + (this.isPropSelected(_0x735f1, 'pink') ? ' selected' : '') + (this.hasBoughtProp(_0x735f1, 'pink') ? ' bought' : '')),
            _0x2e82f = createElem('div', 'propColor-gold', 'propColor propColor-gold' + (this.isPropSelected(_0x735f1, 'gold') ? ' selected' : '') + (this.hasBoughtProp(_0x735f1, 'gold') ? ' bought' : ''));
        _0x3361f6.appendChild(createElem('div', '', 'color'));
        _0x5e79e9.appendChild(createElem('div', '', 'color'));
        _0x14c8f2.appendChild(createElem('div', '', 'color'));
        _0x50c0f6.appendChild(createElem('div', '', 'color'));
        _0x3a5149.appendChild(createElem('div', '', 'color'));
        _0x2e82f.appendChild(createElem('div', '', 'color'));
        _0x3361f6.onclick = function () {
            mopeShopObj.setPropColor(_0x735f1, 'white');
        };
        _0x5e79e9.onclick = function () {
            mopeShopObj.setPropColor(_0x735f1, 'red');
        };
        _0x14c8f2.onclick = function () {
            mopeShopObj.setPropColor(_0x735f1, 'green');
        };
        _0x50c0f6.onclick = function () {
            mopeShopObj.setPropColor(_0x735f1, 'blue');
        };
        _0x3a5149.onclick = function () {
            mopeShopObj.setPropColor(_0x735f1, 'pink');
        };
        _0x2e82f.onclick = function () {
            mopeShopObj.setPropColor(_0x735f1, 'gold');
        };
        _0x71026b.appendChild(_0x3361f6);
        _0x71026b.appendChild(_0x5e79e9);
        _0x71026b.appendChild(_0x14c8f2);
        _0x71026b.appendChild(_0x50c0f6);
        _0x71026b.appendChild(_0x3a5149);
        _0x71026b.appendChild(_0x2e82f);
        document.getElementById('propBuyDiv').innerHTML = '';
    }
};
mopeShopObject.prototype.propAnimal = null;
mopeShopObject.prototype.updatePropsForAnimal = function () {
    console.log(this.props);
    var _0x4f7599 = _0x4170f3,
        _0x375ca1 = GameObjType.createGameObjOfOType(o_player, _0x4f7599);
    _0x375ca1.animalType = _0x4f7599;
    _0x375ca1.animalSpecies = 0;
    _0x375ca1.animalSubSpecies = 0;
    _0x375ca1.animalPremiumSkin = 0;
    var _0x299717 = _0x4d3dcf('', 'propimg'),
        _0x1107ca = _0x4d3dcf('', 'propimg'),
        _0x5cf77d = _0x4d3dcf('', 'propimg'),
        _0x418d1c = _0x4d3dcf('', 'propimg'),
        _0x572a43 = _0x4d3dcf('', 'propimg'),
        _0x170b70 = document.getElementById('propAnimal');
    _0x170b70.innerHTML = '';
    var _0x375ca1 = 'skins/' + _0x375ca1.animalInfo().skinName + '.png',
        _0x35981d = '/props/' + _0x4f7599 + '/beards/' + this.props.beardsColor + '.png',
        _0x47654a = '/props/' + _0x4f7599 + '/hats/' + this.props.hatsColor + '.png',
        _0x138fb6 = '/props/' + _0x4f7599 + '/scarfs/' + this.props.scarfsColor + '.png',
        _0x4f7599 = '/props/' + _0x4f7599 + '/glasses/' + this.props.glassesColor + '.png';
    console.log(_0x35981d);
    _0x1107ca.style.backgroundImage = 'url(' + _0x35981d + ')';
    _0x299717.style.backgroundImage = 'url(' + _0x375ca1 + ')';
    _0x5cf77d.style.backgroundImage = 'url(' + _0x47654a + ')';
    _0x418d1c.style.backgroundImage = 'url(' + _0x138fb6 + ')';
    _0x572a43.style.backgroundImage = 'url(' + _0x4f7599 + ')';
    _0x170b70.appendChild(_0x1107ca);
    _0x170b70.appendChild(_0x299717);
    _0x170b70.appendChild(_0x418d1c);
    _0x170b70.appendChild(_0x572a43);
    _0x170b70.appendChild(_0x5cf77d);
};
mopeShopObject.prototype.getPropColorNum = function (_0x36d411) {
    switch (_0x36d411) {
    case 'white':
        return 0;
    case 'red':
        return 0x1;
    case 'green':
        return 0x2;
    case 'blue':
        return 0x3;
    case 'pink':
        return 0x4;
    case 'gold':
        return 0x5;
    }
};
mopeShopObject.prototype.setPropColor = function (_0x186892, _0x4938c2) {
    var _0xea139e = _0x186892 + 'Color',
        _0x1d9a2e = document.getElementById('propColor-' + _0x4938c2),
        _0xe4d617 = document.getElementById('propColor-red'),
        _0x231361 = document.getElementById('propColor-green'),
        _0x23e73e = document.getElementById('propColor-blue'),
        _0x52d779 = document.getElementById('propColor-pink'),
        _0x4bb00e = document.getElementById('propColor-white'),
        _0xb3f334 = document.getElementById('propColor-gold');
    _0xe4d617.className = 'propColor propColor-red' + (this.hasBoughtProp(_0x186892, 'red') ? ' bought' : '');
    _0x231361.className = 'propColor propColor-green' + (this.hasBoughtProp(_0x186892, 'green') ? ' bought' : '');
    _0x23e73e.className = 'propColor propColor-blue' + (this.hasBoughtProp(_0x186892, 'blue') ? ' bought' : '');
    _0x52d779.className = 'propColor propColor-pink' + (this.hasBoughtProp(_0x186892, 'pink') ? ' bought' : '');
    _0x4bb00e.className = 'propColor propColor-white' + (this.hasBoughtProp(_0x186892, 'white') ? ' bought' : '');
    _0xb3f334.className = 'propColor propColor-gold' + (this.hasBoughtProp(_0x186892, 'gold') ? ' bought' : '');
    _0xe4d617 = document.getElementById('propBuyDiv');
    _0xe4d617.innerHTML = '';
    _0x231361 = createElem('div', 'propBuyBtn', 'buybutton');
    _0x231361.onclick = function () {
        alert('buy prop: ' + _0x186892 + ' color: ' + _0x4938c2);
    };
    this.isPropSelected(_0x186892, _0x4938c2) ? (this.props[_0xea139e] = '', _0x1d9a2e.className = 'propColor propColor-' + _0x4938c2) : (this.props[_0xea139e] = this.getPropColorNum(_0x4938c2), _0x1d9a2e.className = 'propColor propColor-' + _0x4938c2 + ' selected', this.hasBoughtProp(_0x186892, _0x4938c2) || (_0xea139e = new Image(), _0xea139e.className = 'buycoin-img', _0xea139e.src = 'shop/mopecoin.png', _0x1d9a2e = createElem('span', '', 'buycoin-price'), _0x1d9a2e.innerHTML = 0x64 + 0x64 * this.getPropColorNum(_0x4938c2), _0x231361.appendChild(_0xea139e), _0x231361.appendChild(_0x1d9a2e), _0xe4d617.appendChild(_0x231361)));
    this.updatePropsForAnimal();
};
mopeShopObject.prototype.addBackButton = function (_0x1073de) {
    var _0x33df3b = createElem('li', 'back', 'title '),
        _0x1ae737 = new Image();
    _0x1ae737.src = 'shop/back.png';
    _0x33df3b.appendChild(_0x1ae737);
    _0x33df3b.onclick = function () {
        mopeShopObj.showShopButtons();
    };
    _0x1073de.appendChild(_0x33df3b);
};
mopeShopObject.prototype.addCloseButton2 = function (_0x81e23) {
    var _0x2e2f0d = createElem('li', 'closebtn', 'title '),
        _0x294e70 = new Image();
    _0x294e70.src = 'shop/close.png';
    _0x2e2f0d.appendChild(_0x294e70);
    _0x2e2f0d.onclick = function () {
        _0x4cc85e();
    };
    _0x81e23.appendChild(_0x2e2f0d);
};
mopeShopObject.prototype.coinsInterface = function () {
    _0x1c218d();
};
mopeShopObject.prototype.skinsInterface2 = function () {
    var _0x266f82 = _0x4d3dcf('shop_div', ''),
        _0x33af8f = createElem('ul');
    _0x266f82.appendChild(_0x33af8f);
    var _0x27e65d = document.createElement('div');
    _0x27e65d.id = 'shop';
    _0x27e65d.className = 'shop center';
    for (t = 0; t < this.shop.skins.length; t++) {
        var _0x556a79 = this.shop.skins[t],
            _0x25c7dd = createElem('li', _0x556a79.name, 'title'),
            _0x134ced = createElem('a');
        _0x25c7dd.innerHTML = _0x556a79.name;
        _0x134ced.setAttribute('href', '#tab-' + _0x556a79.name);
        _0x25c7dd.onclick = function () {
            mopeShopObj.curTabPage = 0;
            mopeShopObj.showTab(this.id);
        };
        _0x33af8f.appendChild(_0x25c7dd);
        var _0x25c7dd = createElem('div', 'tab-' + _0x556a79.name, 'tab'),
            _0x134ced = createElem('div', void 0, 'content'),
            _0x3dc803 = createElem('div', void 0, 'content-inner'),
            _0x19b7ed = createElem('div', 'content-items-' + _0x556a79.name, 'content-items'),
            _0x3cd680 = createElem('div', 'left-' + _0x556a79.name, 'left'),
            _0x47def0 = createElem('div', 'pages-' + _0x556a79.name, 'content-items-pages'),
            _0x32396a = createElem('div', 'left-' + _0x556a79.name, 'right');
        _0x32396a.onclick = function () {
            mopeShopObj.scrollItems(this, !0);
        };
        _0x3cd680.onclick = function () {
            mopeShopObj.scrollItems(this, !0x1);
        };
        _0x3dc803.append(_0x19b7ed);
        var _0x42c3b8 = Math.round(_0x556a79.items.length / 0x4);
        _0x19b7ed.setAttribute('data-pages', _0x42c3b8);
        _0x19b7ed.setAttribute('data-curPage', 0);
        _0x19b7ed.style.width = 0x212 * _0x42c3b8 + 'px';
        _0x47def0.innerHTML = 'Page: 1 of ' + _0x42c3b8;
        for (i = 0; i < _0x556a79.items.length; i++) _0x19b7ed.appendChild(_0x556a79.items[i].generateHtml());
        _0x134ced.append(_0x3cd680);
        _0x134ced.append(_0x3dc803);
        _0x134ced.append(_0x32396a);
        _0x134ced.append(_0x47def0);
        _0x134ced.append(createElem('div', '', 'separator'));
        _0x3dc803.append(createElem('div', '', 'separator'));
        _0x19b7ed.append(createElem('div', '', 'separator'));
        _0x25c7dd.append(_0x134ced);
        _0x25c7dd.append(createElem('div', '', 'separator'));
        _0x266f82.appendChild(_0x25c7dd);
    }
    this.showUserExpBarAndCoinsBalance(_0x33af8f);
    _0x266f82.append(createElem('div', '', 'separator'));
    _0x27e65d.appendChild(_0x266f82);
    document.getElementsByTagName('body')[0].prepend(_0x27e65d);
    this.showTab('Golden');
};
mopeShopObject.prototype.curTabPage = 0;
mopeShopObject.prototype.setVisiblePage = function (_0x238a44, _0x1aed5a) {
    var _0x2942da = document.getElementById('pages-' + _0x238a44),
        _0x203db0 = document.getElementById('content-items-' + _0x238a44);
    if (_0x203db0) {
        var _0x55a349 = _0x203db0.getAttribute('data-pages');
        _0x203db0.setAttribute('data-curPage', _0x1aed5a);
        this.curTabPage = _0x1aed5a;
        if(_0x2942da) _0x2942da.innerHTML = 'Page: ' + (_0x1aed5a + 0x1) + ' of ' + _0x55a349;
        if(_0x238a44 == "BattlePass" || _0x238a44 == "BattlePass2") _0x203db0.style.left = -650 * _0x1aed5a + 'px';
        else _0x203db0.style.left = -528 * _0x1aed5a + 'px';
        _0x203db0.style.webkitAnimation = '';
    }
};
mopeShopObject.prototype.scrollItems = function (_0x23dc9b, _0x79a776) {
    var _0x27f3f5 = _0x23dc9b.id.split('-')[0x1],
        _0x50295f = document.getElementById('content-items-' + _0x27f3f5),
        _0x2d85da = _0x50295f.getAttribute('data-pages'),
        _0x50295f = Number(_0x50295f.getAttribute('data-curPage'));
    _0x50295f < _0x2d85da - 0x1 && _0x79a776 ? _0x50295f++ : 0 < _0x50295f && !_0x79a776 && _0x50295f--;
    this.setVisiblePage(_0x27f3f5, _0x50295f);
    if(_0x27f3f5 == "BattlePass") {
        var page = _0x50295f;
        _0x50295f = document.getElementById('content-items-' + _0x27f3f5 + '2');
        _0x2d85da = _0x50295f.getAttribute('data-pages');
        _0x50295f = Number(_0x50295f.getAttribute('data-curPage'));
        _0x50295f = page;
        this.setVisiblePage(_0x27f3f5+'2', _0x50295f);
    }
};
var accountImg = null;
mopeShopObject.prototype.onLogon = function () {
    console.log('MopeShop v0.1 onLogon');
    if (isUserLoggedIn) {
        var _0x1ada8f = document.getElementById('accountsDiv');
        if (_0x1ada8f) {
            var _0x22985f = _0x4d3dcf('profilePic', 'profilePic'),
                _0x6a750d = new Image(),
                _0x240b86 = _0x4d3dcf('profileName', 'profileName'),
                accountImg = new Image();
            _0x22985f.appendChild(accountImg);
            accountImg.src = "/img/default.png";
            accountImg.style = `animation-name: spinnn;
            animation-duration: 1000ms;
            animation-iteration-count: infinite;
            animation-timing-function: linear;`;
            _0x234910 && (_0x6a750d.src = _0x234910);
            _0x6a750d.width = "48";
            _0x6a750d.height = "48";
            _0x6a750d.style.visible = "hidden";
            _0x6a750d.onload = function() {
                accountImg.src = _0x234910;
                accountImg.style = "";
            }
            _0x6a750d.onerror = function() {
                accountImg.style = "";
            }
            _0x240b86.innerHTML = _0x347f2d + " (id " + login_userId + ")";
            _0x1ada8f.appendChild(_0x22985f);
            // bp xp bar
            var battlepass_container = createElem('div', 'battlepass_container', 'progress');
            var battlepass_bar = createElem('div', 'battlepass_bar', 'progress-bar progress-bar-striped progress-bar-animated bg-warning battlepass_progress_xp');
            battlepass_container.style = "margin-top: 30px; width: 230px; margin-bottom: -3px; margin-left: -5px;";
            battlepass_bar.role = "progressbar";
            battlepass_bar.style = "width: "+calculateXP()+"%";
            battlepass_bar['aria-label'] = "XP Bar";
            battlepass_bar['aria-valuenow'] = userInfo.xp;
            battlepass_bar['aria-valuemin'] = "0";
            battlepass_bar['aria-valuemax'] = userInfo.xpNextLvl;
            battlepass_bar.innerHTML = userInfo.xp+"/"+userInfo.xpNextLvl+" xp";
            battlepass_container.appendChild(battlepass_bar);
            global_battlepass_bar = battlepass_bar;
            _0x22985f.appendChild(battlepass_container);
            // bp lvl
            var level = createDiv('bp_level', 'level mainlevel' + (global_battlepass_exist ? " infohaspass" : ""));
            level.innerHTML = "Level "+userInfo.level;
            level.style = `
            margin-bottom: -15px;
            margin-top: -35px;
            width: 50px;
            margin-left: -5px;
            height: 15px;
            `;
            //
            var shopbutton_a = createElem('button', 'shop-open', 'shop-open');
            shopbutton_a.style = "margin-right: -8px";
            _0x22985f.appendChild(shopbutton_a);
            //
            _0x22985f.appendChild(level);
            global_battlepass_levelbar = level;
            //
            shopbutton_a.onclick = function () {
                _0x7db050();
                load_battlepass_data();
                mopeShopObj.load();
            };
            var _0x6a750d = userInfo,
                _0x22985f = createElem('div', 'user-exp2', 'user-exp'),
                _0x2e17ee = createElem('div', 'userxp-bar2', 'userxp-bar'),
                _0x449f48 = createElem('div', 'userxp-barbar2', 'userxp-barbar'),
                _0x2d247a = createElem('div', 'userxp-val2', 'userxp-val'),
                _0x527a3f = createElem('div', 'userxp-star2', 'userxp-star'),
                _0x1083d2 = 0x64;
            _0x2d247a.innerHTML = _0x1083d2 + ' / ' + _0x6a750d.xpNextLvl;
            _0x1083d2 = _0x1083d2 / _0x6a750d.xpNextLvl * 0x64;
            _0x449f48.style.width = _0x1083d2 + 'px';
            _0x527a3f.innerHTML = _0x6a750d.level;
            shopbutton_a.innerHTML = "SHOP";
            _0x6a750d = createElem('div', 'coins-balance2', 'coins-balance');
            _0x2e17ee = new Image();
            _0x2e17ee.src = 'shop/mopecoin.png';
            _0x2e17ee.className = 'buycoin-img';
            _0x6a750d.appendChild(_0x2e17ee);
            _0x2e17ee = createElem('div', 'coins2', 'coins');
            _0x2e17ee.innerHTML = _0x381c0d();
            _0x6a750d.appendChild(_0x2e17ee);
            _0x6a750d.setAttribute('title', 'coins');
            _0x6a750d.onclick = function () {
                _0x4cc85e();
                mopeShopObj = new mopeShopObject();
                mopeShopObject.prototype.callback = function () {
                    console.log('callback called!');
                    this.coinsInterface();
                    mopeShopObject.prototype.callback = null;
                };
                mopeShopObj.load();
            };
            _0x2e17ee = _0x4d3dcf('userNameExpDiv', 'userNameExpDiv');
            _0x2e17ee.appendChild(_0x240b86);
            _0x2e17ee.appendChild(_0x4d3dcf(void 0, 'clear'));
            _0x2e17ee.appendChild(_0x22985f);
            _0x2e17ee.appendChild(_0x4d3dcf(void 0, 'clear'));
            _0x2e17ee.appendChild(_0x6a750d);
            _0x1ada8f.appendChild(_0x2e17ee);
            _0x1ada8f.appendChild(_0x4d3dcf(void 0, 'clear'));
        }
    } else {
        var _0x1ada8f = document.getElementById('accountsDiv');
        if (_0x1ada8f) {
            var _0x240b86 = _0x4d3dcf('profileName', 'profileName');
            _0x240b86.innerHTML = "LOGIN FAILED. RESTARTING";
            _0x1ada8f.appendChild(_0x240b86);
        }
    }
};
window.MopeShop = mopeShopObject;

//ed
function _0x2ac184() {
    //
}
_0x2ac184.prototype.items = [];
_0x2ac184.prototype.datatab = [];
_0x2ac184.prototype.getAnimalInfo = function (_0x58287b) {
    //
};
_0x2ac184.prototype.load = function (_0x4f78a2) {
    //
};
_0x2ac184.prototype.ownedItems = [];
_0x2ac184.prototype.showTab = function (_0x59d1aa) {
    //
};
_0x2ac184.prototype.shop = null;
_0x2ac184.prototype.shopDiv = null;
_0x2ac184.prototype.buildInterface = function () {
    //
};
_0x2ac184.prototype.callback = null;
_0x2ac184.prototype.updateshop_div = function () {
    //
};
_0x2ac184.prototype.removeBlockOverlay = function (_0x455af3, _0xdbec08) {
    //
};
_0x2ac184.prototype.blockOverlay = function (_0x29637f, _0x5dc7ba) {
    //
};
_0x2ac184.prototype.addCloseButton = function (_0x5371e6) {
    //
};
_0x2ac184.prototype.updateCoinsBalance = function () {
    //
};
_0x2ac184.prototype.coinsFormat = function (_0x371287) {
    //
};
_0x2ac184.prototype.showUserExpBarAndCoinsBalance = function (_0xd21acb) {
    //
};
_0x2ac184.prototype.enableClothingShop = !0x1;
_0x2ac184.prototype.showShopButtons = function () {
    //
};
_0x2ac184.prototype.createMyPurchasesTab = function (_0xfa2799, _0x4fd80d, _0x1fc047) {
    //
};
_0x2ac184.prototype.deleteTab = function () {
    //
};
_0x2ac184.prototype.skinsInterface = function () {
    //
};
_0x2ac184.prototype.props = {
    //
};
_0x2ac184.prototype.propBought = {
    //
};
_0x2ac184.prototype.hasBoughtProp = function (_0x326024, _0x2b77f4) {
    //
};
_0x2ac184.prototype.isPropSelected = function (_0x3d448d, _0x59ce2e) {
    //
};
_0x2ac184.prototype.showProp = function (_0x735f1) {
    //
};
_0x2ac184.prototype.propAnimal = null;
_0x2ac184.prototype.updatePropsForAnimal = function () {
    //
};
_0x2ac184.prototype.getPropColorNum = function (_0x36d411) {
    //
};
_0x2ac184.prototype.setPropColor = function (_0x186892, _0x4938c2) {
    //
};
_0x2ac184.prototype.addBackButton = function (_0x1073de) {
    //
};
_0x2ac184.prototype.addCloseButton2 = function (_0x81e23) {
    //
};
_0x2ac184.prototype.coinsInterface = function () {
    //
};
_0x2ac184.prototype.skinsInterface2 = function () {
    //
};
_0x2ac184.prototype.curTabPage = 0;
_0x2ac184.prototype.setVisiblePage = function (_0x238a44, _0x1aed5a) {
    //
};
_0x2ac184.prototype.scrollItems = function (_0x23dc9b, _0x79a776) {
    //
};
_0x2ac184.prototype.onLogon = function () {
    //
};
window.edobj = _0x2ac184;
var edobj = new _0x2ac184();


var mopeShopObj = new mopeShopObject(),
    _0x5a621d = _0x214022,
    _0x2a91c6 = _0x17b2fc;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
var _0xa9cabc = 0x3e9;

function _0x214022(_0x4f1da6, _0x2a228d) {
    _0x214022.superClass.call(this, _0xa9cabc);
}
_0x214022.prototype.data = null;
_0x214022.prototype.loadShopData = function (_0x418a45) {
    _0x214022.superClass.prototype.loadShopData.call(this, _0x418a45);
    this.data = _0x418a45;
    this.getPropType();
};
_0x214022.prototype.itemType = null;
_0x214022.prototype.propType = null;
_0x214022.prototype.propColor = null;
_0x214022.prototype.getPropType = function () {
    if (null != this.data) {
        var _0x342df3 = this.data.id.split('_');
        0x3 == _0x342df3.length && (this.itemType = _0x342df3[0], this.propType = _0x342df3[0x1], this.propColor = _0x342df3[0x2]);
    }
};
window.PropItem = _0x214022;
_0x53e90e.setCustomClassForShopItem(_0x214022, _0xa9cabc);

var Mole = Mole;
var superClass = Animal;
Mole.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
Mole.prototype.constructor = Mole;
Mole.superClass = superClass; //'class' var
//var hasSkinDrawn = false;
//Mole.prototype.bodySpots = [];
//set custom skin name

Mole.prototype.objSkinSpotsCanvas = null;
Mole.prototype.getSkinName = function () {
    return this.animalInfo().skinName;
}

Mole.prototype.animalInfo = function () {
    var infoO = {};
    switch (this.animalSpecies) {
        case 0:
            infoO.aniName = "Mole";
            break;
        case 100:
            infoO.aniName = "Zombie Mole";
            break;
            case 1:
                infoO.aniName = "Drill Mole"
                break

    }
    infoO.aniDesc = "";
    infoO.upgradeText =
        "UPGRADED to " + infoO.aniName + "!\n Hold W to dig underground!\nGo under anything, do surprise attacks!";
    infoO.aniCol = "#4C4A45";
    infoO.skinName = "land/mole/" + this.animalSpecies + "/mole";
    return infoO;
}


Mole.prototype.getAbilityInfo = function (abilT) {
    var ability = {};
    ability.abilName = "Hold to Dig";
    ability.abilImg = "abilities/Dig.svg";
    ability.skinThemeID = this.skinThemeID;
    ability.mopeSeasonID = this.mopeSeasonID;
    return ability;
};


function Mole() {
    Mole.superClass.call(this, 2);

}



window.Mole = Mole;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(Mole, 2, 6);

var superClass = GameObj;
MopeCoin.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
MopeCoin.prototype.constructor = MopeCoin;
MopeCoin.superClass = superClass; //'class' var

MopeCoin.prototype.updateZ = function () {
    this.z = 1010;
};
//override draw (things like other effects are drawn seperately)
MopeCoin.prototype.customDraw = function (batchDrawOutline) {

    var theImg = this.getSkinImageObj("img/coin/coin" + (this.isEdibleOutlined() ? "_e" : "") + ".png");
    if (theImg) {
        var rad = this.rad;
        ctx.drawImage(theImg, -rad, -rad, 2 * rad, 2 * rad);
    }

};
var o_mopeCoin = 132

function MopeCoin() {
    MopeCoin.superClass.call(this, o_mopeCoin);
    MopeCoin.prototype.easeAngleChanges = true;
}

window.MopeCoin = MopeCoin;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(MopeCoin, o_mopeCoin);


function _0x51d96c(_0x259d0d) {
    this.tabs = {
        'titles': []
    };
    this.data = _0x259d0d;
    this.load = function () {
        for (i = 0; i < this.data.length; i++) {
            var _0x259d0d = this.data[i].itemType;
            void 0 === this.tabs[_0x259d0d] && (this.tabs.titles.push(_0x259d0d), this.tabs[_0x259d0d] = []);
            this.tabs[_0x259d0d].push(this.data[i]);
        }
    };
}
_0x5a621d = AbilityObj1v1Arena;
_0x2a91c6 = AbillityObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x5a621d.prototype.arenaState = 0;
_0x5a621d.prototype.fightNumber = 0;
_0x5a621d.prototype.timer = 0;
_0x5a621d.prototype.timerTxt = null;
_0x5a621d.prototype.p1Name = null;
_0x5a621d.prototype.p2Name = null;
_0x5a621d.prototype.p1Bites = 0;
_0x5a621d.prototype.p2Bites = 0;
_0x5a621d.prototype.arenaRad = 0xa;
_0x5a621d.prototype.nArenaRad = 0xa;
_0x5a621d.prototype.oArenaRad = 0xa;
_0x5a621d.prototype.isCountdownTimer = !0;
_0x5a621d.prototype.p1ID = 0;
_0x5a621d.prototype.p2ID = 0;
AbilityObj1v1Arena.prototype.setTimer = function (_0x5c4737) {
    var _0x538642;
    _0x538642 = this.isCountdownTimer ? '' + _0x5c4737 : `FIGHT\n#` + this.fightNumber;
    var _0x31ba10 = 0x19;
    this.isCountdownTimer && (_0x31ba10 = Number(_0x5c4737) ? 0x1e : _0x31ba10);
    null == this.timerTxt ? (this.timerTxt = new _0x120450(_0x31ba10, '#FFFFFF'), this.timerTxt.strokeW = 0x2, this.timerTxt.multiLine = !0, this.timerTxt.renderScale = 0x5) : this.timerTxt.setFontSize(_0x31ba10);
    this.timerTxt.setText(_0x538642);
};
AbilityObj1v1Arena.prototype.playerFontSize = 0xa;
AbilityObj1v1Arena.prototype.setP1 = function (_0x3efb8f) {
    _0x3efb8f = '' + _0x3efb8f;
    null == this.p1Name ? (this.p1Name = new _0x120450(this.playerFontSize, 'cyan'), this.p1Name.strokeW = 0x2, this.p1Name.multiLine = !0, this.p1Name.renderScale = 0x2) : this.p1Name.setFontSize(this.playerFontSize);
    this.p1Name.setText(_0x3efb8f);
};
AbilityObj1v1Arena.prototype.setP2 = function (_0x1b45f4) {
    _0x1b45f4 = '' + _0x1b45f4;
    null == this.p2Name ? (this.p2Name = new _0x120450(this.playerFontSize, 'yellow'), this.p2Name.strokeW = 0x2, this.p2Name.multiLine = !0, this.p2Name.renderScale = 0x2) : this.p2Name.setFontSize(this.playerFontSize);
    this.p2Name.setText(_0x1b45f4);
};
AbilityObj1v1Arena.prototype.updateZ = function () {
    this.z = 0x186a2;
};
AbilityObj1v1Arena.prototype.dotX = 0.33;
AbilityObj1v1Arena.prototype.dotY = 0.77;
var _0x165f79 = 0x23,
    _0x565d89 = 0.72;
AbilityObj1v1Arena.prototype.glowEffect = 0;
AbilityObj1v1Arena.prototype.customDraw = function (_0x31f900) {
    ctx.save();
    ctx.rotate(-0.5 * Math.PI);
    ctx.save();
    ctx.globalAlpha = 0.3;
    ctx.beginPath();
    ctx.arc(0, 0, this.rad + 0x2, 0, 0x2 * Math.PI, !0x1);
    ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI, !0);
    ctx.fillStyle = '#32ff00';
    ctx.closePath();
    ctx.fill();
    ctx.restore();
    ctx.save();
    ctx.globalAlpha = 0.095;
    ctx.beginPath();
    ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI, !0x1);
    ctx.arc(0, 0, this.arenaRad, 0, 0x2 * Math.PI, !0);
    ctx.fillStyle = 'red';
    ctx.closePath();
    ctx.fill();
    ctx.restore();
    ctx.save();
    ctx.globalAlpha = 0.3;
    ctx.beginPath();
    ctx.arc(0, 0, this.arenaRad, 0, 0x2 * Math.PI, !0x1);
    ctx.arc(0, 0, this.arenaRad - 0x4, 0, 0x2 * Math.PI, !0);
    ctx.fillStyle = '#32ff00';
    ctx.fill();
    ctx.closePath();
    ctx.restore();
    ctx.save();
    ctx.globalAlpha = 0.3;
    _0x31f900 = -0x2 * this.timerAngle;
    ctx.beginPath();
    ctx.lineWidth = 0x4;
    ctx.arc(0, 0, this.arenaRad - 0x2, 0, _0x31f900 * Math.PI);
    ctx.strokeStyle = 'red';
    ctx.stroke();
    ctx.restore();
    ctx.restore();
    if (null != this.timerTxt)
        if (0 == this.arenaState) this.timerTxt.x = 0, this.timerTxt.y = 0, this.timerTxt.draw();
        else if (0x1 == this.arenaState) this.timerTxt.x = 0, this.timerTxt.y = 0.9 * -this.rad, this.timerTxt.draw();
    else if (0x2 == this.arenaState || 0x3 == this.arenaState) this.timerTxt.x = 0, this.timerTxt.y = 0, this.timerTxt.draw();
    if (null != this.p1Name) {
        this.p1Name.x = -this.rad / 0x2;
        this.p1Name.y = 0.65 * -this.rad;
        this.p1Name.draw();
        var _0x90bacc = -this.rad * _0x565d89;
        _0x31f900 = 0 - _0x165f79;
        var _0x90bacc = _0x90bacc - 0x1e,
            _0x13c028 = _0x2f22f9('img/fire/0/0.png');
        for (i = 0; i < this.getLives(); i++) _0x31f900 -= 0x21, _0x13c028 && (ctx.save(), ctx.globalAlpha = 0 < this.roundsWon_p1 && i + 0x1 <= this.roundsWon_p1 ? 0.8 : 0.2, ctx.drawImage(_0x13c028, _0x31f900 - 0xf, _0x90bacc - 0xf, 0x1e, 0x1e), ctx.restore());
    }
    if (null != this.p2Name)
        for (this.p2Name.x = this.rad / 0x2, this.p2Name.y = 0.65 * -this.rad, this.p2Name.draw(), _0x90bacc = -this.rad * _0x565d89, _0x31f900 = _0x165f79, _0x90bacc -= 0x1e, _0x13c028 = _0x2f22f9('img/fire/0/0.png'), i = 0; i < this.getLives(); i++) _0x31f900 += 0x21, _0x13c028 && (ctx.save(), ctx.globalAlpha = 0 < this.roundsWon_p2 && i + 0x1 <= this.roundsWon_p2 ? 0.8 : 0.2, ctx.drawImage(_0x13c028, _0x31f900 - 0xf, _0x90bacc - 0xf, 0x1e, 0x1e), ctx.restore());
};
var _0x25f608 = 0x1,
    _0x4104b6 = 0x3,
    _0x6473d7 = 0x5,
    _0x413631 = 0x9;
AbilityObj1v1Arena.prototype.getLives = function () {
    switch (this.fightType) {
    case _0x4104b6:
        return 0x2;
    case _0x6473d7:
        return 0x3;
    case _0x413631:
        return 0x5;
    }
    return 0x1;
};
AbilityObj1v1Arena.prototype.hasAdLoaded = !0x1;
AbilityObj1v1Arena.prototype.readCustomData_onNewlyVisible = function (_0x22dcca) {
    AbilityObj1v1Arena.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x22dcca);
    this.p1ID = _0x22dcca.readUInt32();
    this.p2ID = _0x22dcca.readUInt32();
    this.p1 = _0x22dcca.readString();
    this.p2 = _0x22dcca.readString();
    this.p1Wins = _0x22dcca.readUInt16();
    this.p2Wins = _0x22dcca.readUInt16();
    this.setNames();
    this.fightNumber = _0x22dcca.readUInt16();
    this.arenaState = _0x22dcca.readUInt8();
    _0x22dcca = _0x22dcca.readUInt16() / 0x64;
    this.oArenaRad = this.arenaRad;
    this.nArenaRad = _0x22dcca;
};
AbilityObj1v1Arena.prototype.timerAngle = 0;
AbilityObj1v1Arena.prototype.nTimerAngle = 0;
AbilityObj1v1Arena.prototype.onLerpUpdate = function (_0x462196) {
    AbilityObj1v1Arena.superClass.prototype.onLerpUpdate.call(this, _0x462196);
    this.arenaRad += 0.1 * (this.nArenaRad - this.arenaRad);
    this.timerAngle += 0.1 * (this.nTimerAngle - this.timerAngle);
};
AbilityObj1v1Arena.prototype.timeLeft = 0;
AbilityObj1v1Arena.prototype.fightType = 0;
AbilityObj1v1Arena.prototype.rounds = 0;
AbilityObj1v1Arena.prototype.roundsWon_p1 = 0;
AbilityObj1v1Arena.prototype.roundsWon_p2 = 0;
AbilityObj1v1Arena.prototype.resetArena = !0x1;
AbilityObj1v1Arena.prototype.readCustomData_onUpdate = function (_0x5a1396) {
    AbilityObj1v1Arena.superClass.prototype.readCustomData_onUpdate.call(this, _0x5a1396);
    this.arenaState = _0x5a1396.readUInt8();
    this.fightNumber = _0x5a1396.readUInt16();
    this.fightType = _0x5a1396.readUInt8();
    this.rounds = _0x5a1396.readUInt8();
    var _0x63b6d2 = _0x5a1396.readUInt16() / 0x64;
    this.oArenaRad = this.arenaRad;
    this.nArenaRad = _0x63b6d2;
    this.p1Bites = _0x5a1396.readUInt16();
    this.p2Bites = _0x5a1396.readUInt16();
    this.roundsWon_p1 = _0x5a1396.readUInt8();
    this.roundsWon_p2 = _0x5a1396.readUInt8();

    _0x63b6d2 = 0x1 == _0x5a1396.readUInt8();
    this.resetArena != _0x63b6d2 && (this.endScreenState = 0, this.resetArena = _0x63b6d2);
    this.setNames();
    0 == this.arenaState ? (this.timer = _0x5a1396.readUInt16() / 0x64, this.isCountdownTimer = !0, 0x17 > this.timer && this.updateTimer()) : 0x1 == this.arenaState ? (this.timer = _0x5a1396.readUInt16() / 0x64, this.timeLeft = _0x5a1396.readUInt16(), this.nTimerAngle = this.timeLeft / 0x3e8, this.isCountdownTimer = !0x1, this.updateTimer()) : 0x2 == this.arenaState ? (this.winner = _0x5a1396.readUInt8(), this.winnerMsg = _0x5a1396.readString(), _0x5a1396 = '' + this.p1, 0 == _0x5a1396.length && (_0x5a1396 = 'mrmodpack.ml'), _0x63b6d2 = '' + this.p2, 0 == _0x63b6d2.length && (_0x63b6d2 = 'mrmodpack.ml'), this.winnerName = (1 == this.winner ? this.p1 : this.p2), this.displayEndScreen()) : 0x3 == this.arenaState && (this.winner = _0x5a1396.readUInt8(), this.winnerName = this.winner == 1 ? this.p1 : this.p2,this.winBonus = _0x5a1396.readUInt32(), this.winnerMsg = _0x5a1396.readString(), this.displayEndScreen());
};
AbilityObj1v1Arena.prototype.endScreenState = -0x1;
AbilityObj1v1Arena.prototype.endScreenChangeT = 0;
AbilityObj1v1Arena.prototype.resetEndScreenState = !0;
AbilityObj1v1Arena.prototype.displayEndScreen = function () {
    _0x1534e0 >= this.endScreenChangeT && (this.endScreenState++, this.endScreenChangeT = _0x1534e0 + 0xbb8);
    null != this.timerTxt && (0 == this.endScreenState ? (this.timerTxt.setFontSize(0x28), this.timerTxt.setText(`\nKO!`)) : 0x1 == this.endScreenState ? (this.timerTxt.setFontSize(0x14), this.timerTxt.setText(this.winnerName + `\nWON!`)) : 0x3 == this.endScreenState && 0x3 == this.arenaState && (this.timerTxt.setFontSize(0x14), this.timerTxt.setText(this.winnerMsg + `\nWIN BONUS: ` + _0x3dd6a4(this.winBonus))));
};
AbilityObj1v1Arena.prototype.challenger = null;
AbilityObj1v1Arena.prototype.opponent = null;
AbilityObj1v1Arena.prototype.setNames = function () {
    var _0x52e097 = '' + this.p1;
    0 == _0x52e097.length && (_0x52e097 = 'mrmodpack.ml');
    var _0x4cb290 = '' + this.p2;
    0 == _0x4cb290.length && (_0x4cb290 = 'mrmodpack.ml');
    var _0x391245 = `\n(wins: ` + this.p1Wins + ')',
        _0x45356e = `\n(wins: ` + this.p2Wins + ')',
        _0x3c4529 = `\nbites: ` + this.p1Bites,
        _0x37e4bd = `\nbites: ` + this.p2Bites;
        0x3 > this.arenaState ? (this.challenger = _0x52e097 + _0x391245, this.opponent = _0x4cb290 + _0x45356e, this.setP1(_0x52e097 + _0x391245 + _0x3c4529), this.setP2(_0x4cb290 + _0x45356e + _0x37e4bd)) : 0x3 == this.arenaState && (1 == this.winner ? (this.winnerName = this.p1, this.setP1(_0x52e097 + _0x391245 + _0x3c4529), this.p2Name = null) : 0 == this.winner && (this.winnerName = this.p2, this.setP2(_0x4cb290 + _0x45356e + _0x37e4bd), this.p1Name = null));
    };
AbilityObj1v1Arena.prototype.updateTimer = function () {
    var _0x1f2f86 = this.timer = Math.round(this.timer);
    if (this.isCountdownTimer) switch (this.timer) {
    case 0x17:
        _0x1f2f86 = '';
        break;
    case 0x16:
    case 0x15:
        _0x1f2f86 = 'WELCOME TO 1V1 ARENA';
        break;
    case 0x14:
    case 0x13:
        _0x1f2f86 = 'FIGHT #' + this.fightNumber;
        break;
    case 0x12:
    case 0x11:
        _0x1f2f86 = 'CHALLENGER';
        break;
    case 0x10:
    case 0xf:
        _0x1f2f86 = this.challenger;
        break;
    case 0xe:
    case 0xd:
        _0x1f2f86 = 'OPPONENT';
        break;
    case 0xc:
    case 0xb:
        _0x1f2f86 = this.opponent;
        break;
    case 0x2:
        _0x1f2f86 = 'ROUND ' + this.rounds;
        break;
    case 0x1:
        _0x1f2f86 = 'GET SET';
        break;
    case 0:
        _0x1f2f86 = 'FIGHT';
    }
    this.setTimer(_0x1f2f86);
};

function AbilityObj1v1Arena() {
    AbilityObj1v1Arena.superClass.call(this);
    this.hasAdLoaded = !0x1;
}
window.AbilityObj1v1Arena = AbilityObj1v1Arena;
GameObjType.setCustomClassForGameObjType(AbilityObj1v1Arena, o_abilityObj, _0x26120a);

var superClass = Animal;
SnowLeopard.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
SnowLeopard.prototype.constructor = SnowLeopard;
SnowLeopard.superClass = superClass; //'class' var

SnowLeopard.prototype.animalInfo = function () {
  var infoO = {};

  switch (this.animalSpecies) {
    case 0:
      infoO.aniName = "Snow Leopard!";
      break;
    case 100:
      infoO.aniName = "Frostaline";
      break;
    case 201:
      infoO.aniName = "Coral Queen";
      break;
    case 204:
      infoO.aniName = "Martian Leopard";
      break;

  }

  infoO.skinName = this.getSkinName();
  infoO.aniDesc = "";
  infoO.upgradeText =
    "UPGRADED to " +
    infoO.aniName +
    "!\n Press W to get a speed boost! (Every 8 seconds)!";
  infoO.aniCol = "#cfcfcf";
  return infoO;
};


SnowLeopard.prototype.getSpeciesPath = function (animal) {
  return "arctic/" + animal + "/" + this.animalSpecies;
};
SnowLeopard.prototype.getSkinName = function () {
  var skin = this.getSpeciesPath("snowleopard") + "/snowleopard";
  return skin;
};



SnowLeopard.prototype.getAbilityInfo = function (abilT) {
  var ability = {};
  ability.abilName = "Extra Boost";
  ability.abilImg = "abilities/Dash-Boost.svg";
  ability.skinThemeID = this.skinThemeID;
  ability.mopeSeasonID = this.mopeSeasonID;
  return ability;
};

function SnowLeopard() {
  SnowLeopard.superClass.call(this, 2);
}
window.SnowLeopard = SnowLeopard;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(SnowLeopard, 2, a_snowLeopard);

var superClass = Animal;
PufferFish.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
PufferFish.prototype.constructor = PufferFish;
PufferFish.superClass = superClass; //'class' var

PufferFish.prototype.animalInfo = function () {
  var infoO = {};

  infoO.aniName = "Puffer Fish";


  switch (this.animalSpecies) {
    case 2:
      infoO.aniName = "Demon Fish";
      break;
    case 100:
      infoO.aniName = "Puffermace";
      break;
    case 201:
      infoO.aniName = "Omniball Puffer";
      break;
  }


  infoO.skinName = "ocean/pufferfish/" + this.animalSpecies + "/pufferfish";

  infoO.aniDesc = "";
  infoO.upgradeText =
    "UPGRADED to " +
    infoO.aniName + "!\n(Hold W to inflate - become spiky, and dangerous to touch!)";
  infoO.aniCol = "#94a3a9";

  return infoO;
};

PufferFish.prototype.getAbilityInfo = function (abilT) {
  var ability = {};
  ability.abilName = "Puff!";
  ability.abilImg = "abilities/Puff.svg";
  ability.skinThemeID = this.skinThemeID;
  ability.mopeSeasonID = this.mopeSeasonID;
  return ability;
};
//set custom skin name
PufferFish.prototype.getSkinName = function () {
  var skin = "ocean/pufferfish/" + this.animalSpecies + "/pufferfish";

  if (this.flag_usingAbility)
    skin += "2";
  return skin;
};


PufferFish.prototype.drawUnderSkinImg = function () {
  var stingray_tail_yOffset = 1.6;
  var iScale = 500 / 340.0;
  var tailSpec = "";
  if (this.animalSpecies == 100) {
    tailSpec = "/100";
    var theImg = this.getSkinImageObj("skins/ocean/pufferfish/100/tail.png");
    if (theImg) {
      ctx.save();
      var rad = this.rad - this.outlineW;
      ctx.drawImage(
        theImg,
        -rad * iScale,
        -rad * stingray_tail_yOffset * iScale,
        2 * rad * iScale,
        2 * rad * iScale
      );

      ctx.restore();
    }
  }

}

function PufferFish() {
  PufferFish.superClass.call(this, 2);
}
window.PufferFish = PufferFish;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(PufferFish, 2, a_pufferFish);

//sbox


var thisClass = Sandbox;
var superClass = GameObj;
Sandbox.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
Sandbox.prototype.constructor = Sandbox;
Sandbox.superClass = superClass; //'class' var
Sandbox.prototype.r = 0;
  Sandbox.prototype.updateZ = function () {
  this.z = 100002; // above everything
};
Sandbox.prototype.customDraw = function (batchDrawOutline) {
  //this.arenaRadUpdate();
  ctx.save();
  ctx.globalAlpha = 0.3;
  ctx.beginPath();
  ctx.arc(0, 0, this.rad + 2, 0, 2 * Math.PI, false);
  ctx.arc(0, 0, this.rad, 0, 2 * Math.PI, true);
  ctx.fillStyle = "#32ff00";
  ctx.closePath();
  ctx.fill();
  ctx.restore();

  ctx.save();
  ctx.globalAlpha = 0.095;

  ctx.beginPath();
  ctx.arc(0, 0, this.rad, 0, 2 * Math.PI, false);
  ctx.arc(0, 0, this.rad, 0, 2 * Math.PI, true);
  ctx.fillStyle = "red";
  ctx.closePath();
  ctx.fill();
  // ctx.globalAlpha = 0.15;
  // ctx.strokeStyle = "red";
  // ctx.stroke();
  ctx.restore();
  ctx.save();
  var angleDelta = 1.0;
  var dChange = angleDelta * 0.1; //* a;
  this.r += dChange;

  ctx.rotate(toRadians(-this.r));
  this.setTitle();
  ctx.restore();

};


Sandbox.prototype.setTitle  = function () {
  var txt = txt = "SANDBOX\nARENA";


  var fontSize = this.rad * 0.07;
  if (null == this.timerTxt) {
    this.timerTxt = new _0x120450(fontSize, "#FFFFFF"); //"#043400");
    this.timerTxt.strokeW = 2;
    this.timerTxt.multiLine = true;
    this.timerTxt.renderScale = 5.0; //render larger to undo 'zoom of 3x'
    this.timerTxt.setText(txt);
  } else {
    this.timerTxt.setFontSize(fontSize);
    this.timerTxt.setText(txt);
  }

  this.timerTxt.x = 0;
      this.timerTxt.y = -this.rad * 0.9;
      this.timerTxt.draw();

};
var o_sandbox = 126;
function Sandbox() {
  Sandbox.superClass.call(this, o_sandbox);
}

window.Sandbox = Sandbox; //make class global!
GameObjType.setCustomClassForGameObjType(Sandbox, o_sandbox);


_0x2a91c6 = Animal;
_0x4a8dcb.prototype = Object.create(_0x2a91c6.prototype);
_0x4a8dcb.prototype.constructor = _0x4a8dcb;
_0x4a8dcb.superClass = _0x2a91c6;
_0x4a8dcb.prototype.getSkinName = function () {
    return 'ocean/seamonster/' + this.animalSpecies + '/seamonster';
};
_0x4a8dcb.prototype.calcAnimalZIndex = function () {
    this.z = this.flag_underWater ? -0x64 : this.flag_isInArena ? this.z + 0x3e8 : this.flag_eff_tossedInAir ? 0x4b0 + this.rad : 0x3e8 + this.rad;
};
_0x4a8dcb.prototype.animalInfo = function () {
    var _0x53f42b = {};
    switch (this.animalSpecies) {
    case 0:
        _0x53f42b.aniName = 'Sea Monster';
        break;
    case 0x1:
        _0x53f42b.aniName = 'Golden Sea Monster';
        break;
    case 0x2:
        _0x53f42b.aniName = 'Sapphire Monster';
        break;
    case 100:
        _0x53f42b.aniName = 'Submonstrine';
        break;
    }
    _0x53f42b.aniCol = 'blue';
    _0x53f42b.upgradeText = 'UPGRADED to ' + _0x53f42b.aniName + `!\nCreate whirlpool to trap prey!`;
    _0x53f42b.skinName = 'ocean/seamonster/' + this.animalSpecies + '/seamonster';
    return _0x53f42b;
};
_0x4a8dcb.prototype.getAbilityInfo = function (_0x4c14b7) {
    _0x4c14b7 = {
        'abilName': 'Giant Whirlpool'
    };
    _0x4c14b7.abilImg = 'skins/ocean/seamonster/' + this.animalSpecies + '/seamonster.png';
    return _0x4c14b7;
};
_0x4a8dcb.prototype.drawWhenUnderwater = function () {
    var _0x458646 = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
    ctx.globalAlpha = 0.2;
    ctx.fillStyle = 'white';
    var _0x2cbf4f = this.flag_underWater ? 0.15 * this.rad : 0.1 * this.rad;
    ctx.beginPath();
    ctx.arc(-0.35 * this.rad, -0.33 * this.rad, Math.max(0, _0x2cbf4f + _0x458646), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(0.35 * this.rad, -0.32 * this.rad, Math.max(0, _0x2cbf4f - _0x458646), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(0.35 * this.rad, 0.36 * this.rad, Math.max(0, _0x2cbf4f + _0x458646), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(-0.35 * this.rad, 0.35 * this.rad, Math.max(0, _0x2cbf4f - _0x458646), 0, 0x2 * Math.PI);
    ctx.fill();
    if (_0x458646 = _0x2f22f9('skins/' + this.getSkinName() + '-crown.png')) {
        _0x2cbf4f = 0x1f4 / 0x154;
        ctx.save();
        ctx.globalAlpha = 0.4;
        var _0x579729 = this.rad;
        ctx.drawImage(_0x458646, -_0x579729 * _0x2cbf4f, (-_0x579729 + 0.4 * _0x579729) * _0x2cbf4f, 0x2 * _0x579729 * _0x2cbf4f, 0x2 * _0x579729 * _0x2cbf4f);
        ctx.restore();
    }
};

function _0x4a8dcb() {
    _0x4a8dcb.superClass.call(this, o_player);
}
window.SeaMonster = _0x4a8dcb;
GameObjType.setCustomClassForGameObjType(_0x4a8dcb, o_player, _0x11d8d8);
_0x2a91c6 = Animal;
_0x5a17c2.prototype = Object.create(_0x2a91c6.prototype);
_0x5a17c2.prototype.constructor = _0x5a17c2;
_0x5a17c2.superClass = _0x2a91c6;
_0x5a17c2.prototype.calcAnimalZIndex = function () {
    this.z = this.flag_underWater ? -0x64 : this.flag_isInArena ? this.z + 0x3e8 : 0x4b0 + this.rad;
};
_0x5a17c2.prototype.animalInfo = function () {
    var _0x4952cc = {};
    switch (this.animalSpecies) {
    case 0:
        _0x4952cc.aniName = 'Land Monster';
        break;
    case 0x1:
        _0x4952cc.aniName = 'Golden Land Monster';
        break;
    case 0x2:
        _0x4952cc.aniName = 'Titanite Monster';
    }
    _0x4952cc.aniCol = 'orange';
    _0x4952cc.upgradeText = 'UPGRADED to ' + _0x4952cc.aniName + `!\nCreate Sink holes to trap prey!`;
    _0x4952cc.skinName = 'volcano/landmonster/' + this.animalSpecies + '/landmonster';
    return _0x4952cc;
};
_0x5a17c2.prototype.getSkinName = function () {
    return 'volcano/landmonster/' + this.animalSpecies + '/landmonster';
};
_0x5a17c2.prototype.getAbilityInfo = function (_0x37c698) {
    _0x37c698 = {
        'abilName': `Giant\nSinkhole!`
    };
    _0x37c698.abilImg = 'skins/volcano/landmonster/' + this.animalSpecies + '/landmonster.png';
    return _0x37c698;
};
_0x5a17c2.prototype.drawWhenUnderwater = function () {
    var _0x2f291e = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
    ctx.globalAlpha = 0.3;
    ctx.fillStyle = '#f9d43b';
    var _0x96e903 = this.flag_underWater ? 0.15 * this.rad : 0.1 * this.rad;
    ctx.beginPath();
    ctx.arc(-0.35 * this.rad, -0.33 * this.rad, Math.max(0, _0x96e903 + _0x2f291e), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(0.35 * this.rad, -0.32 * this.rad, Math.max(0, _0x96e903 - _0x2f291e), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(0.35 * this.rad, 0.36 * this.rad, Math.max(0, _0x96e903 + _0x2f291e), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(-0.35 * this.rad, 0.35 * this.rad, Math.max(0, _0x96e903 - _0x2f291e), 0, 0x2 * Math.PI);
    ctx.fill();
};

function _0x5a17c2() {
    _0x5a17c2.superClass.call(this, o_player);
}
window.LandMonster = _0x5a17c2;
GameObjType.setCustomClassForGameObjType(_0x5a17c2, o_player, _0x3c0348);
_0x2a91c6 = Animal;
IceMonsterAnimal.prototype = Object.create(_0x2a91c6.prototype);
IceMonsterAnimal.prototype.constructor = IceMonsterAnimal;
IceMonsterAnimal.superClass = _0x2a91c6;
IceMonsterAnimal.prototype.calcAnimalZIndex = function () {
    this.z = this.flag_underWater ? -0x64 : this.flag_isInArena ? this.z + 0x3e8 : this.flag_eff_tossedInAir ? 0x4b0 + this.rad : 0x3e8 + this.rad;
};
IceMonsterAnimal.prototype.animalInfo = function () {
    var _0x489dd6 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x489dd6.aniName = 'Ice Monster';
        break;
    case 0x1:
        _0x489dd6.aniName = 'Golden Ice Monster';
        break;
    case 0x2:
        _0x489dd6.aniName = 'Amethyst Monster';
    }
    _0x489dd6.aniCol = '#ffffff';
    _0x489dd6.upgradeText = 'UPGRADED to ' + _0x489dd6.aniName + `!\nShoot Ice crystals to freeze prey!`;
    _0x489dd6.skinName = 'arctic/icemonster/' + this.animalSpecies + '/icemonster';
    return _0x489dd6;
};
IceMonsterAnimal.prototype.getSkinName = function () {
    return 'arctic/icemonster/' + this.animalSpecies + '/' + (0 == this.id ? 'ability' : 'icemonster');
};
IceMonsterAnimal.prototype.readCustomData_onNewlyVisible = function (_0x22b591) {
    IceMonsterAnimal.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x22b591);
    this.readCrystalsInfo(_0x22b591);
};
IceMonsterAnimal.prototype.getAbilityInfo = function (_0xd538e7) {
    _0xd538e7 = {
        'abilName': 'Freeze Prey!'
    };
    _0xd538e7.abilImg = 'skins/arctic/icemonster/' + this.animalSpecies + '/ability.png';
    return _0xd538e7;
};
IceMonsterAnimal.prototype.readCustomData_onUpdate = function (msg) {
    IceMonsterAnimal.superClass.prototype.readCustomData_onUpdate.call(this, msg);
    var count = msg.readUInt8();
    for (i = 0; i < count; i++) {
        var x = msg.readInt16() / 0x64,
            y = msg.readInt16() / 0x64,
            rad = msg.readUInt16() / 0x64,
            angle = msg.readUInt16() / 0x64;
        this.crystals[i].nRad = rad;
        0 == rad && (this.crystals[i].rad = 0);
        this.crystals[i].angle = angle;
        this.crystals[i].x = x;
        this.crystals[i].y = y;
    }
};
IceMonsterAnimal.prototype.crystals = [];
IceMonsterAnimal.prototype.readCrystalsInfo = function (_0x4fb088) {
    var _0x10a596 = _0x4fb088.readUInt8();
    this.crystals = [];
    for (i = 0; i < _0x10a596; i++) {
        var _0x509619 = _0x4fb088.readInt16() / 0x64,
            _0x32fe46 = _0x4fb088.readInt16() / 0x64,
            _0x23be0e = _0x4fb088.readUInt16() / 0x64,
            _0x45a758 = _0x4fb088.readUInt16() / 0x64;
        this.crystals.push({
            'x': _0x509619,
            'y': _0x32fe46,
            'nRad': _0x23be0e,
            'oRad': _0x23be0e,
            'rad': _0x23be0e,
            'angle': _0x45a758
        });
    }
};
IceMonsterAnimal.prototype.drawSkinCustomization = function () {
    var _0x28db3d = this.rad - this.outlineW;
    for (i = 0; i < this.crystals.length; i++) {
        var _0x570a54 = this.crystals[i];
        if (0 != _0x570a54.nRad) {
            _0x570a54.rad += 0.01 * (_0x570a54.nRad - _0x570a54.rad);
            var _0x40c1fc = _0x570a54.x * _0x28db3d,
                _0x5263bd = _0x570a54.y * _0x28db3d,
                _0x5eb9a1 = _0x570a54.angle,
                _0x570a54 = _0x570a54.rad;
            ctx.save();
            ctx.translate(_0x40c1fc, _0x5263bd);
            ctx.globalAlpha = 0x1;
            ctx.rotate(_0x55d748(_0x5eb9a1));
            (_0x40c1fc = _0x2f22f9('skins/arctic/icemonster/' + this.animalSpecies + '/crystal.png')) && ctx.drawImage(_0x40c1fc, -_0x570a54, 0x2 * -_0x570a54, 0x2 * _0x570a54, 0x2 * _0x570a54);
            ctx.restore();
        }
    }
};

function IceMonsterAnimal() {
    IceMonsterAnimal.superClass.call(this, o_player);
}
window.IceMonster = IceMonsterAnimal;
GameObjType.setCustomClassForGameObjType(IceMonsterAnimal, o_player, _0x29871d);
_0x2a91c6 = Animal;
_0x511273.prototype = Object.create(_0x2a91c6.prototype);
_0x511273.prototype.constructor = _0x511273;
_0x511273.superClass = _0x2a91c6;
_0x511273.prototype.calcAnimalZIndex = function () {
    this.z = this.flag_underWater ? -0x64 : this.flag_isInArena ? this.z + 0x3e8 : this.flag_eff_tossedInAir ? 0x4b0 + this.rad : 0x3e8 + this.rad;
};
_0x511273.prototype.animalInfo = function () {
    var _0x9dd6b1 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x9dd6b1.aniName = 'Dino Monster';
        break;
    case 0x1:
        _0x9dd6b1.aniName = 'Golden Dino Monster';
        break;
    case 0x2:
        _0x9dd6b1.aniName = 'Citrine Monster';
    }
    _0x9dd6b1.aniCol = 'orange';
    _0x9dd6b1.upgradeText = 'UPGRADED to ' + _0x9dd6b1.aniName + `!\nKnock prey in Air to inflict deadly damage!`;
    _0x9dd6b1.skinName = 'land/dinomonster/' + this.animalSpecies + '/dinomonster';
    return _0x9dd6b1;
};
_0x511273.prototype.getSkinName = function () {
    return 'land/dinomonster/' + this.animalSpecies + '/dinomonster1';
};
_0x511273.prototype.getAbilityInfo = function (_0x2510fd) {
    _0x2510fd = {
        'abilName': 'Knock in Air'
    };
    _0x2510fd.abilImg = 'skins/land/dinomonster/' + this.animalSpecies + '/dinomonster.png';
    return _0x2510fd;
};
_0x511273.prototype.drawSkinCustomization = function () {
    var _0x4eea43 = 'skins/land/dinomonster/' + this.animalSpecies + '/dinomonster',
        _0x4eea43 = this.flag_usingAbility ? _0x4eea43 + '3' : _0x4eea43 + '2';
    if (_0x4eea43 = _0x2f22f9(_0x4eea43 + '.png')) {
        ctx.save();
        var _0x3e4378 = 1.1 * (this.rad - this.outlineW);
        ctx.drawImage(_0x4eea43, -_0x3e4378 * this.skinScale * 0.91, -_0x3e4378 * this.skinScale * 1.1, 0x2 * _0x3e4378 * this.skinScale * 0.91, 0x2 * _0x3e4378 * this.skinScale * 1.1);
        ctx.restore();
    }
};

function _0x511273() {
    _0x511273.superClass.call(this, o_player);
}
window.DinoMonster = _0x511273;
GameObjType.setCustomClassForGameObjType(_0x511273, o_player, _0x17505c);
_0x2a91c6 = GameObj;
_0x7df2b6.prototype = Object.create(_0x2a91c6.prototype);
_0x7df2b6.prototype.constructor = _0x7df2b6;
_0x7df2b6.superClass = _0x2a91c6;
_0x7df2b6.prototype.updateZ = function () {
    this.z = 0x3ed;
};
_0x7df2b6.prototype.customDraw = function (_0x467db2) {
    if (_0x467db2 = _0x2f22f9('skins/arctic/icemonster/' + this.speciesType + '/crystalfire.png')) {
        ctx.save();
        var _0x297724 = 1.5 * this.rad;
        ctx.rotate(this.angle + _0x55d748(0xb4));
        ctx.drawImage(_0x467db2, -_0x297724, -_0x297724, 0x2 * _0x297724, 2.5 * _0x297724);
        ctx.restore();
    }
};
_0x7df2b6.prototype.readCustomData_onNewlyVisible = function (_0x5708af) {
    _0x7df2b6.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5708af);
    this.speciesType = _0x5708af.readUInt8();
};

function _0x7df2b6() {
    _0x7df2b6.superClass.call(this, o_iceCrystal);
}
window.IceCrystal = _0x7df2b6;
GameObjType.setCustomClassForGameObjType(_0x7df2b6, o_iceCrystal);
_0x2a91c6 = GameObj;
_0x210430.prototype = Object.create(_0x2a91c6.prototype);
_0x210430.prototype.constructor = _0x210430;
_0x210430.superClass = _0x2a91c6;
_0x210430.prototype.updateZ = function () {
    this.z = -0x65;
};
_0x210430.prototype.customDraw = function (_0x221b05) {
    ctx.save();
    0 == this.specType ? (this.drawOutlinedCircle('', '#9F8641'), ctx.globalAlpha = 0.6, _0x110b78(0 + this.rPer, 0x1, Math.max(0, 0.9 * this.rad), '#5C4E28'), ctx.globalAlpha = 0.7, _0x110b78(0 - this.rPer, 0x1, Math.max(0, 0.8 * this.rad), '#40371D'), ctx.globalAlpha = 0.9, _0x110b78(0 - this.rPer, 0x1, Math.max(0, 0.8 * this.rad), '#40371D'), ctx.globalAlpha = 0.5, _0x110b78(0 - 0x3 * this.rPer, 0x1, Math.max(0, 0.5 * this.rad), 'black'), ctx.globalAlpha = 0x1, _0x110b78(0 - 0x3 * this.rPer, 0x1, Math.max(0, 0.3 * this.rad), _0x1a1848)) : (this.drawOutlinedCircle('', '#9F8641'), _0x110b78(0 - this.rPer, 0 - this.rPer, Math.max(0, this.rad - 0x7), '#7E6A35'), _0x110b78(0 + this.rPer, 0x1, Math.max(0, this.rad - 0xe), '#5C4E28'), _0x110b78(0 - 0x2 * this.rPer - 0x3, 0x1, Math.max(0, this.rad - 18.5), '#40371D'));
    ctx.restore();
};

function _0x210430() {
    _0x210430.superClass.call(this, o_spiderWeb);
    this.webTransparency = 0;
    this.drawEffectScale_Slow = this.doesDrawEffectScale = !0;
}
window.SinkHole = _0x210430;
GameObjType.setCustomClassForGameObjType(_0x210430, o_sinkHole);
_0x2a91c6 = GameObj;
_0x479a70.prototype = Object.create(_0x2a91c6.prototype);
_0x479a70.prototype.constructor = _0x479a70;
_0x479a70.superClass = _0x2a91c6;
_0x479a70.prototype.mommyID = 0;
_0x479a70.prototype.updateZ = function () {
    this.z = -0x99;
};
_0x479a70.prototype.isEdibleOutlined = function () {
    return this.mommyID == myPlayerID ? !0x1 : _0x2219dd.superClass.prototype.isEdibleOutlined.call(this);
};
_0x479a70.prototype.customDraw = function (_0x36a6ff) {
    ctx.save();
    if (_0x36a6ff = _0x2f22f9('skins/land/ostrich/' + this.speciesType + '/ostrichEgg' + (this.isEdibleOutlined() ? 'edible' : '') + '.png')) {
        var _0x43eb2d = this.rad;
        ctx.rotate(this.angle);
        ctx.drawImage(_0x36a6ff, -_0x43eb2d, -_0x43eb2d, 0x2 * _0x43eb2d, 0x2 * _0x43eb2d);
    }
    ctx.restore();
};
_0x479a70.prototype.readCustomData_onNewlyVisible = function (_0x2b66ae) {
    _0x479a70.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x2b66ae);
    this.mommyID = _0x2b66ae.readUInt32();
    this.speciesType = _0x2b66ae.readUInt8();
};

function _0x479a70() {
    _0x479a70.superClass.call(this, o_ostrichEgg);
    this.doesDrawEffectScale = !0;
}
window.OstrichEgg = _0x479a70;
GameObjType.setCustomClassForGameObjType(_0x479a70, o_ostrichEgg);
_0x2a91c6 = Animal;
MacawAnimal.prototype = Object.create(_0x2a91c6.prototype);
MacawAnimal.prototype.constructor = MacawAnimal;
MacawAnimal.superClass = _0x2a91c6;
MacawAnimal.prototype.drawNickName = function (_0xeeebb9) {
    (this.flag_usingAbility && this.flag_flying || !this.flag_usingAbility) && MacawAnimal.superClass.prototype.drawNickName.call(this, _0xeeebb9);
};
MacawAnimal.prototype.animalInfo = function () {
    var _0xdec600 = {};
    switch (this.animalSpecies) {
    case 0:
        _0xdec600.aniName = 'Macaw';
        break;
    case 0x1:
        _0xdec600.aniName = 'Blue Macaw';
        break;
    case 0x2:
        _0xdec600.aniName = 'Pakistan Macaw';
    }
    _0xdec600.aniCol = '#FF9000';
    _0xdec600.skinName = this.getSpeciesPath('macaw') + '/macaw';
    _0xdec600.upgradeText = 'UPGRADED to ' + (0x2 == this.animalSpecies ? 'Rare ' : '') + _0xdec600.aniName + `!\nHold W to fly around.\n(Hint: Use ability on hills to mimic animals) `;
    return _0xdec600;
};
MacawAnimal.prototype.getSkinName = function () {
    var _0x984ddd = this.getSpeciesPath('macaw') + '/macaw';
    return _0x984ddd += 0 == this.specType ? '' : this.specType;
};
MacawAnimal.prototype.basicDrawSkinImg = function () {
    this.flag_usingAbility && !this.flag_flying && 0 < this.octoDisguiseObjT || MacawAnimal.superClass.prototype.basicDrawSkinImg.call(this);
};
MacawAnimal.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility && this.flag_flying) {
        var _0x219ea1 = 0x1f4 / 0x154;
        if (this.flag_flying && !this.flag_isGrabbed) {
            ctx.save();
            var _0x321368 = (_0x1534e0 - this.spawnTime) / 0x3e8,
                _0x321368 = 0x2 != _0x14fca5 ? _0x93972d(_0x321368, 0.5, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle,
                _0x217496 = _0x2f22f9(this.getWing('macaw', 0x1, !0));
            if (_0x217496) {
                ctx.save();
                var _0x49db04 = -(-0.2 + _0x321368) * _0x55d748(0x5a),
                    _0x2e2671 = 0.8 * this.rad;
                ctx.rotate(_0x55d748(0x2d) + _0x49db04);
                var _0x49db04 = this.rad,
                    _0x213ddd = 1.24 * _0x2e2671,
                    _0x2e2671 = 2.5 * _0x2e2671;
                ctx.drawImage(_0x217496, 0 + -0.2 * _0x213ddd, _0x49db04 + -1.7 * _0x2e2671, _0x213ddd, _0x2e2671);
                ctx.restore();
            }
            if (_0x217496 = _0x2f22f9(this.getWing('macaw', 0x2, !0))) ctx.save(), _0x49db04 = -(-0.2 + _0x321368) * _0x55d748(-0x5a), _0x2e2671 = 0.8 * this.rad, ctx.rotate(_0x55d748(-0x2d) + _0x49db04), _0x49db04 = this.rad, _0x213ddd = 1.24 * _0x2e2671, _0x2e2671 *= 2.5, ctx.drawImage(_0x217496, 0 + -0.8 * _0x213ddd, _0x49db04 + -1.7 * _0x2e2671, _0x213ddd, _0x2e2671), ctx.restore();
            ctx.restore();
        }
        0 != this.specType && void 0 != this.specType && (_0x321368 = _0x2f22f9(this.getHead('macaw', !0))) && (ctx.save(), _0x2e2671 = this.rad, ctx.drawImage(_0x321368, -_0x2e2671 * _0x219ea1, (-_0x2e2671 + 0.1 * _0x2e2671) * _0x219ea1, 0x2 * _0x2e2671 * _0x219ea1, 0x2 * _0x2e2671 * _0x219ea1), ctx.restore());
    }
};
MacawAnimal.prototype.readCustomData_onUpdate = function (_0x568e5d) {
    MacawAnimal.superClass.prototype.readCustomData_onUpdate.call(this, _0x568e5d);
    if (this.flag_usingAbility)
        if (this.flag_flying) this.flag_usingAbility || null == this.octoDrawObj || (this.octoDrawObj = null, this.octoDisguiseObjT = 0);
        else {
            var _0x10a5cc = _0x568e5d.readUInt16();
            _0x568e5d = _0x568e5d.readUInt8();
            if (0 < _0x10a5cc && this.octoDisguiseObjT != _0x10a5cc) {
                var _0x3a5a96 = GameObjType.createGameObjOfOType(o_player, _0x10a5cc);
                _0x3a5a96.animalType = _0x10a5cc;
                _0x3a5a96.animalSpecies = _0x568e5d;
                _0x3a5a96.rad = _0x3a5a96.oRad = _0x3a5a96.nRad = this.rad;
                _0x3a5a96.curBiome = this.curBiome;
                _0x3a5a96.hp = 0x5 + 0x32 * Math.random();
                this.octoDrawObj = _0x3a5a96;
                this.octoDisguiseObjT = _0x10a5cc;
            }
        }
};
MacawAnimal.prototype.octoDisguiseObjT = 0;
MacawAnimal.prototype.drawHealthBar = function () {
    this.flag_usingAbility && !this.flag_flying && null != this.octoDrawObj && (this.octoDrawObj.curBiome = this.curBiome, this.hpPer_n = 0x1, this.hpPer = this.octoDrawObj.hp, this.hpBarA = 0x1);
    ctx.save();
    this.hpBarA += 0.04 * ((_0x1534e0 < this.hpBarTimeoutT ? 0x1 : 0) - this.hpBarA);
    if (0.001 < this.hpBarA) {
        this.hpPer += 0.1 * (this.hpPer_n - this.hpPer);
        var _0xe498ce = Math.max(0x1, this.rad / 0x19),
            _0x5e11b3 = 0x14 * _0xe498ce,
            _0x269e11 = 0x5 * _0xe498ce,
            _0xe498ce = -this.rad - 0xa * _0xe498ce;
        ctx.globalAlpha *= this.hpBarA;
        ctx.fillStyle = 'rgba(0,0,0,0.35)';
        ctx.fillRect(0 - _0x5e11b3 / 0x2, _0xe498ce - _0x269e11 / 0x2, _0x5e11b3, _0x269e11);
        ctx.fillStyle = '#16D729';
        var _0x32ce88 = this.hpPer / 0x64 * _0x5e11b3;
        this.flag_usingAbility && this.octoIsAnimal && (_0x32ce88 = 0.25 * _0x5e11b3);
        ctx.fillRect(0 - _0x5e11b3 / 0x2, _0xe498ce - _0x269e11 / 0x2, _0x32ce88, _0x269e11);
    }
    ctx.restore();
};
MacawAnimal.prototype.drawOnTopOfSkinImg = function () {
    MacawAnimal.superClass.prototype.drawOnTopOfSkinImg.call(this);
    this.flag_usingAbility && !this.flag_flying && null != this.octoDrawObj && (ctx.save(), ctx.globalAlpha = 0x1, this.octoDrawObj.rad = this.rad, this.octoDrawObj.draw(), ctx.restore());
};

function MacawAnimal() {
    MacawAnimal.superClass.call(this, o_player);
}
window.Macaw = MacawAnimal;
GameObjType.setCustomClassForGameObjType(MacawAnimal, o_player, _0x56c4f6);
_0x2a91c6 = Animal;
FlamingoAnimal.prototype = Object.create(_0x2a91c6.prototype);
FlamingoAnimal.prototype.constructor = FlamingoAnimal;
FlamingoAnimal.superClass = _0x2a91c6;
FlamingoAnimal.prototype.getSkinName = function () {
    return 'flamingo/flamingo' + (0 == this.specType ? '' : this.specType);
};
FlamingoAnimal.prototype.animalInfo = function () {
    var _0xef29c3 = {
        'aniName': 'Flamingo',
        'aniCol': '#FF9000',
        'skinName': 'flamingo/flamingo'
    };
    _0xef29c3.upgradeText = 'UPGRADED to ' + _0xef29c3.aniName + `!\nHold W in water to search for food underwater.\n(Tip: Any nearby underwater animals will get surfaced by the flamingo!)`;
    return _0xef29c3;
};
FlamingoAnimal.prototype.getWing = function (_0x2b452e, _0x5b62d3, _0x3f5c2e) {
    return 'skins/' + _0x2b452e + (_0x3f5c2e ? '/pink' : '') + '/' + (_0x2b452e + '_wing' + _0x5b62d3 + '.png');
};
FlamingoAnimal.prototype.getHead = function (_0x55b744, _0x192eac) {
    return 'skins/' + _0x55b744 + (_0x192eac ? '/pink' : '') + '/' + (_0x55b744 + '_head.png');
};
FlamingoAnimal.prototype.basicDrawSkinImg = function () {
    FlamingoAnimal.superClass.prototype.basicDrawSkinImg.call(this);
    if (!this.flag_underWater && 0 < this.id) {
        var _0x3812d7 = this.skinScale,
            _0x59919e = this.skinRad,
            _0x3a5dae = _0x2f22f9('skins/flamingo/pink/flamingo' + (0 == this.specType ? '' : this.specType) + '.png');
        _0x3a5dae && (ctx.save(), ctx.globalAlpha = this.colorPerc, ctx.drawImage(_0x3a5dae, -_0x59919e * _0x3812d7, -_0x59919e * _0x3812d7, 0x2 * _0x59919e * _0x3812d7, 0x2 * _0x59919e * _0x3812d7), ctx.restore());
    }
};
FlamingoAnimal.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        var _0x1f6d4b = 0x1f4 / 0x154;
        ctx.save();
        var _0x30d1cb = this.flag_flying ? 0x2d : 0x2f,
            _0xd216f5 = this.flag_flying ? 0x5a : 0x2d,
            _0x3c0f5f = this.flag_flying ? 0.2 : 0.01,
            _0x5503ca = this.flag_flying ? 2.5 : 0x2,
            _0x59a1dd = this.flag_flying ? 0x2 : 2.5,
            _0x178729 = this.flag_flying ? 0.5 : 1.2,
            _0x5e21e9 = (_0x1534e0 - this.spawnTime) / 0x3e8,
            _0x178729 = 0x2 != _0x14fca5 ? _0x93972d(_0x5e21e9, _0x178729, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle,
            _0x5e21e9 = _0x2f22f9(this.getWing('flamingo', 0x1, !0x1)),
            _0x41175d = _0x2f22f9(this.getWing('flamingo', 0x1, !0));
        if (_0x5e21e9) {
            ctx.save();
            var _0x428a50 = -(-_0x3c0f5f + _0x178729) * _0x55d748(_0xd216f5),
                _0x3d7d80 = 0.8 * this.rad;
            ctx.rotate(_0x55d748(_0x30d1cb) + _0x428a50);
            var _0x428a50 = 0,
                _0x3e0d71 = this.rad,
                _0x48342b = _0x3d7d80 * _0x59a1dd * 0.62,
                _0x3d7d80 = _0x3d7d80 * _0x5503ca,
                _0x1229a4 = 0.2,
                _0xb934e2 = 1.7;
            ctx.drawImage(_0x5e21e9, _0x428a50 + _0x48342b * -_0x1229a4, _0x3e0d71 + _0x3d7d80 * -_0xb934e2, _0x48342b, _0x3d7d80);
            ctx.globalAlpha = this.colorPerc;
            ctx.drawImage(_0x41175d, _0x428a50 + _0x48342b * -_0x1229a4, _0x3e0d71 + _0x3d7d80 * -_0xb934e2, _0x48342b, _0x3d7d80);
            ctx.restore();
        }
        _0x5e21e9 = _0x2f22f9(this.getWing('flamingo', 0x2, !0x1));
        _0x41175d = _0x2f22f9(this.getWing('flamingo', 0x2, !0));
        _0x5e21e9 && (ctx.save(), _0x428a50 = -(-_0x3c0f5f + _0x178729) * _0x55d748(-_0xd216f5), _0x3d7d80 = 0.8 * this.rad, ctx.rotate(_0x55d748(-_0x30d1cb) + _0x428a50), _0x428a50 = 0, _0x3e0d71 = this.rad, _0x48342b = _0x3d7d80 * _0x59a1dd * 0.62, _0x3d7d80 *= _0x5503ca, _0x1229a4 = 0.8, _0xb934e2 = 1.7, ctx.drawImage(_0x5e21e9, _0x428a50 + _0x48342b * -_0x1229a4, _0x3e0d71 + _0x3d7d80 * -_0xb934e2, _0x48342b, _0x3d7d80), ctx.globalAlpha = this.colorPerc, ctx.drawImage(_0x41175d, _0x428a50 + _0x48342b * -_0x1229a4, _0x3e0d71 + _0x3d7d80 * -_0xb934e2, _0x48342b, _0x3d7d80), ctx.restore());
        ctx.restore();
        0x1 == this.specType && (_0x30d1cb = _0x2f22f9(this.getHead('flamingo', !0x1)), _0xd216f5 = _0x2f22f9(this.getHead('flamingo', !0)), _0x30d1cb && (ctx.save(), _0x3d7d80 = this.rad, ctx.drawImage(_0x30d1cb, -_0x3d7d80 * _0x1f6d4b, (-_0x3d7d80 + 0.1 * _0x3d7d80) * _0x1f6d4b, 0x2 * _0x3d7d80 * _0x1f6d4b, 0x2 * _0x3d7d80 * _0x1f6d4b), ctx.globalAlpha = this.colorPerc, ctx.drawImage(_0xd216f5, -_0x3d7d80 * _0x1f6d4b, (-_0x3d7d80 + 0.1 * _0x3d7d80) * _0x1f6d4b, 0x2 * _0x3d7d80 * _0x1f6d4b, 0x2 * _0x3d7d80 * _0x1f6d4b), ctx.restore()));
    }
};
FlamingoAnimal.prototype.drawUnderSkinImgOutline = function () {
    FlamingoAnimal.superClass.prototype.drawUnderSkinImgOutline.call(this);
    if (this.flag_usingAbility && !this.flag_flying) {
        var _0x2fe90a = 0.5 * Math.sin(0x2 * Math.PI / 1.5 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
        ctx.save();
        ctx.globalAlpha *= 0.8;
        _0x110b78(0, this.rad * (0.9 + 0.12 * _0x2fe90a), 0.3 * this.rad, '#2c84ff');
        _0x110b78(0, 0.3 * -this.rad, this.rad * (1.05 + 0.09 * _0x2fe90a), '#4668ff');
        ctx.restore();
        ctx.save();
        ctx.globalAlpha = 0x1;
        ctx.fillStyle = '#4E71C3';
        var _0x1c7f8c = 0.1 * this.rad;
        ctx.beginPath();
        ctx.arc(-0.3 * this.rad, 1.2 * this.rad, Math.max(0, _0x1c7f8c + _0x2fe90a), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.2 * this.rad, 1.5 * this.rad, Math.max(0, _0x1c7f8c - _0x2fe90a), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(0.3 * this.rad, 1.2 * this.rad, Math.max(0, _0x1c7f8c + _0x2fe90a), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.beginPath();
        ctx.arc(-0.2 * this.rad, 1.5 * this.rad, Math.max(0, _0x1c7f8c - _0x2fe90a), 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.restore();
    }
};
FlamingoAnimal.prototype.readCustomData_onNewlyVisible = function (_0x1446da) {
    FlamingoAnimal.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1446da);
    this.colorPerc = _0x1446da.readUInt8() / 0x64;
};
FlamingoAnimal.prototype.readCustomData_onUpdate = function (_0xb18953) {
    FlamingoAnimal.superClass.prototype.readCustomData_onUpdate.call(this, _0xb18953);
    this.colorPerc = _0xb18953.readUInt8() / 0x64;
};

function FlamingoAnimal() {
    FlamingoAnimal.superClass.call(this, o_player);
}
window.Flamingo = FlamingoAnimal;
GameObjType.setCustomClassForGameObjType(FlamingoAnimal, o_player, _0x2714c6);
_0x2a91c6 = Animal;
_0x354c35.prototype = Object.create(_0x2a91c6.prototype);
_0x354c35.prototype.constructor = _0x354c35;
_0x354c35.superClass = _0x2a91c6;
_0x354c35.prototype.getSkinName = function () {
    var _0x540a8a = 'land/cassowary/' + this.animalSpecies + '/cassowary';
    return _0x540a8a += 0 == this.specType ? '' : this.specType;
};
_0x354c35.prototype.getAbilityInfo = function (_0xc3fb34) {
    _0xc3fb34 = {
        'abilName': `Front Kick\n(Hold to Charge)`
    };
    _0xc3fb34.abilImg = 'skins/land/cassowary/' + this.animalSpecies + '/cassowary2.png';
    return _0xc3fb34;
};
_0x354c35.prototype.animalInfo = function () {
    var _0x1ee0b2 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x1ee0b2.aniName = 'Cassowary!';
        break;
    case 0x1:
        _0x1ee0b2.aniName = 'Golden Cassowary!';
        break;
    case 0x2:
        _0x1ee0b2.aniName = 'Cotton Cassowary!';
    }
    _0x1ee0b2.aniCol = '#FF9000';
    _0x1ee0b2.skinName = 'land/cassowary/' + this.animalSpecies + '/cassowary';
    _0x1ee0b2.upgradeText = 'UPGRADED to ' + _0x1ee0b2.aniName + `!\nHold W to charge up a kick, the longer you hold, the more powerful it is!`;
    return _0x1ee0b2;
};

function _0x354c35() {
    _0x354c35.superClass.call(this, o_player);
}
window.Cassowary = _0x354c35;
GameObjType.setCustomClassForGameObjType(_0x354c35, o_player, _0x4906df);
_0x2a91c6 = Animal;
_0x5ab1f2.prototype = Object.create(_0x2a91c6.prototype);
_0x5ab1f2.prototype.constructor = _0x5ab1f2;
_0x5ab1f2.superClass = _0x2a91c6;
_0x5ab1f2.prototype.onAbility;
_0x5ab1f2.prototype.getSkinName = function () {
    return 'land/chicken/'+this.animalSpecies+'/chicken' + (0 == this.specType ? '' : this.specType);
};
_0x5ab1f2.prototype.animalInfo = function () {
    var _0x1ee0b2 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x1ee0b2.aniName = 'Chicken';
        break;
    case 100:
        _0x1ee0b2.aniName = 'Flash Chicken';
        break;
    }
    _0x1ee0b2.aniCol = '#FF9000';
    _0x1ee0b2.skinName = 'land/chicken/'+this.animalSpecies+'/chicken';
    _0x1ee0b2.upgradeText = 'UPGRADED to ' + _0x1ee0b2.aniName + `!`;
    return _0x1ee0b2;
};
_0x5ab1f2.prototype.getWing = function (_0x53715d, _0x38847b, _0xf13d3b) {
    return 'skins/land/' + _0x53715d + "/" + this.animalSpecies + "/" + 'chicken_wing' + _0x38847b + ".png";
};
_0x5ab1f2.prototype.getHead = function (_0x289c2e, _0x39fe15) {
    return 'skins/land/' + (_0x39fe15 ? this.getSpeciesPath(_0x289c2e) + '/'+this.animalSpecies+'/' : _0x289c2e + '/') + (_0x289c2e + '_head.png');
};
_0x5ab1f2.prototype.getAbilityInfo = function (_0x509e16) {
    return {
        'abilName': 'Run!',
        'abilImg': 'skins/land/chicken/'+this.animalSpecies+'/ability.png'
    };
};
_0x5ab1f2.prototype.readCustomData_onNewlyVisible = function (_0x1a0dbd) {
    _0x5ab1f2.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1a0dbd);
    this.readInfo(_0x1a0dbd);
};
_0x5ab1f2.prototype.readCustomData_onUpdate = function (_0x1a7fe9) {
    _0x5ab1f2.superClass.prototype.readCustomData_onUpdate.call(this, _0x1a7fe9);
    this.readInfo(_0x1a7fe9);
};
_0x5ab1f2.prototype.readInfo = function (_0x1963f7) {
    this.onAbility = _0x1963f7.readUInt8()
};
_0x5ab1f2.prototype.drawSkinCustomization = function () {
    var _0x364324 = 0x1f4 / 0x154;
    if (this.onAbility) {
        ctx.save();
        var _0x3da718 = _0x93972d((_0x1534e0 - this.spawnTime) / 0x3e8, 0.3, 0x1, 0x2),
            _0x262097 = _0x2f22f9(this.getWing('chicken', 0x1, !0x1));
        if (_0x262097) {
            ctx.save();
            var _0x325c4d = -(-0.2 + _0x3da718) * _0x55d748(0xf),
                _0x33c9df = 0.8 * this.rad;
            ctx.rotate(_0x55d748(0xf) + _0x325c4d);
            var _0x325c4d = this.rad,
                _0x1969e5 = 1.4 * _0x33c9df,
                _0x33c9df = 2.2 * _0x33c9df;
            ctx.drawImage(_0x262097, 0 + -0 * _0x1969e5, _0x325c4d + -1.5 * _0x33c9df, _0x1969e5, _0x33c9df);
            ctx.restore();
        }
        if (_0x262097 = _0x2f22f9(this.getWing('chicken', 0x2, !0x1))) ctx.save(), _0x325c4d = -(-0.2 + _0x3da718) * _0x55d748(-0xf), _0x33c9df = 0.8 * this.rad, ctx.rotate(_0x55d748(-0xf) + _0x325c4d), _0x325c4d = this.rad, _0x1969e5 = 1.4 * _0x33c9df, _0x33c9df *= 2.2, ctx.drawImage(_0x262097, 0 + -0x1 * _0x1969e5, _0x325c4d + -1.5 * _0x33c9df, _0x1969e5, _0x33c9df), ctx.restore();
        if (_0x3da718 = _0x2f22f9(this.getHead('chicken', !0x1))) ctx.save(), _0x33c9df = 0x1 * this.rad, ctx.drawImage(_0x3da718, -_0x33c9df * _0x364324, -_0x33c9df + 0.1 * -this.rad * _0x364324, 0x2 * _0x33c9df * _0x364324, 0x2 * _0x33c9df * _0x364324), ctx.restore();
        ctx.restore();
    }
};

function _0x5ab1f2() {
    _0x5ab1f2.superClass.call(this, o_player);
}
window.Chicken = _0x5ab1f2;
GameObjType.setCustomClassForGameObjType(_0x5ab1f2, o_player, _0x667e39);
_0x2a91c6 = Animal;
_0x114ef2.prototype = Object.create(_0x2a91c6.prototype);
_0x114ef2.prototype.constructor = _0x114ef2;
_0x114ef2.superClass = _0x2a91c6;
_0x114ef2.prototype.animalInfo = function () {
    var _0xcf536a = {
        'aniName': 'Woodpecker',
        'aniCol': '#FF9000',
        'skinName': 'woodpecker/woodpecker'
    };
    _0xcf536a.upgradeText = 'UPGRADED to ' + _0xcf536a.aniName + `!\nHold W to Peck other animals,\n or (Hint: Use ability on hills to fly)`;
    return _0xcf536a;
};
_0x114ef2.prototype.getSkinName = function () {
    return 'woodpecker/woodpecker' + (0 == this.specType ? '' : this.specType);
};
_0x114ef2.prototype.getHead = function (_0x4968ea, _0x1058ac) {
    var _0xdf863 = 'skins/' + (_0x1058ac ? this.getSpeciesPath(_0x4968ea) + '/' : _0x4968ea + '/');
    return _0xdf863 += _0x4968ea + '_head' + (!this.flag_flying && this.flag_usingAbility ? '1' : '') + '.png';
};
_0x114ef2.prototype.getWing = function (_0x49c959, _0x3fe2a4, _0x4fb83d) {
    return 'skins/' + this.getSkinFolder() + _0x49c959 + '_wing' + _0x3fe2a4 + '.png';
};
_0x114ef2.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        var _0x5dffbd = 0x1f4 / 0x154;
        ctx.save();
        var _0x154501 = this.flag_flying ? 0x2d : 0x2f,
            _0x20bbe8 = this.flag_flying ? 0x5a : 0x2d,
            _0x3450d8 = this.flag_flying ? 0.2 : 0.01,
            _0x54a4f1 = this.flag_flying ? 2.5 : 0x2,
            _0x11d16a = this.flag_flying ? 2.2 : 2.5,
            _0xebb89a = this.flag_flying ? 0.5 : 0.3,
            _0x5a4ec5 = (_0x1534e0 - this.spawnTime) / 0x3e8,
            _0xebb89a = 0x2 != _0x14fca5 ? _0x93972d(_0x5a4ec5, _0xebb89a, 0.3, 0x2) : this.birdNoAnimationFlyWingAngle,
            _0x5a752a = _0x2f22f9(this.getWing('woodpecker', 0x1, !0x1));
        if (_0x5a752a) {
            ctx.save();
            var _0xf5a0a8 = -(-_0x3450d8 + _0xebb89a) * _0x55d748(_0x20bbe8),
                _0xcfdb92 = 0.8 * this.rad;
            ctx.rotate(_0x55d748(_0x154501) + _0xf5a0a8);
            var _0xf5a0a8 = this.rad,
                _0x435532 = _0xcfdb92 * _0x11d16a * 0.62,
                _0xcfdb92 = _0xcfdb92 * _0x54a4f1;
            ctx.drawImage(_0x5a752a, 0 + -0.2 * _0x435532, _0xf5a0a8 + -1.7 * _0xcfdb92, _0x435532, _0xcfdb92);
            ctx.restore();
        }
        if (_0x5a752a = _0x2f22f9(this.getWing('woodpecker', 0x2, !0x1))) ctx.save(), _0xf5a0a8 = -(-_0x3450d8 + _0xebb89a) * _0x55d748(-_0x20bbe8), _0xcfdb92 = 0.8 * this.rad, ctx.rotate(_0x55d748(-_0x154501) + _0xf5a0a8), _0xf5a0a8 = this.rad, _0x435532 = _0xcfdb92 * _0x11d16a * 0.62, _0xcfdb92 *= _0x54a4f1, ctx.drawImage(_0x5a752a, 0 + -0.8 * _0x435532, _0xf5a0a8 + -1.7 * _0xcfdb92, _0x435532, _0xcfdb92), ctx.restore();
        ctx.restore();
        0 != this.specType && void 0 != this.specType && (_0x154501 = _0x2f22f9(this.getHead('woodpecker', !0x1))) && (_0xebb89a = 0, this.flag_flying || (_0xebb89a = 0x2 != _0x14fca5 ? _0x93972d(_0x5a4ec5, 0.18, 0x3, 0x2) : this.birdNoAnimationFlyWingAngle), ctx.save(), _0xcfdb92 = this.rad, ctx.drawImage(_0x154501, -_0xcfdb92 * _0x5dffbd, (-_0xcfdb92 + 0.1 * _0xcfdb92) * _0x5dffbd + _0xebb89a, 0x2 * _0xcfdb92 * _0x5dffbd, 0x2 * _0xcfdb92 * _0x5dffbd), ctx.restore());
    }
};

function _0x114ef2() {
    _0x114ef2.superClass.call(this, o_player);
}
window.Woodpecker = _0x114ef2;
GameObjType.setCustomClassForGameObjType(_0x114ef2, o_player, _0x1840f3);
_0x2a91c6 = Animal;
_0x4e6edc.prototype = Object.create(_0x2a91c6.prototype);
_0x4e6edc.prototype.constructor = _0x4e6edc;
_0x4e6edc.superClass = _0x2a91c6;
_0x4e6edc.prototype.updateZ = function () {
    this.z = this.flag_usingAbility && this.flag_flying ? 0x186a0 + this.rad : 0x3e8 + this.rad;
};
_0x4e6edc.prototype.animalInfo = function () {
    var _0x4d5cb5 = {
        'aniName': 'Peacock',
        'aniCol': '#FF9000',
        'skinName': 'peacock/peacock'
    };
    _0x4d5cb5.upgradeText = 'UPGRADED to ' + _0x4d5cb5.aniName + `!\nHold W to hypnotize prey: prey gets pulled in, predtors pushed!. \nHint:Start the ability on a hill to fly!. `;
    return _0x4d5cb5;
};
_0x4e6edc.prototype.getSkinName = function () {
    return this.flag_usingAbility ? this.flag_flying ? 'peacock/peacock_flying_tail' : 'peacock/tail3' : 'peacock/tail3';
};
_0x4e6edc.prototype.basicDrawSkinImg = function () {
    this.setSkinScale();
    var _0x1f2e04 = this.skinRad;
    if (this.loadedSkinImg)
        if (this.flag_usingAbility) ctx.drawImage(this.loadedSkinImg, -_0x1f2e04 * this.skinScale, 1.75 * -_0x1f2e04 * this.skinScale, 0x2 * _0x1f2e04 * this.skinScale, 2.5 * _0x1f2e04 * this.skinScale);
        else {
            ctx.drawImage(this.loadedSkinImg, -_0x1f2e04 * this.skinScale, 1.25 * -_0x1f2e04 * this.skinScale, 0x2 * _0x1f2e04 * this.skinScale, 0x2 * _0x1f2e04 * this.skinScale);
            var _0x2e4f42 = _0x2f22f9('skins/peacock/peacock_top.png');
            _0x2e4f42 && ctx.drawImage(_0x2e4f42, -_0x1f2e04 * this.skinScale, -_0x1f2e04 * this.skinScale, 0x2 * _0x1f2e04 * this.skinScale, 0x2 * _0x1f2e04 * this.skinScale);
        }
    else ctx.fillStyle = this.skinNotLoadedColor, ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - this.outlineW), 0, 0x2 * Math.PI), ctx.fill();
};
_0x4e6edc.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        if (!this.flag_flying) {
            ctx.save();
            var _0x1bdbb8 = this.rad,
                _0x483a66 = _0x2f22f9('skins/peacock/peacock_ability.png');
            _0x483a66 && ctx.drawImage(_0x483a66, -_0x1bdbb8 * this.skinScale * 0x2, -_0x1bdbb8 * this.skinScale * 0x3 + 0.4 * _0x1bdbb8, 0x2 * _0x1bdbb8 * this.skinScale * 0x2, 0x3 * _0x1bdbb8 * this.skinScale);
            ctx.restore();
        }
        _0x483a66 = 0x1f4 / 0x154;
        ctx.save();
        var _0x22d057 = this.flag_flying ? 0x2d : 0x14,
            _0x1e006e = this.flag_flying ? 0x5a : 0x2d,
            _0x5e1ce6 = this.flag_flying ? 0.2 : 0.01,
            _0x31ec53 = this.flag_flying ? 2.5 : 0x2,
            _0x8a0048 = this.flag_flying ? 2.5 : 0x2,
            _0x1edf55 = this.flag_flying ? 0 : -0.4,
            _0x26be19 = this.flag_flying ? 0 : -0.2,
            _0x1bdbb8 = this.flag_flying ? 0.5 : 1.2,
            _0x4f676c = this.flag_flying ? 0.3 : 0.1,
            _0x1f6980 = (_0x1534e0 - this.spawnTime) / 0x3e8,
            _0x4f676c = 0x2 != _0x14fca5 ? _0x93972d(_0x1f6980, _0x1bdbb8, _0x4f676c, 0x2) : this.birdNoAnimationFlyWingAngle;
        if (_0x1f6980 = _0x2f22f9(this.getWing('peacock', 0x1, !0x1))) {
            ctx.save();
            var _0x3693d5 = -(-_0x5e1ce6 + _0x4f676c) * _0x55d748(_0x1e006e),
                _0x1bdbb8 = 0.8 * this.rad;
            ctx.rotate(_0x55d748(_0x22d057) + _0x3693d5);
            var _0x3693d5 = this.rad,
                _0xb40a92 = _0x1bdbb8 * _0x8a0048 * 0.62,
                _0x1bdbb8 = _0x1bdbb8 * _0x31ec53;
            ctx.drawImage(_0x1f6980, 0 + _0xb40a92 * -(0.2 + _0x1edf55), _0x3693d5 + _0x1bdbb8 * -(1.7 + _0x26be19), _0xb40a92, _0x1bdbb8);
            ctx.restore();
        }
        if (_0x1f6980 = _0x2f22f9(this.getWing('peacock', 0x2, !0x1))) ctx.save(), _0x3693d5 = -(-_0x5e1ce6 + _0x4f676c) * _0x55d748(-_0x1e006e), _0x1bdbb8 = 0.8 * this.rad, ctx.rotate(_0x55d748(-_0x22d057) + _0x3693d5), _0x3693d5 = this.rad, _0xb40a92 = _0x1bdbb8 * _0x8a0048 * 0.62, _0x1bdbb8 *= _0x31ec53, ctx.drawImage(_0x1f6980, 0 + _0xb40a92 * -(0.8 - _0x1edf55), _0x3693d5 + _0x1bdbb8 * -(1.7 + _0x26be19), _0xb40a92, _0x1bdbb8), ctx.restore();
        ctx.restore();
        0x1 == this.specType && (_0x22d057 = _0x2f22f9(this.getHead('peacock', !0x1))) && (ctx.save(), _0x1bdbb8 = this.rad, ctx.drawImage(_0x22d057, -_0x1bdbb8 * _0x483a66, (-_0x1bdbb8 + 0.1 * _0x1bdbb8) * _0x483a66, 0x2 * _0x1bdbb8 * _0x483a66, 0x2 * _0x1bdbb8 * _0x483a66), ctx.restore());
    }
};
_0x4e6edc.prototype.drawUnderSkinImgOutline = function () {
    _0x4e6edc.superClass.prototype.drawUnderSkinImgOutline.call(this);
};

function _0x4e6edc() {
    _0x4e6edc.superClass.call(this, o_player);
}
window.Peacock = _0x4e6edc;
GameObjType.setCustomClassForGameObjType(_0x4e6edc, o_player, _0x1c031f);
_0x2a91c6 = Animal;
_0x1ef15f.prototype = Object.create(_0x2a91c6.prototype);
_0x1ef15f.prototype.constructor = _0x1ef15f;
_0x1ef15f.superClass = _0x2a91c6;
_0x1ef15f.prototype.updateZ = function () {
    this.z = (this.flag_usingAbility ? 0x64 : 0) + this.rad;
    this.flag_canClimbHill ? this.z += 0x3e8 : this.flag_eff_tossedInAir && (this.z = 0x4b0 + this.rad);
};
_0x1ef15f.prototype.animalInfo = function () {
    var _0x393b76 = {};
  switch (this.animalSpecies) {
    case 0:
        _0x393b76.aniName = "Gazelle";
      break;
    case 100:
        _0x393b76.aniName = "Falmmy Hart";
      break;

  }
    _0x393b76.upgradeText = 'UPGRADED to ' + _0x393b76.aniName + `!\nHold 'W' to Jump High through everything.`;
    return _0x393b76;
};
_0x1ef15f.prototype.moveF = 0.08;
_0x1ef15f.prototype.jumpAnim = null;
_0x1ef15f.prototype.frame = 0;
_0x1ef15f.prototype.drawUnderSkinImg = function () {
    if (this.flag_usingAbility) {
        null == this.jumpAnim && (this.jumpAnim = new _0x1cbd2d(this, 0.5, _0x1cbd2d.halfWave), this.jumpAnim.keepLastFrame = !0, this.jumpAnim.loop = !0, this.jumpAnim.onFrameEntered = function (_0x57ce96) {
            this.forObj.frame = _0x57ce96;
        }, this.jumpAnim.onStop = function () {});
        null != this.jumpAnim && this.jumpAnim.run();
        var _0x2320ca = this.rad - this.outlineW,
            _0x51c150 = 0x1f4 / 0x154;
        this.setSkinScale();
        var _0x1d9e78 = _0x2f22f9('skins/desert/gazelle/legs0.png'),
            _0x56e40e = _0x2f22f9('skins/desert/gazelle/legs1.png');
        _0x1d9e78 && _0x56e40e && (_0x51c150 = this.skinScale + 0.15 * this.skinScale * this.frame, _0x2320ca = this.skinRad, 0 == this.specType ? (ctx.drawImage(_0x1d9e78, -_0x2320ca * _0x51c150, -_0x2320ca * _0x51c150, 0x2 * _0x2320ca * _0x51c150, 0x2 * _0x2320ca * _0x51c150), ctx.drawImage(_0x56e40e, -_0x2320ca * _0x51c150, (-_0x2320ca - _0x2320ca * this.moveF * this.frame) * _0x51c150, 0x2 * _0x2320ca * _0x51c150, 0x2 * _0x2320ca * _0x51c150)) : (ctx.drawImage(_0x56e40e, -_0x2320ca * _0x51c150, -_0x2320ca * _0x51c150, 0x2 * _0x2320ca * _0x51c150, 0x2 * _0x2320ca * _0x51c150), ctx.drawImage(_0x1d9e78, -_0x2320ca * _0x51c150, (-_0x2320ca + _0x2320ca * this.moveF * this.frame) * _0x51c150, 0x2 * _0x2320ca * _0x51c150, 0x2 * _0x2320ca * _0x51c150)));
    } else this.jumpAnim = null;
};
_0x1ef15f.prototype.getSkinName = function () {
    return 'desert/gazelle/'+this.animalSpecies+'/gazelle';
};

function _0x1ef15f() {
    _0x1ef15f.superClass.call(this, o_player);
}
window.Gazelle = _0x1ef15f;
GameObjType.setCustomClassForGameObjType(_0x1ef15f, o_player, _0x22da49);
_0x2a91c6 = Animal;
_0x263691.prototype = Object.create(_0x2a91c6.prototype);
_0x263691.prototype.constructor = _0x263691;
_0x263691.superClass = _0x2a91c6;
_0x263691.prototype.animalInfo = function () {
    var _0x55479d = {
        'aniName': 'Armadillo',
        'aniCol': '#FF9000',
        'skinName': 'desert/armadillo/armadillo'
    };
    _0x55479d.upgradeText = 'UPGRADED to ' + _0x55479d.aniName + `!\nHold 'W' to roll through everything. \nCarefully, try eating mangoes around venus flytraps!`;
    return _0x55479d;
};
_0x263691.prototype.getSkinName = function () {
    return '/desert/armadillo/armadillo' + (0 == this.specType ? '' : this.specType);
};
_0x263691.prototype.drawUnderSkinTail = function (_0x1c7889) {
    this.flag_usingAbility || _0x263691.superClass.prototype.drawUnderSkinTail.call(this, _0x1c7889);
};
_0x263691.prototype.drawAnimalUnderSkinCircle = function (_0x98a318) {
    this.flag_usingAbility || _0x263691.superClass.prototype.drawAnimalUnderSkinCircle.call(this, _0x98a318);
};
_0x263691.prototype.basicDrawSkinImg = function () {
    if (this.flag_usingAbility) {
        this.setSkinScale();
        this.frameNumber = Math.trunc(_0x1534e0 / 0x78) % 0x6;
        var _0x36e3e6 = _0x2f22f9('skins/desert/armadillo/armadillo' + this.frameNumber + '.png');
        if (_0x36e3e6) {
            var _0x520d8e = this.skinScale,
                _0x59affd = this.skinRad;
            ctx.drawImage(_0x36e3e6, -_0x59affd * _0x520d8e, -_0x59affd * _0x520d8e, 0x2 * _0x59affd * _0x520d8e, 0x2 * _0x59affd * _0x520d8e);
        }
    } else _0x263691.superClass.prototype.basicDrawSkinImg.call(this);
};

function _0x263691() {
    _0x263691.superClass.call(this, o_player);
}
window.Armadillo = _0x263691;
GameObjType.setCustomClassForGameObjType(_0x263691, o_player, _0x58e093);
_0x2a91c6 = Animal;
_0x775283.prototype = Object.create(_0x2a91c6.prototype);
_0x775283.prototype.constructor = _0x775283;
_0x775283.superClass = _0x2a91c6;
_0x775283.prototype.animalInfo = function () {
    var infoO = {};
  infoO.aniCol = "#FF9000";
  switch (this.animalSpecies) {
    case 100:
      infoO.aniName = "Cacti Rat";
      break;
    case 0:
      infoO.aniName = "Desert Rat";
      break;
      case 1:
        infoO.aniName = "Desert Elemental"
  }
  infoO.skinName = "desert/kangaroorat/" + this.animalSpecies + "/kangaroorat";
  infoO.upgradeText = "";//You're a tiny rat, eat food to grow bigger!";
  return infoO;
};
_0x775283.prototype.getSkinName = function () {
    return 'desert/kangaroorat/' + this.animalSpecies + '/kangaroorat' + (0 == this.specType ? '' : this.specType);
};
_0x775283.prototype.flapStart = 0;
_0x775283.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        var _0x3b7ae1 = _0x2f22f9('skins/desert/kangaroorat/' + this.animalSpecies + '/tail.png');
        if (_0x3b7ae1) {
            var _0x203d44 = 1.5 * this.skinScale,
                _0x327a15 = this.skinRad;
            ctx.drawImage(_0x3b7ae1, -_0x327a15 * _0x203d44, (-_0x327a15 + 0.03 * _0x327a15) * _0x203d44, 0x2 * _0x327a15 * _0x203d44, 0x2 * _0x327a15 * _0x203d44);
        }
    }
};

function _0x775283() {
    _0x775283.superClass.call(this, o_player);
}
window.KangarooRat = _0x775283;
GameObjType.setCustomClassForGameObjType(_0x775283, o_player, _0x3ebaa2);
_0x2a91c6 = Animal;
_0x3b6ebb.prototype = Object.create(_0x2a91c6.prototype);
_0x3b6ebb.prototype.constructor = _0x3b6ebb;
_0x3b6ebb.superClass = _0x2a91c6;
_0x3b6ebb.prototype.animalInfo = function () {
    var _0x50d6c4 = {
        'aniName': 'Desert Chipmunk',
        'aniCol': '#FF9000',
        'skinName': 'desert/chipmunk/chipmunk'
    };
    _0x50d6c4.upgradeText = 'UPGRADED to ' + _0x50d6c4.aniName + `!\n Press W to Spit food to boost yourself!`;
    return _0x50d6c4;
};
_0x3b6ebb.prototype.getSkinName = function () {
    return 'desert/chipmunk/chipmunk' + (0 == this.specType ? '' : this.specType);
};

function _0x3b6ebb() {
    _0x3b6ebb.superClass.call(this, o_player);
}
window.DesertChipmunk = _0x3b6ebb;
GameObjType.setCustomClassForGameObjType(_0x3b6ebb, o_player, _0x3475cc);
_0x2a91c6 = Animal;
_0x5e64f7.prototype = Object.create(_0x2a91c6.prototype);
_0x5e64f7.prototype.constructor = _0x5e64f7;
_0x5e64f7.superClass = _0x2a91c6;
_0x5e64f7.prototype.updateZ = function () {
    this.z = this.flag_eff_grabbedByFlytrap ? 0x44c + this.rad : this.flag_usingAbility ? -0x9d : this.flag_flying || this.flag_eff_tossedInAir ? 0x834 + this.rad : this.rad;
};
_0x5e64f7.prototype.animalInfo = function () {
    var infoO = {};
  infoO.aniCol = "#FF9000";
  switch (this.animalSpecies) {
    case 0:
      infoO.aniName = "Meerkat";
      break;
    case 100:
      infoO.aniName = "Puumpkat";
      break;
    case 201:
      infoO.aniName = "Scubakat";
      break;
    case 204:
      infoO.aniName = "Necromancer Meerkat";
      break;
  }
  infoO.skinName = "desert/meerkat/" + this.animalSpecies + "/meerkat";

  infoO.upgradeText =
    "UPGRADED to " + infoO.aniName + "!\n HOLD to Dig Underground. \nYou can now eat pink cactus fruits!";

  return infoO;
};
_0x5e64f7.prototype.getSkinName = function () {
    return 'desert/meerkat/' + this.animalSpecies + '/meerkat' + (0 == this.specType ? '' : this.specType);
};
_0x5e64f7.prototype.drawAnimalUnderSkinCircle = function (_0x3d202f) {
    this.flag_usingAbility || _0x5e64f7.superClass.prototype.drawAnimalUnderSkinCircle.call(this, _0x3d202f);
};
_0x5e64f7.prototype.drawUnderSkinTail = function (_0x294c64) {
    this.flag_usingAbility || _0x5e64f7.superClass.prototype.drawUnderSkinTail.call(this, _0x294c64);
};
_0x5e64f7.prototype.basicDrawSkinImg = function () {
    if (this.flag_usingAbility) {
        this.setSkinScale();
        ctx.save();
        var _0x355b16 = _0x2f22f9('skins/desert/meerkat/' + this.animalSpecies + '/meerkat1.png');
        if (_0x355b16) {
            var _0x58e53b = this.skinScale,
                _0x3cb10c = this.skinRad;
            ctx.drawImage(_0x355b16, -_0x3cb10c * _0x58e53b, -_0x3cb10c * _0x58e53b, 0x2 * _0x3cb10c * _0x58e53b, 0x2 * _0x3cb10c * _0x58e53b);
        }
        ctx.restore();
    } else _0x5e64f7.superClass.prototype.basicDrawSkinImg.call(this);
};

function _0x5e64f7() {
    _0x5e64f7.superClass.call(this, o_player);
}
window.Meerkat = _0x5e64f7;
GameObjType.setCustomClassForGameObjType(_0x5e64f7, o_player, _0x4b5f75);
_0x2a91c6 = Animal;
_0x328d3b.prototype = Object.create(_0x2a91c6.prototype);
_0x328d3b.prototype.constructor = _0x328d3b;
_0x328d3b.superClass = _0x2a91c6;
_0x328d3b.prototype.animalInfo = function () {
    var _0x591cee = {
        'aniName': 'Fennec Fox',
        'aniCol': '#FF9000',
        'skinName': 'desert/fennecfox/fennecfox'
    };
    _0x591cee.upgradeText = 'UPGRADED to ' + _0x591cee.aniName + `!\nFennec Fox has very sharp ears (can see animals in hiding holes).\n Press W to Whine!`;
    return _0x591cee;
};
_0x328d3b.prototype.getSkinName = function () {
    return 'desert/fennecfox/fennecfox' + (0 == this.specType ? '' : this.specType);
};
_0x328d3b.prototype.flapStart = 0;
_0x328d3b.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        0 == this.flapStart && (this.flapStart = _0x1534e0);
        this.setSkinScale();
        var _0x1bc4c5 = (_0x1534e0 - this.flapStart) / 0x3e8,
            _0x1bc4c5 = 0x2 != _0x14fca5 ? _0x93972d(_0x1bc4c5, 0.5, 0x5, 0x1) : 0x2,
            _0x1bc4c5 = Math.round(_0x1bc4c5);
        if (_0x1bc4c5 = _0x2f22f9('skins/desert/fennecfox/ears' + _0x1bc4c5 + '.png')) {
            var _0x4f0ec1 = this.skinScale,
                _0x19d289 = this.skinRad;
            ctx.drawImage(_0x1bc4c5, -_0x19d289 * _0x4f0ec1, -_0x19d289 * _0x4f0ec1, 0x2 * _0x19d289 * _0x4f0ec1, 0x2 * _0x19d289 * _0x4f0ec1);
        }
    } else this.flapStart = 0;
};

function _0x328d3b() {
    _0x328d3b.superClass.call(this, o_player);
}
window.FennecFox = _0x328d3b;
GameObjType.setCustomClassForGameObjType(_0x328d3b, o_player, _0x4a40f6);

_0x2a91c61 = Animal;
_0x328d3b1.prototype = Object.create(_0x2a91c6.prototype);
_0x328d3b1.prototype.constructor = _0x328d3b1;
_0x328d3b1.superClass = _0x2a91c6;
_0x328d3b1.prototype.getSkinName = function () {
    return "fox"
};
_0x328d3b1.prototype.flapStart = 0;
_0x328d3b1.prototype.drawSkinCustomization = function () {
   
};
_0x328d3b1.prototype.getAbilityInfo = function (_0x5aa9f0) {
    _0x5aa9f0 = {
        'abilName': `Pull from Hole`
    };
    _0x5aa9f0.abilImg = 'skins/fox'
    return _0x5aa9f0;
};

function _0x328d3b1() {
    _0x328d3b1.superClass.call(this, o_player);
}
window.fox = _0x328d3b1;
GameObjType.setCustomClassForGameObjType(_0x328d3b1, o_player, _0x41846d);

_0x2a91c6 = Animal;
_0x3e8685.prototype = Object.create(_0x2a91c6.prototype);
_0x3e8685.prototype.constructor = _0x3e8685;
_0x3e8685.superClass = _0x2a91c6;
_0x3e8685.prototype.animalInfo = function () {
    var _0xd4db29 = {
        'aniName': 'Gobi Bear',
        'aniCol': '#FF9000',
        'skinName': 'desert/gobibear/gobibear'
    };
    _0xd4db29.upgradeText = 'UPGRADED to ' + _0xd4db29.aniName + '!\x0a';
    return _0xd4db29;
};
_0x3e8685.prototype.getSkinName = function () {
    return 'desert/gobibear/gobibear' + (0 == this.specType ? '' : this.specType);
};
_0x3e8685.prototype.biteStart = 0;
_0x3e8685.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        if (0 == this.biteStart && (this.biteStart = _0x1534e0), 0x190 > _0x1534e0 - this.biteStart && 0 != this.specType && void 0 != this.specType) {
            var _0x267683 = _0x2f22f9('skins/desert/gobibear/gobibear_head1.png'),
                _0x396e2c = (_0x1534e0 - this.biteStart) / 0x3e8,
                _0x2364c0 = 1.1 * this.skinScale;
            _0x267683 && (frame = 0, this.flag_flying || (flapAmount = 0x3, flapDur = 0.5, frame = 0x2 != _0x14fca5 ? _0x93972d(_0x396e2c, flapDur, flapAmount, 0x2) : this.birdNoAnimationFlyWingAngle), ctx.save(), _0x396e2c = this.rad, ctx.drawImage(_0x267683, -_0x396e2c * _0x2364c0, (-_0x396e2c + 0.1 * _0x396e2c) * _0x2364c0 + frame, 0x2 * _0x396e2c * _0x2364c0, 0x2 * _0x396e2c * _0x2364c0), ctx.restore());
        }
    } else this.biteStart = 0;
};

function _0x3e8685() {
    _0x3e8685.superClass.call(this, o_player);
}
window.GobiBear = _0x3e8685;
GameObjType.setCustomClassForGameObjType(_0x3e8685, o_player, _0x8942b7);
_0x2a91c6 = Animal;
_0x859cb1.prototype = Object.create(_0x2a91c6.prototype);
_0x859cb1.prototype.constructor = _0x859cb1;
_0x859cb1.superClass = _0x2a91c6;
_0x859cb1.prototype.animalInfo = function () {
    var infoO = {};
  switch (this.animalSpecies) {
    case 0:
      infoO.aniName = "Camel";
      break;
    case 100:
      infoO.aniName = "Doomedarius";
      break;
    case 201:
      infoO.aniName = "Balloon Warrior";
      break;
  }

  infoO.skinName = "desert/camel/" + this.animalSpecies + "/camel";
  infoO.aniCol = "#FF9000";
  infoO.upgradeText =
    "UPGRADED to " + infoO.aniName + "!\n Press W to Spit. Try eating oranges from trees!";
  return infoO;
};
_0x859cb1.prototype.getSkinName = function () {
    return 'desert/camel/'+this.animalSpecies+'/camel' + (0 == this.specType ? '' : this.specType);
};
_0x859cb1.prototype.biteStart = 0;
_0x859cb1.prototype.flapAmount = 0x3;
_0x859cb1.prototype.flapDur = 0x1;
_0x859cb1.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        if (0 == this.biteStart && (this.biteStart = _0x1534e0), 0 != this.specType && void 0 != this.specType) {
            var _0x226a78 = _0x2f22f9('skins/desert/camel/camel_head1.png'),
                _0x36dd27 = (_0x1534e0 - this.biteStart) / 0x3e8,
                _0x2f0cb0 = 1.1 * this.skinScale;
            if (_0x226a78) {
                var _0x49afad = 0;
                this.flag_flying || (_0x49afad = 0x2 != _0x14fca5 ? _0x93972d(_0x36dd27, this.flapDur, this.flapAmount, 0x2) : this.flapAmount);
                ctx.save();
                _0x36dd27 = this.rad;
                ctx.drawImage(_0x226a78, -_0x36dd27 * _0x2f0cb0, (-_0x36dd27 + 0.1 * _0x36dd27) * _0x2f0cb0 - _0x49afad, 0x2 * _0x36dd27 * _0x2f0cb0, 0x2 * _0x36dd27 * _0x2f0cb0);
                ctx.restore();
            }
        }
    } else this.biteStart = 0;
};

function _0x859cb1() {
    _0x859cb1.superClass.call(this, o_player);
}
window.Camel = _0x859cb1;
GameObjType.setCustomClassForGameObjType(_0x859cb1, o_player, _0x293281);
_0x2a91c6 = GameObj;
_0x26a996.prototype = Object.create(_0x2a91c6.prototype);
_0x26a996.prototype.constructor = _0x26a996;
_0x26a996.superClass = _0x2a91c6;
_0x26a996.prototype.updateZ = function () {
    this.z = 0x3ed;
};
_0x26a996.prototype.customDraw = function (_0x20cefc) {
    if (_0x20cefc = _0x2f22f9('skins/desert/camel/spit.png')) {
        ctx.save();
        var _0x57d740 = this.rad;
        ctx.rotate(this.angle);
        ctx.drawImage(_0x20cefc, -_0x57d740, -_0x57d740, 0x2 * _0x57d740, 0x2 * _0x57d740);
        ctx.restore();
    }
};

function _0x26a996() {
    _0x26a996.superClass.call(this, o_camelSpit);
}
window.CamelSpit = _0x26a996;
GameObjType.setCustomClassForGameObjType(_0x26a996, o_camelSpit);
_0x2a91c6 = Animal;
_0x4061b6.prototype = Object.create(_0x2a91c6.prototype);
_0x4061b6.prototype.constructor = _0x4061b6;
_0x4061b6.superClass = _0x2a91c6;
_0x4061b6.prototype.animalInfo = function () {
    var infoO = {};
  infoO.aniCol = "#FF9000";
  switch (this.animalSpecies) {
    case 0:
      infoO.aniName = "Warthog";
      break;
    case 100:
      infoO.aniName = "The Burlone";
      break;
    case 200:
      infoO.aniName = "WarT. Hog";
      break;
    case 201:
      infoO.aniName = "Flame Tiki";
      break;
    case 204:
      infoO.aniName = "Candy Corn Warthog";
      break;
  }


  infoO.skinName = "desert/warthog/" + this.animalSpecies + "/warthog";
  infoO.upgradeText =
    "UPGRADED to " + infoO.aniName + "!\nPress W to Dig and Charge.";
  return infoO;
};
_0x4061b6.prototype.getSkinName = function () {
    return 'desert/warthog/'+ this.animalSpecies +'/warthog' + (0 == this.specType ? '' : this.specType);
};
_0x4061b6.prototype.flapStart = 0;
_0x4061b6.prototype.drawUnderSkinImgOutline = function () {
    _0x4061b6.superClass.prototype.drawUnderSkinImgOutline.call(this);
    if (this.flag_usingAbility && !this.isCharging) {
        var _0x157e10 = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
        ctx.save();
        ctx.globalAlpha *= 0.8 - 0.2 * _0x157e10;
        _0x110b78(0, 0.3 * this.rad, this.rad * (0.9 + 0.12 * _0x157e10), '#b69327');
        _0x110b78(0, 0.2 * -this.rad, this.rad * (0.9 + 0.09 * _0x157e10), '#b69327');
        ctx.restore();
    }
};
_0x4061b6.prototype.drawUnderSkinImg = function () {
    if (this.flag_usingAbility) {
        if (0 == this.flapStart && (this.flapStart = _0x1534e0), this.flag_usingAbility && !this.isCharging) {
            var _0x1a4e2a, _0x8f80b6;
            this.setSkinScale();
            _0x1a4e2a = (_0x1534e0 - this.flapStart) / 0x3e8;
            _0x1a4e2a = 0x2 != _0x14fca5 ? _0x93972d(_0x1a4e2a, 0.8, 0x1, 0x1) : 0;
            _0x1a4e2a = Math.round(_0x1a4e2a);
            0 > _0x1a4e2a && (_0x1a4e2a = 0);
            var _0x37f820 = _0x2f22f9('skins/desert/warthog/leg' + _0x1a4e2a + '.png');
            _0x37f820 && (_0x8f80b6 = this.skinScale, _0x1a4e2a = this.skinRad, ctx.drawImage(_0x37f820, -_0x1a4e2a * _0x8f80b6, -_0x1a4e2a * _0x8f80b6, 0x2 * _0x1a4e2a * _0x8f80b6, 0x2 * _0x1a4e2a * _0x8f80b6));
        }
    } else this.flapStart = 0;
};
_0x4061b6.prototype.getAbilityInfo = function (_0x3122c4) {
    return {
        'abilName': `Dig Food\nSudden Charge`,
        'abilImg': 'skins/desert/warthog/warthog.png'
    };
};
_0x4061b6.prototype.isCharging = !0x1;
_0x4061b6.prototype.readCustomData_onNewlyVisible = function (_0xa3125e) {
    _0x4061b6.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0xa3125e);
    this.isCharging = 0x1 == _0xa3125e.readUInt8();
};
_0x4061b6.prototype.readCustomData_onUpdate = function (_0x27e768) {
    _0x4061b6.superClass.prototype.readCustomData_onUpdate.call(this, _0x27e768);
    this.isCharging = 0x1 == _0x27e768.readUInt8();
};

function _0x4061b6() {
    _0x4061b6.superClass.call(this, o_player);
}
window.Warthog = _0x4061b6;
GameObjType.setCustomClassForGameObjType(_0x4061b6, o_player, _0x18993a);
_0x2a91c6 = GameObj;
_0x517302.prototype = Object.create(_0x2a91c6.prototype);
_0x517302.prototype.constructor = _0x517302;
_0x517302.superClass = _0x2a91c6;
_0x517302.prototype.updateZ = function () {
    this.z = 0x3e8 + this.rad;
};
_0x517302.prototype.customDraw = function (_0x577fbe) {
    ctx.save();
    var _0x3724dd = (_0x1534e0 - this.spawnTime) / 0x3e8;
    _0x577fbe = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x3724dd);
    var _0x4a2ff = 0.6,
        _0x3724dd = _0x93972d(_0x3724dd, 0xa, 0x1, 0.5),
        _0x3724dd = _0x1c8ba9(_0x3724dd, 0, 0x1);
    _0x3724dd >= _0x4a2ff && (_0x4a2ff -= _0x3724dd - _0x4a2ff);
    ctx.fillStyle = '#98803A';
    ctx.globalAlpha = _0x4a2ff;
    ctx.beginPath();
    ctx.arc(0.5 * -this.rad, 0.5 * -this.rad + 0xa * this.rPer, Math.max(0, 0.65 * this.rad + _0x577fbe), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(0.5 * this.rad, 0.5 * -this.rad - 0xa * this.rPer, Math.max(0, 0.73 * this.rad - _0x577fbe), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(0.6 * this.rad, 0.4 * this.rad, Math.max(0, 0.78 * this.rad + _0x577fbe), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(0.5 * -this.rad, 0.5 * this.rad, Math.max(0, 0.6 * this.rad + this.rPer - _0x577fbe), 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.restore();
};

function _0x517302() {
    _0x517302.superClass.call(this, o_dustCloud);
}
window.DustCloud = _0x517302;
GameObjType.setCustomClassForGameObjType(_0x517302, o_dustCloud);
_0x2a91c6 = Animal;
_0xa51628.prototype = Object.create(_0x2a91c6.prototype);
_0xa51628.prototype.constructor = _0xa51628;
_0xa51628.superClass = _0x2a91c6;
_0xa51628.prototype.animalInfo = function () {
    var _0x5d8b1b = {
        'aniName': 'Hyena',
        'aniCol': '#FF9000',
        'skinName': 'desert/hyena/hyena'
    };
    _0x5d8b1b.upgradeText = 'UPGRADED to ' + _0x5d8b1b.aniName + `!\nHyenas have a very loud and scary laugh!\nPress W to Laugh.`;
    return _0x5d8b1b;
};
_0xa51628.prototype.getSkinName = function () {
    return 'desert/hyena/hyena' + (0 == this.specType ? '' : this.specType);
};
_0xa51628.prototype.biteStart = 0;
_0xa51628.prototype.flapAmount = 0x3;
_0xa51628.prototype.flapDur = 0x1;
_0xa51628.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        if (0 == this.biteStart && (this.biteStart = _0x1534e0), 0 != this.specType && void 0 != this.specType) {
            var _0x4f4722 = _0x2f22f9('skins/desert/hyena/hyena_head.png'),
                _0x12db8d = (_0x1534e0 - this.biteStart) / 0x3e8,
                _0x331c7c = 1.1 * this.skinScale;
            _0x4f4722 && (frame = 0, this.flag_flying || (frame = 0x2 != _0x14fca5 ? _0x93972d(_0x12db8d, this.flapDur, this.flapAmount, 0x2) : this.flapAmount), ctx.save(), _0x12db8d = this.rad, ctx.drawImage(_0x4f4722, -_0x12db8d * _0x331c7c, (-_0x12db8d + 0.1 * _0x12db8d) * _0x331c7c + frame, 0x2 * _0x12db8d * _0x331c7c, 0x2 * _0x12db8d * _0x331c7c), ctx.restore());
        }
    } else this.biteStart = 0;
};
_0xa51628.prototype.getAbilityInfo = function (_0x1f5729) {
    return {
        'abilName': 'Laughs!',
        'abilImg': 'skins/desert/hyena/hyena2.png'
    };
};

function _0xa51628() {
    _0xa51628.superClass.call(this, o_player);
}
window.Hyena = _0xa51628;
GameObjType.setCustomClassForGameObjType(_0xa51628, o_player, _0x24f42b);
_0x5a621d = _0x176e41;
_0x2a91c6 = AbillityObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x176e41.prototype.updateZ = function () {
    this.z = 0x186a2;
};
_0x176e41.prototype.customDraw = function (_0x2bc4df) {
    ctx.save();
    if (_0x2bc4df = _0x2f22f9('skins/desert/hyena/laugh.png')) {
        var _0x267bb7 = (_0x1534e0 - this.spawnTime) / 0x3e8;
        rShift = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x267bb7);
        _0x267bb7 = _0x93972d(_0x267bb7, 5.1, 0x1, 0x1);
        _0x267bb7 = _0x1c8ba9(_0x267bb7, 0, 0x1);
        ctx.globalAlpha = _0x267bb7;
        _0x267bb7 = this.rad;
        ctx.rotate(this.angle + _0x55d748(-0x5a));
        ctx.drawImage(_0x2bc4df, 0x1 * -_0x267bb7, 0x1 * -_0x267bb7, 0x2 * _0x267bb7, 0x2 * _0x267bb7);
    }
    ctx.restore();
    this.drawChat();
};
_0x176e41.prototype.drawChat = function () {
    if (null != this.aLine) {
        ctx.save();
        ctx.font = '10px Arial';
        ctx.lineWidth = 0x1;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        var _0x24903e = this.aLine;
        _0x24903e.chatA += 0.1 * ((_0x1534e0 > _0x24903e.chatFadeT ? 0 : 0x1) - _0x24903e.chatA);
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
        0.02 > _0x24903e.chatA && (this.aLine = null);
        var _0x1cfe46 = ctx.measureText(_0x24903e.chatTxt).width;
        ctx.globalAlpha = 0.8 * _0x24903e.chatA;
        ctx.fillStyle = _0x26f066(this.curBiome);
        ctx.fillRect(this.x - 0x1 - _0x1cfe46 / 0x2, this.y - this.rad - 0x5 - 0x1, _0x1cfe46 + 0x2, 0xc);
        ctx.fillStyle = '#F1C34C';
        0x2 != _0x14fca5 && (ctx.shadowOffsetX = 0x1, ctx.shadowOffsetY = 0x1, ctx.shadowColor = 'black');
        ctx.globalAlpha = _0x24903e.chatA;
        ctx.fillText(_0x24903e.chatTxt, this.x, this.y - this.rad);
        ctx.restore();
    }
};

function _0x176e41() {
    _0x176e41.superClass.call(this);
}
_0x176e41.prototype.aLine = null;
_0x176e41.prototype.readCustomData_onNewlyVisible = function (_0x2216eb) {
    _0x176e41.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x2216eb);
    this.aLine = {
        'chatTxt': 'Hehehe',
        'chatFadeT': _0x1534e0 + 0xfa0,
        'chatA': 0
    };
};
window.HyenaLaugh = _0x176e41;
GameObjType.setCustomClassForGameObjType(_0x176e41, o_abilityObj, _0x19435b);
_0x2a91c6 = Animal;
_0x40cb67.prototype = Object.create(_0x2a91c6.prototype);
_0x40cb67.prototype.constructor = _0x40cb67;
_0x40cb67.superClass = _0x2a91c6;
_0x40cb67.prototype.animalInfo = function () {
    var infoO = {};
  infoO.aniCol = "#FF9000";
  switch (this.animalSpecies) {
    case 0:
      infoO.aniName = "Rattle Snake";
      break;
    case 100:
      infoO.aniName = "Gummy Viper";
      break;
  }
  infoO.skinName = "desert/rattlesnake/" + this.animalSpecies + "/rattlesnake";
  infoO.upgradeText =
    "UPGRADED to " +
    infoO.aniName +
    "!\nThe " + infoO.aniName + " is a very dangerous animal. \nHOLD W to Rattle.";
  return infoO;
};
_0x40cb67.prototype.getSkinName = function () {
    return 'desert/rattlesnake/'+this.animalSpecies+'/rattlesnake' + (0 == this.specType ? '' : this.specType);
};
_0x40cb67.prototype.biteStart = 0;
_0x40cb67.prototype.drawUnderSkinImg = function () {
    if (!this.flag_usingAbility) {
        var _0x5a9f7b = this.rad - this.outlineW,
            _0x371244 = 0x1f4 / 0x154,
            _0x4ae978 = _0x2f22f9('skins/desert/rattlesnake/tongue.png'),
            _0x2f1b13 = (_0x1534e0 - this.spawnTime) / 0x3e8,
            _0x2f1b13 = 0x2 == _0x14fca5 ? 0 : _0x93972d(_0x2f1b13, 0.7, 0x6, 0.5),
            _0x4763a7 = 0x2 == _0x14fca5 ? 0 : 0x5;
        _0x4ae978 && ctx.drawImage(_0x4ae978, -_0x5a9f7b * _0x371244, -(_0x5a9f7b + _0x4763a7 + _0x2f1b13) * _0x371244, 0x2 * _0x5a9f7b * _0x371244, 0x2 * _0x5a9f7b * _0x371244);
    }
};
_0x40cb67.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        0 == this.biteStart && (this.biteStart = _0x1534e0);
        if (0 != this.specType && void 0 != this.specType) {
            var _0x3772ea = _0x2f22f9('skins/desert/rattlesnake/rattlesnake_head.png'),
                _0x51451d = 0x1 * this.skinScale,
                _0x431c64;
            _0x3772ea && (ctx.save(), _0x431c64 = this.rad, ctx.drawImage(_0x3772ea, -_0x431c64 * _0x51451d, 1.2 * -_0x431c64 * _0x51451d, 0x2 * _0x431c64 * _0x51451d, 0x2 * _0x431c64 * _0x51451d), ctx.restore());
        }
        _0x431c64 = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x51451d = 0x2 != _0x14fca5 ? _0x93972d(_0x431c64, 0.1, 0.2, 0x2) : 0;
        _0x431c64 = 1.3 * this.rad;
        if (_0x3772ea = _0x2f22f9('skins/desert/rattlesnake/rattle.png')) {
            ctx.save();
            var _0x3c54f8 = -(-0 + _0x51451d) * _0x55d748(0x5),
                _0x51451d = 1.2 * this.skinScale;
            ctx.rotate(_0x55d748(-0) + _0x3c54f8);
            ctx.drawImage(_0x3772ea, -_0x431c64 * _0x51451d, 0.7 * -_0x431c64 * _0x51451d, 0x2 * _0x431c64 * _0x51451d, 0x2 * _0x431c64 * _0x51451d);
            ctx.restore();
        }
    } else this.biteStart = 0;
};
_0x40cb67.prototype.getAbilityInfo = function (_0x1701d3) {
    return {
        'abilName': 'Rattle!',
        'abilImg': 'skins/desert/rattlesnake/rattlesnake.png'
    };
};

function _0x40cb67() {
    _0x40cb67.superClass.call(this, o_player);
}
window.RattleSnake = _0x40cb67;
GameObjType.setCustomClassForGameObjType(_0x40cb67, o_player, _0x3fe455);
_0x5a621d = _0x3cfdc3;
_0x2a91c6 = AbillityObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x3cfdc3.prototype.updateZ = function () {
    this.z = 0x186a2;
};
_0x3cfdc3.prototype.customDraw = function (_0x5a7b7d) {
    ctx.save();
    if (_0x5a7b7d = _0x2f22f9('skins/desert/rattlesnake/circle.png')) {
        var _0x10b820 = (_0x1534e0 - this.spawnTime) / 0x3e8;
        rShift = 1.5 * Math.sin(0x2 * Math.PI / 0x2 * _0x10b820);
        _0x10b820 = _0x93972d(_0x10b820, 5.1, 0x1, 0x1);
        _0x10b820 = _0x1c8ba9(_0x10b820, 0, 0x1);
        ctx.globalAlpha = _0x10b820;
        _0x10b820 = 0.8 * this.rad;
        ctx.drawImage(_0x5a7b7d, 0x1 * -_0x10b820, 0x1 * -_0x10b820, 0x2 * _0x10b820, 0x2 * _0x10b820);
    }
    ctx.restore();
};

function _0x3cfdc3() {
    _0x3cfdc3.superClass.call(this);
}
window.SnakeRattle = _0x3cfdc3;
GameObjType.setCustomClassForGameObjType(_0x3cfdc3, o_abilityObj, _0x3b20c3);
_0x2a91c6 = Animal;
_0x61b1cd.prototype = Object.create(_0x2a91c6.prototype);
_0x61b1cd.prototype.constructor = _0x61b1cd;
_0x61b1cd.superClass = _0x2a91c6;
_0x61b1cd.prototype.getSkinFolder = function (_0x2eedb6) {
    return '/desert/vulture/'+this.animalSpecies+'/';
};
_0x61b1cd.prototype.getAbilityInfo = function (_0x1aae82) {
    _0x1aae82 = {
        'abilName': 'Fly/ Pickup Bones'
    };
    _0x1aae82.abilImg = this.getSkinFolder() + 'vulture.png';
    return _0x1aae82;
};
_0x61b1cd.prototype.animalInfo = function () {
    var infoO = {};

  infoO.aniName = "Vulture";
  switch (this.animalSpecies) {
    case 1:
      infoO.aniName = "Pakistan Vulture";
      break;
    case 100:
      infoO.aniName = "Vulgeist";
      break;

    case 204:
      infoO.aniName = "Acid Husk";
      break;

  }
  infoO.aniCol = "#FF9000";
  infoO.skinName = this.getSkinName();
  infoO.upgradeText =
    "UPGRADED to " +
    (this.animalSpecies == 1 ? "Rare " : "") + infoO.aniName +
    "!\nPress W to Grab/Drop bones" + (this.animalSpecies == 1 ? " and animals" : "") + " on other animals,\n (Hint: Use ability on hills to fly) \nTry Eating bones too!";
  return infoO;
};
_0x61b1cd.prototype.getSkinName = function () {
    var _0x562247 = this.getSkinFolder() + 'vulture';
    return _0x562247 = this.flag_flying && this.flag_usingAbility ? _0x562247 + 0x2 : _0x562247 + (0 == this.specType ? '' : this.specType);
};
_0x61b1cd.prototype.getHead = function (_0x19a625, _0x5e18e0) {
    return 'skins/' + this.getSkinFolder() + _0x19a625 + '_head1.png';
};
_0x61b1cd.prototype.getWing = function (_0x49c959, _0x3fe2a4, _0x4fb83d) {
    return 'skins/' + this.getSkinFolder() + _0x49c959 + '_wing' + _0x3fe2a4 + '.png';
};
_0x61b1cd.prototype.flaps = 0;
_0x61b1cd.prototype.flapsMod = 0x3;
_0x61b1cd.prototype.countFlap = !0;
_0x61b1cd.prototype.canFlap = 0x2 != _0x14fca5;
_0x61b1cd.prototype.resumeFlapT = 0;
_0x61b1cd.prototype.lastFlapFrame = 0;
_0x61b1cd.prototype.sF = -0x1;
_0x61b1cd.prototype.wF = 0x1;
_0x61b1cd.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        !this.canFlap && this.flag_flying && _0x1534e0 > this.resumeFlapT && (this.canFlap = !0);
        var _0x1abba6 = 0x1f4 / 0x154;
        ctx.save();
        var _0x1b9f84 = this.flag_flying ? 0x2d : 0x2f,
            _0x5a250c = this.flag_flying ? 0x5a : 0x2d,
            _0x570934 = this.flag_flying ? 0.2 : 0.001,
            _0x1e991e = this.flag_flying ? 2.5 : 2.3,
            _0x28d18d = this.flag_flying ? 2.2 : 2.7,
            _0x44cf1e = this.flag_flying ? 1.2 : 0x1,
            _0x4024e0 = this.flag_flying ? 0.35 : 0.2,
            _0x19401c = this.flag_flying ? '' : '2',
            _0x130434 = (_0x1534e0 - this.resumeFlapT) / 0x3e8,
            _0x4024e0 = this.canFlap ? _0x93972d(_0x130434, _0x44cf1e, _0x4024e0, 0x2) : this.birdNoAnimationFlyWingAngle;
        this.flag_flying && 0 > _0x4024e0 && this.countFlap ? (this.countFlap = !0x1, this.flaps++, 0 == this.flaps % this.flapsMod && (this.lastFlapFrame = _0x4024e0, this.canFlap = !0x1, this.resumeFlapT = +new Date() + 0x5dc)) : 0 < _0x4024e0 && !this.countFlap && (this.countFlap = !0);
        this.canFlap || (_0x4024e0 = this.lastFlapFrame);
        _0x1e991e += this.sF * _0x4024e0;
        _0x28d18d += this.wF * _0x4024e0;
        if (_0x130434 = _0x2f22f9(this.getWing('vulture', _0x19401c + 0x1, !0x1))) {
            ctx.save();
            var _0x51a3e8 = -(-_0x570934 + _0x4024e0) * _0x55d748(_0x5a250c),
                _0x44cf1e = 0.8 * this.rad;
            ctx.rotate(_0x55d748(_0x1b9f84) + _0x51a3e8);
            var _0x51a3e8 = this.rad,
                _0x2b53c3 = _0x44cf1e * _0x28d18d * 0.62,
                _0x44cf1e = _0x44cf1e * _0x1e991e;
            ctx.drawImage(_0x130434, 0 + -0.2 * _0x2b53c3, _0x51a3e8 + -1.7 * _0x44cf1e, _0x2b53c3, _0x44cf1e);
            ctx.restore();
        }
        if (_0x130434 = _0x2f22f9(this.getWing('vulture', _0x19401c + 0x2, !0x1))) ctx.save(), _0x51a3e8 = -(-_0x570934 + _0x4024e0) * _0x55d748(-_0x5a250c), _0x44cf1e = 0.8 * this.rad, ctx.rotate(_0x55d748(-_0x1b9f84) + _0x51a3e8), _0x51a3e8 = this.rad, _0x2b53c3 = _0x44cf1e * _0x28d18d * 0.62, _0x44cf1e *= _0x1e991e, ctx.drawImage(_0x130434, 0 + -0.8 * _0x2b53c3, _0x51a3e8 + -1.7 * _0x44cf1e, _0x2b53c3, _0x44cf1e), ctx.restore();
        ctx.restore();
        0 != this.specType && void 0 != this.specType && (_0x1b9f84 = _0x2f22f9(this.getHead('vulture', !0x1))) && (_0x44cf1e = this.rad, _0x5a250c = this.flag_flying ? (-_0x44cf1e + 0.4 * _0x44cf1e) * _0x1abba6 : (-_0x44cf1e + 0.1 * _0x44cf1e) * _0x1abba6, ctx.save(), ctx.drawImage(_0x1b9f84, -_0x44cf1e * _0x1abba6, _0x5a250c, 0x2 * _0x44cf1e * _0x1abba6, 0x2 * _0x44cf1e * _0x1abba6), ctx.restore());
    }
};

function _0x61b1cd() {
    _0x61b1cd.superClass.call(this, o_player);
    0 == this.resumeFlapT && (this.resumeFlapT = +new Date());
}
window.Vulture = _0x61b1cd;
GameObjType.setCustomClassForGameObjType(_0x61b1cd, o_player, _0x35fbe8);
_0x2a91c6 = GameObj;
_0x2fe945.prototype = Object.create(_0x2a91c6.prototype);
_0x2fe945.prototype.constructor = _0x2fe945;
_0x2fe945.superClass = _0x2a91c6;
_0x2fe945.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x2fe945.prototype.customDraw = function (_0xbba713) {
    if (_0xbba713 = _0x2f22f9('img/carcass/bone.png')) {
        ctx.save();
        var _0x959c2 = 0x1 * this.rad;
        ctx.rotate(0x2 * this.rPer * Math.PI);
        ctx.drawImage(_0xbba713, -_0x959c2, -_0x959c2, 0x2 * _0x959c2, 0x2 * _0x959c2);
        ctx.restore();
    }
};

function _0x2fe945() {
    _0x2fe945.superClass.call(this, o_bone);
}
window.Bone = _0x2fe945;
GameObjType.setCustomClassForGameObjType(_0x2fe945, o_bone);

//


var superClass = Animal;
Rudolph.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
Rudolph.prototype.constructor = Rudolph;
Rudolph.superClass = superClass; //'class' var

var z_rudolph = 100000;

Rudolph.prototype.updateZ = function () {
  // if (this.flag_flying)
  //   this.z = 100010 + this.rad + this.rowNumber;
  // else
  this.z = 1000 + this.rad + this.rowNumber;
  //this.z = 1008 + this.rad + this.rowNumber;
  if (this.flag_flying)
    this.z += z_rudolph;
};

Rudolph.prototype.calculateZIndex = function () {
  this.updateZ();

}

Rudolph.prototype.animalInfo = function () {
  var infoO = {};
  infoO.aniName = "Rudolph!";
  infoO.skinName = "santa/rudolph";
  infoO.upgradeText =
    "UPGRADED to Rudolph!\n Rudolph paws turn very well on ice!\n Press W to howl!";
  infoO.aniCol = "#6B6B6B";
  return infoO;
};

Rudolph.prototype.getAbilityInfo = function (abilT) {
  var ability = {};
  ability.abilName = "Howl!";
  ability.abilImg = 'abilities/Howl.svg';
  return ability;
};
//set custom skin name
Rudolph.prototype.getSkinName = function () {
  var skin = "";
  skin = "santa/" + (this.isRudolph ? "rudolph" : "deer");
  skin += this.specType == 0 ? "" : 1;
  return skin;
};

Rudolph.prototype.drawAnimalUnderSkinCircle = function (outlineCol, custom) {
  // if (custom === undefined)
  //   return;
  if (!this.flag_isGrabbed) {
    if (this.playerNum == 1) {
      outlineCol = "cyan";

    } else if (this.playerNum == 2) {
      outlineCol = "yellow";
    } else if (this.flag_eff_isOnSpiderWeb) {
      outlineCol = "white";
    }
    ctx.save();
    ctx.globalAlpha = this.isAnimalInside1v1Arena() ? 0.3 : this.idealOp;
    _0x110b78(0, 0, this.rad, outlineCol);
    ctx.restore();
  }
};

Rudolph.prototype.drawLights = function () {
  var treeSkin = "/skins/" + this.getSkinName();
  console.log(treeSkin);

  var theImg = this.getSkinImagePath(treeSkin);
  console.log(theImg);

  var iScale = this.skinScale;
  var rad = this.skinRad;
  // var theImg = this.getSkinImageObj(treeSkin);
  // if (theImg) {
  //   ctx.drawImage(
  //     theImg,
  //     -rad * iScale,
  //     -rad * iScale,
  //     2 * rad * iScale,
  //     2 * rad * iScale
  //   );

  // }
  // var theImg = this.getSkinImageObj(treeSkin);
  // if (theImg) {
  //   ctx.save();
  //   ctx.rotate(angle);
  //   // ctx.globalAlpha *= this.alpha;
  //   ctx.drawImage(theImg, -rad + shiftAm, -rad - shiftAm, 2 * rad, 2 * rad);
  //   ctx.restore();
  // } else {
  // // console.log(treeSkin)
  // // console.log("skin not found")
  // }
}



Rudolph.prototype.afterCustomDraw = function (batchDrawOutline) {
  if (this.isRudolph)
    this.drawLights();
  // ctx.save();
  // this.drawTranslate();
  // var outlineCol = this.getOutlineColor();
  // this.drawAnimalUnderSkinCircle(outlineCol, true);
  // ctx.restore();

  // var curve = -1;
  // ctx.save();
  // ctx.strokeStyle = "#b84831";
  // ctx.lineWidth = 4 * (this.curRad / this.startRad);;
  // ctx.globalAlpha = 1;
  // ctx.beginPath();

  // ctx.moveTo(this.rope1_x, this.rope1_y);
  // ctx.quadraticCurveTo(this.rope1_x, this.deerPos1_y - curve, this.deerPos1_x, this.deerPos1_y);
  // ctx.stroke();
  // ctx.restore();

  // ctx.save();
  // ctx.strokeStyle = "#b84831";
  // ctx.lineWidth = 4 * (this.curRad / this.startRad);;
  // ctx.globalAlpha = 1;
  // ctx.beginPath();

  // ctx.moveTo(this.rope2_x, this.rope2_y);
  // //ctx.lineTo(this.deerPos2_x, this.deerPos2_y);

  // //ctx.bezierCurveTo(this.rope2_x, this.deerPos2_y + curve, this.deerPos2_x, this.deerPos2_y + curve, this.deerPos2_x, this.deerPos2_y);
  // ctx.quadraticCurveTo(this.rope2_x, this.deerPos2_y - curve, this.deerPos2_x, this.deerPos2_y);


  // ctx.stroke();
  // ctx.restore();

  /////////////
  var curve = -1;
  // ctx.save();
  // ctx.strokeStyle = "#b84831";
  // ctx.lineWidth = 4 * (this.curRad / this.startRad);;
  // ctx.globalAlpha = 1;
  // ctx.beginPath();

  // ctx.moveTo(this.rope1_x, this.rope1_y);
  // ctx.quadraticCurveTo(this.rope1_x, this.deerPos1_y - curve, this.deerPos1_x, this.deerPos1_y);
  // ctx.stroke();
  // ctx.restore();

  var color = "#b84831";
  var lineWidth = 4 * (this.curRad / this.startRad);
  var alpha = 1;
  this.drawRope(this.rope1_x, this.rope1_y, this.deerPos1_x, this.deerPos1_y, color, lineWidth, curve, alpha);
  this.drawRope(this.rope2_x, this.rope2_y, this.deerPos2_x, this.deerPos2_y, color, lineWidth, curve, alpha);

  color = "white";
  lineWidth = 1 * (this.curRad / this.startRad);
  alpha = 0.3;
  this.drawRope(this.rope1_x, this.rope1_y, this.deerPos1_x, this.deerPos1_y, color, lineWidth, curve, alpha);
  this.drawRope(this.rope2_x, this.rope2_y, this.deerPos2_x, this.deerPos2_y, color, lineWidth, curve, alpha);

  // ctx.save();
  // ctx.strokeStyle = "#b84831";
  // ctx.lineWidth = 4 * (this.curRad / this.startRad);;
  // ctx.globalAlpha = 1;
  // ctx.beginPath();

  // ctx.moveTo(this.rope2_x, this.rope2_y);
  // //ctx.lineTo(this.deerPos2_x, this.deerPos2_y);

  // //ctx.bezierCurveTo(this.rope2_x, this.deerPos2_y + curve, this.deerPos2_x, this.deerPos2_y + curve, this.deerPos2_x, this.deerPos2_y);
  // ctx.quadraticCurveTo(this.rope2_x, this.deerPos2_y - curve, this.deerPos2_x, this.deerPos2_y);



  // ctx.stroke();
  // ctx.restore();



};
Rudolph.prototype.drawRope = function (x1, y1, x2, y2, color, lineWidth, curve, alpha) {
  ctx.save();
  ctx.strokeStyle = color;
  ctx.lineWidth = lineWidth * (this.curRad / this.startRad);;
  ctx.globalAlpha = alpha;
  ctx.beginPath();
  ctx.moveTo(x1, y1);
  ctx.quadraticCurveTo(x1, y2 - curve, x2, y2);
  ctx.stroke();
  ctx.restore();
}

Rudolph.prototype.setOpacityForFlyingAnimals = function (batchDrawOutline) {

  if (!(this.id == myPlayerID || this.santaID == myPlayerID)) {
    this.idealOp = 0.6;
  }
}
Rudolph.prototype.onLerpUpdate = function (a) {
  this.rope1_x = a * (this.rope1_nx - this.rope1_ox) + this.rope1_ox;
  this.rope1_y = a * (this.rope1_ny - this.rope1_oy) + this.rope1_oy;
  this.deerPos1_x = a * (this.deerpos1_nx - this.deerpos1_ox) + this.deerpos1_ox;
  this.deerPos1_y = a * (this.deerpos1_ny - this.deerpos1_oy) + this.deerpos1_oy;

  this.rope2_x = a * (this.rope2_nx - this.rope2_ox) + this.rope2_ox;
  this.rope2_y = a * (this.rope2_ny - this.rope2_oy) + this.rope2_oy;
  this.deerPos2_x = a * (this.deerpos2_nx - this.deerpos2_ox) + this.deerpos2_ox;
  this.deerPos2_y = a * (this.deerpos2_ny - this.deerpos2_oy) + this.deerpos2_oy;
};

//custom data for this class (must be matched by server-side write of this data!)
//custom data for this class (must be matched by server-side write of this data!)
Rudolph.prototype.readCustomData_onUpdate = function (msg) {
  Rudolph.superClass.prototype.readCustomData_onUpdate.call(this, msg); //call superclass version of this method
  this.readInfo(msg);

  // if (this.isRudolph) {
  //   this.lights = msg.readUInt8();
  // }
};

//custom data for this class (must be matched by server-side write of this data!)
Rudolph.prototype.readCustomData_onNewlyVisible = function (msg) {
  Rudolph.superClass.prototype.readCustomData_onNewlyVisible.call(
    this,
    msg
  ); //call superclass version of this method
  this.santaID = msg.readUInt32();
  this.rowNumber = msg.readUInt8();
  this.isRudolph = msg.readUInt8() == 1;
  this.startRad = msg.readUInt16() / 100.0;
  this.readInfo(msg);
  this.rope1_nx = this.rope1_ox = this.rope1_x = this.x;
  this.rope1_ny = this.rope1_oy = this.rope1_y = this.y;

  this.deerpos1_ox = this.deerPos1_x = this.deerpos1_nx = this.x;
  this.deerpos1_oy = this.deerPos1_y = this.deerpos1_ny = this.y;

  this.rope2_nx = this.rope2_ox = this.rope2_x = this.x;
  this.rope2_ny = this.rope2_oy = this.rope2_y = this.y;

  this.deerpos2_ox = this.deerPos2_x = this.deerpos2_nx = this.x;
  this.deerpos2_oy = this.deerPos2_y = this.deerpos2_ny = this.y;

};
Rudolph.prototype.rope1_x = 0;
Rudolph.prototype.rope1_y = 0;
Rudolph.prototype.deerPos1_x = 0;
Rudolph.prototype.deerPos1_y = 0;

Rudolph.prototype.rope2_x = 0;
Rudolph.prototype.rope2_y = 0;
Rudolph.prototype.deerPos2_x = 0;
Rudolph.prototype.deerPos2_y = 0;

Rudolph.prototype.webState = 0;
Rudolph.prototype.readInfo = function (msg) {
  this.curRad = msg.readUInt16() / 100.0;
  // if (this.webState == 0) {
  //   this.rope1_nx = this.rope1_ox = this.rope1_x = this.x;
  //   this.rope1_ny = this.rope1_oy = this.rope1_y = this.y;

  //   this.deerpos1_ox = this.deerPos1_x = this.deerpos1_nx = this.x;
  //   this.deerpos1_oy = this.deerPos1_y = this.deerpos1_ny = this.y;
  // } else if (this.webState > 0) {
  var rope1_nw_x = msg.readUInt16() / 4.0;
  var rope1_nw_y = msg.readUInt16() / 4.0;
  var deerpos1_nw_x = msg.readUInt16() / 4.0;
  var deerpos1_nw_y = msg.readUInt16() / 4.0;


  this.rope1_ox = this.rope1_x;
  this.rope1_oy = this.rope1_y;
  this.rope1_nx = rope1_nw_x;
  this.rope1_ny = rope1_nw_y;


  this.deerpos1_ox = this.deerPos1_x;
  this.deerpos1_oy = this.deerPos1_y;
  this.deerpos1_nx = deerpos1_nw_x;
  this.deerpos1_ny = deerpos1_nw_y;

  var rope2_nw_x = msg.readUInt16() / 4.0;
  var rope2_nw_y = msg.readUInt16() / 4.0;
  var deerpos2_nw_x = msg.readUInt16() / 4.0;
  var deerpos2_nw_y = msg.readUInt16() / 4.0;


  this.rope2_ox = this.rope2_x;
  this.rope2_oy = this.rope2_y;
  this.rope2_nx = rope2_nw_x;
  this.rope2_ny = rope2_nw_y;


  this.deerpos2_ox = this.deerPos2_x;
  this.deerpos2_oy = this.deerPos2_y;
  this.deerpos2_nx = deerpos2_nw_x;
  this.deerpos2_ny = deerpos2_nw_y;
  // }

};


function Rudolph() {
  Rudolph.superClass.call(this, 2);
}
window.Rudolph = Rudolph;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(Rudolph, 2, 103);

//

_0x2a91c6 = Animal;
_0x3b365c.prototype = Object.create(_0x2a91c6.prototype);
_0x3b365c.prototype.constructor = _0x3b365c;
_0x3b365c.superClass = _0x2a91c6;
_0x3b365c.prototype.animalInfo = function () {
    var _0x3df3fb = {
        'aniName': 'Bison',
        'aniCol': '#FF9000',
        'skinName': 'desert/bison/bison'
    };
    _0x3df3fb.upgradeText = 'UPGRADED to ' + _0x3df3fb.aniName + `!\nHold W to charge and toss opponent in air.`;
    return _0x3df3fb;
};
_0x3b365c.prototype.getAbilityInfo = function (_0x8f062d) {
    return {
        'abilName': 'Gores!',
        'abilImg': 'skins/desert/bison/bison_ability.png'
    };
};
_0x3b365c.prototype.getSkinName = function () {
    return 'desert/bison/bison' + (0 == this.specType ? '' : 0x1);
};
_0x3b365c.prototype.drawUnderSkinImgOutline = function () {
    _0x3b365c.superClass.prototype.drawUnderSkinImgOutline.call(this);
    this.flag_usingAbility && this.isHitingAnimal && this.showBackLeg();
};
_0x3b365c.prototype.isHitingAnimal = !0x1;
_0x3b365c.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        if (0 != this.specType && void 0 != this.specType) {
            this.isHitingAnimal || 0x2 != this.specType || (this.isHitingAnimal = !0);
            var _0x32f983 = _0x2f22f9('skins/desert/bison/body_front.png'),
                _0x2129fd = 0x1 * this.skinScale,
                _0x103cdb;
            _0x32f983 && (frame = 0, ctx.save(), _0x103cdb = this.rad, ctx.drawImage(_0x32f983, -_0x103cdb * _0x2129fd, -_0x103cdb * _0x2129fd, 0x2 * _0x103cdb * _0x2129fd, 0x2 * _0x103cdb * _0x2129fd), ctx.restore());
            _0x32f983 = _0x2f22f9('skins/desert/bison/bison_head' + this.specType + '.png');
            _0x2129fd = 1.01 * this.skinScale;
            _0x32f983 && (frame = 0, ctx.save(), _0x103cdb = this.rad, ctx.drawImage(_0x32f983, -_0x103cdb * _0x2129fd, (-_0x103cdb + 0.2 * _0x103cdb) * _0x2129fd + frame, 0x2 * _0x103cdb * _0x2129fd, 0x2 * _0x103cdb * _0x2129fd), ctx.restore());
        }
    } else this.legHeightF = this.legYAnchorF = 0, this.isHitingAnimal = !0x1;
};
_0x3b365c.prototype.legYAnchorF = 2.3;
_0x3b365c.prototype.legStretchW = 1.3;
_0x3b365c.prototype.legStretchH = 0x1;
_0x3b365c.prototype.legHeightF = 0x14;
_0x3b365c.prototype.showBackLeg = function () {
    var _0xa2f106 = _0x93972d((_0x1534e0 - this.spawnTime) / 0x3e8, 0.3, 0x1, 0.5),
        _0x131e42 = 'front';
    0.5 >= _0xa2f106 && 0.1 < _0xa2f106 ? (_0x131e42 = 'front', this.legYAnchorF = 0x1, this.legHeightF = 0x14) : 0.5 < _0xa2f106 && (_0x131e42 = 'back', this.legYAnchorF = 2.3, this.legHeightF = -0x5);
    ctx.save();
    var _0x4c306c = ctx.globalAlpha;
    ctx.globalAlpha = 0.1 * _0x4c306c;
    _0x110b78(0, 0, this.rad, '#755A2A');
    ctx.globalAlpha = 0x1 * _0x4c306c;
    if (_0x131e42 = _0x2f22f9('skins/desert/bison/' + _0x131e42 + '_legs.png')) {
        var _0x51fcb1 = 0.6 * this.rad,
            _0x4c306c = 0x2 * _0x51fcb1 * this.legStretchW,
            _0xa2f106 = 0x2 * _0x51fcb1 * _0xa2f106;
        ctx.drawImage(_0x131e42, 0 + -0.5 * _0x4c306c, this.rad + -0.95 * (_0xa2f106 + this.legHeightF) * this.legYAnchorF, _0x4c306c, _0xa2f106 * this.legStretchH);
    }
    ctx.restore();
};

function _0x3b365c() {
    _0x3b365c.superClass.call(this, o_player);
}
window.Bison = _0x3b365c;
GameObjType.setCustomClassForGameObjType(_0x3b365c, o_player, _0x2c0737);
_0x2a91c6 = Animal;
KomodoDragon.prototype = Object.create(_0x2a91c6.prototype);
KomodoDragon.prototype.constructor = KomodoDragon;
KomodoDragon.superClass = _0x2a91c6;
KomodoDragon.prototype.animalInfo = function () {
    var _0x2ebafe = {};
    switch (this.animalSpecies) {
    case 0:
        _0x2ebafe.aniName = 'Komodo Dragon';
        break;
    case 0x1:
        _0x2ebafe.aniName = 'Golden Komodo!';
        break;
    case 0x2:
        _0x2ebafe.aniName = 'Night Komodo!';
    }
    _0x2ebafe.aniCol = '#FF9000';
    _0x2ebafe.skinName = 'desert/komododragon/' + this.animalSpecies + '/komododragon';
    _0x2ebafe.upgradeText = 'UPGRADED to ' + _0x2ebafe.aniName + '!\x0a' + _0x2ebafe.aniName + ' have very poisonous bite. Press W to bite! Also eat bones.';
    return _0x2ebafe;
};
KomodoDragon.prototype.getAbilityInfo = function (_0x5aa9f0) {
    _0x5aa9f0 = {
        'abilName': `Poison Bite\n(Sweat Prey)`
    };
    _0x5aa9f0.abilImg = 'skins/desert/komododragon/' + this.animalSpecies + '/komododragon_ability.png';
    return _0x5aa9f0;
};
KomodoDragon.prototype.getSkinName = function () {
    var _0x5a439e = 'desert/komododragon/' + this.animalSpecies + '/komododragon';
    if(this.onAbility == 1) _0x5a439e = 'desert/komododragon/' + this.animalSpecies + '/komododragon1';
    if(this.onAbility == 0) _0x5a439e = 'desert/komododragon/' + this.animalSpecies + '/komododragon';

    return _0x5a439e += 0 == this.specType ? '' : this.specType;
};
KomodoDragon.prototype.updateZ = function () {
    this.flag_eff_grabbedByFlytrap ? this.z = 0x44c + this.rad : this.flag_usingAbility && !this.flag_underWater ? this.z = 0x4b0 + this.rad : this.flag_flying || this.flag_eff_tossedInAir ? (this.z = 0x2710, this.z = this.flag_isGrabbed ? this.z - this.rad : this.z + this.rad) : this.z = this.rad;
};
KomodoDragon.prototype.straightTongueOffsetY = -0.45;
KomodoDragon.prototype.straightTongueScaleF = 1.8;
KomodoDragon.prototype.drawUnderSkinImg = function () {
    if (0 == this.specType && (this.setSkinScale(), !(+new Date() < this.spawnTime + 0x1388 || this.flag_usingAbility || this.wasLicking) && +new Date() > this.nextShowT)) {
        var _0xa315f2 = this.skinScale * this.straightTongueScaleF,
            _0x6d3a75 = this.skinRad,
            _0x519d4e = _0x2f22f9('skins/desert/komododragon/' + this.animalSpecies + '/tongue.png'),
            _0x175b7c = _0x93972d((_0x1534e0 - this.spawnTime) / 0x3e8, 1.2, 0x8, 0.5);
        _0x519d4e && ctx.drawImage(_0x519d4e, -_0x6d3a75 * _0xa315f2, (-_0x6d3a75 + _0x6d3a75 * this.straightTongueOffsetY) * _0xa315f2 + _0x175b7c, 0x2 * _0x6d3a75 * _0xa315f2, 0x2 * _0x6d3a75 * _0xa315f2);
    }
};
KomodoDragon.prototype.tongueAnimationDur = 0x1;
KomodoDragon.prototype.tongueScaleF = 1.5;
KomodoDragon.prototype.tongueAncherY = -0.21;
KomodoDragon.prototype.showTongue = !0;
KomodoDragon.prototype.nextShowT = 0;
KomodoDragon.prototype.lastLickSide = 0;
KomodoDragon.prototype.wasLicking = !0x1;
KomodoDragon.prototype.isLicking = !0x1;
KomodoDragon.prototype.lickFaceOffsetY = -0.3;
KomodoDragon.prototype.biteStart = 0;
KomodoDragon.prototype.onAbility;

var _0x5f4c8c = -0.15,
    _0x3bc83e = -0.2,
    _0x10d881 = 0x1;
KomodoDragon.prototype.drawSkinCustomization = function () {
    this.setSkinScale();
    if (!this.flag_underWater) {
        var _0x599e08 = 'skins/desert/komododragon/' + this.animalSpecies + '/komododragon_tail.png';
        if (_0x599e08 = _0x2f22f9(_0x599e08)) {
            var _0x1a0ecf = this.skinScale * _0x10d881,
                _0x1e3a44 = this.skinRad;
            ctx.drawImage(_0x599e08, -_0x1e3a44 * _0x1a0ecf, (-_0x1e3a44 + _0x1e3a44 * _0x3bc83e) * _0x1a0ecf, 0x2 * _0x1e3a44 * _0x1a0ecf, 0x2 * _0x1e3a44 * _0x1a0ecf);
        }
    }
    if (this.onAbility) {
       
            if (_0x599e08 = _0x2f22f9('skins/desert/komododragon/' + this.animalSpecies + '/komododragon_neck.png')) {
                var _0x485a2c = (_0x1534e0 - this.biteStart) / 0x3e8,
                    _0x50fefe = _0x93972d(_0x485a2c, 0x1, 0x5, 0x1);
                ctx.save();
                _0x1e3a44 = this.rad;
                _0x1a0ecf = 0x1 * this.skinScale;
                ctx.drawImage(_0x599e08, -_0x1e3a44 * _0x1a0ecf, (-_0x1e3a44 + -0.05 * _0x1e3a44) * _0x1a0ecf + _0x50fefe, 0x2 * _0x1e3a44 * _0x1a0ecf, 0x2 * _0x1e3a44 * _0x1a0ecf);
                ctx.restore();
            }
            _0x599e08 = _0x2f22f9('skins/desert/komododragon/' + this.animalSpecies + '/komododragon_attack.png');
            _0x1a0ecf = 0x1 * this.skinScale;
            _0x1e3a44 = this.skinRad;
            _0x50fefe = _0x93972d(_0x485a2c, 0.9, 0xc, 0x1);
            _0x599e08 && (ctx.save(), ctx.drawImage(_0x599e08, -_0x1e3a44 * _0x1a0ecf, -_0x1e3a44 * _0x1a0ecf + _0x50fefe, 0x2 * _0x1e3a44 * _0x1a0ecf, 0x2 * _0x1e3a44 * _0x1a0ecf), ctx.restore());
            ctx.save();
            _0x599e08 = 'skins/desert/komododragon/' + this.animalSpecies + '/licked_face.png';
            if (_0x599e08 = _0x2f22f9(_0x599e08)) _0x485a2c = this.lickedAmt / 0x64, ctx.globalAlpha = _0x485a2c, ctx.drawImage(_0x599e08, -_0x1e3a44 * _0x1a0ecf, (-_0x1e3a44 + _0x1e3a44 * _0x5f4c8c) * _0x1a0ecf + _0x50fefe, 0x2 * _0x1e3a44 * _0x1a0ecf, 0x2 * _0x1e3a44 * _0x1a0ecf);
            ctx.restore();
        
    } else {
        this.biteStart = 0;
        if (!this.flag_underWater) {
            ctx.save();
            _0x599e08 = 'skins/desert/komododragon/' + this.animalSpecies + '/licked_face.png';
            if (_0x599e08 = _0x2f22f9(_0x599e08)) _0x485a2c = this.lickedAmt / 0x64, ctx.globalAlpha = _0x485a2c, _0x1a0ecf = this.skinScale, _0x1e3a44 = this.skinRad, ctx.drawImage(_0x599e08, -_0x1e3a44 * _0x1a0ecf, -_0x1e3a44 * _0x1a0ecf, 0x2 * _0x1e3a44 * _0x1a0ecf, 0x2 * _0x1e3a44 * _0x1a0ecf);
            ctx.restore();

       
        }
        0 == this.specType && (!this.wasLicking && this.isLicking && (this.wasLicking = !0), this.wasLicking && (+new Date() > this.nextShowT && !this.showTongue && (this.showTongue = !0), this.showTongue && (_0x485a2c = (_0x1534e0 - this.nextShowT) / 0x3e8, _0x50fefe = _0x93972d(_0x485a2c, this.tongueAnimationDur, 0xd, 0.5), _0x50fefe = Math.round(_0x50fefe), !(0 > _0x50fefe) && (0xd == _0x50fefe && (this.nextShowT = +new Date() + 0xbb8 + 0x1388 * Math.random(), this.showTongue = !0x1, this.lastLickSide = this.lickSide, this.wasLicking = !0x1), this.showTongue && (_0x599e08 = 'skins/desert/komododragon/' + this.animalSpecies + '/tongue' + _0x50fefe + '.png', _0x599e08 = _0x2f22f9(_0x599e08)))))) && (_0x1a0ecf = this.skinScale * this.tongueScaleF, _0x1e3a44 = this.skinRad, ctx.save(), 0x1 == this.lastLickSide && ctx.scale(-0x1, 0x1), ctx.drawImage(_0x599e08, -_0x1e3a44 * _0x1a0ecf, (-_0x1e3a44 + _0x1e3a44 * this.tongueAncherY) * _0x1a0ecf, 0x2 * _0x1e3a44 * _0x1a0ecf, 0x2 * _0x1e3a44 * _0x1a0ecf), ctx.restore());
    }
};
KomodoDragon.prototype.lickSide = 0;
KomodoDragon.prototype.lickedAmt = 0;
KomodoDragon.prototype.readCustomData_onNewlyVisible = function (_0x1a0dbd) {
    KomodoDragon.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1a0dbd);
    this.readInfo(_0x1a0dbd);
};
KomodoDragon.prototype.readCustomData_onUpdate = function (_0x1a7fe9) {
    KomodoDragon.superClass.prototype.readCustomData_onUpdate.call(this, _0x1a7fe9);
    this.readInfo(_0x1a7fe9);
};
KomodoDragon.prototype.readInfo = function (_0x1963f7) {
    var _0x41a440 = 0x1 == _0x1963f7.readUInt8();
    !this.isLicking && _0x41a440 ? this.nextShowT = +new Date() + 0xbb8 : this.isLicking && !_0x41a440 && (this.nextShowT = +new Date() + 0xbb8);
    this.isLicking = _0x41a440;
    this.lickSide = _0x1963f7.readUInt8();
    this.lickedAmt = _0x1963f7.readUInt8();
    this.onAbility = _0x1963f7.readUInt8()
};

function KomodoDragon() {
    KomodoDragon.superClass.call(this, o_player);
}
window.KomodoDragon = KomodoDragon;
GameObjType.setCustomClassForGameObjType(KomodoDragon, o_player, _0x5deb7a);
_0x2a91c6 = GameObj;
_0x50dd13.prototype = Object.create(_0x2a91c6.prototype);
_0x50dd13.prototype.constructor = _0x50dd13;
_0x50dd13.superClass = _0x2a91c6;
_0x50dd13.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x50dd13.prototype.customDraw = function (_0x5bcd5f) {
    ctx.save();
    this.drawOutlinedCircle('', _0x68d4da);
    ctx.restore();
};

function _0x50dd13() {
    _0x50dd13.superClass.call(this, o_sweatPoison);
}
window.SweatPoison = _0x50dd13;
GameObjType.setCustomClassForGameObjType(_0x50dd13, o_sweatPoison);
_0x2a91c6 = GameObj;
_0x968ec0.prototype = Object.create(_0x2a91c6.prototype);
_0x968ec0.prototype.constructor = _0x968ec0;
_0x968ec0.superClass = _0x2a91c6;
_0x968ec0.prototype.updateZ = function () {
    this.z = -0x9a;
};
_0x968ec0.prototype.customDraw = function (_0x101a8d) {
    ctx.save();
    this.rPer = 0;
    this.drawOutlinedCircle('', _0x68d4da);
    0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
    _0x101a8d = 0x4 * Math.sin(0x2 * Math.PI / 0x7 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
    ctx.beginPath();
    ctx.arc(0, 0, Math.max(0, this.rad - 0x1 + _0x101a8d), 0, 0x2 * Math.PI);
    ctx.fill();
    0x2 != _0x14fca5 && (ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - 0x1 + _0x101a8d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.45 * this.rad, 0.45 * -this.rad + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x101a8d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x101a8d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x101a8d), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x101a8d), 0, 0x2 * Math.PI), ctx.fill(), 0x32 < this.rad && (ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0xa, 0, 0x2 * Math.PI), ctx.fill()));
    ctx.restore();
};

function _0x968ec0() {
    _0x968ec0.superClass.call(this, o_poisonPool);
}
window.PoisonPool = _0x968ec0;
GameObjType.setCustomClassForGameObjType(_0x968ec0, o_poisonPool);
_0x2a91c6 = Animal;
GiantScorpionAnimal.prototype = Object.create(_0x2a91c6.prototype);
GiantScorpionAnimal.prototype.constructor = GiantScorpionAnimal;
GiantScorpionAnimal.superClass = _0x2a91c6;
GiantScorpionAnimal.prototype.updateZ = function () {
    this.z = this.flag_underWater ? -0x64 : this.flag_isInArena ? 0x2710 + this.rad : 0x4b0 + this.rad;
};
GiantScorpionAnimal.prototype.animalInfo = function () {
    var _0x2f8be1 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x2f8be1.aniName = 'Giant Scorpion';
        break;
    case 0x1:
        _0x2f8be1.aniName = 'Golden Scorpion';
        break;
    case 0x2:
        _0x2f8be1.aniName = 'Carnelian Scorpion';
    }
    _0x2f8be1.aniCol = '#FF9000';
    _0x2f8be1.skinName = 'scorpion';
    _0x2f8be1.upgradeText = 'UPGRADED to ' + _0x2f8be1.aniName + `!\nSting and Shiver your prey to death.\n(Press W to Sting)`;
    return _0x2f8be1;
};
GiantScorpionAnimal.prototype.getAbilityInfo = function (_0x3da361) {
    _0x3da361 = {
        'abilName': `Sting!\n(Shivers Prey)`
    };
    _0x3da361.abilImg = 'skins/desert/scorpion/' + this.animalSpecies + '/scorpion_ability.png';
    return _0x3da361;
};
GiantScorpionAnimal.prototype.getSkinName = function () {
    var _0x1c4c31 = 'desert/scorpion/' + this.animalSpecies + '/scorpion';
    return _0x1c4c31 += 0 == this.specType ? '' : this.specType;
};
GiantScorpionAnimal.prototype.stingerScaleF = 0.7;
GiantScorpionAnimal.prototype.stingerOffsetY = -0.6;
GiantScorpionAnimal.prototype.poison = 0x32;
GiantScorpionAnimal.prototype.clawAnimation = null;
GiantScorpionAnimal.prototype.stingAnimation = null;
GiantScorpionAnimal.prototype.stingerTailNormal = null;
GiantScorpionAnimal.prototype.stingerTail = null;
GiantScorpionAnimal.prototype.stingerAttack = null;
GiantScorpionAnimal.prototype.stingerAttackFull = null;
GiantScorpionAnimal.prototype.stingerNormal = null;
GiantScorpionAnimal.prototype.stingerNormalFull = null;
GiantScorpionAnimal.prototype.isUsingAbility = !0x1;
GiantScorpionAnimal.prototype.drawSkinCustomization = function () {
    this.flag_usingAbility || (this.stingAnimation = this.clawAnimation = null, this.isUsingAbility = !0x1);
    !this.isUsingAbility && this.flag_eff_aniInClaws && (this.isUsingAbility = !0, this.stingAnimation = null);
    this.isUsingAbility && (null == this.stingAnimation && (this.stingAnimation = new _0x1cbd2d(this, 0x1, _0x1cbd2d.bow, {
        'v1': 0x5
    }), this.stingAnimation.onFrameEntered = function (_0x2e2175) {
        ctx.save();
        var _0x1f8bce = this.forObj.skinScale * this.forObj.stingerScaleF,
            _0x4ea8b9 = this.forObj.rad;
        ctx.drawImage(this.forObj.stingerTailAttack, -_0x4ea8b9 * _0x1f8bce, (-_0x4ea8b9 + _0x4ea8b9 * this.forObj.stingerOffsetY) * _0x1f8bce, 0x2 * _0x4ea8b9 * _0x1f8bce, 0x2 * (_0x4ea8b9 + _0x4ea8b9 * _0x2e2175) * _0x1f8bce);
        ctx.drawImage(this.forObj.stingerTail, -_0x4ea8b9 * _0x1f8bce, (-_0x4ea8b9 + _0x4ea8b9 * _0x2e2175) * _0x1f8bce, 0x2 * _0x4ea8b9 * _0x1f8bce, 0x2 * _0x4ea8b9 * _0x1f8bce);
        ctx.drawImage(this.forObj.stingerAttack, -_0x4ea8b9 * _0x1f8bce, (-_0x4ea8b9 + _0x4ea8b9 * _0x2e2175) * _0x1f8bce, 0x2 * _0x4ea8b9 * _0x1f8bce, 0x2 * _0x4ea8b9 * _0x1f8bce);
        var _0xef81b = _0x93972d((_0x1534e0 - this.spawnTime) / 0x3e8, 0x5, 0x1, 0x1);
        ctx.globalAlpha = Math.max(0, _0xef81b) * Math.max(0, this.poison / 0x64);
        ctx.drawImage(this.forObj.stingerAttackFull, -_0x4ea8b9 * _0x1f8bce, (-_0x4ea8b9 + _0x4ea8b9 * _0x2e2175) * _0x1f8bce, 0x2 * _0x4ea8b9 * _0x1f8bce, 0x2 * _0x4ea8b9 * _0x1f8bce);
        ctx.restore();
    }), this.stingAnimation && this.stingAnimation.run());
    if ((null == this.stingAnimation || this.stingAnimation.hasStopped) && !this.flag_underWater && null != this.stingerTailNormal && null != this.stingerNormalFull) {
        var _0xf40c90 = this.skinScale * this.stingerScaleF,
            _0xb98e81 = this.skinRad,
            _0x1434c7 = (_0x1534e0 - this.spawnTime) / 0x3e8,
            _0x19fbb3 = _0x93972d(_0x1434c7, 1.5, 0x3, 0x2),
            _0x250da0 = _0x93972d(_0x1434c7, 1.5, 0x1, 0x2);
        ctx.save();
        _0xb98e81 = this.rad - 0.5 * _0x19fbb3;
        ctx.drawImage(this.stingerTailNormal, -_0xb98e81 * _0xf40c90, (-_0xb98e81 + _0xb98e81 * this.stingerOffsetY) * _0xf40c90 + _0x19fbb3 * -_0x250da0, 0x2 * _0xb98e81 * _0xf40c90, 0x2 * _0xb98e81 * _0xf40c90);
        _0x1434c7 = (_0x1534e0 - this.spawnTime) / 0x3e8;
        _0x1434c7 = _0x93972d(_0x1434c7, 0x5, 0x1, 0x1);
        ctx.globalAlpha = Math.max(0, _0x1434c7) * Math.max(0, this.poison / 0x64);
        ctx.drawImage(this.stingerNormalFull, -_0xb98e81 * _0xf40c90, (-_0xb98e81 + _0xb98e81 * this.stingerOffsetY) * _0xf40c90 + _0x19fbb3 * -_0x250da0, 0x2 * _0xb98e81 * _0xf40c90, 0x2 * _0xb98e81 * _0xf40c90);
        ctx.restore();
    }
};
GiantScorpionAnimal.prototype.tailOffsetY = -0.25;
GiantScorpionAnimal.prototype.tailScaleF = 1.2;
var _0x323909 = 0x4,
    _0x15e50a = 0.1;
GiantScorpionAnimal.prototype.drawUnderSkinImg = function () {
    var _0x59ac0b = _0x2f22f9('skins/desert/scorpion/' + this.animalSpecies + '/tail_back.png');
    if (_0x59ac0b) {
        var _0x4a52cb = 0;
        this.stingAnimation && 0.5 > this.stingAnimation.frame && (_0x4a52cb = 0.3 * -this.stingAnimation.frame);
        var _0x16c99f = this.skinScale * this.tailScaleF,
            _0x29ca64 = this.skinRad;
        ctx.drawImage(_0x59ac0b, -_0x29ca64 * _0x16c99f, (-_0x29ca64 + _0x29ca64 * this.tailOffsetY) * _0x16c99f, 0x2 * _0x29ca64 * _0x16c99f, 0x2 * (_0x29ca64 + _0x29ca64 * _0x4a52cb) * _0x16c99f);
    }
    this.flag_usingAbility && !this.flag_underWater && (null == this.clawAnimation && (this.clawAnimation = new _0x1cbd2d(this, 0.9, _0x1cbd2d.bow, {
        'v1': _0x323909
    }), this.clawAnimation.keepLastFrame = !0, this.clawAnimation.onFrameEntered = function (_0x6e47b5) {
        var _0x4a52cb = 0;
        0.5 > _0x6e47b5 && (_0x4a52cb = -_0x6e47b5);
        _0x6e47b5 = 'skins/desert/scorpion/' + this.forObj.animalSpecies + '/arms.png';
        this.forObj.flag_eff_aniInClaws && (_0x6e47b5 = 'skins/desert/scorpion/' + this.forObj.animalSpecies + '/arms-grabbed.png');
        if (_0x6e47b5 = _0x2f22f9(_0x6e47b5)) {
            var _0x16c99f = this.forObj.skinScale * this.forObj.tailScaleF,
                _0x29ca64 = this.forObj.skinRad;
            !this.hasStopped && 0.75 > this.timePassed ? (_0x15e50a = _0x4a52cb, ctx.drawImage(_0x6e47b5, -_0x29ca64 * _0x16c99f, (-_0x29ca64 + _0x29ca64 * _0x4a52cb) * _0x16c99f, 0x2 * _0x29ca64 * _0x16c99f, 0x2 * _0x29ca64 * _0x16c99f)) : ctx.drawImage(_0x6e47b5, -_0x29ca64 * _0x16c99f, (-_0x29ca64 + _0x29ca64 * _0x15e50a) * _0x16c99f, 0x2 * _0x29ca64 * _0x16c99f, 0x2 * _0x29ca64 * _0x16c99f);
        }
    }), null != this.clawAnimation && this.clawAnimation.run());
};
GiantScorpionAnimal.prototype.readCustomData_onNewlyVisible = function (_0x31a207) {
    GiantScorpionAnimal.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x31a207);
    this.readInfo(_0x31a207);
};
GiantScorpionAnimal.prototype.readCustomData_onUpdate = function (_0x54271b) {
    GiantScorpionAnimal.superClass.prototype.readCustomData_onUpdate.call(this, _0x54271b);
    this.readInfo(_0x54271b);
};
GiantScorpionAnimal.prototype.readInfo = function (_0x2795f4) {
    this.poison = _0x2795f4.readUInt8();
};

function GiantScorpionAnimal() {
    GiantScorpionAnimal.superClass.call(this, o_player);
}
GiantScorpionAnimal.prototype.preLoad = function () {
    _0x2f22f9('skins/desert/scorpion/' + this.animalSpecies + '/scorpion1.png');
    this.stingerTailNormal = _0x2f22f9('skins/desert/scorpion/' + this.animalSpecies + '/stinger_normal.png');
    this.stingerTail = _0x2f22f9('skins/desert/scorpion/' + this.animalSpecies + '/stinger_tail.png');
    this.stingerTailAttack = _0x2f22f9('skins/desert/scorpion/' + this.animalSpecies + '/attack_tail.png');
    this.stingerAttack = _0x2f22f9('skins/desert/scorpion/' + this.animalSpecies + '/attack_stinger_dull.png');
    this.stingerAttackFull = _0x2f22f9('skins/desert/scorpion/' + this.animalSpecies + '/attack_stinger_full.png');
    this.stingerNormal = _0x2f22f9('skins/desert/scorpion/' + this.animalSpecies + '/normal_stinger_dull.png');
    this.stingerNormalFull = _0x2f22f9('skins/desert/scorpion/' + this.animalSpecies + '/normal_stinger_full.png');
};
window.GiantScorpion = GiantScorpionAnimal;
GameObjType.setCustomClassForGameObjType(GiantScorpionAnimal, o_player, _0x28a6aa);

// santa

var superClass = Animal;
Santa.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
Santa.prototype.constructor = Santa;
Santa.superClass = superClass; //'class' var

Santa.prototype.animalInfo = function () {
  var infoO = {};
  infoO.aniName = "Santa!";
  infoO.skinName = "santa/santa";
  infoO.aniDesc = "";
  infoO.upgradeText =
    "UPGRADED to " +
    infoO.aniName +
    "\n Santa distributes gifts to everyone!";
  infoO.aniCol = "#231f18";
  return infoO;
};
var handY = 0.84;
var handX = 0.47;
var handR = 45;
var handRfixed = -30;
var handScale = 1.3;
var handFrameRate = 1.5;
var handRF = 0.3;

var hatY = 1.02;
var hatX = 0.544;
var hatR = 45;
var hatRfixed = 0;
var hatScale = 1.2;
var hatFrameRate = 0.3;
var hatRF = 0.1;

Santa.prototype.updateZ = function () {
  // if (this.specType == 2)
  this.z = 1010 + this.rad;
  // else
  //   this.z = 1000 + this.rad;
  // this.z = this.rad;
  // else this.z = this.rad;

  if (this.flag_flying)
    this.z += 100100;

  // console.log("santa flying : " + this.flag_flying);
};


Santa.prototype.calculateZIndex = function () {
  this.updateZ();
  // console.log("santa flying : " + this.flag_flying);

}

Santa.prototype.drawUnderSkinTail = function (outlineCol) {

}

Santa.prototype.drawSkinCustomization = function () {
  if (this.flag_flying) {

    var tSinceSpawn = (_0x1534e0 - this.spawnTime) / 1000.0;
    var frame = _0x93972d(tSinceSpawn, hatFrameRate, hatRF, 2)

    var theImg = this.getSkinImageObj("skins/santa/hat.png");
    if (theImg) {
      ctx.save();
      //var fac0to1 = Math.min(1.0, (_0x1534e0 - this.spawnTime) / 300.0);

      //console.log("getAnimFrame:" + frame);
      var extraRotate = -(-0.2 + frame) * toRadians(hatR); //spin animation

      //clip to sliwly show the claw
      var rad = this.rad * hatScale;
      ctx.rotate(toRadians(hatRfixed) + extraRotate);
      var imX = 0,
        imY = this.rad;
      var imW = rad * 2.0,
        imH = rad * 2.0; // * fac0to1;
      var imAnchorX = hatX,
        imAnchorY = hatY; //top-left= 0,0, bottom-right=1,1 (canvas coords)

      ctx.drawImage(
        theImg,
        imX + imW * -imAnchorX,
        imY + imH * -imAnchorY,
        imW,
        imH
      );

      ctx.restore();
    }
    this.santaHead(0);
    this.hohohoAnimation(0.0);

  } else {

    if (this.specType == 0)
      this.bellhandAnimation(0);
    this.santaHead(0);
    this.hohohoAnimation(0);

  }
};


Santa.prototype.bellhandAnimation = function (f) {

  var tSinceSpawn = (_0x1534e0 - this.spawnTime) / 1000.0;
  var frame = _0x93972d(tSinceSpawn, handFrameRate, handRF, 2)

  var theImg = this.getSkinImageObj("skins/santa/bellhand.png");
  if (theImg) {
    ctx.save();
    //var fac0to1 = Math.min(1.0, (_0x1534e0 - this.spawnTime) / 300.0);

    //console.log("getAnimFrame:" + frame);
    var extraRotate = -(-0.2 + frame) * toRadians(handR); //spin animation

    //clip to sliwly show the claw
    var rad = this.rad * handScale;
    ctx.rotate(toRadians(handRfixed) + extraRotate);
    var imX = 0,
      imY = this.rad;
    var imW = rad * 2.0,
      imH = rad * 2.0; // * fac0to1;
    var imAnchorX = handX,
      imAnchorY = handY; //top-left= 0,0, bottom-right=1,1 (canvas coords)

    ctx.drawImage(
      theImg,
      imX + imW * -imAnchorX,
      imY + imH * -imAnchorY,
      imW,
      imH
    );

    ctx.restore();

  }

};

Santa.prototype.hohohoNextT = (+new Date()) + 5000;
Santa.prototype.hohohoAnimation = function (f) {

  if (_0x1534e0 > this.hohohoNextT) {
    var mouthY = -0.1 + f;
    var iScale = 500 / 340.0;
    var imNum = Math.trunc(_0x1534e0 / 180) % 3;
    var theImg = this.getSkinImageObj("skins/santa/santa_mouth" + imNum + ".png");
    if (theImg) {
      ctx.save();
      var rad = this.rad;
      ctx.drawImage(
        theImg,
        -rad * iScale,
        (-rad + rad * mouthY) * iScale,
        2 * rad * iScale,
        2 * rad * iScale
      );
      ctx.restore();

    }

    if (_0x1534e0 > this.hohohoNextT + 1500) {
      this.hohohoNextT = (+new Date()) + 10000;
    }
  }
}

Santa.prototype.getSkinImageObj = function (path) {
  this.skinThemeID = 0;
  return Santa.superClass.prototype.getSkinImageObj.call(this, path);
}

Santa.prototype.santaHead = function (f) {
  var headY = 0.1;
  var iScale = 500 / 340.0;
  var headType = this.flag_flying ? "2" : "";

  if (this.specType == 2)
    headType = "3";

  var theHead = this.getSkinImageObj("skins/santa/santa_head" + headType + ".png");
  if (theHead) {
    ctx.save();
    var rad = this.rad;
    ctx.drawImage(
      theHead,
      -rad * iScale,
      (-rad + rad * headY) * iScale,
      2 * rad * iScale,
      2 * rad * iScale
    );
    ctx.restore();
  }
}
Santa.prototype.getAbilityInfo = function (abilT) {
  var ability = {};
  switch (abilT) {
    case 106:
      ability.abilName = "Fly High!";
      ability.abilImg = 'abilities/Fly.svg';
      break;
    case 107:
      ability.abilName = "Gives Gifts!";
      ability.abilImg = 'abilities/Throw.svg';
      break;
    case 108:
      ability.abilName = "Flying Sleigh!";
      ability.abilImg = 'abilities/Fly.svg';
      break;

  }
  ability.skinThemeID = this.skinThemeID;
  ability.mopeSeasonID = this.mopeSeasonID;
  return ability;
};

//set custom skin name
Santa.prototype.getSkinName = function () {
  var skin = "";
  skin = "santa/santa" + (this.specType == 0 ? "" : this.specType);
  // if (this.flag_flying && this.specType == 2)
  //   skin = "santa/santa3";

  //   skin = "santa/santa_flying2";
  // else
  //   skin = "santa/santa2";

  return skin;
};



function Santa() {
  Santa.superClass.call(this, 2);
}
window.Santa = Santa;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(Santa, 2, 102);

//


var superClass = GameObj;
Sleigh.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
Sleigh.prototype.constructor = Sleigh;
Sleigh.superClass = superClass; //'class' var

var z_sleigh = 1010;
Sleigh.prototype.updateZ = function () {
  this.z = 1010;

  if (this.flag_flying)
    this.z += 100000;
};

// Sleigh.prototype.readCustomData_onUpdate = function (msg) {
//   CartSaddle.superClass.prototype.readCustomData_onUpdate.call(this, msg); //call superclass version of this method

//   var lookAng = msg.readUInt8() * 2.0;
//   var goalAngle = toRadians(lookAng + 90.0); //90 offset due to client drawing setup
//   this.angleDelta = distBetweenAngles(this.angle, goalAngle);
//   this.oAngle = this.angle;
//   if (this.firstPosUpd) {
//     //on freshly spawned animals ,instantly set angle
//     this.oAngle = this.angle = goalAngle;
//     this.angleDelta = 0;
//   }

// };

//override draw (things like other effects are drawn seperately)
Sleigh.prototype.customDraw = function (batchDrawOutline) {
  var theImg = this.getSkinImageObj("skins/santa/sleigh.png");
  if (theImg) {
    ctx.save();
    var rad = this.rad * 1;
    ctx.rotate(this.angle);
    ctx.drawImage(theImg, -rad, -rad, rad * 2, rad * 2);
    ctx.restore();
  }
};

function Sleigh() {
  Sleigh.superClass.call(this, o_sleigh);
}

window.Sleigh = Sleigh;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(Sleigh, o_sleigh);

//gift

var superClass = GameObj;
XmasGift.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
XmasGift.prototype.constructor = XmasGift;
XmasGift.superClass = superClass;
XmasGift.prototype.giftColor = 0;
XmasGift.prototype.giftType = 0;
XmasGift.prototype.updateZ = function () {
    this.z = this.rad;
}

XmasGift.prototype.customDraw = function (batchDrawOutline) {
    ctx.save();
    var theImg = this.getSkinImageObj("img/xmasgifts/" + this.giftColor + "/gift_e.png");
    if (theImg) {
        var rad = this.rad;
        ctx.save();
        ctx.rotate(this.rPer * 0.5 * Math.PI * 2.0);
        ctx.drawImage(theImg, -rad, -rad, 2 * rad, 2 * rad);
        ctx.restore();
    }
    ctx.restore();
};


XmasGift.prototype.readCustomData_onNewlyVisible = function (msg) {
    this.giftColor = msg.readUInt8();
    this.giftType = msg.readUInt8();
}
var o_xmasGift = 143;
function XmasGift() {
    XmasGift.superClass.call(this, o_xmasGift);
    this.doesDrawEffectScale = true;
}
window.XmasGift = XmasGift;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(XmasGift, o_xmasGift);

//


_0x2a91c6 = Animal;
BlackWidowSpider.prototype = Object.create(_0x2a91c6.prototype);
BlackWidowSpider.prototype.constructor = BlackWidowSpider;
BlackWidowSpider.superClass = _0x2a91c6;
BlackWidowSpider.prototype.updateZ = function () {
    this.z = this.flag_usingAbility && 0x2 < this.webState ? 0x3e8 : 0x3e8 + this.rad;
};
BlackWidowSpider.prototype.animalInfo = function () {
    var _0x5e7c96 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x5e7c96.aniName = 'Blackwidow Spider';
        break;
    case 0x1:
        _0x5e7c96.aniName = 'Goldenwidow Spider';
        break;
    case 0x2:
        _0x5e7c96.aniName = 'Queen Blackwidow';
    }
    _0x5e7c96.aniCol = '#FF9000';
    _0x5e7c96.skinName = 'desert/blackwidow/' + this.animalSpecies + '/blackwidow';
    _0x5e7c96.upgradeText = 'UPGRADED to ' + _0x5e7c96.aniName + `!\nBlackwidow is a sneaky predator. It traps prey in the web and injects sweat poison.\nPress W to spin and throw web.`;
    return _0x5e7c96;
};
BlackWidowSpider.prototype.getAbilityInfo = function (_0x7d4aab) {
    _0x7d4aab = {
        'abilName': `Spin Web & Bite\n(Sweat Prey)`
    };
    _0x7d4aab.abilImg = 'skins/desert/blackwidow/' + this.animalSpecies + '/blackwidow.png';
    return _0x7d4aab;
};
BlackWidowSpider.prototype.readCustomData_onUpdate = function (_0x2175b1) {
    BlackWidowSpider.superClass.prototype.readCustomData_onUpdate.call(this, _0x2175b1);
    this.readInfo(_0x2175b1);
};
BlackWidowSpider.prototype.readCustomData_onNewlyVisible = function (_0x3b0f7d) {
    BlackWidowSpider.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3b0f7d);
    this.readInfo(_0x3b0f7d);
};
BlackWidowSpider.prototype.webX = 0;
BlackWidowSpider.prototype.webY = 0;
BlackWidowSpider.prototype.spiderX = 0;
BlackWidowSpider.prototype.spiderY = 0;
BlackWidowSpider.prototype.webState = 0;
BlackWidowSpider.prototype.readInfo = function (_0x22a2af) {
    this.webState = _0x22a2af.readUInt8();
    if (0 == this.webState) this.web_nx = this.web_ox = this.webX = this.x, this.web_ny = this.web_oy = this.webY = this.y, this.spider_ox = this.spiderX = this.spider_nx = this.x, this.spider_oy = this.spiderY = this.spider_ny = this.y;
    else if (0 < this.webState) {
        var _0x3fed38 = _0x22a2af.readUInt16() / 0x4,
            _0x4b0bef = _0x22a2af.readUInt16() / 0x4;
        this.web_ox = this.webX;
        this.web_oy = this.webY;
        this.web_nx = _0x3fed38;
        this.web_ny = _0x4b0bef;
        _0x3fed38 = _0x22a2af.readUInt16() / 0x4;
        _0x22a2af = _0x22a2af.readUInt16() / 0x4;
        this.spider_ox = this.spiderX;
        this.spider_oy = this.spiderY;
        this.spider_nx = _0x3fed38;
        this.spider_ny = _0x22a2af;
    }
};
BlackWidowSpider.prototype.onLerpUpdate = function (_0x2bc9d1) {
    0 < this.webState && (this.webX = _0x2bc9d1 * (this.web_nx - this.web_ox) + this.web_ox, this.webY = _0x2bc9d1 * (this.web_ny - this.web_oy) + this.web_oy, this.spiderX = _0x2bc9d1 * (this.spider_nx - this.spider_ox) + this.spider_ox, this.spiderY = _0x2bc9d1 * (this.spider_ny - this.spider_oy) + this.spider_oy);
};
BlackWidowSpider.prototype.beforeCustomDraw = function (_0x3ee116) {
    0 < this.webState && myPlayerID == this.id && (ctx.save(), ctx.strokeStyle = 0x1 == this.animalSpecies ? 'gold' : 'white', ctx.globalAlpha = 0.3, ctx.beginPath(), ctx.moveTo(this.webX, this.webY), ctx.lineTo(this.spiderX, this.spiderY), ctx.stroke(), ctx.restore());
};
BlackWidowSpider.prototype.getSkinName = function () {
    var _0x12edf0 = 'desert/blackwidow/' + this.animalSpecies + '/blackwidow';
    return _0x12edf0 += 0 == this.specType ? '' : this.specType;
};
BlackWidowSpider.prototype.drawSkinCustomization = function () {
    if (0 == this.webState && this.flag_usingAbility) {
        var _0x44fd02 = 0x1 * Math.sin(0x2 * Math.PI / 0.75 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
        ctx.globalAlpha = 0.3;
        var _0x9e40e3 = 0x1 == this.animalSpecies ? 'gold' : '#f2f2f2';
        _0x110b78(0, 1.07 * -this.rad, 0.07 * this.rad, _0x9e40e3);
        ctx.globalAlpha = 0.8 - 0.2 * _0x44fd02;
        _0x110b78(0, 1.07 * -this.rad, 0.07 * this.rad + (0.05 + _0x44fd02), _0x9e40e3);
    }
};

function BlackWidowSpider() {
    BlackWidowSpider.superClass.call(this, o_player);
}
window.BlackWidowSpider = BlackWidowSpider;
GameObjType.setCustomClassForGameObjType(BlackWidowSpider, o_player, _0x36bb4b);
_0x5a621d = _0x469721;
_0x2a91c6 = AbillityObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x469721.prototype.updateZ = function () {
    this.z = 0 == this.state ? 0x2710 : 0x3e8;
};
_0x469721.prototype.webAlpha = 0.5;
_0x469721.prototype.customDraw = function (_0x376708) {
    ctx.save();
    if (0 < this.state) {
        _0x376708 = _0x2f22f9('img/web/' + this.webType + '/spiderWeb.png');
        var _0xa072e8 = this.rad;
        _0x376708 && (ctx.save(), ctx.globalAlpha = this.webAlpha, ctx.drawImage(_0x376708, -_0xa072e8, -_0xa072e8, 0x2 * _0xa072e8, 0x2 * _0xa072e8), ctx.restore());
    }
    ctx.restore();
};
_0x469721.prototype.state = 0;
_0x469721.prototype.spiderX = 0;
_0x469721.prototype.spiderY = 0;
_0x469721.prototype.readCustomData_onUpdate = function (_0x51106a) {
    _0x469721.superClass.prototype.readCustomData_onUpdate.call(this, _0x51106a);
    this.readInfo(_0x51106a);
};
_0x469721.prototype.readCustomData_onNewlyVisible = function (_0x62a266) {
    _0x469721.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x62a266);
    this.readInfo(_0x62a266);
};
_0x469721.prototype.readInfo = function (_0x4542ca) {
    this.state = _0x4542ca.readUInt8();
    var _0x4db795 = _0x4542ca.readUInt8() / 0x64;
    _0x4db795 < this.webAlpha && (this.webAlpha = _0x4db795);
    this.webType = _0x4542ca.readUInt8();
};

function _0x469721() {
    _0x469721.superClass.call(this);
}
window.BlackwidowWeb = _0x469721;
GameObjType.setCustomClassForGameObjType(_0x469721, o_abilityObj, _0x113fae);
_0x2a91c6 = Animal;
PterodactylAni.prototype = Object.create(_0x2a91c6.prototype);
PterodactylAni.prototype.constructor = PterodactylAni;
PterodactylAni.superClass = _0x2a91c6;
PterodactylAni.prototype.skinFolder = function () {
    return 'desert/';
};
PterodactylAni.prototype.animalInfo = function () {
    var _0x3f7e4b = {};
    switch (this.animalSpecies) {
    case 0:
        _0x3f7e4b.aniName = 'Pterodactyl';
        break;
    case 0x1:
        _0x3f7e4b.aniName = 'Golden Pterodactyl';
        break;
    case 0x2:
        _0x3f7e4b.aniName = 'Emerald Pterodactyl';
        break;
    case 100:
        _0x3f7e4b.aniName = 'Carnageodactyl';
        break;
    }
    _0x3f7e4b.aniCol = '#FF9000';
    _0x3f7e4b.skinName = this.skinFolder() + '/pterodactyl/' + this.animalSpecies + '/pterodactyl';
    _0x3f7e4b.upgradeText = 'UPGRADED to ' + _0x3f7e4b.aniName + `!\nFly and dive onto prey to pick it up.`;
    return _0x3f7e4b;
};
PterodactylAni.prototype.getHead = function (_0x3d7b50, _0xad3ebf) {
    return 'skins/' + this.skinFolder() + '/' + _0x3d7b50 + '/' + this.animalSpecies + '/' + _0x3d7b50 + '_head.png';
};
PterodactylAni.prototype.getSkinName = function () {
    var _0x20c091 = this.skinFolder() + '/pterodactyl/' + this.animalSpecies + '/pterodactyl';
    return _0x20c091 = 0x4 == this.specType ? _0x20c091 + '4' : _0x20c091 + (0 == this.specType ? '' : 0x1);
};
PterodactylAni.prototype.getWing = function (_0x325634, _0x893074) {
    this.flag_flying || (_0x893074 = _0x893074 + '' + _0x893074);
    return 'skins/' + this.skinFolder() + '/' + _0x325634 + '/' + this.animalSpecies + '/' + _0x325634 + '_wing' + _0x893074 + '_nohand.png';
};
PterodactylAni.prototype.getWingBone = function (_0x1c2b3b, _0x9605cc) {
    this.flag_flying || (_0x9605cc = _0x9605cc + '' + _0x9605cc);
    return 'skins/' + this.skinFolder() + '/' + _0x1c2b3b + '/' + this.animalSpecies + '/' + _0x1c2b3b + '_wing' + _0x9605cc + '_bones.png';
};
PterodactylAni.prototype.getHand = function (_0x3d3dff, _0x4e03e4) {
    this.flag_flying || (_0x4e03e4 = _0x4e03e4 + '' + _0x4e03e4);
    this.isGliding && (_0x4e03e4 += '3');
    return 'skins/' + this.skinFolder() + '/' + _0x3d3dff + '/' + this.animalSpecies + '/' + _0x3d3dff + '_hand' + _0x4e03e4 + '.png';
};
PterodactylAni.prototype.biteStart = 0;
PterodactylAni.prototype.onAbility = 0;
PterodactylAni.prototype.flaps = 0;
PterodactylAni.prototype.flapsMod = 0x5;
PterodactylAni.prototype.countFlap = !0;
PterodactylAni.prototype.canFlap = 0x2 != _0x14fca5;
PterodactylAni.prototype.resumeFlapT = 0;
PterodactylAni.prototype.lastFlapFrame = 0;
PterodactylAni.prototype.flapSpeed = 0x1;
PterodactylAni.prototype.flapAmount = 0.2;
PterodactylAni.prototype.r = 22.5;
PterodactylAni.prototype.ax = 0;
PterodactylAni.prototype.ay = 0x1;
PterodactylAni.prototype.ww = 0x4;
PterodactylAni.prototype.wh = 2.5;
PterodactylAni.prototype.ax2 = 0x1;
PterodactylAni.prototype.rf = -0x2;
PterodactylAni.prototype.erf = 11.5;
PterodactylAni.prototype.erf_gliding = 0x1e;
PterodactylAni.prototype.lx = -0.05;
PterodactylAni.prototype.famt = 0.5;
PterodactylAni.prototype.yf = 0.15;
PterodactylAni.prototype.xf = -0.2;
PterodactylAni.prototype.legScale = 1.15;
PterodactylAni.prototype.handPerc = 0.9;
PterodactylAni.prototype.handWF = 0;
PterodactylAni.prototype.set = !0x1;
PterodactylAni.prototype.wOffset = 0.1;
PterodactylAni.prototype.headF = 0.5;
PterodactylAni.prototype.headFDisp = -0.6;
PterodactylAni.prototype.headScale = 0.8;
PterodactylAni.prototype.headX = 0.225;
PterodactylAni.prototype.drawLegs = function () {
    var _0xcea4d6 = 0x1f4 / 0x154,
        _0xa49a08 = this.flag_eff_aniInClaws ? 'legs2' : 'legs';
    if (_0xa49a08 = _0x2f22f9('skins/' + this.skinFolder() + '/pterodactyl/' + this.animalSpecies + '/' + _0xa49a08 + '.png')) {
        ctx.save();
        var _0x2c9365 = this.rad,
            _0xcea4d6 = _0xcea4d6 * this.legScale;
        ctx.drawImage(_0xa49a08, -_0x2c9365 * _0xcea4d6, (-_0x2c9365 + _0x2c9365 * this.lx) * _0xcea4d6, 0x2 * _0x2c9365 * _0xcea4d6, 0x2 * _0x2c9365 * _0xcea4d6);
        ctx.restore();
    }
};
PterodactylAni.prototype.drawUnderSkinImg = function () {
    this.flag_usingAbility && (this.drawWing(this.frame, 0x1), this.drawWing(this.frame, 0x2));
    0x2 == this.specType && this.drawLegs();
};
PterodactylAni.prototype.nextJawAnimT = 0;
var ptero_interval = 70;
PterodactylAni.prototype.drawSkinCustomization = function () {
    if (this.onAbility) {
        this.drawBone(this.frame, 0x1);
        this.drawBone(this.frame, 0x2);
        this.drawHand(this.frame, 0x1);
        this.drawHand(this.frame, 0x2);
        var _0x535d6c = 0x1f4 / 0x154,
            _0x6a7d52 = this.getHead('pterodactyl', !0x1);
        if (_0x6a7d52 = _0x2f22f9(_0x6a7d52)) {
            ctx.save();
            var _0x535d6c = _0x535d6c + -(0.1 * this.headF) * this.frame,
                _0x57af03 = this.rad;
            ctx.drawImage(_0x6a7d52, -_0x57af03 * _0x535d6c, (-_0x57af03 + _0x57af03 * (0.3 + this.frame / 0xa * this.headFDisp) + this.headF * this.frame) * _0x535d6c, 0x2 * _0x57af03 * _0x535d6c, 0x2 * _0x57af03 * _0x535d6c);
            ctx.restore();
        }
    } else {
        if(this.animalSpecies == 100) {
            var animDif = _0x1534e0 - this.nextJawAnimT;

      var imNum = Math.trunc(animDif / ptero_interval) % 16;
      if (_0x1534e0 < this.nextJawAnimT)
        imNum = 0;

      if (imNum >= 15) {
        this.nextJawAnimT = _0x1534e0 + 5000;
      }
      var theMouth = _0x2f22f9("skins/desert/pterodactyl/100/mouth/pterodactyl_head" + imNum + ".png");
      if (theMouth) {
        var iScale = (500 / 340.0) * this.headScale;
        ctx.save();
        var rad = this.rad;
        ctx.drawImage(
          theMouth,
          -rad * iScale,
          (-rad + rad * this.headX) * iScale,
          2 * rad * iScale,
          2 * rad * iScale
        );
        ctx.restore();
      }
        } else {
            if (_0x6a7d52 = this.getHead('pterodactyl', !0x1), _0x6a7d52 = _0x2f22f9(_0x6a7d52)) _0x535d6c = 0x1f4 / 0x154 * this.headScale, ctx.save(), _0x57af03 = this.rad, ctx.drawImage(_0x6a7d52, -_0x57af03 * _0x535d6c, (-_0x57af03 + _0x57af03 * this.headX) * _0x535d6c, 0x2 * _0x57af03 * _0x535d6c, 0x2 * _0x57af03 * _0x535d6c), ctx.restore();
        }
    }
};
PterodactylAni.prototype.drawWing = function (_0x1cac7f, _0x28d0ee) {
    var _0x31a35a = 0x1 == _0x28d0ee ? 0x1 : -0x1,
        _0x4a8726 = _0x2f22f9(this.getWing('pterodactyl', _0x28d0ee));
    if (_0x4a8726) {
        var _0x1d9c25 = -(-0.2 + _0x1cac7f) * _0x55d748(_0x31a35a * this.r),
            _0x42556b = 0.8 * this.rad,
            _0x5e1793 = this.rad,
            _0x29f391 = _0x42556b * this.ww,
            _0x42556b = _0x42556b * this.wh,
            _0xdeb44a = 0x1 == _0x28d0ee ? this.ax : this.ax2,
            _0x1df0c4 = this.ay + this.yf * _0x1cac7f;
        ctx.save();
        _0x1d9c25 *= this.rf;
        ctx.rotate(_0x55d748(_0x31a35a * (this.isGliding ? this.erf_gliding : this.erf)) + _0x1d9c25);
        ctx.drawImage(_0x4a8726, 0 + _0x29f391 * -_0xdeb44a + _0x1cac7f * _0x29f391 * _0x31a35a * this.wOffset, _0x5e1793 + _0x42556b * -_0x1df0c4, _0x29f391, _0x42556b);
        ctx.restore();
    }
};
PterodactylAni.prototype.drawBone = function (_0x1131d4, _0x1f448c) {
    var _0x5e6745 = _0x2f22f9(this.getWingBone('pterodactyl', _0x1f448c)),
        _0xeb2b71 = 0x1 == _0x1f448c ? 0x1 : -0x1;
    if (_0x5e6745) {
        var _0x3ea0f3 = -(-0.2 + _0x1131d4) * _0x55d748(_0xeb2b71 * this.r),
            _0x334c26 = 0.8 * this.rad,
            _0x3482d0 = this.rad,
            _0xf4f100 = _0x334c26 * this.ww,
            _0x334c26 = _0x334c26 * this.wh,
            _0x33ce98 = 0x1 == _0x1f448c ? this.ax : this.ax2,
            _0x580403 = this.ay + this.yf * _0x1131d4;
        ctx.save();
        _0x3ea0f3 *= this.rf;
        ctx.rotate(_0x55d748(_0xeb2b71 * (this.isGliding ? this.erf_gliding : this.erf)) + _0x3ea0f3);
        ctx.drawImage(_0x5e6745, 0 + _0xf4f100 * -_0x33ce98 + _0x1131d4 * _0xf4f100 * _0xeb2b71 * this.wOffset, _0x3482d0 + _0x334c26 * -_0x580403, _0xf4f100, _0x334c26);
        ctx.restore();
    }
};
var _0x42676d = 0;
PterodactylAni.prototype.drawHand = function (_0x2b5750, _0x116471) {
    var _0x3b780e = 0x1 == _0x116471 ? 0x1 : -0x1,
        _0x3e7997 = _0x2f22f9(this.getHand('pterodactyl', _0x116471));
    if (_0x3e7997) {
        var _0x4dc24f = -(-0.2 + _0x2b5750) * _0x55d748(_0x3b780e * this.r),
            _0xb0451 = 0.8 * this.rad,
            _0x2df1cc = this.rad,
            _0x46460d = _0xb0451 * this.ww,
            _0xb0451 = _0xb0451 * this.wh + (this.flag_flying ? 0 : this.wh * _0x42676d),
            _0x59354a = (0x1 == _0x3b780e ? this.ax : this.ax2) + _0x3b780e * this.xf * _0x2b5750,
            _0x5f2829 = this.ay + this.yf * _0x2b5750,
            _0x4dc24f = _0x4dc24f * this.rf,
            _0x44819d = this.isGliding ? this.erf_gliding : this.erf;
        ctx.save();
        this.drawImage(_0x3e7997, 0 + _0x46460d * -_0x59354a, _0x2df1cc + _0xb0451 * -_0x5f2829, _0x46460d + _0x46460d * _0x3b780e * this.handWF, _0xb0451, _0x55d748(_0x3b780e * _0x44819d) + _0x4dc24f);
        ctx.restore();
    }
};
PterodactylAni.prototype.frame = 0;
PterodactylAni.prototype.lastFlapFrame = 0;
PterodactylAni.prototype.getFrame = function () {
    !this.canFlap && this.flag_flying && _0x1534e0 > this.resumeFlapT && (this.canFlap = !0);
    var _0x542930 = (_0x1534e0 - this.spawnTime) / 0x3e8,
        _0x542930 = 0x2 != _0x14fca5 && this.canFlap ? _0x93972d(_0x542930, this.flapSpeed, this.flapAmount * this.handPerc, 0x2) : this.birdNoAnimationFlyWingAngle;
    this.flag_flying && 0 > _0x542930 && this.countFlap ? (this.countFlap = !0x1, this.flaps++, 0 == this.flaps % this.flapsMod && (this.lastFlapFrame = _0x542930, this.canFlap = !0x1, this.resumeFlapT = +new Date() + 0x5dc)) : 0 < _0x542930 && !this.countFlap && (this.countFlap = !0);
    this.canFlap ? this.lastFlapFrame = _0x542930 : _0x542930 = this.lastFlapFrame;
    return _0x542930;
};
PterodactylAni.prototype.beforeCustomDraw = function () {
    this.flag_usingAbility && (this.flag_flying || this.set ? this.flag_flying && this.set && (this.set = !0x1, this.r = 22.5, this.erf = 11.5, this.ww = 4.5) : (this.set = !0, this.r = 11.25, this.erf = 5.75, this.ww = 3.5), this.flapAmount = this.isGliding ? 0 : this.famt, this.frame = this.getFrame());
};
PterodactylAni.prototype.updateZ = function () {
    this.flag_eff_grabbedByFlytrap ? this.z = 0x44c + this.rad : this.flag_flying || !this.flag_usingAbility || this.flag_underWater ? this.flag_flying || this.flag_eff_tossedInAir ? (this.z = 0x1adb0, this.z = this.flag_isGrabbed ? this.z - this.rad : this.z + this.rad, this.flag_eff_aniInClaws && (this.z += 0x64)) : this.z = 0x3e8 + this.rad : this.z = 0x4b0 + this.rad;
};
PterodactylAni.prototype.getAbilityInfo = function (_0x285c96) {
    _0x285c96 = {
        'abilName': `Dive Attack\n(Fly with Prey)`
    };
    _0x285c96.abilImg = 'skins/' + this.skinFolder() + '/pterodactyl/' + this.animalSpecies + '/pterodactyl_ability.png';
    return _0x285c96;
};
PterodactylAni.prototype.isGliding = !0x1;
PterodactylAni.prototype.readCustomData_onNewlyVisible = function (_0x39a0a4) {
    PterodactylAni.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x39a0a4);
    this.readInfo(_0x39a0a4);
};
PterodactylAni.prototype.readCustomData_onUpdate = function (_0xe834b5) {
    PterodactylAni.superClass.prototype.readCustomData_onUpdate.call(this, _0xe834b5);
    this.readInfo(_0xe834b5);
};
PterodactylAni.prototype.readInfo = function (_0x461a47) {
    this.isGliding = 0x1 == _0x461a47.readUInt8();
    this.onAbility = _0x461a47.readUInt8()
};

function PterodactylAni() {
    PterodactylAni.superClass.call(this, o_player);
}
window.Pterodactyl = PterodactylAni;
GameObjType.setCustomClassForGameObjType(PterodactylAni, o_player, _0x31ed20);
_0x2a91c6 = Animal;
BulletAnt.prototype = Object.create(_0x2a91c6.prototype);
BulletAnt.prototype.constructor = BulletAnt;
BulletAnt.superClass = _0x2a91c6;
BulletAnt.prototype.animalInfo = function () {
    var info = {};
    switch (this.animalSpecies) {
    case 0:
        info.aniName = 'Bullet Ant';
        break;
    case 0x1:
        info.aniName = 'Fire Ant';
        break;
    }
    info.aniCol = '#FF9000';
    info.skinName = 'desert/bulletant/'+this.animalSpecies+'/bulletant'
    info.upgradeText = 'UPGRADED to ' + info.aniName + `!\nHold 'W' to pick anything and take to your Anthill.`;
    return info;
};
var _0x4147c3 = 0x1;
BulletAnt.prototype.drawSkinCustomization = function () {
    var _0xd89747 = _0x2f22f9('skins/desert/bulletant/'+this.animalSpecies+'/head.png');
    if (_0xd89747) {
        var _0x443a13 = 1.2 * this.skinScale,
            _0x6a2f13 = this.skinRad;
        ctx.drawImage(_0xd89747, -_0x6a2f13 * _0x443a13, (-_0x6a2f13 + 0.3 * _0x6a2f13) * _0x443a13, 0x2 * _0x6a2f13 * _0x443a13, 0x2 * _0x6a2f13 * _0x443a13);
    }
};
BulletAnt.prototype.getAbilityInfo = function (abils) {
    abils = {
        'abilName': 'Paralize Prey\n/Grab Prey'
    };
    abils.abilImg = '/skins/desert/bulletant/'+this.animalSpecies+'/head.png';
    return abils;
};
var _0x24ed9b = -0.7;
BulletAnt.prototype.drawUnderSkinImg = function () {
    var _0x2e3e78 = _0x2f22f9('skins/desert/bulletant/'+this.animalSpecies+'/abdomen.png');
    if (_0x2e3e78) {
        var _0xfb1547 = 0.9 * this.skinScale,
            _0x6ee32 = this.skinRad;
        ctx.drawImage(_0x2e3e78, -_0x6ee32 * _0xfb1547, (-_0x6ee32 + _0x6ee32 * _0x24ed9b) * _0xfb1547, 0x2 * _0x6ee32 * _0xfb1547, 0x2 * _0x6ee32 * _0xfb1547);
    }
};
BulletAnt.prototype.getSkinName = function () {
    return 'desert/bulletant/'+this.animalSpecies+'/body';
};

function BulletAnt() {
    BulletAnt.superClass.call(this, o_player);
}
window.BulletAnt = BulletAnt;
GameObjType.setCustomClassForGameObjType(BulletAnt, o_player, _0x258caf);
_0x2a91c6 = GameObj;
_0x597fc2.prototype = Object.create(_0x2a91c6.prototype);
_0x597fc2.prototype.constructor = _0x597fc2;
_0x597fc2.superClass = _0x2a91c6;
_0x597fc2.prototype.FlytrapType = 0;
_0x597fc2.prototype.updateZ = function () {
    this.z = 0x64;
};
_0x597fc2.prototype.getSkinFolder = function (_0x22154c) {
    return 'desert/flytrap';
};
_0x597fc2.prototype.customDraw = function (_0xff7e0d) {
    ctx.save();
    ctx.globalAlpha = 0x1;
    if (_0xff7e0d = _0x2f22f9('img/' + this.getSkinFolder() + '/base.png')) {
        var _0x4d0402 = 1.25 * this.rad;
        ctx.drawImage(_0xff7e0d, -_0x4d0402, -_0x4d0402, 0x2 * _0x4d0402, 0x2 * _0x4d0402);
    }
    ctx.restore();
};

function _0x597fc2() {
    _0x597fc2.superClass.call(this, o_flytrap);
    this.drawEffectScale_Slow = !0;
}
window.Flytrap = _0x597fc2;
GameObjType.setCustomClassForGameObjType(_0x597fc2, o_flytrap);
_0x2a91c6 = GameObj;
_0x33cfcf.prototype = Object.create(_0x2a91c6.prototype);
_0x33cfcf.prototype.constructor = _0x33cfcf;
_0x33cfcf.superClass = _0x2a91c6;
_0x33cfcf.prototype.FlytrapMouthType = 0;
_0x33cfcf.prototype.updateZ = function () {
    this.z = 0x44c + this.rad;
};
var _0x4dca81 = 0x8c,
    _0x5a6928 = 1.25,
    _0x5ec64b = 2.5,
    _0x55acfb = 1.25,
    _0x38c966 = 1.5,
    _0x4dd3c9 = 0xb4,
    _0x2e7a0e = 1.5,
    _0x1dd1b2 = 0x1,
    _0x59fa71 = 0x1,
    _0xe2759 = 0,
    _0x3dcc15 = 0,
    _0x4508fe = -0xa0,
    _0x26d81c = 0x1,
    _0x547a1c = 0;
_0x33cfcf.prototype.topA = 0xb4;
_0x33cfcf.prototype.botA = 0xb4;
_0x33cfcf.prototype.distBeforeAttack = 0;
_0x33cfcf.prototype.maxDist = 0;
_0x33cfcf.prototype.distCovered = 0;
_0x33cfcf.prototype.isAttacking = !0x1;
_0x33cfcf.prototype.isMouthClosed = !0x1;
_0x33cfcf.prototype.grabbedAni = !0x1;
_0x33cfcf.prototype.getSkinFolder = function (_0x19de1e) {
    return 'desert/flytrap';
};
_0x33cfcf.prototype.beforeCustomDraw = function (_0x4dab01) {
    if (!this.dead && (_0x4dab01 = _0x2f22f9('img/' + this.getSkinFolder() + '/mouth/stem.png'))) {
        var _0x22a770 = this.rad;
        ctx.save();
        ctx.translate(this.anchor_x, this.anchor_y);
        ctx.rotate(this.angle - _0x55d748(_0x4dd3c9));
        var _0x426682 = _0x459785({
            'x': this.x,
            'y': this.y
        }, {
            'x': this.anchor_x,
            'y': this.anchor_y
        });
        ctx.drawImage(_0x4dab01, -_0x22a770 * _0x5a6928, -_0x22a770, 0x2 * _0x22a770 * _0x55acfb, 0x2 * _0x22a770 + _0x426682);
        ctx.restore();
    }
};
_0x33cfcf.prototype.customDraw = function (_0x6f3d11) {
    ctx.save();
    ctx.globalAlpha = 0x1;
    _0x6f3d11 = 'bottom' + (this.isKillable ? '_e' : '');
    if (_0x6f3d11 = _0x2f22f9('img/' + this.getSkinFolder() + '/mouth/' + _0x6f3d11 + '.png')) {
        var _0x115463 = this.rad;
        ctx.save();
        ctx.rotate(this.angle - _0x55d748(this.botA));
        ctx.drawImage(_0x6f3d11, -_0x115463 * _0x59fa71, -_0x115463 * _0x59fa71, 0x2 * _0x115463, 0x2 * _0x115463);
        ctx.restore();
    }!this.grabbedAni && (_0x6f3d11 = this.isMouthClosed ? 'closed' : 'top', _0x6f3d11 = _0x2f22f9('img/' + this.getSkinFolder() + '/mouth/' + _0x6f3d11 + '.png')) && (_0x115463 = this.rad, ctx.save(), ctx.rotate(this.angle - _0x55d748(this.topA)), ctx.drawImage(_0x6f3d11, -_0x115463 * _0x1dd1b2, -_0x115463 * _0x1dd1b2, 0x2 * _0x115463, 0x2 * _0x115463), ctx.restore());
    ctx.restore();
};

function _0x7a2ab8() {
    ctx.save();
    ctx.globalAlpha = 0.5;
    this.drawOutlinedCircle('', 'cyan');
    ctx.globalAlpha = 0x1;
    var _0x319bd5 = _0x2f22f9('img/' + this.getSkinFolder() + '/mouth/stem.png');
    if (_0x319bd5) {
        var _0x314075 = this.rad;
        ctx.rotate(this.angle - _0x55d748(0x8c));
        ctx.drawImage(_0x319bd5, 1.5 * -_0x314075, 1.5 * -_0x314075 * 1.2, 0x2 * _0x314075, 0x2 * _0x314075);
    }
    _0x319bd5 = 'bottom' + (this.isKillable ? '_e' : '');
    if (_0x319bd5 = _0x2f22f9('img/' + this.getSkinFolder() + '/mouth/' + _0x319bd5 + '.png')) {
        var _0x314075 = this.rad,
            _0x20d062 = 0x78 * this.specType;
        ctx.rotate(this.angle - _0x55d748(_0x20d062 + -0xa0));
        ctx.drawImage(_0x319bd5, 0.85 * -_0x314075, 0.85 * -_0x314075, 0x2 * _0x314075, 0x2 * _0x314075);
    }
    if (_0x319bd5 = _0x2f22f9('img/' + this.getSkinFolder() + '/mouth/top.png')) _0x314075 = this.rad, _0x20d062 = 0x78 * this.specType, ctx.rotate(this.angle - _0x55d748(_0x20d062 + -0xa0)), ctx.drawImage(_0x319bd5, 0.85 * -_0x314075, 0.85 * -_0x314075, 0x2 * _0x314075, 0x2 * _0x314075);
    ctx.restore();
}
_0x33cfcf.prototype.readCustomData_onNewlyVisible = function (_0x26af09) {
    _0x33cfcf.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x26af09);
    this.readInfo(_0x26af09, !0);
};
_0x33cfcf.prototype.readCustomData_onUpdate = function (_0x59f01d) {
    _0x33cfcf.superClass.prototype.readCustomData_onUpdate.call(this, _0x59f01d);
    this.readInfo(_0x59f01d, !0x1);
};
_0x33cfcf.prototype.readInfo = function (_0x2a2f61, _0x59deac) {
    this.isAttacking = 0x1 == _0x2a2f61.readUInt8();
    this.isMouthClosed = 0x1 == _0x2a2f61.readUInt8();
    this.grabbedAni = 0x1 == _0x2a2f61.readUInt8();
    this.isKillable = 0x1 == _0x2a2f61.readUInt8();
    _0x59deac && (this.anchor_x = _0x2a2f61.readUInt16() / 0x4, this.anchor_y = _0x2a2f61.readUInt16() / 0x4);
};

function _0x33cfcf() {
    _0x33cfcf.superClass.call(this, o_flytrapMouth);
    this.doesDrawEffectScale = this.drawEffectScale_Slow = !0;
}
window.FlytrapMouth = _0x33cfcf;
GameObjType.setCustomClassForGameObjType(_0x33cfcf, o_flytrapMouth);

//button

var superClass = GameObj;
GameOptionButton.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
GameOptionButton.prototype.constructor = GameOptionButton;
GameOptionButton.superClass = superClass; //'class' var

var hoverButtonID = 0;
var lastHoverID = 0;
GameOptionButton.prototype.updateZ = function () {
  this.z = 100102;
};

//override draw (things like other effects are drawn seperately)
GameOptionButton.prototype.customDraw = function (batchDrawOutline) {
  ctx.save();
  if (this.isEnabled)
    ctx.globalAlpha = 0.4;
  else
    ctx.globalAlpha = 0.2;

  ctx.fillStyle = "black";
  ctx.fillRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
  ctx.strokeRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);

  if (this.isEnabled) {
    ctx.globalAlpha = this.opacity * 0.5;

  }
  else ctx.globalAlpha = this.opacity * 0.2;

  ctx.fillStyle = this.color;
  ctx.fillRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
  ctx.lineWidth = "3";
  if (this.btnStroke > 0) {
    ctx.globalAlpha = this.opacity * 0.9;
    ctx.strokeStyle = this.color;
    ctx.strokeRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
  }
  ctx.restore();


  if (this.isEnabled) {
    var xmin = this.x - this.rectW / 2;
    var xmax = this.x + this.rectW / 2

    var ymin = this.y - this.rectH / 2;
    var ymax = this.y + this.rectH / 2

    var isHover = false;
    if ((gameMouseX > xmin && gameMouseX < xmax) && (gameMouseY > ymin && gameMouseY < ymax) || (gamebtn_hotkey_pressed == this.hotkey)) {
      isHover = true;
      lastHoverID = hoverButtonID = this.id;
      ctx.save();
      ctx.globalAlpha = this.opacity;
      ctx.fillStyle = this.color;
      ctx.fillRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
      if (this.hoverStroke > 0) {
        ctx.globalAlpha = 1;
        ctx.lineWidth = this.hoverStroke;
        ctx.strokeStyle = _0x45ff9a;
        ctx.strokeRect(-this.rectW / 2, -this.rectH / 2, this.rectW, this.rectH);
      }
      ctx.restore();

    } else {
      if (lastHoverID == this.id)
        hoverButtonID = 0;
    }
  }
  if (null != this.txtLabel) {
    ctx.save();
    ctx.globalAlpha = isHover ? 1 : 0.6;

    if (isHover) {
      this.txtLabel.setFontSize(12)
      this.txtLabel.setColor("white", null, 0)
      this.txtLabel.setStroke(2);
    } else {

      this.txtLabel.setColor(this.isEnabled ? "white" : "black", null, 0)
      this.txtLabel.setStroke(0);
    }

    this.txtLabel.draw();
    ctx.restore();
  }


  if (this.isEnabled && this.hotkey != "") {
    ctx.save();
    ctx.globalAlpha = 0.2;
    ctx.fillStyle = "white";
    var hk_x = -this.rectW / 2 + 2;

    var hk_y = this.rectH / 2 - 12;

    ctx.fillRect(hk_x, hk_y, 10, 10);

    this.txtHotkey.x = hk_x + 5;
    this.txtHotkey.y = hk_y + 5;
    ctx.globalAlpha = 0.7;
    this.txtHotkey.draw();
    ctx.restore();
  }

};


GameOptionButton.prototype.optionID = 0;
GameOptionButton.prototype.optionType = 0;
GameOptionButton.prototype.label = 0;
GameOptionButton.prototype.highlight = 0;
GameOptionButton.prototype.txtLabel = null;
GameOptionButton.prototype.txtHotkey = null;
GameOptionButton.prototype.isEnabled = true;
GameOptionButton.prototype.hotkey = "";
GameOptionButton.prototype.readCustomData_onNewlyVisible = function (msg) {
  gamebtn_hotkey_pressed = null;
  gamebtn_hotkey_pressed_waitT = (+new Date()) + 1000;
  this.optionID = msg.readUInt32();
  // this.optionType = msg.readUInt8();
  var str = msg.readString();
  str = str.replace('\n', "newline");
//   console.log(str);
  var jo = JSON.parse(str);
  this.label = jo.label.replace('newline', "\n");
  this.optionType = jo.value;
  this.color = jo.color;
  this.opacity = jo.opacity / 100;
  this.hoverStroke = jo.hoverStroke;
  this.btnStroke = jo.btnStroke;
  this.isEnabled = Number(jo.enabled) == 1;
  this.hotkey = jo.hotkey;

  if (!this.isEnabled) {
    this.opacity *= 0.5;
  }
  // console.log(jo);
  if (null == this.txtLabel) {
    this.txtLabel = new _0x120450(12, "#FFFFFF"); //"#043400");
    this.txtLabel.x = 0;
    this.txtLabel.y = 0;
    this.txtLabel.strokeW = 0;
    this.txtLabel.multiLine = true;
    this.txtLabel.renderScale = 2.0; //render larger to undo 'zoom of 3x'
    this.txtLabel.setText(this.label);
  }

  if (this.isEnabled && this.hotkey != "" && null == this.txtHotkey) {
    this.txtHotkey = new _0x120450(8, "#FFFFFF"); //"#043400");
    this.txtHotkey.x = 0;
    this.txtHotkey.y = 0;
    this.txtHotkey.strokeW = 0;
    this.txtHotkey.multiLine = false;
    this.txtHotkey.renderScale = 2.0; //render larger to undo 'zoom of 3x'
    this.txtHotkey.setText(this.hotkey);
    this.txtHotkey.setColor("white", null, 0)
    this.txtHotkey.setStroke(0);

  }
}
GameOptionButton.prototype.readCustomData_onUpdate = function (msg) {
  // this.highlight = msg.readUInt8() == 1;
}

var o_gameOptionButton = 129;
function GameOptionButton() {
  GameOptionButton.superClass.call(this, o_gameOptionButton);
}

window.GameOptionButton = GameOptionButton;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(GameOptionButton, o_gameOptionButton);

//

_0x2a91c6 = GameObj;
_0x4b7b14.prototype = Object.create(_0x2a91c6.prototype);
_0x4b7b14.prototype.constructor = _0x4b7b14;
_0x4b7b14.superClass = _0x2a91c6;
_0x4b7b14.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x4b7b14.prototype.customDraw = function (_0x2b6cff) {
    _0x2b6cff = this.isEdibleOutlined() ? '_e' : '';
    if (_0x2b6cff = _0x2f22f9('img/desert/food/aloevera/aloeveraleaf' + _0x2b6cff + '.png')) {
        ctx.save();
        var _0x110d84 = 1.2 * this.rad;
        ctx.rotate(this.rPer * Math.PI * 0x2);
        ctx.drawImage(_0x2b6cff, -_0x110d84, -_0x110d84, 0x2 * _0x110d84, 0x2 * _0x110d84);
        ctx.restore();
    }
};

function _0x4b7b14() {
    _0x4b7b14.superClass.call(this, o_aloeveraLeaf);
    this.doesDrawEffectScale = !0;
}
window.AloeveraLeaf = _0x4b7b14;
GameObjType.setCustomClassForGameObjType(_0x4b7b14, o_aloeveraLeaf);
_0x2a91c6 = GameObj;
_0x420887.prototype = Object.create(_0x2a91c6.prototype);
_0x420887.prototype.constructor = _0x420887;
_0x420887.superClass = _0x2a91c6;
_0x420887.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x420887.prototype.customDraw = function (_0x388cd4) {
    _0x388cd4 = this.isEdibleOutlined() ? '_e' : '';
    if (_0x388cd4 = _0x2f22f9('img/desert/food/aloevera/aloevera' + _0x388cd4 + '.png')) {
        ctx.save();
        var _0x3a5a66 = 1.15 * this.rad;
        ctx.rotate(this.rPer * Math.PI * 0x2);
        ctx.drawImage(_0x388cd4, -_0x3a5a66, -_0x3a5a66, 0x2 * _0x3a5a66, 0x2 * _0x3a5a66);
        ctx.restore();
    }
};

function _0x420887() {
    _0x420887.superClass.call(this, o_aloeveraPlant);
    this.doesDrawEffectScale = this.drawEffectScale_Slow = !0;
}
window.AloeveraPlant = _0x420887;
GameObjType.setCustomClassForGameObjType(_0x420887, o_aloeveraPlant);
_0x2a91c6 = GameObj;
_0x567dcf.prototype = Object.create(_0x2a91c6.prototype);
_0x567dcf.prototype.constructor = _0x567dcf;
_0x567dcf.superClass = _0x2a91c6;
_0x567dcf.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x567dcf.prototype.customDraw = function (_0x10c747) {
    _0x10c747 = this.isEdibleOutlined() ? '_e' : '';
    if (_0x10c747 = _0x2f22f9('img/desert/food/cactus/cactus' + _0x10c747 + '.png')) {
        ctx.save();
        var _0x45f725 = 1.15 * this.rad;
        ctx.rotate(this.rPer * Math.PI * 0x2);
        ctx.drawImage(_0x10c747, -_0x45f725, -_0x45f725, 0x2 * _0x45f725, 0x2 * _0x45f725);
        ctx.restore();
    }
};

function _0x567dcf() {
    _0x567dcf.superClass.call(this, o_cactus);
    this.doesDrawEffectScale = this.drawEffectScale_Slow = !0;
}
window.Cactus = _0x567dcf;
GameObjType.setCustomClassForGameObjType(_0x567dcf, o_cactus);
_0x2a91c6 = GameObj;
_0x435a03.prototype = Object.create(_0x2a91c6.prototype);
_0x435a03.prototype.constructor = _0x435a03;
_0x435a03.superClass = _0x2a91c6;
_0x435a03.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x435a03.prototype.customDraw = function (_0x147d8d) {
    _0x147d8d = 'img/desert/food/cactuspear/cactuspear' + (this.isEdibleOutlined() ? '_e' : '') + '.png';
    if (_0x147d8d = _0x2f22f9(_0x147d8d)) {
        ctx.save();
        var _0x2cb8f6 = this.rad;
        ctx.rotate(this.rPer * Math.PI * 0x2);
        ctx.drawImage(_0x147d8d, -_0x2cb8f6, -_0x2cb8f6, 0x2 * _0x2cb8f6, 0x2 * _0x2cb8f6);
        ctx.restore();
    }
};

function _0x435a03() {
    _0x435a03.superClass.call(this, o_cactusPear);
    this.doesDrawEffectScale = !0;
}
window.CactusPear = _0x435a03;
GameObjType.setCustomClassForGameObjType(_0x435a03, o_cactusPear);
_0x2a91c6 = GameObj;
_0x230c54.prototype = Object.create(_0x2a91c6.prototype);
_0x230c54.prototype.constructor = _0x230c54;
_0x230c54.superClass = _0x2a91c6;
_0x230c54.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x230c54.prototype.customDraw = function (_0x5a2f6a) {
    _0x5a2f6a = this.isEdibleOutlined() ? '_e' : '';
    if (_0x5a2f6a = _0x2f22f9('img/desert/food/date/date' + _0x5a2f6a + '.png')) {
        ctx.save();
        var _0x4824d9 = this.rad;
        ctx.rotate(this.rPer * Math.PI * 0x2);
        ctx.drawImage(_0x5a2f6a, -_0x4824d9, -_0x4824d9, 0x2 * _0x4824d9, 0x2 * _0x4824d9);
        ctx.restore();
    }
};

function _0x230c54() {
    _0x230c54.superClass.call(this, o_dateFruit);
    this.doesDrawEffectScale = !0;
}
window.DateFruit = _0x230c54;
GameObjType.setCustomClassForGameObjType(_0x230c54, o_dateFruit);
_0x2a91c6 = GameObj;
_0x15ca27.prototype = Object.create(_0x2a91c6.prototype);
_0x15ca27.prototype.constructor = _0x15ca27;
_0x15ca27.superClass = _0x2a91c6;
_0x15ca27.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x15ca27.prototype.customDraw = function (_0x48de6f) {
    _0x48de6f = this.isEdibleOutlined() ? '_e' : '';
    if (_0x48de6f = _0x2f22f9('img/desert/food/mango/' + this.specType + '/' + ('mango' + _0x48de6f) + '.png')) {
        ctx.save();
        var _0x52357a = this.rad;
        ctx.rotate(this.rPer * Math.PI * 0x2);
        ctx.drawImage(_0x48de6f, -_0x52357a, -_0x52357a, 0x2 * _0x52357a, 0x2 * _0x52357a);
        ctx.restore();
    }
};

function _0x15ca27() {
    _0x15ca27.superClass.call(this, o_mango);
    this.doesDrawEffectScale = !0;
}
window.Mango = _0x15ca27;
GameObjType.setCustomClassForGameObjType(_0x15ca27, o_mango);
_0x2a91c6 = GameObj;
_0x5ba1d6.prototype = Object.create(_0x2a91c6.prototype);
_0x5ba1d6.prototype.constructor = _0x5ba1d6;
_0x5ba1d6.superClass = _0x2a91c6;
_0x5ba1d6.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x5ba1d6.prototype.customDraw = function (_0x3ae7c0) {
    _0x3ae7c0 = this.isEdibleOutlined() ? '_e' : '';
    if (_0x3ae7c0 = _0x2f22f9('img/desert/food/melon/melon' + _0x3ae7c0 + '.png')) {
        ctx.save();
        var _0x278b7e = this.rad;
        ctx.rotate(this.rPer * Math.PI * 0x2);
        ctx.drawImage(_0x3ae7c0, -_0x278b7e, -_0x278b7e, 0x2 * _0x278b7e, 0x2 * _0x278b7e);
        ctx.restore();
    }
};

function _0x5ba1d6() {
    _0x5ba1d6.superClass.call(this, o_melon);
    this.doesDrawEffectScale = !0;
}
window.Melon = _0x5ba1d6;
GameObjType.setCustomClassForGameObjType(_0x5ba1d6, o_melon);
_0x2a91c6 = GameObj;
_0x2bab33.prototype = Object.create(_0x2a91c6.prototype);
_0x2bab33.prototype.constructor = _0x2bab33;
_0x2bab33.superClass = _0x2a91c6;
_0x2bab33.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x2bab33.prototype.customDraw = function (_0x5dbf9a) {
    _0x5dbf9a = 'img/desert/food/melonslice/melonslice' + (this.isEdibleOutlined() ? '_e' : '') + '.png';
    if (_0x5dbf9a = _0x2f22f9(_0x5dbf9a)) {
        ctx.save();
        var _0x1ebe21 = this.rad;
        ctx.rotate(this.rPer * Math.PI * 0x2);
        ctx.drawImage(_0x5dbf9a, -_0x1ebe21, -_0x1ebe21, 0x2 * _0x1ebe21, 0x2 * _0x1ebe21);
        ctx.restore();
    }
};

function _0x2bab33() {
    _0x2bab33.superClass.call(this, o_melonSlice);
    this.doesDrawEffectScale = !0;
}
window.MelonSlice = _0x2bab33;
GameObjType.setCustomClassForGameObjType(_0x2bab33, o_melonSlice);
_0x2a91c6 = GameObj;
_0x3e402e.prototype = Object.create(_0x2a91c6.prototype);
_0x3e402e.prototype.constructor = _0x3e402e;
_0x3e402e.superClass = _0x2a91c6;
_0x3e402e.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x3e402e.prototype.customDraw = function (_0x2bef76) {
    _0x2bef76 = this.isEdibleOutlined() ? '_e' : '';
    if (_0x2bef76 = _0x2f22f9('img/desert/food/orange/orange' + _0x2bef76 + '.png')) {
        ctx.save();
        var _0x141ed7 = this.rad;
        ctx.rotate(this.rPer * Math.PI * 0x2);
        ctx.drawImage(_0x2bef76, -_0x141ed7, -_0x141ed7, 0x2 * _0x141ed7, 0x2 * _0x141ed7);
        ctx.restore();
    }
};
_0x3e402e.prototype.updateZ = function () {
    this.z = 0x3e8 + this.rad;
};

function _0x3e402e() {
    _0x3e402e.superClass.call(this, o_orange);
    this.doesDrawEffectScale = !0;
}
window.Orange = _0x3e402e;
GameObjType.setCustomClassForGameObjType(_0x3e402e, o_orange);
_0x2a91c6 = GameObj;
_0x27ed7a.prototype = Object.create(_0x2a91c6.prototype);
_0x27ed7a.prototype.constructor = _0x27ed7a;
_0x27ed7a.superClass = _0x2a91c6;
_0x27ed7a.prototype.updateZ = function () {
    this.z = -0x9e;
};
_0x27ed7a.prototype.customDraw = function (_0x50d006) {
    ctx.save();
    0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
    _0x50d006 = 1.5 * Math.sin(0x2 * Math.PI / 0x6 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
    ctx.fillStyle = '#b0a13b';
    ctx.beginPath();
    ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI);
    ctx.fill();
    0x2 != _0x14fca5 && (ctx.fillStyle = '#bdae47', ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - 0x4 + _0x50d006), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.45 * this.rad, 0.45 * -this.rad + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x50d006), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x50d006), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x50d006), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x50d006), 0, 0x2 * Math.PI), ctx.fill(), 0x32 < this.rad && (ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0xa, 0, 0x2 * Math.PI), ctx.fill()));
    ctx.restore();
};

function _0x27ed7a() {
    _0x27ed7a.superClass.call(this, o_quickSand);
    this.animateRadOnSpawn = !0x1;
}
window.Quicksand = _0x27ed7a;
GameObjType.setCustomClassForGameObjType(_0x27ed7a, o_quickSand);
_0x2a91c6 = GameObj;
_0x1491a2.prototype = Object.create(_0x2a91c6.prototype);
_0x1491a2.prototype.constructor = _0x1491a2;
_0x1491a2.superClass = _0x2a91c6;
_0x1491a2.prototype.updateZ = function () {
    this.z = -0x9e;
};
_0x1491a2.prototype.customDraw = function (_0x47c215) {
    ctx.save();
    0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
    _0x47c215 = 1.5 * Math.sin(0x2 * Math.PI / 0x6 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
    ctx.fillStyle = this.isOasisWater ? '#3881C4' : '#AE9F43';
    ctx.beginPath();
    ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI);
    ctx.fill();
    0x2 != _0x14fca5 && (ctx.fillStyle = this.isOasisWater ? '#3881C4' : '#bdae47', ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - 0x4 + _0x47c215), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.45 * this.rad, 0.45 * -this.rad + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x47c215), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * this.rad, 0.5 * this.rad + 0xf * this.rPer, Math.max(0, 0.4 * this.rad + _0x47c215), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -this.rad * 0.707, 0.55 * +this.rad * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * this.rad + _0x47c215), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -this.rad, 0.35 * -this.rad + 0xf * this.rPer, Math.max(0, 0.3 * this.rad + _0x47c215), 0, 0x2 * Math.PI), ctx.fill(), 0x32 < this.rad && (ctx.beginPath(), ctx.arc(this.rad + 0xa * this.rPer, 0x32 * this.rPer, 0x8, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(this.rad - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0xa, 0, 0x2 * Math.PI), ctx.fill()));
    ctx.restore();
};
_0x1491a2.prototype.afterCustomDraw = function () {};

function _0x1491a2() {
    _0x1491a2.superClass.call(this, o_oasis);
    this.animateRadOnSpawn = !0x1;
}
_0x1491a2.prototype.readCustomData_onNewlyVisible = function (_0x3f20c8) {
    _0x1491a2.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3f20c8);
    this.readInfo(_0x3f20c8);
};
_0x1491a2.prototype.readCustomData_onUpdate = function (_0x2f2b0a) {
    _0x1491a2.superClass.prototype.readCustomData_onUpdate.call(this, _0x2f2b0a);
    this.readInfo(_0x2f2b0a);
};
_0x1491a2.prototype.circles = [];
_0x1491a2.prototype.isOasisWater = !0x1;
_0x1491a2.prototype.readInfo = function (_0x24fdd5) {
    this.isOasisWater = 0x1 == _0x24fdd5.readUInt8();
};
window.Oasis = _0x1491a2;
GameObjType.setCustomClassForGameObjType(_0x1491a2, o_oasis);
_0x2a91c6 = Animal;
_0x20d68d.prototype = Object.create(_0x2a91c6.prototype);
_0x20d68d.prototype.constructor = _0x20d68d;
_0x20d68d.superClass = _0x2a91c6;
_0x20d68d.prototype.getSubSpecies = function () {
    var _0x999765 = '';
    if (0x1 == this.animalSpecies || 0x2 == this.animalSpecies) _0x999765 = '/' + this.animalSubSpecies;
    return _0x999765;
};
_0x20d68d.prototype.getAbilityInfo = function (_0x2307cf) {
    _0x2307cf = {};
    _0x2307cf.abilName = 'Loud ' + (0x2 == this.animalSpecies ? 'Meow' : 'Noise');
    0x1 == this.animalSpecies && (_0x2307cf.abilName += `\n& Camouflage`);
    var _0x4be8bb = this.getSubSpecies();
    _0x2307cf.abilImg = 'skins/land/lion/' + this.animalSpecies + _0x4be8bb + '/lion_roar.png';
    return _0x2307cf;
};
_0x20d68d.prototype.animalInfo = function () {
    var _0x3f9131 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x3f9131.aniName = 'Lion';
        break;
    case 0x1:
        _0x3f9131.aniName = 'Lioness';
        break;
    case 0x2:
        _0x3f9131.aniName = 'Lion Cub';
        break;
    case 0x3:
        _0x3f9131.aniName = `Black-Maned\nLion`;
        break;
    case 0x4:
        _0x3f9131.aniName = 'White Lion';
        break;
    case 0x5:
        _0x3f9131.aniName = 'Black Lion';
        break;
    case 100:
        _0x3f9131.aniName = 'The Mantalian';
        break;
    }
    _0x3f9131.aniDesc = '';
    _0x3f9131.upgradeText = 0x1 == this.animalSpecies ? 'UPGRADED to ' + _0x3f9131.aniName + `!\n Lioness are fast and can launch an ambush attack. (Stop moving to camouflage)!` : 0x2 == this.animalSpecies ? 'UPGRADED to ' + _0x3f9131.aniName + `!\n Press W to release a mighty MEOW!` : 'UPGRADED to ' + _0x3f9131.aniName + `!\n Press W to release a mighty ROAR (Rawr!)!`;
    _0x3f9131.aniCol = '#FF9000';
    var _0x4137df = this.getSubSpecies();
    _0x3f9131.skinName = 'land/lion/' + this.animalSpecies + _0x4137df + '/lion';
    return _0x3f9131;
};
_0x20d68d.prototype.getSkinName = function () {
    var _0x365250 = this.getSubSpecies();
    return 'land/lion/' + this.animalSpecies + _0x365250 + '/lion' + (0 == this.specType ? '' : this.specType);
};
_0x20d68d.prototype.setStealth = function () {
    _0x20d68d.superClass.prototype.setStealth.call(this);
    this.flag_stealth && 0x1 == this.animalSpecies && (this.idealOp = myPlayerID == this.id ? 0.1 : 0);
};
_0x20d68d.prototype.biteStart = 0;
_0x20d68d.prototype.flapAmount = 0x3;
_0x20d68d.prototype.flapDur = 1.5;
_0x20d68d.prototype.roarStartT = -0x1f4;
var _0x2b1fa9 = 0x1,
    _0x345ac9 = 0x1;
_0x20d68d.prototype.drawSkinCustomization = function () {
    this.setSkinScale();
    if (0x1 == this.animalSpecies && !this.flag_underWater && !this.flag_stealth) {
        var _0x4c167b = this.getSubSpecies(),
            _0x4c167b = 'skins/land/lion/' + this.animalSpecies + _0x4c167b + '/bones.png',
            _0x23902e = _0x2f22f9(_0x4c167b);
        if (_0x23902e) {
            var _0x4c167b = this.skinScale,
                _0x2811fc = this.skinRad;
            ctx.drawImage(_0x23902e, -_0x2811fc * _0x4c167b, -_0x2811fc * _0x4c167b, 0x2 * _0x2811fc * _0x4c167b, 0x2 * _0x2811fc * _0x4c167b);
        }
    }
    if (this.flag_usingAbility) {
        if (0 == this.biteStart && (this.biteStart = _0x1534e0 + this.roarStartT), 0 != this.specType && void 0 != this.specType && (_0x4c167b = this.getSubSpecies(), _0x4c167b = 'skins/land/lion/' + this.animalSpecies + _0x4c167b + '/lion_head1.png', _0x23902e = _0x2f22f9(_0x4c167b), _0x2811fc = (_0x1534e0 - this.biteStart) / 0x3e8, _0x4c167b = 1.07 * this.skinScale, _0x23902e)) {
            var _0x86a486;
            _0x86a486 = this.flapAmount - (0x2 == this.animalSpecies ? 0.5 : 0);
            _0x86a486 = 0x2 != _0x14fca5 ? _0x93972d(_0x2811fc, this.flapDur, _0x86a486, 0x2) : this.flapAmount;
            ctx.save();
            _0x2811fc = this.rad;
            ctx.drawImage(_0x23902e, -_0x2811fc * _0x4c167b, (-_0x2811fc + 0.1 * _0x2811fc) * _0x4c167b - _0x86a486, 0x2 * _0x2811fc * _0x4c167b, 0x2 * _0x2811fc * _0x4c167b);
            ctx.restore();
        }
    } else this.biteStart = 0;
};

function _0x20d68d() {
    _0x20d68d.superClass.call(this, o_player);
}
window.Lion = _0x20d68d;
GameObjType.setCustomClassForGameObjType(_0x20d68d, o_player, _0x49ee98);
_0x2a91c6 = Animal;
_0x51a769.prototype = Object.create(_0x2a91c6.prototype);
_0x51a769.prototype.constructor = _0x51a769;
_0x51a769.superClass = _0x2a91c6;
_0x51a769.prototype.animalInfo = function () {
    var _0x185c4b = {};
    switch (this.animalSpecies) {
    case 0:
        _0x185c4b.aniName = 'Rhino';
        break;
    case 0x1:
        _0x185c4b.aniName = 'White Rhino';
        break;
    case 0x2:
        _0x185c4b.aniName = 'Black Rhino';
        break;
    case 0x3:
        _0x185c4b.aniName = 'Woolly Rhino';
        break;
    case 100:
        _0x185c4b.aniName = 'Cotton Rhino';
        break;
    }
    _0x185c4b.skinName = 'land/rhino/' + this.animalSpecies + '/rhino';
    _0x185c4b.aniDesc = '';
    _0x185c4b.upgradeText = 'UPGRADED to ' + _0x185c4b.aniName + `!\n Press W to CHARGE with your mighty horn!`;
    _0x185c4b.aniCol = '#94a3a9';
    return _0x185c4b;
};
_0x51a769.prototype.getAbilityInfo = function (_0x3fd46e) {
    _0x3fd46e = {
        'abilName': 'Charge!'
    };
    _0x3fd46e.abilImg = 'skins/land/rhino/' + this.animalSpecies + '/rhino_charge.png';
    return _0x3fd46e;
};
_0x51a769.prototype.getSkinName = function () {
    var _0x16a391 = 'land/rhino/' + this.animalSpecies + '/rhino';
    return _0x16a391 += 0 == this.specType ? '' : 0x1;
};
_0x4147c3 = 0.1;
_0x51a769.prototype.drawOnTopOfSkinImg = function () {
    _0x225545 && _0x51a769.superClass.prototype.drawOnTopOfSkinImg.call(this);
};
_0x51a769.prototype.drawSkinCustomization = function () {
    if (_0x225545) _0x51a769.superClass.prototype.drawSkinCustomization.call(this);
    else if (this.flag_usingAbility) {
        var _0x5bec11 = _0x2f22f9('skins/land/rhino/' + this.animalSpecies + '/rhino_head1.png'),
            _0x1d6405 = 0.98 * this.skinScale,
            _0x7e3d8e;
        _0x5bec11 && (frame = 0, ctx.save(), _0x7e3d8e = this.rad, ctx.drawImage(_0x5bec11, -_0x7e3d8e * _0x1d6405, (-_0x7e3d8e + _0x7e3d8e * _0x4147c3) * _0x1d6405 + frame, 0x2 * _0x7e3d8e * _0x1d6405, 0x2 * _0x7e3d8e * _0x1d6405), ctx.restore());
    }
};

function _0x51a769() {
    _0x51a769.superClass.call(this, o_player);
}
window.Rhino = _0x51a769;
GameObjType.setCustomClassForGameObjType(_0x51a769, o_player, _0x1bea6f);
_0x2a91c6 = Animal;
PigAnimal.prototype = Object.create(_0x2a91c6.prototype);
PigAnimal.prototype.constructor = PigAnimal;
PigAnimal.superClass = _0x2a91c6;
PigAnimal.prototype.animalInfo = function () {
    var _0x3357f6 = {};
    _0x3357f6.skinName = 'land/pig/' + this.animalSpecies + '/pig';
    _0x3357f6.aniName = 'Pig';
    _0x3357f6.upgradeText = 'UPGRADED to ' + _0x3357f6.aniName + `!\n  Pigs move FAST through MUD! (Can use 'stink' on mud/ hiding holes!)`;
    switch (this.animalSpecies) {
    case 0:
        _0x3357f6.aniName = 'Pig';
        break;
    case 0x1:
        _0x3357f6.aniName = 'Pig';
        break;
    case 0x2:
        _0x3357f6.aniName = 'Stinky Pig', _0x3357f6.upgradeText = 'UPGRADED to ' + _0x3357f6.aniName + `!\n ` + _0x3357f6.aniName + ' dives through MUD (can use stink everywhere!)';
    }
    _0x3357f6.aniCol = '#DD6BD4';
    return _0x3357f6;
};
PigAnimal.prototype.getAbilityInfo = function (_0x195f46) {
    _0x195f46 = {
        'abilName': 'Stink cloud'
    };
    _0x195f46.abilImg = 'skins/land/pig/' + this.animalSpecies + '/pig.png';
    return _0x195f46;
};
PigAnimal.prototype.getSkinName = function () {
    return 'land/pig/' + this.animalSpecies + '/pig';
};
PigAnimal.prototype.animalDiveColor = function () {
    return this.flag_underWater ? this.flag_eff_isInMud ? '#7E6A35' : '#4E71C3' : '';
};
PigAnimal.prototype.animalDivesInMud = function () {
    return !0;
};

function PigAnimal() {
    PigAnimal.superClass.call(this, o_player);
}
window.Pig = PigAnimal;
GameObjType.setCustomClassForGameObjType(PigAnimal, o_player, _0xe39007);
_0x2a91c6 = Animal;
_0x13b3d3.prototype = Object.create(_0x2a91c6.prototype);
_0x13b3d3.prototype.constructor = _0x13b3d3;
_0x13b3d3.superClass = _0x2a91c6;
_0x13b3d3.prototype.animalInfo = function () {
    var _0x4693a4 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x4693a4.aniName = 'Deer';
        break;
    case 0x1:
        _0x4693a4.aniName = 'Doe';
        break;
    case 0x2:
        _0x4693a4.aniName = 'Marsh Deer';
        break;
    case 100:
        _0x4693a4.aniName = 'The Wendigo';
        break;
    }
    _0x4693a4.aniDesc = '';
    _0x4693a4.upgradeText = 'UPGRADED to ' + _0x4693a4.aniName + `! \nPress W to dig up food! \nDig in mud for better food!\n Hint:Check water areas for new food sources!`;
    _0x4693a4.aniCol = '#C4773E';
    _0x4693a4.skinName = 'land/deer/' + this.animalSpecies + '/deer';
    return _0x4693a4;
};
_0x13b3d3.prototype.getAbilityInfo = function (_0x1df613) {
    _0x1df613 = {
        'abilName': 'Dig For Food'
    };
    _0x1df613.abilImg = 'skins/land/deer/' + '0' + '/deer.png';
    return _0x1df613;
};
_0x13b3d3.prototype.getSkinName = function () {
    return 'land/deer/' + this.animalSpecies + '/deer';
};
_0x13b3d3.prototype.moveF = 0.08;
_0x13b3d3.prototype.jumpAnim = null;
_0x13b3d3.prototype.frame = 0;
_0x13b3d3.prototype.drawUnderSkinImg = function () {
    if (this.flag_usingAbility)
        if (0x2 == this.animalSpecies) {
            null == this.jumpAnim && (this.jumpAnim = new _0x1cbd2d(this, 0.5, _0x1cbd2d.halfWave), this.jumpAnim.keepLastFrame = !0, this.jumpAnim.loop = !0, this.jumpAnim.onFrameEntered = function (_0x158b39) {
                this.forObj.frame = _0x158b39;
            }, this.jumpAnim.onStop = function () {});
            null != this.jumpAnim && this.jumpAnim.run();
            var _0x5671e5 = this.rad - this.outlineW,
                _0x58c817 = 0x1f4 / 0x154;
            this.setSkinScale();
            var _0x36e84c = _0x2f22f9('skins/land/deer/legs0.png'),
                _0x40b378 = _0x2f22f9('skins/land/deer/legs1.png');
            _0x36e84c && _0x40b378 && (_0x58c817 = this.skinScale + 0.15 * this.skinScale * this.frame, _0x5671e5 = this.skinRad, 0 == this.specType ? (ctx.drawImage(_0x36e84c, -_0x5671e5 * _0x58c817, -_0x5671e5 * _0x58c817, 0x2 * _0x5671e5 * _0x58c817, 0x2 * _0x5671e5 * _0x58c817), ctx.drawImage(_0x40b378, -_0x5671e5 * _0x58c817, (-_0x5671e5 - _0x5671e5 * this.moveF * this.frame) * _0x58c817, 0x2 * _0x5671e5 * _0x58c817, 0x2 * _0x5671e5 * _0x58c817)) : (ctx.drawImage(_0x40b378, -_0x5671e5 * _0x58c817, -_0x5671e5 * _0x58c817, 0x2 * _0x5671e5 * _0x58c817, 0x2 * _0x5671e5 * _0x58c817), ctx.drawImage(_0x36e84c, -_0x5671e5 * _0x58c817, (-_0x5671e5 + _0x5671e5 * this.moveF * this.frame) * _0x58c817, 0x2 * _0x5671e5 * _0x58c817, 0x2 * _0x5671e5 * _0x58c817)));
        } else {
            if (this.animalType == _0x2342f6 || this.animalType == _0x1cd045) _0x5671e5 = 0x1 * Math.sin(0x2 * Math.PI / 1.5 * ((_0x1534e0 - this.spawnTime) / 0x3e8)), _0x58c817 = ctx.globalAlpha, ctx.globalAlpha *= 0.8, _0x110b78(0, 0.3 * this.rad, this.rad * (0.9 + 0.12 * _0x5671e5), '#7F582B'), _0x110b78(0, 0.3 * -this.rad, this.rad * (1.05 + 0.09 * _0x5671e5), '#7F582B'), ctx.globalAlpha = _0x58c817;
        }
    else this.jumpAnim = null;
};

function _0x13b3d3() {
    _0x13b3d3.superClass.call(this, o_player);
}
window.Deer = _0x13b3d3;
GameObjType.setCustomClassForGameObjType(_0x13b3d3, o_player, _0x2342f6);
_0x2a91c6 = Animal;
_0x1afbb3.prototype = Object.create(_0x2a91c6.prototype);
_0x1afbb3.prototype.constructor = _0x1afbb3;
_0x1afbb3.superClass = _0x2a91c6;
_0x1afbb3.prototype.animalInfo = function () {
    var infoO = {};
  infoO.aniCol = "#755A2A";
  infoO.fileName = "donkey";
  switch (this.animalSpecies) {
    case 0:
      infoO.aniName = "Donkey";
      infoO.upgradeText =
        "UPGRADED to " + infoO.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
      break;
    case 1:
      infoO.aniName = "Jackass";
      infoO.aniCol = "#000";
      infoO.upgradeText =
        "UPGRADED to " + infoO.aniName + "!\nPress 'W' to give RARE kick and stun your opponents.\n(Keep mouse close to your animal along with boosting to become a mad donkey!)";
      break;
    case 2:
      infoO.aniName = "Zonkey";
      infoO.aniCol = "#755A2A";
      infoO.upgradeText =
        "UPGRADED to " + infoO.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
      infoO.fileName = "zonkey";
      break;
    case 100:
      infoO.aniName = "Equusthulhu";
      infoO.aniCol = "#755A2A";
      infoO.upgradeText =
        "UPGRADED to " + infoO.aniName + "!\nPress 'W' to give RARE kick and stun your opponents";
      break;
  }
  infoO.skinName = "land/donkey/" + this.animalSpecies + "/" + infoO.fileName;
  infoO.aniDesc = "";
  return infoO;
};
_0x1afbb3.prototype.getAbilityInfo = function (_0x1180e5) {
    _0x1180e5 = {
        'abilName': 'Back Kick!'
    };
    _0x1180e5.abilImg = 'skins/land/donkey/' + this.animalSpecies + '/' + this.animalInfo().fileName + '.png';
    return _0x1180e5;
};
_0x1afbb3.prototype.getSkinName = function () {
    var _0x5f385c = 'land/donkey/' + this.animalSpecies + '/' + this.animalInfo().fileName;
    0 != this.specType && (_0x5f385c = 0x2 < this.specType ? _0x5f385c + 0x3 : _0x5f385c + this.specType);
    return _0x5f385c;
};
_0x1afbb3.prototype.drawUnderSkinImg = function () {
    if (this.flag_usingAbility && 0 < this.biteStart) {
        ctx.save();
        ctx.globalAlpha *= 0x1;
        var _0x3c05a6 = _0x2f22f9('skins/land/donkey/' + this.animalSpecies + '/legs.png');
        if (_0x3c05a6) {
            var _0x4c1a9c = this.rad,
                _0x363082 = 0x2 * _0x4c1a9c,
                _0x4c1a9c = 0x2 * _0x4c1a9c * Math.min(0x1, (_0x1534e0 - this.biteStart) / 0x546);
            ctx.drawImage(_0x3c05a6, 0 + -0.5 * _0x363082, 0x1 * this.rad + -2.5 * _0x4c1a9c, _0x363082, _0x4c1a9c);
        }
        ctx.restore();
    }
};
_0x1afbb3.prototype.biteStart = 0;
_0x1afbb3.prototype.flapAmount = 0.3;
_0x1afbb3.prototype.flapDur = 0x1;
_0x1afbb3.prototype.roarStartT = -0x1f4;
_0x1afbb3.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility) {
        0 == this.biteStart && (this.biteStart = _0x1534e0 + this.roarStartT);
        var _0x8df3e2;
        _0x8df3e2 = _0x93972d((_0x1534e0 - this.biteStart) / 0x3e8, this.flapDur, this.flapAmount, 0x2);
        if (_0x5b0973 = _0x2f22f9('skins/land/donkey/' + this.animalSpecies + '/donkey_head' + this.specType + '.png')) {
            ctx.save();
            var _0x2367bd = 0,
                _0x5ee0b0 = 0x1,
                _0xffe475 = 0.85,
                _0xe91cc = 1.2;
            0x1 == this.specType ? (_0x2367bd = -0x19, _0x5ee0b0 = 1.2 - 0.3 * _0x8df3e2, _0xffe475 = 0.8 + 0.3 * _0x8df3e2, _0xe91cc = 1.4 - 0.3 * _0x8df3e2) : 0x2 == this.specType && (_0x2367bd = 0x19, _0x5ee0b0 = 0.8 - 0.3 * _0x8df3e2, _0xffe475 = 0.8 + 0.3 * _0x8df3e2, _0xe91cc = 1.4 - 0.3 * _0x8df3e2, _0x8df3e2 *= -0x1);
            _0x1e677a = 0x1 * this.rad;
            _0x25fb7c = this.rad;
            _0xd3da9f = 0x2 * _0x1e677a * _0xe91cc;
            _0xe91cc *= 0x2 * _0x1e677a;
            _0x5ee0b0 *= 0.5;
            _0xffe475 *= 0x1;
            ctx.rotate(_0x55d748(_0x2367bd) + _0x8df3e2);
            ctx.drawImage(_0x5b0973, 0 + _0xd3da9f * -_0x5ee0b0, _0x25fb7c + _0xe91cc * -_0xffe475, _0xd3da9f, _0xe91cc);
            ctx.restore();
        }
    } else if (this.biteStart = 0, 0 != this.specType) {
        var _0x5b0973 = _0x2f22f9('skins/land/donkey/' + this.animalSpecies + '/donkey_head' + (this.specType - 0x2) + '.png'),
            _0x1e677a;
        if (_0x5b0973) {
            ctx.save();
            _0x1e677a = 1.3 * this.rad;
            var _0x25fb7c = this.rad,
                _0x2367bd = 0x1,
                _0xd3da9f = 0x2 * _0x1e677a * _0x2367bd,
                _0xe91cc = 0x2 * _0x1e677a * _0x2367bd;
            ctx.drawImage(_0x5b0973, 0 + -0.5 * _0xd3da9f, _0x25fb7c + -0.7 * _0xe91cc, _0xd3da9f, _0xe91cc);
            ctx.restore();
        }
    }
};

function _0x1afbb3() {
    _0x1afbb3.superClass.call(this, o_player);
}
window.Donkey = _0x1afbb3;
GameObjType.setCustomClassForGameObjType(_0x1afbb3, o_player, _0x4ab9c5);
_0x2a91c6 = Animal;
_0x25694e.prototype = Object.create(_0x2a91c6.prototype);
_0x25694e.prototype.constructor = _0x25694e;
_0x25694e.superClass = _0x2a91c6;
_0x25694e.prototype.animalInfo = function () {
    var _0x25a3c6 = {
        'aniCol': '#755A2A'
    };
    switch (this.animalSpecies) {
    case 0:
        _0x25a3c6.aniName = 'Zebra';
        this.fileName = 'zebra';
        break;
    case 0x1:
        _0x25a3c6.aniName = 'Okapi', _0x25a3c6.aniCol = '#000', this.fileName = 'okapi';
        break;
    case 100:
        _0x25a3c6.aniName = 'Unicornze', this.fileName = 'zebra';
        break;
    }
    _0x25a3c6.upgradeText = 'UPGRADED to ' + _0x25a3c6.aniName + `!\n Press 'W' to give RARE kick and stun your opponents`;
    _0x25a3c6.skinName = 'land/' + this.fileName + '/' + this.animalSpecies +"/" + this.fileName;
    _0x25a3c6.aniDesc = '';
    return _0x25a3c6;
};
_0x25694e.prototype.getAbilityInfo = function (_0x17b77c) {
    _0x17b77c = {};
    switch (this.animalSpecies) {
    case 0:
        this.fileName = 'zebra';
        break;
    case 0x1:
        this.fileName = 'okapi';
    }
    _0x17b77c.abilName = 'Side Kick!';
    _0x17b77c.abilImg = 'skins/land/' + this.fileName + '/ability.png';
    console.log(_0x17b77c.abilImg);
    return _0x17b77c;
};
_0x25694e.prototype.getSkinName = function () {
    return 'land/' + this.fileName + '/' + this.animalSpecies +"/" + this.fileName;
};
_0x25694e.prototype.biteStart = 0;
_0x25694e.prototype.flapAmount = 0.3;
_0x25694e.prototype.flapDur = 0x1;
_0x25694e.prototype.roarStartT = -0x1f4;

function _0x25694e() {
    _0x25694e.superClass.call(this, o_player);
}
window.Zebra = _0x25694e;
GameObjType.setCustomClassForGameObjType(_0x25694e, o_player, _0x4c8c3e);
_0x2a91c6 = Animal;
Mouse.prototype = Object.create(_0x2a91c6.prototype);
Mouse.prototype.constructor = Mouse;
Mouse.superClass = _0x2a91c6;
Mouse.prototype.objSkinSpotsCanvas = null;
Mouse.prototype.getSkinName = function () {
    return this.animalInfo().skinName;
};
Mouse.prototype.animalInfo = function () {
    var _0x9e9287 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x9e9287.aniName = 'Mouse';
        break;
    case 1:
        _0x9e9287.aniName = 'Golden mouse';
        break;
    case 2:
        _0x9e9287.aniName = 'Purple mouse';
        break;
    case 3:
        _0x9e9287.aniName = 'Winter mouse';
        break;
    case 4:
        _0x9e9287.aniName = 'Star Mouse';
        break;
    case 6:
        _0x9e9287.aniName = 'Sapphire Mouse';
        break;
    case 7:
        _0x9e9287.aniName = 'Amethyst Mouse';
        break;
    case 8:
        _0x9e9287.aniName = 'Emerald Mouse';
        break;
    case 9:
        _0x9e9287.aniName = 'Diamond Mouse';
        break;
    case 15:
        _0x9e9287.aniName = 'Devil Mouse';
        break;
    case 16:
        _0x9e9287.aniName = 'Angel Mouse';
        break;
    case 17:
        _0x9e9287.aniName = "CheeseY's Mouse";
        break;
  
    case 19:
        _0x9e9287.aniName = 'Robo Mouse';
        break;
    }
    _0x9e9287.upgradeText = "You're a tiny " + _0x9e9287.aniName + '- Eat food to grow!';
    _0x9e9287.aniCol = 'gray';
    _0x9e9287.skinName = 'land/mouse/' + this.animalSpecies + '/mouse';
    return _0x9e9287;
};

function Mouse() {
    Mouse.superClass.call(this, o_player);
}
window.Mouse = Mouse;
GameObjType.setCustomClassForGameObjType(Mouse, o_player, _0x4170f3);
_0x2a91c6 = Animal;
_0x7e9327.prototype = Object.create(_0x2a91c6.prototype);
_0x7e9327.prototype.constructor = _0x7e9327;
_0x7e9327.superClass = _0x2a91c6;
_0x7e9327.prototype.objSkinSpotsCanvas = null;
_0x7e9327.prototype.getSkinName = function () {
    return this.animalInfo().skinName;
};
_0x7e9327.prototype.animalInfo = function () {
    var _0x6906b4 = {},
        _0x431e48 = '';
    switch (this.animalSpecies) {
    case 0:
        _0x6906b4.aniName = 'Bear';
        _0x6906b4.upgradeText = `UPGRADED to BEAR!\n Bears climb through green hills! (Press W to use your claw!)`;
        _0x6906b4.aniCol = '#99591C';
        _0x431e48 = 'bear';
        break;
    case 0x1:
        _0x6906b4.aniName = 'Panda', _0x6906b4.upgradeText = 'UPGRADED to ' + _0x6906b4.aniName + `!\n ` + _0x6906b4.aniName + ' climb through green hills! (Press W to use your claw!)', _0x6906b4.aniCol = '#99591C', _0x431e48 = 'panda';
    }
    _0x6906b4.aniCol = '#CAC05B';
    _0x6906b4.skinName = 'land/bear/' + this.animalSpecies + '/' + _0x431e48;
    return _0x6906b4;
};
_0x7e9327.prototype.getAbilityInfo = function (_0x27d1db) {
    _0x27d1db = {
        'abilName': 'Claw Slash!'
    };
    _0x27d1db.abilImg = 'skins/land/bear/' + this.animalSpecies + '/clawslash.png';
    return _0x27d1db;
};

function _0x7e9327() {
    _0x7e9327.superClass.call(this, o_player);
}
window.Bear = _0x7e9327;
GameObjType.setCustomClassForGameObjType(_0x7e9327, o_player, _0x306e7d);
_0x2a91c6 = Animal;
_0x1c6569.prototype = Object.create(_0x2a91c6.prototype);
_0x1c6569.prototype.constructor = _0x1c6569;
_0x1c6569.superClass = _0x2a91c6;
_0x1c6569.prototype.objSkinSpotsCanvas = null;
_0x1c6569.prototype.getSkinName = function () {
    return this.animalInfo().skinName;
};
_0x1c6569.prototype.animalInfo = function () {
    var _0x509375 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x509375.aniName = 'Crocodile';
        _0x509375.aniCol = '#30F51C';
        break;
    case 0x1:
        _0x509375.aniName = 'Giant Crocodile', _0x509375.aniCol = '#757e71';
        break;
    case 4:
        _0x509375.aniName = 'Retro Crocodile Alligator', _0x509375.aniCol = '#757e71';
        break;
    case 5:
        _0x509375.aniName = 'Party Crock', _0x509375.aniCol = '#757e71';
        break;
    case 6:
        _0x509375.aniName = 'Rubble, Alligator', _0x509375.aniCol = '#757e71';
        break;
    case 100:
        _0x509375.aniName = 'Uncle Sam', _0x509375.aniCol = '#757e71';
        break;
    }
    _0x509375.upgradeText = 'UPGRADED to ' + _0x509375.aniName + `!\n Press W to bite and drag around animals! \n+ (Now hide in water spots)+ Swim well in Mud, Lakes & Oceans!`;
    _0x509375.skinName = 'land/croc/' + this.animalSpecies + '/croc';
    return _0x509375;
};
_0x1c6569.prototype.getAbilityInfo = function (_0x23a249) {
    _0x23a249 = {
        'abilName': 'Bite Grab!'
    };
    _0x23a249.abilImg = 'skins/land/croc/' + this.animalSpecies + '/croc.png';
    return _0x23a249;
};

function _0x1c6569() {
    _0x1c6569.superClass.call(this, o_player);
}
window.Croc = _0x1c6569;
GameObjType.setCustomClassForGameObjType(_0x1c6569, o_player, _0x17b991);

_0x2a91c6 = Animal;
YetiAnimal.prototype = Object.create(_0x2a91c6.prototype);
YetiAnimal.prototype.constructor = YetiAnimal;
YetiAnimal.superClass = _0x2a91c6;
YetiAnimal.prototype.animalInfo = function () {
    var _0x4c7a10 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x4c7a10.aniName = 'The Yeti!';
        break;
    case 0x1:
        _0x4c7a10.aniName = 'Golden Yeti!';
        break;
    case 0x2:
        _0x4c7a10.aniName = 'Emerald Yeti!';
        break;
    case 0x3:
        _0x4c7a10.aniName = 'Aqua Yeti';
    }
    _0x4c7a10.skinName = 'arctic/yeti/' + this.animalSpecies + '/yeti';
    _0x4c7a10.aniDesc = '';
    _0x4c7a10.upgradeText = 'UPGRADED to ' + _0x4c7a10.aniName + `!\n
 So it really exists... \n
 Hold W to turn into snow, release W to freeeeeze!`;
    _0x4c7a10.aniCol = '#839eb5';
    return _0x4c7a10;
};
YetiAnimal.prototype.getAbilityInfo = function (_0xe3d0be) {
    _0xe3d0be = {};
    _0xe3d0be.abilName = 'Yeti Roar' + (0x3 == this.animalSpecies ? ` &\n Ice Statue` : '') + '';
    _0xe3d0be.abilImg = 'skins/arctic/yeti/' + this.animalSpecies + '/ability.png';
    return _0xe3d0be;
};
YetiAnimal.prototype.getSkinName = function () {
    var _0x5da76b;
    _0x5da76b = 'arctic/yeti/' + this.animalSpecies + '/yeti';
    return _0x5da76b += 0 == this.specType ? '' : 0x1;
};
YetiAnimal.prototype.drawOnTopOfSkinImg = function () {};
YetiAnimal.prototype.isTransforming = !0x1;
YetiAnimal.prototype.readCustomData_onUpdate = function (_0x2a25d8) {
    YetiAnimal.superClass.prototype.readCustomData_onUpdate.call(this, _0x2a25d8);
    this.isTransforming = 0x1 == _0x2a25d8.readUInt8();
};
YetiAnimal.prototype.readCustomData_onNewlyVisible = function (_0x2e1a7d) {
    YetiAnimal.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x2e1a7d);
    this.isTransforming = 0x1 == _0x2e1a7d.readUInt8();
};
YetiAnimal.prototype.getIdealOpacity = function () {
    return this.flag_underWater || this.flag_usingAbility && this.isTransforming || this.isCamouflage ? 0 : 0x1;
};
YetiAnimal.prototype.biteStart = 0;
YetiAnimal.prototype.flapAmount = 0x3;
YetiAnimal.prototype.flapDur = 1.5;
YetiAnimal.prototype.roarStartT = -0x1f4;
YetiAnimal.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility && this.isTransforming) {
        if (this.isTransforming) {
            ctx.save();
            ctx.globalAlpha = 0x1;
            var _0x25b6df = _0x2f22f9('img/snowball.png');
            if (_0x25b6df) {
                var _0x338813 = this.rad;
                ctx.rotate(this.rPer * Math.PI * 0x2);
                ctx.drawImage(_0x25b6df, -_0x338813, -_0x338813, 0x2 * _0x338813, 0x2 * _0x338813);
            } else this.drawOutlinedCircle('', 'white');
            ctx.restore();
        }
    } else if (0x4 != this.animalSpecies)
        if (this.setSkinScale(), this.flag_usingAbility) {
            if (0 == this.biteStart && (this.biteStart = _0x1534e0 + this.roarStartT), 0 != this.specType && void 0 != this.specType) {
                var _0x25b6df = _0x2f22f9('skins/arctic/yeti/' + this.animalSpecies + '/yeti_head1.png'),
                    _0x338813 = (_0x1534e0 - this.biteStart) / 0x3e8,
                    _0x223b0f = 1.07 * this.skinScale;
                if (_0x25b6df) {
                    var _0x2851d8;
                    _0x2851d8 = this.flapAmount - (0x1 == this.animalSpecies ? 0.5 : 0);
                    _0x2851d8 = 0x2 != _0x14fca5 ? _0x93972d(_0x338813, this.flapDur, _0x2851d8, 0x2) : this.flapAmount;
                    ctx.save();
                    _0x338813 = this.rad;
                    ctx.drawImage(_0x25b6df, -_0x338813 * _0x223b0f, (-_0x338813 + 0.1 * _0x338813) * _0x223b0f - _0x2851d8, 0x2 * _0x338813 * _0x223b0f, 0x2 * _0x338813 * _0x223b0f);
                    ctx.restore();
                }
            }
        } else this.biteStart = 0;
};

function YetiAnimal() {
    YetiAnimal.superClass.call(this, o_player);
}
window.Yeti = YetiAnimal;
GameObjType.setCustomClassForGameObjType(YetiAnimal, o_player, _0x10ffe7);
_0x2a91c6 = Animal;
_0x557c03.prototype = Object.create(_0x2a91c6.prototype);
_0x557c03.prototype.constructor = _0x557c03;
_0x557c03.superClass = _0x2a91c6;
_0x557c03.prototype.animalInfo = function () {
    var _0x34395a = {};
    switch (this.animalSpecies) {
    case 0:
        _0x34395a.aniName = 'Mammoth!';
        break;
    case 0x1:
        _0x34395a.aniName = 'Golden Mammoth!';
        break;
    case 0x2:
        _0x34395a.aniName = 'Black Mammoth!';
    }
    _0x34395a.skinName = 'arctic/mammoth/' + this.animalSpecies + '/mammoth';
    _0x34395a.aniDesc = '';
    _0x34395a.upgradeText = 'UPGRADED to ' + _0x34395a.aniName + `!\n
 Press W to roll snowballs with your trunk!\n
 The bigger the snowball gets, the longer the freeze!`;
    _0x34395a.aniCol = '#9d4717';
    return _0x34395a;
};
_0x557c03.prototype.getAbilityInfo = function (_0x9016e2) {
    return {
        'abilName': 'Roll snow',
        'abilImg': 'img/snowball.png'
    };
};
_0x557c03.prototype.getSkinName = function () {
    var _0x26dab1;
    _0x26dab1 = 'arctic/mammoth/' + this.animalSpecies + '/mammoth';
    return _0x26dab1 += 0 == this.specType ? '' : 0x1;
};

function _0x557c03() {
    _0x557c03.superClass.call(this, o_player);
}
window.Mammoth = _0x557c03;
GameObjType.setCustomClassForGameObjType(_0x557c03, o_player, _0x13ad6a);
_0x2a91c6 = Animal;
_0x13419a.prototype = Object.create(_0x2a91c6.prototype);
_0x13419a.prototype.constructor = _0x13419a;
_0x13419a.superClass = _0x2a91c6;
_0x13419a.prototype.animalInfo = function () {
    var _0x2e42e8 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x2e42e8.aniName = 'Sabertooth Tiger!';
        break;
    case 0x1:
        _0x2e42e8.aniName = 'Golden Tiger!';
        break;
    case 0x2:
        _0x2e42e8.aniName = 'Margala Sabertooth!';
    }
    _0x2e42e8.skinName = 'arctic/sabertooth/' + this.animalSpecies + '/sabertooth';
    _0x2e42e8.aniDesc = '';
    _0x2e42e8.upgradeText = 'UPGRADED to ' + _0x2e42e8.aniName + `\n
Sabertooth Tigers are great swimmers, dominate the Lakes/Oceans/Mud!`;
    _0x2e42e8.aniCol = '#945A99';
    return _0x2e42e8;
};
_0x13419a.prototype.getAbilityInfo = function (_0x499771) {
    _0x499771 = {
        'abilName': 'Claw Slash!'
    };
    _0x499771.abilImg = 'skins/arctic/sabertooth/' + this.animalSpecies + '/sabertooth.png';
    return _0x499771;
};
_0x13419a.prototype.getSkinName = function () {
    var _0x38943d;
    _0x38943d = 'arctic/sabertooth/' + this.animalSpecies + '/sabertooth';
    return _0x38943d += 0 == this.specType ? '' : 0x1;
};

function _0x13419a() {
    _0x13419a.superClass.call(this, o_player);
}
window.Sabertooth = _0x13419a;
GameObjType.setCustomClassForGameObjType(_0x13419a, o_player, _0x318be6);
_0x2a91c6 = Animal;
_0x432448.prototype = Object.create(_0x2a91c6.prototype);
_0x432448.prototype.constructor = _0x432448;
_0x432448.superClass = _0x2a91c6;
_0x432448.prototype.animalInfo = function () {
    var _0x43beb2 = {
        'aniName': 'Penguin!',
        'skinName': 'arctic/penguin/penguin',
        'aniDesc': ''
    };
    _0x43beb2.upgradeText = 'UPGRADED to ' + _0x43beb2.aniName + `!\n
 Left-click to run!\n
 (HOLD W to slide FAST on ice)!`;
    _0x43beb2.aniCol = '#FFFFFF';
    return _0x43beb2;
};
_0x432448.prototype.getAbilityInfo = function (_0x23387a) {
    return {
        'abilName': 'Slide on ice',
        'abilImg': 'skins/arctic/penguin/penguin1.png'
    };
};
_0x432448.prototype.getSkinName = function () {
    return 'arctic/penguin/penguin' + (0 == this.specType ? '' : 0x1);
};

function _0x432448() {
    _0x432448.superClass.call(this, o_player);
}
window.Penguin = _0x432448;
GameObjType.setCustomClassForGameObjType(_0x432448, o_player, _0x37feb8);
_0x2a91c6 = Animal;
_0x264f5f.prototype = Object.create(_0x2a91c6.prototype);
_0x264f5f.prototype.constructor = _0x264f5f;
_0x264f5f.superClass = _0x2a91c6;
_0x264f5f.prototype.animalInfo = function () {
    var _0x126389 = {
        'aniName': 'Seal!',
        'skinName': 'arctic/seal/seal',
        'aniDesc': ''
    };
    _0x126389.upgradeText = 'UPGRADED to ' + _0x126389.aniName + `!\n
 You can slide on ice (Hold W) + can climb hills (rocks too!)`;
    _0x126389.aniCol = '#633838';
    return _0x126389;
};
_0x264f5f.prototype.getAbilityInfo = function (_0x2820a9) {
    return {
        'abilName': 'Slide on ice',
        'abilImg': 'skins/arctic/seal/seal1.png'
    };
};
_0x264f5f.prototype.getSkinName = function () {
    return 'arctic/seal/seal' + (0 == this.specType ? '' : 0x1);
};

function _0x264f5f() {
    _0x264f5f.superClass.call(this, o_player);
}
window.Seal = _0x264f5f;
GameObjType.setCustomClassForGameObjType(_0x264f5f, o_player, _0x115d14);
_0x2a91c6 = Animal;
_0x45b5df.prototype = Object.create(_0x2a91c6.prototype);
_0x45b5df.prototype.constructor = _0x45b5df;
_0x45b5df.superClass = _0x2a91c6;
_0x45b5df.prototype.animalInfo = function () {
    var infoO = {};

  switch (this.animalSpecies) {
    case 0:
      infoO.aniName = "Walrus!";
      break;
    case 100:
      infoO.aniName = "Candy Rus!";
      break;
    case 201:
      infoO.aniName = "Walrusmelon!";
      break;
  }
  infoO.skinName = "arctic/walrus/" + this.animalSpecies + "/walrus";

  infoO.aniDesc = "";
  infoO.upgradeText =
    "UPGRADED to " +
    infoO.aniName +
    "\n You can slide on ice (Hold W) + can climb hills (rocks too!)";
  infoO.aniCol = "#633838";
  return infoO;
};
_0x45b5df.prototype.getAbilityInfo = function (_0x10018c) {
    return {
        'abilName': 'Slide on ice',
        'abilImg': 'skins/arctic/walrus/' + this.animalSpecies + '/walrus1.png'
    };
};
_0x45b5df.prototype.getSkinName = function () {
    return 'arctic/walrus/' + this.animalSpecies + '/walrus' + (0 == this.specType ? '' : 0x1);
};

function _0x45b5df() {
    _0x45b5df.superClass.call(this, o_player);
}
window.Walrus = _0x45b5df;
GameObjType.setCustomClassForGameObjType(_0x45b5df, o_player, _0xa4ccd0);
_0x2a91c6 = Animal;
_0x2b2550.prototype = Object.create(_0x2a91c6.prototype);
_0x2b2550.prototype.constructor = _0x2b2550;
_0x2b2550.superClass = _0x2a91c6;
_0x2b2550.prototype.animalInfo = function () {
    return {
        'aniName': 'Wolf!',
        'skinName': 'arctic/wolf/wolf',
        'upgradeText': `UPGRADED to Wolf!\n Wolf paws turn very well on ice!\n Press W to howl!`,
        'aniCol': '#6B6B6B'
    };
};
_0x2b2550.prototype.getAbilityInfo = function (_0x69da3d) {
    return {
        'abilName': 'Howl!',
        'abilImg': 'skins/arctic/wolf/wolf1.png'
    };
};
_0x2b2550.prototype.getSkinName = function () {
    return 'arctic/wolf/wolf' + (0 == this.specType ? '' : 0x1);
};

function _0x2b2550() {
    _0x2b2550.superClass.call(this, o_player);
}
window.Wolf = _0x2b2550;
GameObjType.setCustomClassForGameObjType(_0x2b2550, o_player, _0x332f04);
_0x2a91c6 = Animal;
_0x223096.prototype = Object.create(_0x2a91c6.prototype);
_0x223096.prototype.constructor = _0x223096;
_0x223096.superClass = _0x2a91c6;
_0x223096.prototype.animalInfo = function () {
    var _0x3ffcf7 = {
        'aniName': 'Wolverine!',
        'skinName': 'arctic/wolverine/wolverine'
    };
    _0x3ffcf7.upgradeText = 'UPGRADED to ' + _0x3ffcf7.aniName + `!\n Press W to Let out a Powerful GROWL! (Knocks back prey!)`;
    _0x3ffcf7.aniCol = '#843A0F';
    return _0x3ffcf7;
};
_0x223096.prototype.getAbilityInfo = function (_0x3a28a8) {
    return {
        'abilName': 'Roar!',
        'abilImg': 'skins/arctic/wolverine/wolverine1.png'
    };
};
_0x223096.prototype.getSkinName = function () {
    return 'arctic/wolverine/wolverine' + (0 == this.specType ? '' : 0x1);
};

function _0x223096() {
    _0x223096.superClass.call(this, o_player);
}
window.Wolverine = _0x223096;
GameObjType.setCustomClassForGameObjType(_0x223096, o_player, _0x4fb188);
_0x2a91c6 = Animal;
_0x1e5971.prototype = Object.create(_0x2a91c6.prototype);
_0x1e5971.prototype.constructor = _0x1e5971;
_0x1e5971.superClass = _0x2a91c6;
_0x1e5971.prototype.animalInfo = function () {
    var _0x2a56fd = {
        'aniName': 'Muskox!',
        'skinName': 'arctic/muskox/muskox',
        'aniDesc': ''
    };
    _0x2a56fd.upgradeText = 'UPGRADED to ' + _0x2a56fd.aniName + `\n Press W to charge with your horns! \nPlus move decently on ice!`;
    _0x2a56fd.aniCol = '#231f18';
    return _0x2a56fd;
};
_0x1e5971.prototype.getAbilityInfo = function (_0x19e847) {
    return {
        'abilName': 'Charge!',
        'abilImg': 'skins/arctic/muskox/muskox2.png'
    };
};
_0x1e5971.prototype.getSkinName = function () {
    return 'arctic/muskox/muskox' + (this.flag_usingAbility ? '2' : '');
};

function _0x1e5971() {
    _0x1e5971.superClass.call(this, o_player);
}
window.Muskox = _0x1e5971;
GameObjType.setCustomClassForGameObjType(_0x1e5971, o_player, _0xfa8790);
_0x2a91c6 = Animal;
SnowmanAni.prototype = Object.create(_0x2a91c6.prototype);
SnowmanAni.prototype.constructor = SnowmanAni;
SnowmanAni.superClass = _0x2a91c6;
SnowmanAni.prototype.animalInfo = function () {
    var _0x4be2e1 = {
        'aniName': 'The Snowman',
        'skinName': 'arctic/snowman/snowman',
        'aniDesc': ''
    };
    _0x4be2e1.upgradeText = 'UPGRADED to ' + _0x4be2e1.aniName + `!\n So it really exists... \n Hold W to turn into snow, release W to freeeeeze!`;
    _0x4be2e1.aniCol = '#839eb5';
    return _0x4be2e1;
};
SnowmanAni.prototype.getAbilityInfo = function (_0x1d4cb3) {
    return {
        'abilName': 'Freeze Prey!',
        'abilImg': 'skins/arctic/snowman/ability.png'
    };
};
SnowmanAni.prototype.getSkinName = function () {
    return 'arctic/snowman/snowman' + (0 == this.specType ? '' : 0x1);
};
SnowmanAni.prototype.drawUnderSkinTail = function (_0x133e9b) {
    this.isCamouflage || SnowmanAni.superClass.prototype.drawUnderSkinTail.call(this, _0x133e9b);
};
SnowmanAni.prototype.drawHealthBar = function () {
    this.isCamouflage || SnowmanAni.superClass.prototype.drawHealthBar.call(this);
};
SnowmanAni.prototype.isTransforming = !0x1;
SnowmanAni.prototype.isCamouflage = !0x1;
SnowmanAni.prototype.carrotAlpha = 0;
SnowmanAni.prototype.getIdealOpacity = function () {
    return this.flag_underWater || this.flag_usingAbility && this.isTransforming || this.isCamouflage ? 0 : 0x1;
};
SnowmanAni.prototype.biteStart = 0;
SnowmanAni.prototype.flapAmount = 0x3;
SnowmanAni.prototype.flapDur = 1.5;
SnowmanAni.prototype.roarStartT = -0x1f4;
SnowmanAni.prototype.drawSkinCustomization = function () {
    if (this.flag_usingAbility && this.isTransforming) {
        if (this.isTransforming) {
            ctx.save();
            ctx.globalAlpha = 0x1;
            var _0x42fed6 = _0x2f22f9('img/snowball.png');
            if (_0x42fed6) {
                var _0x550963 = this.rad;
                ctx.rotate(this.rPer * Math.PI * 0x2);
                ctx.drawImage(_0x42fed6, -_0x550963, -_0x550963, 0x2 * _0x550963, 0x2 * _0x550963);
            } else this.drawOutlinedCircle('', 'white');
            ctx.restore();
        }
    } else if (this.setSkinScale(), this.flag_usingAbility || this.isCamouflage) {
        if (0 == this.biteStart && (this.biteStart = _0x1534e0 + this.roarStartT), 0 != this.specType && void 0 != this.specType && (_0x42fed6 = _0x2f22f9('skins/arctic/snowman/snowman_head1.png'), _0x550963 = (_0x1534e0 - this.biteStart) / 0x3e8, _0x2ca0d7 = 1.07 * this.skinScale, _0x42fed6)) {
            var _0x46b743;
            _0x46b743 = this.flapAmount - (0x1 == this.animalSpecies ? 0.5 : 0);
            _0x46b743 = 0x2 != _0x14fca5 ? _0x93972d(_0x550963, this.flapDur, _0x46b743, 0x2) : this.flapAmount;
            ctx.save();
            _0x550963 = this.rad;
            ctx.drawImage(_0x42fed6, -_0x550963 * _0x2ca0d7, (-_0x550963 + 0.1 * _0x550963) * _0x2ca0d7 - _0x46b743, 0x2 * _0x550963 * _0x2ca0d7, 0x2 * _0x550963 * _0x2ca0d7);
            ctx.restore();
        }
    } else {
        if (0 < this.carrotAlpha) {
            var _0x42fed6 = _0x2f22f9('skins/arctic/snowman/carrot_nose.png'),
                _0x2ca0d7 = this.skinScale;
            _0x42fed6 && (ctx.save(), _0x550963 = this.rad, ctx.globalAlpha = this.carrotAlpha, ctx.drawImage(_0x42fed6, -_0x550963 * _0x2ca0d7, -_0x550963 * _0x2ca0d7, 0x2 * _0x550963 * _0x2ca0d7, 0x2 * _0x550963 * _0x2ca0d7), ctx.restore());
        }
        this.biteStart = 0;
    }
};
SnowmanAni.prototype.readCustomData_onUpdate = function (_0x1914c7) {
    SnowmanAni.superClass.prototype.readCustomData_onUpdate.call(this, _0x1914c7);
    this.isTransforming = 0x1 == _0x1914c7.readUInt8();
    this.isCamouflage = 0x1 == _0x1914c7.readUInt8();
    this.carrotAlpha = _0x1914c7.readUInt16() / 1000;
};
SnowmanAni.prototype.readCustomData_onNewlyVisible = function (_0x2dc78b) {
    SnowmanAni.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x2dc78b);
    this.isTransforming = 0x1 == _0x2dc78b.readUInt8();
    this.isCamouflage = 0x1 == _0x2dc78b.readUInt8();
    this.carrotAlpha = _0x2dc78b.readUInt16() / 1000;
};

function SnowmanAni() {
    SnowmanAni.superClass.call(this, o_player);
}
window.Snowman = SnowmanAni;
GameObjType.setCustomClassForGameObjType(SnowmanAni, o_player, _0x2bd850);

//pump




var superClass = GameObj;
PumpkinBall.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
PumpkinBall.prototype.constructor = PumpkinBall;
PumpkinBall.superClass = superClass; //'class' var
PumpkinBall.prototype.lookAngle = 0;
PumpkinBall.prototype.frameNumber = 0;
PumpkinBall.prototype.isRolling = false;
PumpkinBall.prototype.pumpkinType = false;
PumpkinBall.prototype.x = 0;
PumpkinBall.prototype.y = 0;
PumpkinBall.prototype.rad = 5



PumpkinBall.prototype.updateZ = function () {
  this.z = 1002;
}


//override draw (things like other effects are drawn seperately)
PumpkinBall.prototype.customDraw = function (batchDrawOutline) {


  //this.drawOutlinedCircle("", "red");

  //glow stronger/weaker like a fire
  var period = 1.0; //periodic func with time
  var p_min = 0.15,
    p_max = 0.8; //set these!
  var amp = 0.5 * (p_max - p_min);
  var flashA =
    p_min +
    amp +
    amp * Math.sin(((2.0 * Math.PI) / period) * (_0x1534e0 / 1000.0));

  //glow stronger/weaker like a fire
  var period = 1.0; //periodic func with time
  var p_min = 0.85,
    p_max = 1.0; //set these!
  var amp = 0.5 * (p_max - p_min);
  var moveA = 1

  if (this.isRolling)
    this.frameNumber = Math.trunc(_0x1534e0 / 120) % 5;
  //console.log("fire: " + imNum);
  //var theImg = this.getSkinImageObj(imNum == 1 ? "img/fire.png" : "img/fire2.png");
  // var pumpkinType = this.pumpkinType ? "1" : "0";
  var theImg = this.getSkinImageObj("img/pumpkin/" + this.pumpkinType + "/" + this.frameNumber + ".png");
  if (theImg) {
    var imX = 0,
      imY = this.rad;
    var imW = this.rad * 2.5;
    imH = this.rad * 2.5;
    var imAnchorX = 0.5,
      imAnchorY = 0.95; //top-left= 0,0, bottom-right=1,1 (canvas coords)

    ctx.save();
    {
      ctx.globalAlpha *= this.onFireEffA * moveA;
      ctx.rotate(toRadians(this.lookAngle));
      ctx.drawImage(
        theImg,
        imX + imW * -imAnchorX,
        imY + imH * -imAnchorY,
        imW,
        imH
      );
    }
    ctx.restore();
  } else {
    //console.log("not found: " + imNum)
  }

  /*
  ctx.save();

  ctx.globalAlpha = 1;


  var theImg = this.getSkinImageObj("img/pumpkin.png");
  if (theImg) {
    var rad = this.rad;
    ctx.rotate(this.angle);
    ctx.drawImage(theImg, -rad, -rad, 2 * rad, 2 * rad);
  }
  ctx.restore();

  */
}
//custom data for this class (must be matched by server-side write of this data!)
PumpkinBall.prototype.readCustomData_onUpdate = function (msg) {
  this.lookAngle = msg.readUInt8() * 3;
  this.isRolling = msg.readUInt8() == 1;
  this.pumpkinType = msg.readUInt8();
  this.x = msg.readUInt16()
  this.y = msg.readUInt16()









}


//custom data for this class (must be matched by server-side write of this data!)
PumpkinBall.prototype.readCustomData_onNewlyVisible = function (msg) {
    
  this.lookAngle = msg.readUInt8() * 3;
  this.isRolling = msg.readUInt8() == 1;
  this.pumpkinType = msg.readUInt8();

  this.x = msg.readUInt16()
  this.y = msg.readUInt16()
  
  


}

var o_pumpkinBall = 131;

function PumpkinBall() {
  PumpkinBall.superClass.call(this, o_pumpkinBall);

  this.lookAngle = 0;
  this.isRolling = false;
  this.pumpkinType = false;
  //set vars for this class
  this.doesDrawEffectScale = true;
  this.drawEffectScale_Slow = true;

}
var o_pumpkinBall = 131;
window.PumpkinBall = PumpkinBall;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(PumpkinBall, o_pumpkinBall);

//

_0x2a91c6 = Animal;
_0x2348f5.prototype = Object.create(_0x2a91c6.prototype);
_0x2348f5.prototype.constructor = _0x2348f5;
_0x2348f5.superClass = _0x2a91c6;
_0x2348f5.prototype.updateZ = function () {
    this.z = this.rad;
    this.flag_underWater ? this.z = -0x64 : this.flag_eff_tossedInAir ? this.z = 0x4b0 + this.rad : this.flag_flying ? (this.z = 0x186a0, this.flag_isGrabbed && (this.z -= this.rad)) : this.z = this.flag_canClimbHill ? 0x3eb : this.rad;
};
_0x2348f5.prototype.animalInfo = function () {
    var _0x58e8ca = {};
    _0x58e8ca.aniName = 1 == this.animalSpecies ? 'Big Goat' : 'Markhor';
    _0x58e8ca.aniCol = '#FF9000';
    _0x58e8ca.skinName = 'arctic/markhor/' +  this.animalSpecies + "/markhor"
    _0x58e8ca.upgradeText = 'UPGRADED to ' + _0x58e8ca.aniName + `!\nPress 'W' to Jump High from hills. Ram in the preys on land.`;
    return _0x58e8ca;
};
_0x2348f5.prototype.moveF = 0.08;
_0x2348f5.prototype.jumpAnim = null;
_0x2348f5.prototype.frame = 0;
_0x2348f5.prototype.getAbilityInfo = function (_0x296183) {
    _0x296183 = {
        'abilName': `Jump High\n& Headbang!`
    };
    _0x296183.abilImg = 'skins/arctic/markhor/' + this.animalSpecies + '/markhor.png';
    return _0x296183;
};
_0x2348f5.prototype.getSpeciesPath = function (_0x166532) {
    return '/arctic/' + _0x166532 + '/' + this.animalSpecies;
};
_0x2348f5.prototype.moveF = 0.08;
_0x2348f5.prototype.onAbility;
_0x2348f5.prototype.onJump;

_0x2348f5.prototype.jumpAnim = null;
_0x2348f5.prototype.frame = 0;
_0x2348f5.prototype.drawUnderSkinImg = function () {
    if (this.onJump) {
        null == this.jumpAnim && (this.jumpAnim = new _0x1cbd2d(this, 0.5, _0x1cbd2d.halfWave), this.jumpAnim.keepLastFrame = !0, this.jumpAnim.loop = !0, this.jumpAnim.onFrameEntered = function (_0x4d636b) {
            this.forObj.frame = _0x4d636b;
        }, this.jumpAnim.onStop = function () {});
        null != this.jumpAnim && this.jumpAnim.run();
        var _0x31a1d6 = this.rad - this.outlineW,
            _0x14d14b = 0x1f4 / 0x154;
        this.setSkinScale();
        var _0x2def1b = 'skins' + this.getSpeciesPath('markhor') + '/front_legs.png',
            _0x31a1d6 = 'skins' + this.getSpeciesPath('markhor') + '/back_legs.png',
            _0x2def1b = _0x2f22f9(_0x2def1b),
            _0x373366 = _0x2f22f9(_0x31a1d6);
        _0x2def1b && _0x373366 && (_0x14d14b = this.skinScale + 0.15 * this.skinScale * this.frame, _0x31a1d6 = this.skinRad, 0x3 == this.specType ? (ctx.drawImage(_0x2def1b, -_0x31a1d6 * _0x14d14b, -_0x31a1d6 * _0x14d14b, 0x2 * _0x31a1d6 * _0x14d14b, 0x2 * _0x31a1d6 * _0x14d14b), ctx.drawImage(_0x373366, -_0x31a1d6 * _0x14d14b, (-_0x31a1d6 - _0x31a1d6 * this.moveF * this.frame) * _0x14d14b, 0x2 * _0x31a1d6 * _0x14d14b, 0x2 * _0x31a1d6 * _0x14d14b)) : (ctx.drawImage(_0x373366, -_0x31a1d6 * _0x14d14b, -_0x31a1d6 * _0x14d14b, 0x2 * _0x31a1d6 * _0x14d14b, 0x2 * _0x31a1d6 * _0x14d14b), ctx.drawImage(_0x2def1b, -_0x31a1d6 * _0x14d14b, (-_0x31a1d6 + _0x31a1d6 * this.moveF * this.frame) * _0x14d14b, 0x2 * _0x31a1d6 * _0x14d14b, 0x2 * _0x31a1d6 * _0x14d14b)));
    } else this.jumpAnim = null;
};
_0x2348f5.prototype.drawSkinCustomization = function () {
    if (this.onAbility) {
        var _0x2565c9 = 0x1f4 / 0x154,
            _0x20cfc7 = 0.1;
        0x2 < this.specType && (_0x20cfc7 = 0.2 * this.frame);
        var _0x23f438 = _0x2f22f9(this.getHead('markhor', !0));
        if (_0x23f438) {
            ctx.save();
            var _0x572341 = this.rad;
            ctx.drawImage(_0x23f438, -_0x572341 * _0x2565c9, (-_0x572341 + _0x572341 * _0x20cfc7) * _0x2565c9, 0x2 * _0x572341 * _0x2565c9, 0x2 * _0x572341 * _0x2565c9);
            ctx.restore();
        }
    }
};
_0x2348f5.prototype.readCustomData_onNewlyVisible = function (_0x1a0dbd) {
    _0x2348f5.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x1a0dbd);
    this.readInfo(_0x1a0dbd);
};
_0x2348f5.prototype.readCustomData_onUpdate = function (_0x1a7fe9) {
    _0x2348f5.superClass.prototype.readCustomData_onUpdate.call(this, _0x1a7fe9);
    this.readInfo(_0x1a7fe9);
};
_0x2348f5.prototype.readInfo = function (_0x1963f7) {

    this.onAbility = _0x1963f7.readUInt8()
    this.onJump = _0x1963f7.readUInt8()

};
_0x2348f5.prototype.getHead = function (_0x4be3ad, _0x4b3a48) {
    var _0x117845 = 'skins/' + (_0x4b3a48 ? this.getSpeciesPath(_0x4be3ad) + '/' : _0x4be3ad + '/'),
        _0x117845 = _0x117845 + (_0x4be3ad + '_head');
    0x2 == this.specType && (_0x117845 += '_charging');
    return _0x117845 + '.png';
};
_0x2348f5.prototype.getSkinName = function () {
    var _0x46f2c3 = 'arctic/markhor/' + this.animalSpecies + '/markhor';
    return _0x46f2c3 += 0 == this.specType ? '' : 0x1;
};

function _0x2348f5() {
    _0x2348f5.superClass.call(this, o_player);
}
window.Markhor = _0x2348f5;
GameObjType.setCustomClassForGameObjType(_0x2348f5, o_player, _0x2f88c2);
_0x2a91c6 = Animal;
_0x1ab0e4.prototype = Object.create(_0x2a91c6.prototype);
_0x1ab0e4.prototype.constructor = _0x1ab0e4;
_0x1ab0e4.superClass = _0x2a91c6;
_0x1ab0e4.prototype.animalInfo = function () {
    var _0x2a0446 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x2a0446.aniName = 'Reindeer';
        break;
    case 0x1:
        _0x2a0446.aniName = 'Musk Deer';
        break;
    }
    _0x2a0446.aniDesc = '';
    _0x2a0446.upgradeText = 'UPGRADED to ' + _0x2a0446.aniName + `!\n Press W to dig up food! \n Your sharp hooves let you turn very well on ice!`;
    _0x2a0446.aniCol = '#a68976';
    _0x2a0446.skinName = 'arctic/reindeer/' + this.animalSpecies + '/reindeer';
    return _0x2a0446;
};
_0x1ab0e4.prototype.getAbilityInfo = function (_0x3d3dcb) {
    _0x3d3dcb = {
        'abilName': 'Dig Food!'
    };
    _0x3d3dcb.abilImg = 'skins/arctic/reindeer/' + this.animalSpecies + '/reindeer.png';
    return _0x3d3dcb;
};
_0x1ab0e4.prototype.getSkinName = function () {
    return 'arctic/reindeer/' + this.animalSpecies + '/reindeer';
};

function _0x1ab0e4() {
    _0x1ab0e4.superClass.call(this, o_player);
}
window.Reindeer = _0x1ab0e4;
GameObjType.setCustomClassForGameObjType(_0x1ab0e4, o_player, _0x1cd045);
_0x2a91c6 = Animal;
_0x192806.prototype = Object.create(_0x2a91c6.prototype);
_0x192806.prototype.constructor = _0x192806;
_0x192806.superClass = _0x2a91c6;
_0x192806.prototype.getSkinName = function () {
    return 'land/trex/' + this.animalSpecies + '/trex';
};
_0x192806.prototype.animalInfo = function () {
    var _0x485327 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x485327.aniName = 'The T.Rex';
        break;
    case 0x1:
        _0x485327.aniName = 'Golden T.Rex';
        break;
    case 0x2:
        _0x485327.aniName = 'Ember T.Rex';
        break;
    case 100:
        _0x485327.aniName = 'Mr. Dollar';
        break;
    }
    _0x485327.skinName = '/land/trex/' + this.animalSpecies + '/trex';
    _0x485327.upgradeText = 'UPGRADED to ' + _0x485327.aniName + ` The Dinosaur!\n This ancient dinosaur has powerful jaws that can drag prey around!!`;
    _0x485327.aniCol = '#862A2A';
    return _0x485327;
};
_0x192806.prototype.getAbilityInfo = function (_0x269d23) {
    _0x269d23 = {
        'abilName': 'Jaws Bite'
    };
    _0x269d23.abilImg = 'skins/' + this.getSkinName() + '.png';
    return _0x269d23;
};
_0x192806.prototype.basicDrawSkinImg = function () {
    this.setSkinScale();
    var _0xb56ac7 = this.skinScale,
        _0x1ec818 = this.skinRad;
    this.loadedSkinImg && (overSizeOffset = this.skinRad / 0x2, ctx.drawImage(this.loadedSkinImg, -_0x1ec818 - overSizeOffset, -_0x1ec818 - overSizeOffset, 0x2 * _0x1ec818 * _0xb56ac7, 2.4 * _0x1ec818 * _0xb56ac7));
};

function _0x192806() {
    _0x192806.superClass.call(this, o_player);
}
window.Trex = _0x192806;
GameObjType.setCustomClassForGameObjType(_0x192806, o_player, _0x1a31f6);

//
var superClass = GameObj;
XmasFood.prototype = Object.create(superClass.prototype); //properly inherit prototype of superclass
XmasFood.prototype.constructor = XmasFood;
XmasFood.superClass = superClass;
XmasFood.prototype.foodType = 0;
XmasFood.prototype.updateZ = function () {
    this.z = this.rad;
}

XmasFood.prototype.customDraw = function (batchDrawOutline) {
    ctx.save();
    var foodName = this.getXmasFoodName();
    var theImg = this.getSkinImageObj("img/xmasfood/" + foodName + "_e.png");
    if (theImg) {
        var rad = this.rad;
        ctx.save();
        ctx.rotate(this.rPer * 0.5 * Math.PI * 2.0);
        ctx.drawImage(theImg, -rad, -rad, 2 * rad, 2 * rad);
        ctx.restore();
    }
    ctx.restore();
};

XmasFood.prototype.getXmasFoodName = function () {
    var foodName = "candycane";
    switch (this.foodType) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
            foodName = "candy" + this.foodType;
            break;
        case 5:
            foodName = "candycane";
            break;
        case 6:
            foodName = "cupcake";
            break;
        case 7:
            foodName = "gingerbread";
            break;
        case 8:
            foodName = "stockingcookie";
            break;
        case 9:
            foodName = "treecookie";
            break;
    }
    return foodName;
}


XmasFood.prototype.readCustomData_onNewlyVisible = function (msg) {
    this.foodType = msg.readUInt8();
}
var o_xmasFood = 142;
function XmasFood() {
    XmasFood.superClass.call(this, o_xmasFood);
    this.doesDrawEffectScale = true;
}
window.XmasFood = XmasFood;
//add this file as a class! (make sure to call require!)
GameObjType.setCustomClassForGameObjType(XmasFood, o_xmasFood);
//

_0x2a91c6 = Animal;
DragonAni.prototype = Object.create(_0x2a91c6.prototype);
DragonAni.prototype.constructor = DragonAni;
DragonAni.superClass = _0x2a91c6;
DragonAni.prototype.getSkinName = function () {
    return 'land/dragon/' + this.animalSpecies + '/dragon';
};
DragonAni.prototype.animalInfo = function () {
    var _0x6647f6 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x6647f6.aniName = 'Dragon!';
        break;
    case 1:
        _0x6647f6.aniName = 'Golden Dragon!';
        break;
    case 2:
        _0x6647f6.aniName = 'Knight Dragon!';
        break;
    case 3:
        _0x6647f6.aniName = 'Devil!';
        break;
    case 4:
        _0x6647f6.aniName = 'Terminator!';
        break;
    case 100:
        _0x6647f6.aniName = 'The Gargon!';
        break;
    }
    _0x6647f6.skinName = 'land/dragon/' + this.animalSpecies + '/dragon';
    _0x6647f6.upgradeText = 'UPGRADED to ' + _0x6647f6.aniName + `\n (You're amazing!) \nFly over everything, Hold W to shoot fire!`;
    _0x6647f6.aniCol = '#22FF8A';
    return _0x6647f6;
};
DragonAni.prototype.getAbilityInfo = function (_0x32a028) {
    _0x32a028 = {
        'abilName': 'Fire'
    };
    _0x32a028.abilImg = 'skins/land/dragon/' + this.animalSpecies + '/dragon.png';
    _0x32a028.speciesType = 1 == this.animalSpecies ? 1 : 0;
    return _0x32a028;
};
DragonAni.prototype.diveColor1 = '#64a034';
DragonAni.prototype.diveColor2 = '#598b30';
DragonAni.prototype.onAnimalSpeciesSet = function () {
    switch (this.animalSpecies) {
    case 0x1:
        this.diveColor1 = '#dbb300';
        this.diveColor2 = '#bf9d04';
        break;
    case 0x2:
        this.diveColor1 = '#79c9a8', this.diveColor2 = '#6fad9f';
    }
};

function DragonAni() {
    DragonAni.superClass.call(this, o_player);
}
window.Dragon = DragonAni;
GameObjType.setCustomClassForGameObjType(DragonAni, o_player, _0x1ddfd4);
_0x2a91c6 = Animal;
_0x55110e.prototype = Object.create(_0x2a91c6.prototype);
_0x55110e.prototype.constructor = _0x55110e;
_0x55110e.superClass = _0x2a91c6;
_0x55110e.prototype.animalInfo = function () {
    var _0x21d669 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x21d669.aniName = 'Elephant!';
        break;
    case 0x1:
        _0x21d669.aniName = 'Golden Elephant!';
        break;
    case 0x2:
        _0x21d669.aniName = 'Albino Elephant!';
    }
    _0x21d669.skinName = 'land/elephant/' + this.animalSpecies + '/elephant';
    _0x21d669.aniDesc = '';
    _0x21d669.upgradeText = 'UPGRADED to ' + _0x21d669.aniName + `\n Use your long trunk to attack and eat food!`;
    _0x21d669.aniCol = '#945A99';
    return _0x21d669;
};
_0x55110e.prototype.getAbilityInfo = function (_0x4ec516) {
    _0x4ec516 = {
        'abilName': 'Trunk Hit!'
    };
    _0x4ec516.abilImg = 'skins/land/elephant/' + this.animalSpecies + '/elephant.png';
    return _0x4ec516;
};
_0x55110e.prototype.getSkinName = function () {
    var _0x3be8e4;
    _0x3be8e4 = 'land/elephant/' + this.animalSpecies + '/elephant';
    return _0x3be8e4 += 0 == this.specType ? '' : 0x1;
};

function _0x55110e() {
    _0x55110e.superClass.call(this, o_player);
}
window.Elephant = _0x55110e;
GameObjType.setCustomClassForGameObjType(_0x55110e, o_player, _0x3cd364);
_0x2a91c6 = Animal;
_0x3c881c.prototype = Object.create(_0x2a91c6.prototype);
_0x3c881c.prototype.constructor = _0x3c881c;
_0x3c881c.superClass = _0x2a91c6;
_0x3c881c.prototype.animalInfo = function () {
    var _0x23218a = {};
    switch (this.animalSpecies) {
    case 0:
        _0x23218a.aniName = 'Hippo!';
        break;
    case 0x1:
        _0x23218a.aniName = 'Golden Hippo!';
        break;
    case 0x2:
        _0x23218a.aniName = 'Pygmy Hippo!';
        break;
    case 100:
        _0x23218a.aniName = 'Swampster';
        break;
    case 101:
        _0x23218a.aniName = 'Earth Hippo';
        break;
    }
    _0x23218a.skinName = 'land/hippo/' + this.animalSpecies + '/hippo';
    _0x23218a.upgradeText = 'UPGRADED to ' + _0x23218a.aniName + `!\nHippos are great swimmers, dominate the Lakes/Oceans/Mud!`;
    _0x23218a.aniCol = '#945A99';
    return _0x23218a;
};
_0x3c881c.prototype.getAbilityInfo = function (_0x315c6d) {
    _0x315c6d = {
        'abilName': 'Loud Grown!'
    };
    _0x315c6d.abilImg = 'skins/land/hippo/' + this.animalSpecies + '/hippo1.png';
    return _0x315c6d;
};
_0x3c881c.prototype.getSkinName = function () {
    var _0xe1bc4f;
    _0xe1bc4f = 'land/hippo/' + this.animalSpecies + '/hippo';
    return _0xe1bc4f += 0 == this.specType ? '' : 0x1;
};

function _0x3c881c() {
    _0x3c881c.superClass.call(this, o_player);
}
window.Hippo = _0x3c881c;
GameObjType.setCustomClassForGameObjType(_0x3c881c, o_player, _0x1de318);
_0x2a91c6 = Animal;
_0x3b4162.prototype = Object.create(_0x2a91c6.prototype);
_0x3b4162.prototype.constructor = _0x3b4162;
_0x3b4162.superClass = _0x2a91c6;
_0x3b4162.prototype.animalInfo = function () {
    var _0x3915d1 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x3915d1.aniName = 'Giant Spider!';
        break;
    case 0x1:
        _0x3915d1.aniName = 'Golden Spider!';
        break;
    case 0x2:
        _0x3915d1.aniName = 'Goliath Spider!';
        break;
    case 100:
        _0x3915d1.aniName = 'Crystalcore Spider!';
        break;
    }
    _0x3915d1.skinName = 'land/giantspider/' + this.animalSpecies + '/giantspider';
    _0x3915d1.upgradeText = 'UPGRADED to ' + _0x3915d1.aniName + `\n Place web around the game to catch prey!`;
    _0x3915d1.aniCol = 'black';
    return _0x3915d1;
};
_0x3b4162.prototype.getAbilityInfo = function (_0x5576b7) {
    return {
        'abilName': 'Spin Web!',
        'abilImg': 'skins/land/giantspider/spiderweb.png'
    };
};
_0x3b4162.prototype.getSkinName = function () {
    var _0x5bda16;
    _0x5bda16 = 'land/giantspider/' + this.animalSpecies + '/giantspider';
    return _0x5bda16 += 0 == this.specType ? '' : 0x1;
};

function _0x3b4162() {
    _0x3b4162.superClass.call(this, o_player);
}
window.GiantSpider = _0x3b4162;
GameObjType.setCustomClassForGameObjType(_0x3b4162, o_player, _0xb20c08);
_0x2a91c6 = Animal;
_0x5ea9be.prototype = Object.create(_0x2a91c6.prototype);
_0x5ea9be.prototype.constructor = _0x5ea9be;
_0x5ea9be.superClass = _0x2a91c6;
_0x5ea9be.prototype.animalInfo = function () {
    var _0x1d9500 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x1d9500.aniName = 'Boa Constrictor!';
        break;
    case 0x1:
        _0x1d9500.aniName = 'Golden Boa!';
        break;
    case 0x2:
        _0x1d9500.aniName = 'Tree Boa!';
    }
    _0x1d9500.skinName = 'land/boaconstrictor/' + this.animalSpecies + '/boaconstrictor';
    _0x1d9500.aniDesc = '';
    _0x1d9500.upgradeText = 'UPGRADED to ' + _0x1d9500.aniName + `!\n Coil and suffocate other animals!`;
    _0x1d9500.aniCol = 'black';
    return _0x1d9500;
};
_0x5ea9be.prototype.getAbilityInfo = function (_0x450ffd) {
    _0x450ffd = {
        'abilName': 'Suffocate prey'
    };
    _0x450ffd.abilImg = 'skins/land/boaconstrictor/' + this.animalSpecies + '/constrict.png';
    return _0x450ffd;
};
_0x5ea9be.prototype.getSkinName = function () {
    var _0x2c2d85;
    _0x2c2d85 = 'land/boaconstrictor/' + this.animalSpecies + '/boaconstrictor';
    return _0x2c2d85 = this.flag_usingAbility ? _0x2c2d85 + '2' : _0x2c2d85 + (0 == this.specType ? '' : 0x1);
};
_0x5ea9be.prototype.drawUnderSkinImg = function () {
    if (!this.flag_usingAbility) {
        var _0x14a72c = this.rad - this.outlineW,
            _0x927cff = 0x1f4 / 0x154,
            _0x32605f = _0x2f22f9('skins/boa/tongue.png'),
            _0x55923a = (_0x1534e0 - this.spawnTime) / 0x3e8,
            _0x55923a = 0x2 == _0x14fca5 ? 0 : _0x93972d(_0x55923a, 0.5, 0x5, 0.5),
            _0x217cbb = 0x2 == _0x14fca5 ? 0 : 0x5;
        _0x32605f && ctx.drawImage(_0x32605f, -_0x14a72c * _0x927cff, -(_0x14a72c + _0x217cbb + _0x55923a) * _0x927cff, 0x2 * _0x14a72c * _0x927cff, 0x2 * _0x14a72c * _0x927cff);
    }
};

function _0x5ea9be() {
    _0x5ea9be.superClass.call(this, o_player);
}
window.BoaConstrictor = _0x5ea9be;
GameObjType.setCustomClassForGameObjType(_0x5ea9be, o_player, _0x5b3c93);
_0x2a91c6 = Animal;
_0x10b5a3.prototype = Object.create(_0x2a91c6.prototype);
_0x10b5a3.prototype.constructor = _0x10b5a3;
_0x10b5a3.superClass = _0x2a91c6;
_0x10b5a3.prototype.animalInfo = function () {
    var _0x18411a = {
        'aniName': 'Gorilla!',
        'skinName': 'land/gorilla/gorilla'
    };
    switch (this.animalSpecies) {
        case 100:
            _0x18411a.aniName = "Grim Reaper";
          break;
        case 201:
            _0x18411a.aniName = "Explorer Ape";
          break;
        case 204:
            _0x18411a.aniName = "Phantom Gorilla";
        break;
        case 101:
            _0x18411a.aniName = "Gorzilla";
        break;
      }
      _0x18411a.skinName = 'land/gorilla/'+this.animalSpecies+'/gorilla';
    _0x18411a.upgradeText = 'UPGRADED to ' + _0x18411a.aniName + `!\nGorillas are great swimmers, dominate the Lakes/Oceans/Mud!`;
    _0x18411a.aniCol = '#945A99';
    return _0x18411a;
};
_0x10b5a3.prototype.getAbilityInfo = function (_0x341c4a) {
    return {
        'abilName': 'Fruit Throw!',
        'abilImg': 'skins/land/gorilla/'+this.animalSpecies+'/gorilla.png'
    };
};
_0x10b5a3.prototype.getSkinName = function () {
    return 'land/gorilla/'+this.animalSpecies+'/gorilla' + (0 == this.specType ? '' : 0x1);
};

function _0x10b5a3() {
    _0x10b5a3.superClass.call(this, o_player);
}
window.Gorilla = _0x10b5a3;
GameObjType.setCustomClassForGameObjType(_0x10b5a3, o_player, _0x58670a);
_0x2a91c6 = Animal;
_0x217d33.prototype = Object.create(_0x2a91c6.prototype);
_0x217d33.prototype.constructor = _0x217d33;
_0x217d33.superClass = _0x2a91c6;
_0x217d33.prototype.animalInfo = function () {
    var _0x4074d0 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x4074d0.aniName = 'The Kraken!';
        break;
    case 0x1:
        _0x4074d0.aniName = 'Golden Kraken!';
        break;
    case 0x2:
        _0x4074d0.aniName = 'Chromatic Kraken!';
    }
    _0x4074d0.skinName = 'ocean/kraken/' + this.animalSpecies + '/kraken';
    _0x4074d0.upgradeText = 'UPGRADED to THE ' + _0x4074d0.aniName + `!\n Terrorize the oceans, and be feared by all!\n (Release W to use whirlpool ability!)`;
    _0x4074d0.aniCol = '#64a034';
    return _0x4074d0;
};
_0x217d33.prototype.getSkinName = function () {
    return 'ocean/kraken/' + this.animalSpecies + '/kraken';
};
_0x217d33.prototype.getAbilityInfo = function (_0x5349a7) {
    _0x5349a7 = {
        'abilName': 'Whirlpool'
    };
    _0x5349a7.abilImg = 'skins/ocean/kraken/' + this.animalSpecies + '/kraken.png';
    return _0x5349a7;
};
_0x217d33.prototype.drawUnderwaterCustomization = function () {
    ctx.globalAlpha = 0x1 - this.underwaterA;
    _0x110b78(0.4 * this.rad, 0.75 * this.rad, 0.12 * this.rad, this.diveColor1);
    _0x110b78(-0.4 * this.rad, 0.75 * this.rad, 0.12 * this.rad, this.diveColor1);
    _0x110b78(0.65 * this.rad, 0.55 * this.rad, 0.1 * this.rad, this.diveColor2);
    _0x110b78(-0.65 * this.rad, 0.55 * this.rad, 0.1 * this.rad, this.diveColor2);
};
_0x217d33.prototype.diveColor1 = '#64a034';
_0x217d33.prototype.diveColor2 = '#598b30';
_0x217d33.prototype.onAnimalSpeciesSet = function () {
    switch (this.animalSpecies) {
    case 0x1:
        this.diveColor1 = '#dbb300';
        this.diveColor2 = '#bf9d04';
        break;
    case 0x2:
        this.diveColor1 = '#79c9a8', this.diveColor2 = '#6fad9f';
    }
};

function _0x217d33() {
    _0x217d33.superClass.call(this, o_player);
}
window.Kraken = _0x217d33;
GameObjType.setCustomClassForGameObjType(_0x217d33, o_player, _0x39caec);
_0x2a91c6 = Animal;
_0x1d006c.prototype = Object.create(_0x2a91c6.prototype);
_0x1d006c.prototype.constructor = _0x1d006c;
_0x1d006c.superClass = _0x2a91c6;
_0x1d006c.prototype.animalInfo = function () {
    var _0x5541c9 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x5541c9.aniName = 'Bluewhale!';
        break;
    case 1:
        _0x5541c9.aniName = 'Golden Whale!';
        break;
    case 2:
        _0x5541c9.aniName = 'Albino Whale!';
    }
    _0x5541c9.skinName = 'ocean/bluewhale/' + this.animalSpecies + '/bluewhale';
    _0x5541c9.aniDesc = '';
    _0x5541c9.upgradeText = 'UPGRADED to ' + _0x5541c9.aniName + `\n Smash with your powerful tail!`;
    _0x5541c9.aniCol = '#945A99';
    return _0x5541c9;
};
_0x1d006c.prototype.getAbilityInfo = function (_0x321616) {
    _0x321616 = {
        'abilName': 'Tail Slap'
    };
    _0x321616.abilImg = 'skins/ocean/bluewhale/' + this.animalSpecies + '/ability_whaleTailHit.png';
    return _0x321616;
};
_0x1d006c.prototype.getSkinName = function () {
    var _0x5c9c62;
    _0x5c9c62 = 'ocean/bluewhale/' + this.animalSpecies + '/bluewhale';
    return _0x5c9c62 += 0 == this.specType ? '' : 0x1;
};

function _0x1d006c() {
    _0x1d006c.superClass.call(this, o_player);
}
window.Bluewhale = _0x1d006c;
GameObjType.setCustomClassForGameObjType(_0x1d006c, o_player, _0x50c7e0);
_0x2a91c6 = Animal;
_0x242962.prototype = Object.create(_0x2a91c6.prototype);
_0x242962.prototype.constructor = _0x242962;
_0x242962.superClass = _0x2a91c6;
_0x242962.prototype.animalInfo = function () {
    var _0x2b0aae = {};
    switch (this.animalSpecies) {
    case 0:
        _0x2b0aae.aniName = 'King Crab!';
        break;
    case 0x1:
        _0x2b0aae.aniName = 'Golden Crab!';
        break;
    case 0x2:
        _0x2b0aae.aniName = 'Amethyst Crab!';
        break;
    case 100:
        _0x2b0aae.aniName = 'Space Crab!';
        break;
    case 101:
        _0x2b0aae.aniName = 'Bone Crab!';
        break;
    }
    _0x2b0aae.skinName = 'ocean/kingcrab/' + this.animalSpecies + '/kingcrab';
    _0x2b0aae.aniDesc = '';
    _0x2b0aae.upgradeText = 'UPGRADED to ' + _0x2b0aae.aniName + `\n Use your powerful arms to smack your prey!`;
    _0x2b0aae.aniCol = '#971f0e';
    return _0x2b0aae;
};
_0x242962.prototype.getAbilityInfo = function (_0x3c8d3d) {
    _0x3c8d3d = {
        'abilName': 'Arm Smash'
    };
    _0x3c8d3d.abilImg = 'skins/ocean/kingcrab/' + this.animalSpecies + '/ability_crabSmashSkin.png';
    return _0x3c8d3d;
};
_0x242962.prototype.getSkinName = function () {
    var _0x29201e;
    _0x29201e = 'ocean/kingcrab/' + this.animalSpecies + '/kingcrab';
    return _0x29201e += 0 == this.specType ? '' : 0x1;
};
_0x242962.prototype.drawUnderwaterCustomization = function () {
    var _0x49ae1b = '#B32E10';
    switch (this.animalSpecies) {
    case 0x1:
        _0x49ae1b = '#b8892d';
        break;
    case 0x2:
        _0x49ae1b = '#932c6c';
    }
    ctx.save();
    var _0x3e716e = _0x93972d((_0x1534e0 - this.spawnTime) / 0x3e8, 0x1, 0x1, 0x1);
    ctx.save();
    ctx.rotate(_0x55d748(0x28));
    ctx.scale(0x1, 0x2);
    ctx.globalAlpha = 0.08;
    _0x110b78(0x1 * this.rad, 0.2 * this.rad, 0.1 * this.rad + 0.1 * this.rad * _0x3e716e, _0x49ae1b);
    ctx.globalAlpha = 0.2;
    _0x110b78(0x1 * this.rad, 0.2 * this.rad, 0.15 * this.rad, _0x49ae1b);
    ctx.restore();
    ctx.save();
    ctx.globalAlpha = 0x1;
    ctx.rotate(_0x55d748(-0x28));
    ctx.scale(0x1, 0x2);
    ctx.globalAlpha = 0.08;
    _0x110b78(-0x1 * this.rad, 0.2 * this.rad, 0.1 * this.rad + 0.1 * this.rad * -_0x3e716e, _0x49ae1b);
    ctx.globalAlpha = 0.2;
    _0x110b78(-0x1 * this.rad, 0.2 * this.rad, 0.15 * this.rad, _0x49ae1b);
    ctx.restore();
    ctx.restore();
};

function _0x242962() {
    _0x242962.superClass.call(this, o_player);
}
window.KingCrab = _0x242962;
GameObjType.setCustomClassForGameObjType(_0x242962, o_player, _0x5362ea);
_0x2a91c6 = Animal;
_0x3750e7.prototype = Object.create(_0x2a91c6.prototype);
_0x3750e7.prototype.constructor = _0x3750e7;
_0x3750e7.superClass = _0x2a91c6;
_0x3750e7.prototype.animalInfo = function () {
    var _0x35c039 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x35c039.aniName = 'Killerwhale!';
        break;
    case 0x1:
        _0x35c039.aniName = 'Golden Orca!';
        break;
    case 0x2:
        _0x35c039.aniName = 'Albino Orca!';
    }
    _0x35c039.skinName = 'ocean/killerwhale/' + this.animalSpecies + '/killerwhale';
    _0x35c039.aniDesc = '';
    _0x35c039.upgradeText = 'UPGRADED to ' + _0x35c039.aniName + `\nWhales blow out water when diving! (And sometimes other loot!)`;
    _0x35c039.aniCol = '#141414';
    return _0x35c039;
};
_0x3750e7.prototype.getAbilityInfo = function (_0x4bf010) {
    _0x4bf010 = {
        'abilName': 'Cause Wave'
    };
    _0x4bf010.abilImg = 'skins/ocean/killerwhale/' + this.animalSpecies + '/killerwhale.png';
    return _0x4bf010;
};
_0x3750e7.prototype.getSkinName = function () {
    var _0x28159d;
    _0x28159d = 'ocean/killerwhale/' + this.animalSpecies + '/killerwhale';
    return _0x28159d += 0 == this.specType ? '' : 0x1;
};

function _0x3750e7() {
    _0x3750e7.superClass.call(this, o_player);
}
window.Killerwhale = _0x3750e7;
GameObjType.setCustomClassForGameObjType(_0x3750e7, o_player, _0x1b136a);
_0x2a91c6 = Animal;
_0x27cc33.prototype = Object.create(_0x2a91c6.prototype);
_0x27cc33.prototype.constructor = _0x27cc33;
_0x27cc33.superClass = _0x2a91c6;
_0x27cc33.prototype.animalInfo = function () {
    return {
        'aniName': 'Jellyfish!',
        'skinName': 'ocean/jellyfish/jellyfish_body',
        'aniDesc': '',
        'upgradeText': `UPGRADED to JELLYFISH!\n A slowly-turning animal that can grow quite large!`,
        'aniCol': '#FDB9BA'
    };
};
_0x27cc33.prototype.getAbilityInfo = function (_0x5526df) {
    return {
        'abilName': 'Sting!',
        'abilImg': 'skins/ocean/jellyfish/ability.png'
    };
};
_0x27cc33.prototype.getSkinName = function () {
    return 'ocean/jellyfish/jellyfish_body' + (0 == this.specType ? '' : 0x1);
};
_0x27cc33.prototype.drawSkinCustomization = function () {
    var _0x16639e = 0x1f4 / 0x154,
        _0x627b2c = _0x2f22f9('skins/ocean/jellyfish/tentacles.png');
    if (_0x627b2c) {
        ctx.save();
        var _0x2a0392 = this.rad - this.outlineW;
        ctx.drawImage(_0x627b2c, -_0x2a0392 * _0x16639e, 1.8 * -_0x2a0392 * _0x16639e, 0x2 * _0x2a0392 * _0x16639e, 0x2 * _0x2a0392 * _0x16639e);
        ctx.restore();
    }
};

function _0x27cc33() {
    _0x27cc33.superClass.call(this, o_player);
}
window.Jellyfish = _0x27cc33;
GameObjType.setCustomClassForGameObjType(_0x27cc33, o_player, _0xbffa37);
_0x2a91c6 = Animal;
_0x56f95f.prototype = Object.create(_0x2a91c6.prototype);
_0x56f95f.prototype.constructor = _0x56f95f;
_0x56f95f.superClass = _0x2a91c6;
_0x56f95f.prototype.animalInfo = function () {
    var infoO = {};
  switch (this.animalSpecies) {
    case 0:
      infoO.aniName = "Stingray!";
      break;
    case 100:
      infoO.aniName = "Phantom Ray!";
      break;
    case 201:
      infoO.aniName = "Chocolate Ray!";
      break;
  }
  infoO.skinName = "ocean/stingray/" + this.animalSpecies + "/stingray";
  infoO.upgradeText = "UPGRADED to " + infoO.aniName + "\n Use electic shock (Release W key!) to shock animals! \n(Takes time to recharge)";
  infoO.aniCol = "#164336";
  return infoO;
};
_0x56f95f.prototype.getAbilityInfo = function (_0x31fcdd) {
    return {
        'abilName': 'Shock!',
        'abilImg': 'skins/ocean/stingray/'+this.animalSpecies+'/ability.png'
    };
};
_0x56f95f.prototype.getSkinName = function () {
    return 'ocean/stingray/'+this.animalSpecies+'/stingray' + (0 == this.specType ? '' : 0x1);
};
var _0x27ee4 = 1.5,
    _0xf376ff = 1.2,
    _0x3f7b03 = 0.8;
_0x56f95f.prototype.drawUnderSkinImg = function () {
    var _0x6c37f9 = 0x1f4 / 0x154,
        _0x2d9dc9 = _0x2f22f9('skins/ocean/stingray/'+this.animalSpecies+'/tail.png');
    if (_0x2d9dc9) {
        ctx.save();
        var _0x34854e = this.rad - this.outlineW;
        ctx.drawImage(_0x2d9dc9, -_0x34854e * _0x6c37f9, -_0x34854e * _0x27ee4 * _0x6c37f9, 0x2 * _0x34854e * _0x6c37f9, 0x2 * _0x34854e * _0x6c37f9);
        ctx.restore();
    }
    if (_0x2d9dc9 = _0x2f22f9('skins/ocean/stingray/'+this.animalSpecies+'/leftwing.png')) ctx.save(), _0x34854e = this.rad - this.outlineW, ctx.drawImage(_0x2d9dc9, -_0x34854e * _0xf376ff * _0x6c37f9, -_0x34854e * _0x6c37f9, 0x2 * _0x34854e * _0x6c37f9, 0x2 * _0x34854e * _0x6c37f9), ctx.restore();
    if (_0x2d9dc9 = _0x2f22f9('skins/ocean/stingray/'+this.animalSpecies+'/rightwing.png')) ctx.save(), _0x34854e = this.rad - this.outlineW, ctx.drawImage(_0x2d9dc9, -_0x34854e * _0x3f7b03 * _0x6c37f9, -_0x34854e * _0x6c37f9, 0x2 * _0x34854e * _0x6c37f9, 0x2 * _0x34854e * _0x6c37f9), ctx.restore();
};

function _0x56f95f() {
    _0x56f95f.superClass.call(this, o_player);
}
window.Stingray = _0x56f95f;
GameObjType.setCustomClassForGameObjType(_0x56f95f, o_player, _0x128264);

_0x2a91c6 = Animal;
_0x1025ae.prototype = Object.create(_0x2a91c6.prototype);
_0x1025ae.prototype.constructor = _0x1025ae;
_0x1025ae.superClass = _0x2a91c6;
_0x1025ae.prototype.animalInfo = function () {
    return {
        'aniName': 'Squid!',
        'skinName': 'ocean/squid/squid',
        'aniDesc': '',
        'upgradeText': `UPGRADED to SQUID!\n Squids can use INK when injured (press W!) \n+ you can hide in plankton bushes!`,
        'aniCol': '#40dda4'
    };
};
_0x1025ae.prototype.getAbilityInfo = function (_0xe66127) {
    return {
        'abilName': 'INK!',
        'abilImg': 'skins/ocean/squid/ability.png'
    };
};
_0x1025ae.prototype.getSkinName = function () {
    return 'ocean/squid/squid' + (0 == this.specType ? '' : 0x1);
};
_0x1025ae.prototype.drawUnderSkinImg = function () {
    var _0x5a38be = 0x1f4 / 0x154,
        _0x11e9ca = _0x2f22f9('skins/ocean/squid/cape.png');
    if (_0x11e9ca) {
        ctx.save();
        var _0x45cc67 = this.rad - this.outlineW;
        ctx.drawImage(_0x11e9ca, -_0x45cc67 * _0x5a38be, 1.1 * -_0x45cc67 * _0x5a38be, 0x2 * _0x45cc67 * _0x5a38be, 0x2 * _0x45cc67 * _0x5a38be);
        ctx.restore();
    }
};

function _0x1025ae() {
    _0x1025ae.superClass.call(this, o_player);
}
window.Squid = _0x1025ae;
GameObjType.setCustomClassForGameObjType(_0x1025ae, o_player, _0x44ffc0);
_0x2a91c6 = Animal;
_0x411bd4.prototype = Object.create(_0x2a91c6.prototype);
_0x411bd4.prototype.constructor = _0x411bd4;
_0x411bd4.superClass = _0x2a91c6;
_0x411bd4.prototype.updateZ = function () {
    this.z = this.flag_underWater ? -0x97 : this.rad;
};
_0x411bd4.prototype.animalInfo = function () {
    var _0x423adf = {
        'fileName': 'shark'
    };
    switch (this.animalSpecies) {
    case 0:
        _0x423adf.aniName = 'Shark!';
        _0x423adf.fileName = 'shark';
        break;
    case 0x1:
        _0x423adf.aniName = 'Tiger Shark!';
        _0x423adf.fileName = 'tigershark';
        break;
    case 0x2:
        _0x423adf.aniName = 'Hammarhead Shark!', _0x423adf.fileName = 'hammerhead';
    }
    _0x423adf.skinName = 'ocean/shark/' + this.animalSpecies + '/' + _0x423adf.fileName;
    _0x423adf.upgradeText = 'UPGRADED to ' + _0x423adf.aniName + `\n A vicious predator of the oceans!`;
    _0x423adf.aniCol = '#999fc6';
    return _0x423adf;
};
_0x411bd4.prototype.getAbilityInfo = function (_0x522101) {
    _0x522101 = {
        'abilName': 'Jaws Bite'
    };
    _0x522101.abilImg = 'skins/ocean/shark/' + this.animalSpecies + '/ability.png';
    return _0x522101;
};
_0x411bd4.prototype.getSkinName = function () {
    var _0x25482d = this.animalInfo();
    return 'ocean/shark/' + this.animalSpecies + '/' + _0x25482d.fileName;
};
_0x411bd4.prototype.drawUnderwaterCustomization = function () {
    var _0x4191a2 = 0x1f4 / 0x154,
        _0x267f7a = _0x2f22f9('skins/ocean/shark/' + this.animalSpecies + '/diving.png');
    if (_0x267f7a) {
        ctx.save();
        ctx.globalAlpha = 0.7;
        var _0x369adc = this.rad - this.outlineW;
        ctx.drawImage(_0x267f7a, -_0x369adc * _0x4191a2, -_0x369adc * _0x4191a2, 0x2 * _0x369adc * _0x4191a2, 0x2 * _0x369adc * _0x4191a2);
        ctx.restore();
    }
};
_0x411bd4.prototype.drawUnderSkinImg = function () {
    if (!this.flag_underWater) {
        var _0x341237 = 0x1f4 / 0x154 * 0x1,
            _0x2716aa = _0x2f22f9('skins/ocean/shark/' + this.animalSpecies + '/tail.png');
        if (_0x2716aa) {
            ctx.save();
            var _0x5cc23d = this.rad - this.outlineW;
            ctx.drawImage(_0x2716aa, -_0x5cc23d * _0x341237, 1.33 * -_0x5cc23d * _0x341237, 0x2 * _0x5cc23d * _0x341237, 0x2 * _0x5cc23d * _0x341237);
            ctx.restore();
        }
    }
};

function _0x411bd4() {
    _0x411bd4.superClass.call(this, o_player);
}
window.Shark = _0x411bd4;
GameObjType.setCustomClassForGameObjType(_0x411bd4, o_player, _0x13e47b);
_0x2a91c6 = Animal;
_0x25a59d.prototype = Object.create(_0x2a91c6.prototype);
_0x25a59d.prototype.constructor = _0x25a59d;
_0x25a59d.superClass = _0x2a91c6;
_0x25a59d.prototype.animalInfo = function () {
    return {
        'aniName': 'Turtle!',
        'skinName': 'ocean/turtle/turtle',
        'aniDesc': '',
        'upgradeText': `UPGRADED to TURTLE!\n Lives well on land & water! (On land, Press W to go into your shell!)`,
        'aniCol': '#502E1A'
    };
};
_0x25a59d.prototype.getAbilityInfo = function (_0x2e6ab6) {
    return {
        'abilName': 'Hide in Shell!',
        'abilImg': 'skins/ocean/turtle/turtle2.png'
    };
};
_0x25a59d.prototype.getSkinName = function () {
    var _0xc73e72;
    _0xc73e72 = 'ocean/turtle/turtle';
    return _0xc73e72 = this.flag_usingAbility ? _0xc73e72 + '2' : _0xc73e72 + (0 == this.specType ? '' : 0x1);
};
_0x25a59d.prototype.drawSkinCustomization = function () {
    if (!this.flag_usingAbility && 0x1 == this.specType) {
        var _0x4bb0b4 = 0x1f4 / 0x154,
            _0x3a414b = _0x2f22f9('skins/ocean/turtle/head.png');
        if (_0x3a414b) {
            ctx.save();
            var _0x37a97d = this.rad - this.outlineW;
            ctx.drawImage(_0x3a414b, -_0x37a97d * _0x4bb0b4, 0.88 * -_0x37a97d * _0x4bb0b4, 0x2 * _0x37a97d * _0x4bb0b4, 0x2 * _0x37a97d * _0x4bb0b4);
            ctx.restore();
        }
    }
};

function _0x25a59d() {
    _0x25a59d.superClass.call(this, o_player);
}
window.Turtle = _0x25a59d;
GameObjType.setCustomClassForGameObjType(_0x25a59d, o_player, _0x166900);
_0x2a91c6 = Animal;
_0x52e8dc.prototype = Object.create(_0x2a91c6.prototype);
_0x52e8dc.prototype.constructor = _0x52e8dc;
_0x52e8dc.superClass = _0x2a91c6;
_0x52e8dc.prototype.animalInfo = function () {
    var _0x38ad98 = {
        'aniName': 'Swordfish!',
        'skinName': 'ocean/swordfish/swordfish'
    };
    _0x38ad98.upgradeText = 'UPGRADED to ' + _0x38ad98.aniName + `\n (Press W to rush with your sharp nose!)`;
    _0x38ad98.aniCol = '#689CD7';
    return _0x38ad98;
};
_0x52e8dc.prototype.getAbilityInfo = function (_0x1b5d9d) {
    return {
        'abilName': 'Charge!',
        'abilImg': 'skins/ocean/swordfish/ability.png'
    };
};
_0x52e8dc.prototype.getSkinName = function () {
    var _0x5bf562;
    _0x5bf562 = 'ocean/swordfish/swordfish';
    return _0x5bf562 = this.flag_usingAbility ? _0x5bf562 + '2' : _0x5bf562 + (0 == this.specType ? '' : 0x1);
};
_0x52e8dc.prototype.drawSkinCustomization = function () {};
_0x52e8dc.prototype.drawUnderSkinImg = function () {
    var _0x1e8471 = 0x1f4 / 0x154,
        _0x3d8708 = _0x2f22f9('skins/ocean/swordfish/nose.png');
    if (_0x3d8708) {
        ctx.save();
        var _0x2ad418 = this.rad - this.outlineW;
        ctx.drawImage(_0x3d8708, -_0x2ad418 * _0x1e8471, 0.7 * -_0x2ad418 * _0x1e8471, 0x2 * _0x2ad418 * _0x1e8471, 0x2 * _0x2ad418 * _0x1e8471);
        ctx.restore();
    }
    if (_0x3d8708 = _0x2f22f9('skins/ocean/swordfish/tail.png')) ctx.save(), _0x2ad418 = this.rad - this.outlineW, ctx.drawImage(_0x3d8708, -_0x2ad418 * _0x1e8471, 1.15 * -_0x2ad418 * _0x1e8471, 0x2 * _0x2ad418 * _0x1e8471, 0x2 * _0x2ad418 * _0x1e8471), ctx.restore();
};

function _0x52e8dc() {
    _0x52e8dc.superClass.call(this, o_player);
}
window.Swordfish = _0x52e8dc;
GameObjType.setCustomClassForGameObjType(_0x52e8dc, o_player, _0x4dca01);
_0x2a91c6 = Animal;
_0x3112a3.prototype = Object.create(_0x2a91c6.prototype);
_0x3112a3.prototype.constructor = _0x3112a3;
_0x3112a3.superClass = _0x2a91c6;
_0x3112a3.prototype.animalInfo = function () {
    return {
        'aniName': 'Crab!',
        'skinName': 'ocean/crab/crab',
        'aniDesc': '',
        'upgradeText': `UPGRADED to CRAB!\n Crabs can survive on dry land!\n (On land, Press W to go into your shell!)`,
        'aniCol': '#bf2408'
    };
};
_0x3112a3.prototype.getAbilityInfo = function (_0x4d161a) {
    return {
        'abilName': 'Hide in Shell!',
        'abilImg': 'skins/ocean/crab/crab2.png'
    };
};
_0x3112a3.prototype.getSkinName = function () {
    var _0xfea260;
    _0xfea260 = 'ocean/crab/crab';
    return _0xfea260 = this.flag_usingAbility ? _0xfea260 + '2' : _0xfea260 + (0 == this.specType ? '' : 0x1);
};
_0x3112a3.prototype.basicDrawSkinImg = function () {
    this.setSkinScale();
    var _0x296475 = this.skinScale,
        _0x275d12 = this.skinRad;
    ctx.save();
    0 < this.id && ctx.rotate(_0x55d748(0x5a));
    this.loadedSkinImg ? ctx.drawImage(this.loadedSkinImg, -_0x275d12 * _0x296475, -_0x275d12 * _0x296475, 0x2 * _0x275d12 * _0x296475, 0x2 * _0x275d12 * _0x296475) : (ctx.fillStyle = this.skinNotLoadedColor, ctx.beginPath(), ctx.arc(0, 0, Math.max(0, this.rad - this.outlineW), 0, 0x2 * Math.PI), ctx.fill());
    ctx.restore();
};

function _0x3112a3() {
    _0x3112a3.superClass.call(this, o_player);
}
window.Crab = _0x3112a3;
GameObjType.setCustomClassForGameObjType(_0x3112a3, o_player, _0x14aa29);
_0x2a91c6 = Animal;
Snail.prototype = Object.create(_0x2a91c6.prototype);
Snail.prototype.constructor = Snail;
Snail.superClass = _0x2a91c6;
Snail.prototype.animalInfo = function () {
    var _0x15654b = {
        'aniName': 'Snail',
        'aniCol': '#FF9000',
        'skinName': 'ocean/snail/snail'
    };
    _0x15654b.upgradeText = 'UPGRADED to ' + _0x15654b.aniName + `!\n Press W to hide in your shell!`;
    return _0x15654b;
};
Snail.prototype.getSkinName = function () {
    return 'ocean/snail/snail';
};
Snail.prototype.dir = 0x1;
Snail.prototype.snail_yOffset = 0.75;
Snail.prototype.wasUsingAbility = !0x1;
Snail.prototype.animateHead = !0x1;
Snail.prototype.animationIn = null;
Snail.prototype.animationOut = null;
Snail.prototype.offset = 0;
Snail.prototype.drawUnderSkinImg = function () {
    this.flag_usingAbility && !this.wasUsingAbility && null == this.animationIn ? (this.wasUsingAbility = !0, this.animationIn = new _0x1cbd2d(this, 0x1, _0x1cbd2d.arc), this.animationIn.keepLastFrame = !0, this.animationIn.onFrameEntered = function (_0x6944ec) {
        !isNaN(_0x6944ec) && 0.35 > this.forObj.offset && (this.forObj.offset = 3.5 * _0x6944ec);
    }, this.animationIn.onStop = function () {
        this.forObj.offset = 0.35;
        this.forObj.wasUsingAbility = !0;
        this.forObj.animationIn = null;
    }) : !this.flag_usingAbility && this.wasUsingAbility && null == this.animationOut && (this.wasUsingAbility = !0, this.animationOut = new _0x1cbd2d(this, 0x3, _0x1cbd2d.halfWave), this.animationOut.keepLastFrame = !0, this.animationOut.onFrameEntered = function (_0x24ecfe) {
        isNaN(_0x24ecfe) || (this.forObj.offset = 0.35 * (0x1 - _0x24ecfe));
    }, this.animationOut.onStop = function () {
        this.forObj.offset = 0;
        this.forObj.wasUsingAbility = !0x1;
        this.forObj.animationOut = null;
    });
    this.animationIn && this.animationIn.run();
    this.animationOut && this.animationOut.run();
    null != this.animationIn || null != this.animationOut || this.wasUsingAbility || (this.offset = 0);
    var _0xac5efd = 0.75 + this.offset,
        _0x324bc3 = 0x1f4 / 0x154,
        _0x1dd802 = _0x2f22f9('skins/ocean/snail/snail_head.png');
    if (_0x1dd802) {
        ctx.save();
        var _0x53ceb8 = this.rad - this.outlineW;
        ctx.drawImage(_0x1dd802, -_0x53ceb8 * _0x324bc3, -_0x53ceb8 * _0xac5efd * _0x324bc3, 0x2 * _0x53ceb8 * _0x324bc3, 0x2 * _0x53ceb8 * _0x324bc3);
        ctx.restore();
    }
};

function Snail() {
    Snail.superClass.call(this, o_player);
}
window.Snail = Snail;
GameObjType.setCustomClassForGameObjType(Snail, o_player, _0x5ea8fd);
_0x2a91c6 = Animal;
KingDragon.prototype = Object.create(_0x2a91c6.prototype);
KingDragon.prototype.constructor = KingDragon;
KingDragon.superClass = _0x2a91c6;
KingDragon.prototype.updateZ = function () {
    this.z = 100000;
};
KingDragon.prototype.canUseTailslap = !0x1;
KingDragon.prototype.tailState = 0;
KingDragon.prototype.getSkinName = function () {
    return 'volcano/kingdragon/' + this.animalSpecies + '/kingdragon_body';
};
KingDragon.prototype.readCustomData_onNewlyVisible = function (_0x3cc785) {
    KingDragon.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3cc785);
    this.readInfo(_0x3cc785);
};
KingDragon.prototype.readInfo = function (_0x85d96b) {
    this.lava = _0x85d96b.readUInt8();
    this.canUseTailslap = _0x85d96b.readUInt8();
    this.tailState = _0x85d96b.readUInt16() / 0x64;
};
KingDragon.prototype.readCustomData_onUpdate = function (_0x3c339d) {
    KingDragon.superClass.prototype.readCustomData_onUpdate.call(this, _0x3c339d);
    this.readInfo(_0x3c339d);
};
KingDragon.prototype.leftWingAnim = null;
KingDragon.prototype.flapAngleDiff = 0x3;
KingDragon.prototype.flapAngle = 0x3;
KingDragon.prototype.flapF = 0.1;
KingDragon.prototype.flapDur = 0x2;
KingDragon.prototype.sF = 0.02;
KingDragon.prototype.drawWings = function () {
    null == this.leftWingAnim && (this.leftWingAnim = new _0x1cbd2d(this, this.flapDur, _0x1cbd2d.wave), this.leftWingAnim.keepLastFrame = !0, this.leftWingAnim.loop = !0, this.leftWingAnim.onFrameEntered = function (_0x2963c1) {
        this.forObj.frame1 = _0x2963c1;
    });
    null != this.leftWingAnim && this.leftWingAnim.run();
    var _0x5691b1 = this.rad - this.outlineW,
        _0x4c52ac = this.frame1 * this.sF * _0x5691b1,
        _0x56b49f = -(-this.flapF + this.frame1) * _0x55d748(this.flapAngle),
        _0x48fc57 = 0x1f4 / 0x154,
        _0xf94e22 = _0x2f22f9('skins/volcano/kingdragon/' + this.animalSpecies + '/left_wing.png'),
        _0x5e3a7c = _0x2f22f9('skins/volcano/kingdragon/' + this.animalSpecies + '/right_wing.png');
    _0xf94e22 && _0x5e3a7c && (ctx.save(), ctx.rotate(_0x55d748(this.flapAngleDiff) + _0x56b49f), ctx.drawImage(_0xf94e22, -_0x5691b1 * _0x48fc57, -_0x5691b1 * _0x48fc57 + _0x4c52ac, 0x2 * _0x5691b1 * _0x48fc57, 0x2 * _0x5691b1 * _0x48fc57 + 1.5 * _0x4c52ac), ctx.restore(), ctx.save(), ctx.rotate(-(_0x55d748(this.flapAngleDiff) + _0x56b49f)), ctx.drawImage(_0x5e3a7c, -_0x5691b1 * _0x48fc57, -_0x5691b1 * _0x48fc57 + _0x4c52ac, 0x2 * _0x5691b1 * _0x48fc57, 0x2 * _0x5691b1 * _0x48fc57 + 1.5 * _0x4c52ac), ctx.restore(), 0x4 == this.animalSpecies && (_0xf94e22 = _0x93972d((_0x1534e0 - this.spawnTime) / 0x3e8, 0x5, 0x1, 0x1), ctx.save(), ctx.globalAlpha = Math.max(0, _0xf94e22), _0xf94e22 = _0x2f22f9('skins/volcano/kingdragon/' + this.animalSpecies + '/left_wing_tips.png'), _0x5e3a7c = _0x2f22f9('skins/volcano/kingdragon/' + this.animalSpecies + '/right_wing_tips.png'), _0xf94e22 && _0x5e3a7c && (ctx.save(), ctx.rotate(_0x55d748(this.flapAngleDiff) + _0x56b49f), ctx.drawImage(_0xf94e22, -_0x5691b1 * _0x48fc57, -_0x5691b1 * _0x48fc57 + _0x4c52ac, 0x2 * _0x5691b1 * _0x48fc57, 0x2 * _0x5691b1 * _0x48fc57 + 1.5 * _0x4c52ac), ctx.restore(), ctx.save(), ctx.rotate(-(_0x55d748(this.flapAngleDiff) + _0x56b49f)), ctx.drawImage(_0x5e3a7c, -_0x5691b1 * _0x48fc57, -_0x5691b1 * _0x48fc57 + _0x4c52ac, 0x2 * _0x5691b1 * _0x48fc57, 0x2 * _0x5691b1 * _0x48fc57 + 1.5 * _0x4c52ac), ctx.restore()), ctx.restore()));
    _0xf94e22 = this.lava;
    if (0x32 > _0xf94e22) {
        var _0xf94e22 = _0xf94e22 / 0x32,
            _0x5e3a7c = _0x2f22f9('skins/volcano/kingdragon/' + this.animalSpecies + '/left_wing1.png'),
            _0x35eba1 = _0x2f22f9('skins/volcano/kingdragon/' + this.animalSpecies + '/right_wing2.png');
        _0x5e3a7c && _0x35eba1 && (ctx.save(), ctx.globalAlpha = 0x1 - _0xf94e22, ctx.save(), ctx.rotate(_0x55d748(this.flapAngleDiff) + _0x56b49f), ctx.drawImage(_0x5e3a7c, -_0x5691b1 * _0x48fc57, -_0x5691b1 * _0x48fc57 + _0x4c52ac, 0x2 * _0x5691b1 * _0x48fc57, 0x2 * _0x5691b1 * _0x48fc57 + 1.5 * _0x4c52ac), ctx.restore(), ctx.save(), ctx.rotate(-(_0x55d748(this.flapAngleDiff) + _0x56b49f)), ctx.drawImage(_0x35eba1, -_0x5691b1 * _0x48fc57, -_0x5691b1 * _0x48fc57 + _0x4c52ac, 0x2 * _0x5691b1 * _0x48fc57, 0x2 * _0x5691b1 * _0x48fc57 + 1.5 * _0x4c52ac), ctx.restore(), ctx.restore());
    }
};
KingDragon.prototype.drawSkinCustomization = function () {
    if (!this.flag_underWater) {
        var _0x121cd8 = 0x1f4 / 0x154,
            _0x32073c = _0x93972d((_0x1534e0 - this.spawnTime) / 0x3e8, 0x5, 0x1, 0x1),
            _0x33217e = _0x2f22f9('skins/volcano/kingdragon/' + this.animalSpecies + '/nostrils.png');
        if (_0x33217e) {
            ctx.save();
            ctx.globalAlpha = this.lava / 0x64 * Math.max(0, _0x32073c);
            var _0xb68291 = this.rad - this.outlineW;
            ctx.drawImage(_0x33217e, -_0xb68291 * _0x121cd8, -_0xb68291 * _0x121cd8, 0x2 * _0xb68291 * _0x121cd8, 0x2 * _0xb68291 * _0x121cd8);
            ctx.restore();
        }
        if (this.canUseTailslap) {
            if (_0x33217e = _0x2f22f9('skins/volcano/kingdragon/' + this.animalSpecies + '/bone2.png')) ctx.save(), ctx.globalAlpha = Math.max(0.3, _0x32073c), _0xb68291 = this.rad - this.outlineW, ctx.drawImage(_0x33217e, -_0xb68291 * _0x121cd8, -_0xb68291 * _0x121cd8, 0x2 * _0xb68291 * _0x121cd8, 0x2 * _0xb68291 * _0x121cd8), ctx.restore();
        } else {
            if (_0x32073c = _0x2f22f9('skins/volcano/kingdragon/' + this.animalSpecies + '/bone1.png')) ctx.save(), ctx.globalAlpha = 0x1, _0xb68291 = this.rad - this.outlineW, ctx.drawImage(_0x32073c, -_0xb68291 * _0x121cd8, -_0xb68291 * _0x121cd8, 0x2 * _0xb68291 * _0x121cd8, 0x2 * _0xb68291 * _0x121cd8), ctx.restore();
            _0x32073c = 0;
            0xb > this.tailState && 0x5 < this.tailState ? _0x32073c = (this.tailState - 0x5) / 0x6 : 0x3 >= this.tailState && (_0x32073c = this.tailState / 0x3);
            _0x33217e = _0x2f22f9('skins/volcano/kingdragon/' + this.animalSpecies + '/bone3.png');
            0xb > this.tailState && _0x33217e && (ctx.save(), ctx.globalAlpha = 0x5 < this.tailState ? 0x1 - _0x32073c : 0x1, _0xb68291 = this.rad - this.outlineW, ctx.drawImage(_0x33217e, -_0xb68291 * _0x121cd8, -_0xb68291 * _0x121cd8, 0x2 * _0xb68291 * _0x121cd8, 0x2 * _0xb68291 * _0x121cd8), ctx.restore());
            _0x33217e = _0x2f22f9('skins/volcano/kingdragon/' + this.animalSpecies + '/bone2.png');
            0x3 > this.tailState && _0x33217e && (ctx.save(), ctx.globalAlpha = 0x1 - _0x32073c, _0xb68291 = this.rad - this.outlineW, ctx.drawImage(_0x33217e, -_0xb68291 * _0x121cd8, -_0xb68291 * _0x121cd8, 0x2 * _0xb68291 * _0x121cd8, 0x2 * _0xb68291 * _0x121cd8), ctx.restore());
        }
        this.drawWings();
    }
};
KingDragon.prototype.drawLowWaterDrop = function () {
    if (!this.flag_underWater && this.flag_lowWat) {
        var _0x5991ca = 0.5 * (0.8 - 0.2),
            _0x5991ca = 0.2 + _0x5991ca + _0x5991ca * Math.sin(0x2 * Math.PI / 1.2 * (_0x1534e0 / 0x3e8));
        ctx.save();
        ctx.globalAlpha = _0x5991ca;
        ctx.fillStyle = _0x1a1848;
        ctx.beginPath();
        ctx.arc(0, this.rad + 0x5, 0x5, 0, 0x2 * Math.PI);
        ctx.fill();
        ctx.restore();
    }
};
KingDragon.prototype.animalInfo = function () {
    var _0x5bb9f5 = {};
    switch (this.animalSpecies) {
    case 0:
        _0x5bb9f5.aniName = 'King Dragon';
        break;
    case 0x1:
        _0x5bb9f5.aniName = 'Golden King Dragon';
        break;
    case 0x2:
        _0x5bb9f5.aniName = 'King Ripper';
        break;
    case 0x3:
        _0x5bb9f5.aniName = 'King Stan';
        break;
    case 0x4:
        _0x5bb9f5.aniName = 'King Shah';
        break;
    case 0x5:
        _0x5bb9f5.aniName = 'Queen Scarlet';
        break;
    case 0x6:
        _0x5bb9f5.aniName = 'Queen Celeste';
        break;
    case 7:
        _0x5bb9f5.aniName = 'Bone King';
        break;
    case 8:
        _0x5bb9f5.aniName = 'King Flame';
        break;
    case 9:
        _0x5bb9f5.aniName = 'Queen Ripper';
        break;
    case 10:
        _0x5bb9f5.aniName = 'King Inferno';
        break;
    case 11:
        _0x5bb9f5.aniName = 'King Melon';
        break;
    case 12:
        _0x5bb9f5.aniName = 'King Golder';
        break;
    }
    _0x5bb9f5.aniCol = '#FF9000';
    _0x5bb9f5.skinName = this.getSkinName();
    _0x5bb9f5.upgradeText = 'UPGRADED to ' + _0x5bb9f5.aniName;
    _0x5bb9f5.upgradeText += `!\nYou got firestream that burns your victim alive! Watch your tail and slap them hard.`;
    _0x5bb9f5.aniCol = 'black';
    return _0x5bb9f5;
};
KingDragon.prototype.getAbilityInfo = function (_0x250866) {
    _0x250866 = {
        'abilName': `Firestream\n& Tail slap`
    };
    var _0x553b5f = 0;
    _0x553b5f = this.animalSpecies+5;
    _0x250866.speciesType = _0x553b5f;
    _0x250866.abilImg = 'img/fire/' + _0x553b5f + '/0.png';
    return _0x250866;
};

function KingDragon() {
    this.lava = 0;
    KingDragon.superClass.call(this, o_player);
}
window.KingDragon = KingDragon;
GameObjType.setCustomClassForGameObjType(KingDragon, o_player, _0x4e99c5);
_0x2a91c6 = GameObj;
_0xebd932.prototype = Object.create(_0x2a91c6.prototype);
_0xebd932.prototype.constructor = _0xebd932;
_0xebd932.superClass = _0x2a91c6;
_0xebd932.prototype.updateZ = function () {
    this.z = 0x2710;
};
_0xebd932.prototype.tornadoType = 'tornado';
_0xebd932.prototype.customDraw = function (_0x58f1a4) {
    this.setTornadoType();
    var _0x28a080 = 'img/disasters/' + this.tornadoType + '.png';
    if (_0x28a080 = _0x2f22f9(_0x28a080)) {
        _0x58f1a4 = 0.8 * this.rad;
        var _0x56ddb7 = 0x3e8,
            _0x56ddb7 = (_0x1534e0 - this.spawnTime) % _0x56ddb7 / _0x56ddb7,
            _0x2676b9 = 0x2 * _0x56ddb7 * Math.PI,
            _0x56ddb7 = 0x7d0,
            _0x56ddb7 = (_0x1534e0 - this.spawnTime) % _0x56ddb7 / _0x56ddb7,
            _0x56ddb7 = 0x2 * _0x56ddb7 * Math.PI;
        ctx.save();
        ctx.rotate(_0x2676b9);
        ctx.globalAlpha *= 0x1;
        _0x2676b9 = 6.5 * Math.cos(0x2 * Math.PI / 2.2 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
        ctx.globalAlpha = 0.3;
        ctx.drawImage(_0x28a080, -_0x58f1a4 - _0x2676b9 / 2.2, -_0x58f1a4, 0x2 * _0x58f1a4, 0x2 * _0x58f1a4);
        ctx.restore();
        ctx.save();
        ctx.globalAlpha = 0.7;
        ctx.rotate(_0x56ddb7);
        ctx.drawImage(_0x28a080, -_0x58f1a4 - _0x2676b9 / 2.2, -_0x58f1a4, 0x2 * _0x58f1a4, 0x2 * _0x58f1a4);
        ctx.restore();
        this.showDevilFace && (_0x28a080 = 'img/disasters/' + this.tornadoFace + '.png', _0x28a080 = _0x2f22f9(_0x28a080)) && (ctx.save(), ctx.rotate(this.angle), ctx.globalAlpha = 0.3, ctx.drawImage(_0x28a080, -_0x58f1a4, -_0x58f1a4, 0x2 * _0x58f1a4, 0x2 * _0x58f1a4), ctx.restore());
    }
};
_0xebd932.prototype.setTornadoType = function (_0x5cb296) {
    switch (this.specType) {
    case 0:
        this.tornadoType = 'tornado';
        this.tornadoFace = 'dustface';
        break;
    case 0x1:
        this.tornadoType = 'waterspout';
        this.tornadoFace = 'waterface';
        break;
    case 0x2:
        this.tornadoType = 'dustdevil';
        this.tornadoFace = 'dustface';
        break;
    case 0x3:
        this.tornadoType = 'arcticwhirl';
        this.tornadoFace = 'arcticface';
        break;
    case 0x4:
        this.tornadoType = 'firedevil';
        this.tornadoFace = 'fireface';
        break;
    case 0x5:
        this.tornadoType = 'deviltwister', this.tornadoFace = 'devilface';
    }
};
_0xebd932.prototype.readCustomData_onNewlyVisible = function (_0x5a93a0) {
    _0xebd932.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x5a93a0);
    this.setTornadoType();
};
_0xebd932.prototype.showDevilFace = !0x1;
_0xebd932.prototype.tornadoFace = null;
_0xebd932.prototype.readCustomData_onUpdate = function (_0x1cbb18) {
    _0xebd932.superClass.prototype.readCustomData_onUpdate.call(this, _0x1cbb18);
    this.showDevilFace = 0x1 == _0x1cbb18.readUInt8();
};

function _0xebd932() {
    _0xebd932.superClass.call(this, o_tornado);
    this.doesDrawEffectScale = !0x1;
    this.drawEffectScale_Slow = !0;
}
window.Tornado = _0xebd932;
GameObjType.setCustomClassForGameObjType(_0xebd932, o_tornado);
_0x2a91c6 = GameObj;
Volcano.prototype = Object.create(_0x2a91c6.prototype);
Volcano.prototype.constructor = Volcano;
Volcano.superClass = _0x2a91c6;
Volcano.prototype.updateZ = function () {
    this.z = -0x8c;
};
Volcano.prototype.shiverF = 0.015;
Volcano.prototype.drawTranslate = function () {
    ctx.translate(this.x, this.y);
    ctx.save();
    if (this.erruption >= this.shakeStart && this.erruption <= this.shakeEnd + 0x1) {
        this.shiverF = this.erruption >= this.shakeStart + 0x2 ? 0.025 : 0.015;
        var _0x59b024 = (_0x1534e0 - this.spawnTime) / 0x3e8,
            _0x743ca3 = this.rad * this.shiverF;
        this.shakeOffsetX = _0x743ca3 * Math.sin(0x2 * Math.PI / 0.2 * _0x59b024);
        _0x743ca3 = this.rad * this.shiverF;
        this.shakeOffsetY = _0x743ca3 * Math.sin(0x2 * Math.PI / 0.3 * _0x59b024);
        ctx.translate(-this.shakeOffsetX, -this.shakeOffsetY);
    }
};
Volcano.prototype.drawHealthBar = function () {
    ctx.restore();
};
Volcano.prototype.customDraw = function (_0x3c3c59) {
    this.curBiome == _0x35f8d3 ? (_0x110b78(0, 0, Math.max(0, 0x1 * this.rad), '#faf6f2'), _0x110b78(0, 0, Math.max(0, 0.6 * this.rad), '#e0dbd5'), _0x110b78(0, 0, Math.max(0, 0.5 * this.rad), '#9DDADE'), _0x110b78(0, 0, Math.max(0, 0.45 * this.rad), '#9DDADE')) : (_0x110b78(0, 0, Math.max(0, 0x1 * this.rad), '#815427'), _0x110b78(0, 0, Math.max(0, 0.6 * this.rad), '#6e4b29'), _0x110b78(0, 0, Math.max(0, 0.5 * this.rad), '#543d28'), _0x110b78(0, 0, Math.max(0, 0.45 * this.rad), '#3f3124'));
    _0x3c3c59 = 0;
    switch (Math.round(this.erruption)) {
    case 0:
        _0x3c3c59 = 0;
        break;
    case 0x1:
        _0x3c3c59 = 0;
        break;
    case 0x2:
        _0x3c3c59 = 0x1;
        _0x110b78(0, 0, Math.max(0, 0.25 * this.rad), _0x1a1848);
        break;
    case 0x3:
        _0x3c3c59 = 0x2;
        _0x110b78(0, 0, Math.max(0, 0.25 * this.rad), _0x1a1848);
        break;
    case 0x4:
    case 0x5:
    case 0x6:
        _0x3c3c59 = 0x3;
        _0x110b78(0, 0, Math.max(0, 0.33 * this.rad), _0x1a1848);
        break;
    case 0x7:
        _0x3c3c59 = 0x2;
        _0x110b78(0, 0, Math.max(0, 0.25 * this.rad), _0x1a1848);
        break;
    case 0x8:
        _0x3c3c59 = 0x1;
        _0x110b78(0, 0, Math.max(0, 0.25 * this.rad), _0x1a1848);
        break;
    case 0x9:
        _0x3c3c59 = 0;
        break;
    case 0xa:
        _0x3c3c59 = 0;
    }
    _0x110b78(0, 0, Math.max(0, 0.33 * this.rad), '#241e19');
    _0x110b78(0, 0, Math.max(0, 0.25 * this.rad), '#120f0d');
    _0x110b78(0, 0, Math.max(0, 0.33 * this.rad), _0x1a1848);
    if (0x1 < this.erruption && 0xa > this.erruption) {
        ctx.save();
        ctx.globalAlpha = 0x1 - this.underwaterA;
        var _0x4bf089 = 0x2 * Math.sin(0x2 * Math.PI / 1.5 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
        ctx.fillStyle = 'yellow';
        var _0x1dfc02 = 0.15 * Math.max(0, 0.2 * this.rad);
        ctx.beginPath();
        for (i = 0x1; 0x1 >= i; i++) ctx.save(), ctx.globalAlpha = 0.2, ctx.rotate(this.rPer * Math.PI * 0x2 * i), ctx.beginPath(), ctx.arc(-0.35 * _0x1dfc02, -0.33 * _0x1dfc02, Math.max(0, _0x1dfc02 + _0x4bf089), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.35 * _0x1dfc02, -0.32 * _0x1dfc02, Math.max(0, _0x1dfc02 - _0x4bf089), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.35 * _0x1dfc02, 0.36 * _0x1dfc02, Math.max(0, _0x1dfc02 + _0x4bf089), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(-0.35 * _0x1dfc02, 0.35 * _0x1dfc02, Math.max(0, _0x1dfc02 - _0x4bf089), 0, 0x2 * Math.PI), ctx.fill(), ctx.restore();
        ctx.restore();
    }
    if (this.curBiome == _0x35f8d3) {
        ctx.save();
        if (_0x3c3c59 = _0x2f22f9('img/arcticano/' + _0x3c3c59 + '.png')) _0x4bf089 = 0.35 * this.rad, ctx.rotate(this.angle), ctx.drawImage(_0x3c3c59, -_0x4bf089, -_0x4bf089, 0x2 * _0x4bf089, 0x2 * _0x4bf089);
        ctx.restore();
    }
};
var _0x173110 = 0x1;
Volcano.prototype.readCustomData_onUpdate = function (_0x1105c7) {
    this.erruption = _0x1105c7.readUInt16() / 0x64;
    this.maxLvl = _0x1105c7.readUInt8() / 0xa;
    this.shakeStart = _0x1105c7.readUInt8() / 0xa;
    this.shakeEnd = _0x1105c7.readUInt8() / 0xa;
    this.spitLevelMin = 0.2 * this.maxLvl;
    this.spitLevelMax = 0.8 * this.maxLvl;
};

function Volcano() {
    Volcano.superClass.call(this, o_volcano);
}
window.Volcano = Volcano;
GameObjType.setCustomClassForGameObjType(Volcano, o_volcano);
_0x5a621d = _0x5cd65a;
_0x2a91c6 = GameObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x5cd65a.prototype.customDraw = function (_0x5788c0) {
    ctx.save();
    ctx.rotate(this.angle + _0x55d748(0xb4));
    ctx.globalAlpha = 0x1;
    if (_0x5788c0 = _0x2f22f9('img/raindrop.png')) {
        var _0x70d16e = 0x2 * this.rad;
        ctx.drawImage(_0x5788c0, -_0x70d16e, -_0x70d16e, 0x2 * _0x70d16e, 0x2 * _0x70d16e);
    }
    ctx.restore();
};
_0x5cd65a.prototype.updateZ = function () {
    this.z = 0x2710 + this.rad;
};

function _0x5cd65a() {
    _0x5cd65a.superClass.call(this);
    this.spawnTime = _0x1534e0;
}
window.RainDrop = _0x5cd65a;
GameObjType.setCustomClassForGameObjType(_0x5cd65a, o_rainDrop);
_0x2a91c6 = GameObj;
_0x1b6ed1.prototype = Object.create(_0x2a91c6.prototype);
_0x1b6ed1.prototype.constructor = _0x1b6ed1;
_0x1b6ed1.superClass = _0x2a91c6;
_0x1b6ed1.prototype.updateZ = function () {
    this.z = 0x3ed;
};
_0x1b6ed1.prototype.customDraw = function (_0x36a804) {
    if (0x2 != _0x14fca5) {
        var _0xbc69d = 0.15,
            _0xa78f32 = 0.5 * (0.8 - _0xbc69d);
        _0x36a804 = _0xbc69d + _0xa78f32 + _0xa78f32 * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8));
        ctx.save();
        ctx.globalAlpha *= _0x36a804;
        ctx.restore();
        _0xbc69d = 0.85;
        _0xa78f32 = 0.5 * (0x1 - _0xbc69d);
        _0xbc69d = _0xbc69d + _0xa78f32 + _0xa78f32 * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8));
        if (_0x36a804 = _0x2f22f9('img/iceball/' + Math.trunc(_0x1534e0 / 0x78) % 0x5 + '.png')) {
            var _0xa78f32 = 0,
                _0x4dd118 = 0.4 * this.rad,
                _0x2307f7 = 0x2 * this.rad * (0x2 + 0x2 * _0xbc69d) / 0x3,
                _0x15ba51 = 3.5 * this.rad * _0xbc69d,
                _0xb938d8 = 0.5,
                _0xb02a9a = 0.95;
            ctx.save();
            ctx.globalAlpha = ctx.globalAlpha * this.onFireEffA * _0xbc69d;
            ctx.rotate(this.angle);
            ctx.drawImage(_0x36a804, _0xa78f32 + _0x2307f7 * -_0xb938d8, _0x4dd118 + _0x15ba51 * -_0xb02a9a, _0x2307f7, _0x15ba51);
            ctx.restore();
        }
    } else if (_0x36a804 = _0x2f22f9('img/iceball/0.png')) _0xbc69d = 0.85, _0xa78f32 = 0.5 * (0x1 - _0xbc69d), _0xbc69d = _0xbc69d + _0xa78f32 + _0xa78f32 * Math.sin(0x2 * Math.PI / 0x1 * (_0x1534e0 / 0x3e8)), _0xa78f32 = 0, _0x4dd118 = 0.4 * this.rad, _0x2307f7 = 0x2 * this.rad * (0x2 + 0x2 * _0xbc69d) / 0x3, _0x15ba51 = 3.5 * this.rad * _0xbc69d, _0xb938d8 = 0.5, _0xb02a9a = 0.95, ctx.save(), ctx.rotate(this.angle), ctx.drawImage(_0x36a804, _0xa78f32 + _0x2307f7 * -_0xb938d8, _0x4dd118 + _0x15ba51 * -_0xb02a9a, _0x2307f7, _0x15ba51), ctx.restore();
};

function _0x1b6ed1() {
    _0x1b6ed1.superClass.call(this, o_iceBall);
}
window.Iceball = _0x1b6ed1;
GameObjType.setCustomClassForGameObjType(_0x1b6ed1, o_iceBall);
_0x5a621d = _0x221c3f;
_0x2a91c6 = AbillityObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x221c3f.prototype.customDraw = function (_0x4a5165) {
    ctx.save();
    ctx.rotate(this.angle + _0x55d748(0xb4));
    ctx.globalAlpha = 0.7 > this.alpha ? this.alpha : 0.7;
    if (_0x4a5165 = _0x2f22f9('img/disasters/tsunami.png')) {
        var _0x50ad84 = 1.25 * this.rad;
        ctx.drawImage(_0x4a5165, -_0x50ad84, -_0x50ad84, 0x2 * _0x50ad84, 0x2 * _0x50ad84);
    }
    ctx.restore();
};
_0x221c3f.prototype.updateZ = function () {
    this.z = 0x2710 - this.rad;
};
_0x221c3f.prototype.readCustomData_onUpdate = function (_0xd12118) {
    this.alpha = _0xd12118.readUInt8() / 0x64;
};
_0x221c3f.prototype.readCustomData_onNewlyVisible = function (_0x1df8fa) {
    this.alpha = _0x1df8fa.readUInt8() / 0x64;
};

function _0x221c3f() {
    _0x221c3f.superClass.call(this);
    this.spawnTime = _0x1534e0;
}
window.TsunamiWave = _0x221c3f;
GameObjType.setCustomClassForGameObjType(_0x221c3f, o_abilityObj, _0x22d643);
_0x5a621d = _0x245cee;
_0x2a91c6 = AbillityObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x245cee.prototype.customDraw = function (_0x2f962c) {
    ctx.save();
    ctx.rotate(this.angle + _0x55d748(0xb4));
    ctx.globalAlpha = 0.7 > this.alpha ? this.alpha : 0.7;
    if (_0x2f962c = _0x2f22f9('img/disasters/dustwave.png')) {
        var _0x4a9342 = 1.25 * this.rad;
        ctx.drawImage(_0x2f962c, -_0x4a9342, -_0x4a9342, 0x2 * _0x4a9342, 0x2 * _0x4a9342);
    }
    ctx.restore();
};
_0x245cee.prototype.updateZ = function () {
    this.z = 0x2710 - this.rad;
};
_0x245cee.prototype.readCustomData_onUpdate = function (_0x3c2f9a) {
    _0x245cee.superClass.prototype.readCustomData_onUpdate.call(this, _0x3c2f9a);
    this.alpha = _0x3c2f9a.readUInt8() / 0x64;
};
_0x245cee.prototype.readCustomData_onNewlyVisible = function (_0xe622ba) {
    _0x245cee.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0xe622ba);
    this.alpha = _0xe622ba.readUInt8() / 0x64;
};

function _0x245cee() {
    _0x245cee.superClass.call(this);
    this.spawnTime = _0x1534e0;
}
window.DustWave = _0x245cee;
GameObjType.setCustomClassForGameObjType(_0x245cee, o_abilityObj, _0x14ebee);
_0x5a621d = _0x79fa34;
_0x2a91c6 = AbillityObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
_0x79fa34.prototype.customDraw = function (_0x4c8f21) {
    ctx.save();
    ctx.rotate(this.angle + _0x55d748(0xb4));
    ctx.globalAlpha = 0.7 > this.alpha ? this.alpha : 0.7;
    if (_0x4c8f21 = _0x2f22f9('img/disasters/heatwave.png')) {
        var _0x1a7992 = 1.25 * this.rad;
        ctx.drawImage(_0x4c8f21, -_0x1a7992, -_0x1a7992, 0x2 * _0x1a7992, 0x2 * _0x1a7992);
    }
    ctx.restore();
};
_0x79fa34.prototype.updateZ = function () {
    this.z = 0x2710 - this.rad;
};
_0x79fa34.prototype.readCustomData_onUpdate = function (_0x3c2f9a) {
    _0x79fa34.superClass.prototype.readCustomData_onUpdate.call(this, _0x3c2f9a);
    this.alpha = _0x3c2f9a.readUInt8() / 0x64;
};
_0x79fa34.prototype.readCustomData_onNewlyVisible = function (_0xe622ba) {
    _0x79fa34.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0xe622ba);
    this.alpha = _0xe622ba.readUInt8() / 0x64;
};

function _0x79fa34() {
    _0x79fa34.superClass.call(this);
    this.spawnTime = _0x1534e0;
}
window.HeatWave = _0x79fa34;
GameObjType.setCustomClassForGameObjType(_0x79fa34, o_abilityObj, _0x574ded);
_0x5a621d = ColdWave;
_0x2a91c6 = AbillityObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
ColdWave.prototype.customDraw = function (_0x21a322) {
    ctx.save();
    ctx.rotate(this.angle + _0x55d748(0xb4));
    ctx.globalAlpha = 0.7 > this.alpha ? this.alpha : 0.7;
    if (_0x21a322 = _0x2f22f9('img/disasters/coldwave.png')) {
        var _0x25e4f2 = 1.25 * this.rad;
        ctx.drawImage(_0x21a322, -_0x25e4f2, -_0x25e4f2, 0x2 * _0x25e4f2, 0x2 * _0x25e4f2);
    }
    ctx.restore();
};
ColdWave.prototype.updateZ = function () {
    this.z = 0x2710 - this.rad;
};
ColdWave.prototype.readCustomData_onUpdate = function (_0x3c2f9a) {
    ColdWave.superClass.prototype.readCustomData_onUpdate.call(this, _0x3c2f9a);
    this.alpha = _0x3c2f9a.readUInt8() / 0x64;
};
ColdWave.prototype.readCustomData_onNewlyVisible = function (_0xe622ba) {
    ColdWave.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0xe622ba);
    this.alpha = _0xe622ba.readUInt8() / 0x64;
};

function ColdWave() {
    ColdWave.superClass.call(this);
    this.spawnTime = _0x1534e0;
}
window.ColdWave = ColdWave;
GameObjType.setCustomClassForGameObjType(ColdWave, o_abilityObj, _0x444957);
_0x2a91c6 = Animal;
BigFoot.prototype = Object.create(_0x2a91c6.prototype);
BigFoot.prototype.constructor = BigFoot;
BigFoot.superClass = _0x2a91c6;
BigFoot.prototype.animalInfo = function () {
    var infoO = {};
    switch (this.animalSpecies) {
        case 0:
            infoO.aniName = "The BigFoot";
            break;
        case 1:
            infoO.aniName = "The Gujjar";
            break;
    }
    infoO.aniDesc = "";
    infoO.upgradeText =
        "UPGRADED to " + infoO.aniName + "! So it really exists... \n Right click/W to throw Spears. \nHold to make a fire (every 30s)";
    infoO.aniCol = "#839eb5";
    infoO.skinName = 'land/bigfoot/'+this.animalSpecies+'/bigfoot';
    return infoO;
};
BigFoot.prototype.getAbilityInfo = function (_0x4f532b) {
    return {
        'abilName': `Throw Spear\n (Hold for fire!)`,
        'abilImg': 'skins/land/bigfoot/'+this.animalSpecies+'/ability.png'
    };
};
BigFoot.prototype.getSkinName = function () {
    var _0x21b754;
    _0x21b754 = 'land/bigfoot/'+this.animalSpecies+'/';
    return _0x21b754 = this.flag_underWater ? _0x21b754 + 'thebigfoot' : _0x21b754 + 'bigfoot';
};
BigFoot.prototype.drawUnderSkinTail = function (_0x55fbcc) {
    this.isCamouflage || BigFoot.superClass.prototype.drawUnderSkinTail.call(this, _0x55fbcc);
};
BigFoot.prototype.drawHealthBar = function () {
    this.isCamouflage || BigFoot.superClass.prototype.drawHealthBar.call(this);
};
BigFoot.prototype.isTransforming = !0x1;
BigFoot.prototype.isCamouflage = !0x1;
BigFoot.prototype.carrotAlpha = 0;
BigFoot.prototype.getIdealOpacity = function () {
    return this.flag_underWater || this.flag_usingAbility && this.isTransforming || this.isCamouflage ? 0 : 0x1;
};
BigFoot.prototype.biteStart = 0;
BigFoot.prototype.flapAmount = 0x3;
BigFoot.prototype.flapDur = 1.5;
BigFoot.prototype.roarStartT = -0x1f4;
BigFoot.prototype.spearThrow = function () {
    ctx.save();
    var _0x579217 = _0x2f22f9('skins/land/bigfoot/'+this.animalSpecies+'/arm21.png');
    if (_0x579217) {
        var _0xb1f6b5 = Math.min(0x1, (_0x1534e0 - this.biteStart) / 0xc8),
            _0x32a744 = -_0x1c8ba9((_0x1534e0 - this.biteStart) / 0x12c, 0, 0x1) * _0x55d748(0x5a);
        ctx.rotate(this.angle + _0x32a744);
        var _0x32a744 = 1.75 * -this.rad,
            _0x5a871d = 0x2 * _0x32a744,
            _0xb1f6b5 = 0x2 * _0x32a744 * _0xb1f6b5;
        ctx.drawImage(_0x579217, this.rad / 0x2 + -0.3 * _0x5a871d, this.rad + -0.8 * _0xb1f6b5 + _0x32a744, _0x5a871d, _0xb1f6b5);
    }
    ctx.restore();
};
BigFoot.prototype.drawSkinCustomization = function () {
    this.flag_underWater || (this.setSkinScale(), this.flag_usingAbility || (this.biteStart = 0), 0 != this.id && this.spearInHand ? this.spearHandAnimation(0) : this.leftHandAnimation(0), this.rightHandAnimation(0), this.bigfootHead(0), this.flag_usingAbility || this.flag_inHidingHole || this.oogaBoogaAnimation(0));
};
BigFoot.prototype.oogaBoogaNextT = +new Date() + 0x3a98;
BigFoot.prototype.oogaBoogaFrame = 0;
BigFoot.prototype.oogaBoogaFrameT = 0;
BigFoot.prototype.oogaBoogaAnimation = function (_0x416072) {
    _0x1534e0 > this.oogaBoogaNextT && (_0x1534e0 > this.oogaBoogaFrameT && (this.oogaBoogaFrameT = _0x1534e0 + 0x12c, this.oogaBoogaFrame += 0x1, 0x1 == this.oogaBoogaFrame ? this.gotChat('OOGA!') : 0x3 == this.oogaBoogaFrame && this.gotChat('BOOGA!')), 0x4 < this.oogaBoogaFrame && (this.oogaBoogaFrame = 0, this.oogaBoogaNextT = +new Date() + 0x3a98));
    if (0 < this.oogaBoogaFrame) {
        _0x416072 = 0x1f4 / 0x154;
        var _0x5e66b4 = _0x2f22f9('skins/land/bigfoot/'+this.animalSpecies+'/mouth' + this.oogaBoogaFrame + '.png');
        if (_0x5e66b4) {
            ctx.save();
            var _0x2321b1 = this.rad;
            ctx.drawImage(_0x5e66b4, -_0x2321b1 * _0x416072, (-_0x2321b1 + 0 * _0x2321b1) * _0x416072, 0x2 * _0x2321b1 * _0x416072, 0x2 * _0x2321b1 * _0x416072);
            ctx.restore();
        }
    }
};
BigFoot.prototype.spearInHand = !0x1;
BigFoot.prototype.canCreateFire = !0x1;
BigFoot.prototype.readCustomData_onUpdate = function (_0x508108) {
    BigFoot.superClass.prototype.readCustomData_onUpdate.call(this, _0x508108);
    this.spearInHand = 0x1 == _0x508108.readUInt8();
    this.canCreateFire = 0x1 == _0x508108.readUInt8();
};
BigFoot.prototype.readCustomData_onNewlyVisible = function (_0x3e7886) {
    BigFoot.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x3e7886);
};
var _0x21286e = 0.84,
    _0x429324 = 0.47,
    _0x35932c = 0x2d,
    _0x4c4312 = -0x1e,
    _0x8a441a = 1.3,
    _0x57bed6 = 1.5,
    _0x4bd1bd = 0.3;
BigFoot.prototype.bigfootHead = function (_0x6b80a5) {
    _0x6b80a5 = 0;
    var _0x5095f8 = 0x1f4 / 0x154,
        _0x450bb2 = this.flag_usingAbility ? 'head2' : 'head';
    this.flag_usingAbility || (_0x6b80a5 = 0);
    if (_0x450bb2 = _0x2f22f9('skins/land/bigfoot/'+this.animalSpecies+'/' + _0x450bb2 + '.png')) {
        ctx.save();
        var _0x1fbab2 = this.rad;
        ctx.drawImage(_0x450bb2, -_0x1fbab2 * _0x5095f8, (-_0x1fbab2 + _0x1fbab2 * _0x6b80a5) * _0x5095f8, 0x2 * _0x1fbab2 * _0x5095f8, 0x2 * _0x1fbab2 * _0x5095f8);
        ctx.restore();
    }
};
BigFoot.prototype.spearHandAnimation = function (_0x11c623) {
    var _0x58599c = (_0x1534e0 - this.spawnTime) / 0x3e8,
        _0x58599c = _0x93972d(_0x58599c, _0x57bed6, _0x4bd1bd, 0x2),
        _0x2ed9c5 = _0x2f22f9('skins/land/bigfoot/'+this.animalSpecies+'/arm2.png');
    if (_0x2ed9c5) {
        ctx.save();
        _0x11c623 = -(-0.2 + _0x58599c) * _0x55d748(_0x35932c);
        var _0x1dbe08 = this.rad * _0x8a441a;
        ctx.rotate(_0x55d748(_0x4c4312) + _0x11c623);
        _0x11c623 = this.rad;
        var _0x3c4cf3 = 0x2 * _0x1dbe08,
            _0x1dbe08 = 0x2 * _0x1dbe08,
            _0x433d7a = _0x429324,
            _0x45b0e5 = _0x21286e;
        ctx.drawImage(_0x2ed9c5, 0 + _0x3c4cf3 * -_0x433d7a, _0x11c623 + _0x1dbe08 * -_0x45b0e5, _0x3c4cf3, _0x1dbe08);
        this.canCreateFire && (_0x2ed9c5 = _0x2f22f9('skins/land/bigfoot/'+this.animalSpecies+'/arm2-fire.png')) && (_0x58599c = (_0x1534e0 - this.spawnTime) / 0x3e8, _0x58599c = _0x93972d(_0x58599c, 0x5, 0x1, 0x1), ctx.globalAlpha = Math.max(0, _0x58599c), ctx.drawImage(_0x2ed9c5, 0 + _0x3c4cf3 * -_0x433d7a, _0x11c623 + _0x1dbe08 * -_0x45b0e5, _0x3c4cf3, _0x1dbe08));
        ctx.restore();
    }
};
BigFoot.prototype.rightHandAnimation = function (_0x1b64dd) {
    var _0x4e432d = _0x93972d((_0x1534e0 - this.spawnTime) / 0x3e8, _0x57bed6, _0x4bd1bd, 0x2);
    if (_0x1b64dd = _0x2f22f9('skins/land/bigfoot/'+this.animalSpecies+'/arm1.png')) {
        ctx.save();
        var _0x1ddbe6 = -_0x4e432d * _0x55d748(-0xa),
            _0x4e432d = this.rad * _0x8a441a;
        ctx.rotate(_0x55d748(-0x5) + _0x1ddbe6);
        _0x1ddbe6 = 0x2 * _0x4e432d;
        _0x4e432d *= 0x2;
        ctx.drawImage(_0x1b64dd, 0 + -0.55 * _0x1ddbe6, this.rad + -0.85 * _0x4e432d, _0x1ddbe6, _0x4e432d);
        ctx.restore();
    }
};
BigFoot.prototype.leftHandAnimation = function (_0x3e895b) {
    var _0x5e6af1 = _0x93972d((_0x1534e0 - this.spawnTime) / 0x3e8, _0x57bed6, _0x4bd1bd, 0x2);
    if (_0x3e895b = _0x2f22f9('skins/land/bigfoot/'+this.animalSpecies+'/arm21.png')) {
        ctx.save();
        var _0x38240d = -_0x5e6af1 * _0x55d748(-0xa),
            _0x5e6af1 = this.rad * _0x8a441a;
        ctx.rotate(_0x55d748(-0x5) + _0x38240d);
        _0x38240d = 0x2 * _0x5e6af1;
        _0x5e6af1 *= 0x2;
        ctx.drawImage(_0x3e895b, 0 + -0.47 * _0x38240d, this.rad + -0.8 * _0x5e6af1, _0x38240d, _0x5e6af1);
        ctx.restore();
    }
};

function BigFoot() {
    BigFoot.superClass.call(this, o_player);
    this.oogaBoogaNextT = +new Date() + 0x3a98;
}
window.BigFoot = BigFoot;
GameObjType.setCustomClassForGameObjType(BigFoot, o_player, _0x15ef44);
_0x5a621d = _0x49239e;
_0x2a91c6 = AbillityObj;
_0x5a621d.prototype = Object.create(_0x2a91c6.prototype);
_0x5a621d.prototype.constructor = _0x5a621d;
_0x5a621d.superClass = _0x2a91c6;
AbillityObj.prototype.victimID = 0;
_0x49239e.prototype.updateZ = function () {
    this.effect_flying ? this.z = 0x186a0 : 0 == this.victimID && (this.z = 0x44c);
};
_0x49239e.prototype.customDraw = function (_0x423c5e) {
    ctx.save();
    if (0 == this.specType) {
        if (_0x423c5e = _0x2f22f9('skins/land/bigfoot/'+this.specType2+'/spear.png')) {
            ctx.save();
            var _0xd67ac0 = 0x2 * this.rad;
            ctx.rotate(this.angle + _0x55d748(0x5a));
            ctx.drawImage(_0x423c5e, -_0xd67ac0 / 0x2, -_0xd67ac0 / 0x2, _0xd67ac0, 0x4 * _0xd67ac0);
            ctx.restore();
        }
    } else if (0x3 == this.specType) {
        ctx.save();
        if (_0x423c5e = _0x2f22f9('skins/land/bigfoot/'+this.specType2+'/spear2.png')) _0xd67ac0 = 0x2 * this.rad, ctx.rotate(this.angle + _0x55d748(0x5a)), ctx.drawImage(_0x423c5e, -_0xd67ac0 / 0x2, -_0xd67ac0 / 0x2, _0xd67ac0, 0x4 * _0xd67ac0);
        ctx.restore();
    } else if (_0x423c5e = _0x2f22f9('skins/land/bigfoot/'+this.specType2+'/arm' + (this.specType + (0x1 == this.specType2 ? '1' : '')) + '.png')) {
        var _0x24150b = Math.min(0x1, (_0x1534e0 - this.spawnTime) / 0xc8),
            _0xd67ac0 = -_0x1c8ba9((_0x1534e0 - this.spawnTime) / 0x12c, 0, 0x1) * _0x55d748(0x5a);
        ctx.rotate(this.angle + _0xd67ac0 * (0x1 == this.specType ? 0x1 : -0x1));
        var _0xd67ac0 = 1.5 * -this.rad,
            _0x41fc4a = 0x2 * _0xd67ac0,
            _0x24150b = 0x2 * _0xd67ac0 * _0x24150b;
        ctx.drawImage(_0x423c5e, this.rad / 0x2 + -0.3 * _0x41fc4a, this.rad + -0.8 * _0x24150b + _0xd67ac0, _0x41fc4a, _0x24150b);
    }
    ctx.restore();
};
_0x49239e.prototype.effect_flying = !0x1;
_0x49239e.prototype.readCustomData_onNewlyVisible = function (_0x4e70ff) {
    _0x384319.superClass.prototype.readCustomData_onNewlyVisible.call(this, _0x4e70ff);
};
_0x49239e.prototype.readCustomData_onUpdate = function (_0x304c65) {
    _0x49239e.superClass.prototype.readCustomData_onUpdate.call(this, _0x304c65);
    this.victimID = _0x304c65.readUInt32();
    this.effect_flying = 0x1 == _0x304c65.readUInt8();
    0 != this.victimID && gameObjsByID[this.victimID] && (this.z = gameObjsByID[this.victimID].z + 0x1);
};

function _0x49239e() {
    _0x49239e.superClass.call(this);
    _0x49239e.prototype.easeAngleChanges = !0;
}
window.AbilityObjSpear = _0x49239e;
GameObjType.setCustomClassForGameObjType(_0x49239e, o_abilityObj, _0x261136);
_0x2a91c6 = GameObj;
_0x515886.prototype = Object.create(_0x2a91c6.prototype);
_0x515886.prototype.constructor = _0x515886;
_0x515886.superClass = _0x2a91c6;
_0x515886.prototype.updateZ = function () {
    this.z = this.rad;
};
_0x515886.prototype.customDraw = function (_0xdc5c58) {
    ctx.save();
    _0xdc5c58 = 2.2 * this.rad;
    var _0x455c61 = _0x2f22f9('skins/land/bigfoot/firewood.png');
    _0x455c61 && ctx.drawImage(_0x455c61, -_0xdc5c58 / 0x2, -_0xdc5c58 / 0x2, _0xdc5c58, _0xdc5c58);
    ctx.restore();
};
var _0x647d9d = 0x79;

function _0x515886() {
    _0x515886.superClass.call(this, _0x647d9d);
}
window.FireWood = _0x515886;
GameObjType.setCustomClassForGameObjType(_0x515886, _0x647d9d);
_0x2a91c6 = GameObj;




Crater.prototype = Object.create(_0x2a91c6.prototype);
Crater.prototype.constructor = Crater;
Crater.superClass = _0x2a91c6;
Crater.prototype.lavaLevel = 0;
Crater.prototype.nLavaRadius = 0;
Crater.prototype.lavaRadius = 0;
Crater.prototype.updateZ = function () {
    this.z = -0x65;
};

Crater.prototype.readCustomData_onNewlyVisible = function (reader) {
    this.lavaLevel = reader.readUInt8();
};  

Crater.prototype.readCustomData_onUpdate = function (reader) {
    this.lavaLevel = reader.readUInt8();
};


Crater.prototype.customDraw = function (rad) {
    ctx.save();
    rad = this.rad * 2.2;
    var _0x455c61 = _0x2f22f9('img/crater/crater.png');
    _0x455c61 && ctx.drawImage(_0x455c61, -rad / 0x2, -rad / 0x2, rad, rad);
   
    // then draw
  
  
    this.nLavaRadius = ((this.rad * 1.66)/100)*this.lavaLevel;
    this.lavaRadius += (this.nLavaRadius - this.lavaRadius) * 0.1
    ctx.restore();
    ctx.save();
    // this.rad += (this.nRad - this.rad) * 0.1
    var rShift = 0;
    var tSinceSpawn = (_0x1534e0 - this.spawnTime) / 1000.0;
    // breathing effect
    var period = 5; // (this.oType == o_mushroom || this.oType == o_bigMushroom || this.oType == o_lillypad) ? 2.0 : 1.3; //slower warping
    var shiftAm = 0.02;
  
    
    rShift = shiftAm * Math.sin(((2.0 * Math.PI) / period) * tSinceSpawn);

    ctx.scale(1.0 + rShift, 1.0 + rShift / 2);

    var _0x455c61 = _0x2f22f9('img/crater/lava.png');
    _0x455c61 && ctx.drawImage(_0x455c61, -this.lavaRadius / 0x2, -this.lavaRadius / 0x2, this.lavaRadius, this.lavaRadius);

    ctx.restore();
    
    //   // doing save two times for overlay!

    // ctx.save();
    // if(this.lavaLevel <= 25){
    //     ctx.beginPath();    
        
    //     ctx.globalAlpha = 1-(this.lavaLevel/25);
    //     ctx.arc(0, 0, lavaRadius, 0, 0x2 * Math.PI);
   
    //     ctx.closePath();
    // }
    // ctx.restore();


};


function Crater() {
    Crater.superClass.call(this, o_meteorCrater);
}
window.Crater = Crater
GameObjType.setCustomClassForGameObjType(Crater, o_meteorCrater);

Meteorite.prototype = Object.create(_0x2a91c6.prototype);
Meteorite.prototype.constructor = Meteorite;
Meteorite.superClass = _0x2a91c6;
Meteorite.prototype.maxHeight = 0;
Meteorite.prototype.height = 0;
Meteorite.prototype.hasGold = false;

Meteorite.prototype.updateZ = function () {
    this.z = 0x186a0;
};

Meteorite.prototype.readCustomData_onNewlyVisible = function (reader) {
    this.maxHeight = reader.readUInt16();
    this.height = reader.readUInt16();
    this.hasGold = reader.readUInt8() == 1;
};  

Meteorite.prototype.readCustomData_onUpdate = function (reader) {

    this.height = reader.readUInt16();
};

Meteorite.prototype.customDraw = function (rad) {
    // draw halo
    ctx.save();
    
    let haloRad = this.rad * 2.5;
    let alpha = Math.abs(1-(this.height/this.maxHeight));
  
    if(this.hasGold) {
        ctx.save();
        ctx.globalAlpha = 0.7;
        ctx.fillStyle = "#FFD700"
        ctx.arc(0, 0, this.rad*1.1, 0, 0x2 * Math.PI)
        ctx.fill();
        ctx.restore();
    }
    ctx.save();
    ctx.globalAlpha = alpha-0.1; 
   
   

    
    var _0x455c61 = _0x2f22f9(`img/meteor/meteor_trail${1 + (Math.trunc(_0x1534e0/180) % 3)}.png`);
    if (_0x455c61){
        var a = calculateAspectRatioFit(_0x455c61.width,_0x455c61.height,haloRad,haloRad);
        // нет, сначала ширина потом высота эф
        // такое ощущение как будто они местами поменялись
        ctx.rotate(this.angle);
        ctx.drawImage(_0x455c61, -a.width, -a.height/2.5, a.width*2,a.height*2); 
    }
    ctx.restore();


    ctx.save();
    rad = this.rad * 2;
    var rotfac0to1 = clamp(
      (_0x1534e0 - this.spawnTime) / 2000.0,
      0.0,
      _0x1534e0
    ); //delay rotate animation a bit
    var extraRotate = -(-0.5 + rotfac0to1) * toRadians(90.0); //spin animation
   
    ctx.globalAlpha = alpha

    ctx.rotate(this.angle + extraRotate);
    var _0x455c61 = _0x2f22f9('img/meteor/meteor.png');
    _0x455c61 && ctx.drawImage(_0x455c61, -rad / 0x2, -rad / 0x2, rad, rad);
    
    ctx.restore();

    
    ctx.save();
    ctx.globalAlpha = alpha-0.25; 
    ctx.rotate(this.angle)
    var _0x455c61 = _0x2f22f9('img/meteor/meteor_halo.png');
    _0x455c61 && ctx.drawImage(_0x455c61, -haloRad / 0x2, -haloRad / 0x2, haloRad, haloRad);
 
    ctx.restore();


    
    // как заскамить trail эф

    ctx.restore();

};
function calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {

    var ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);

    return { width: srcWidth*ratio, height: srcHeight*ratio };
 }
var clamp = function(n, min, max) {
    return Math.min(max, Math.max(min, n));
}

function Meteorite() {
    Meteorite.superClass.call(this, o_meteor);  
}
window.Meteorite = Meteorite
GameObjType.setCustomClassForGameObjType(Meteorite, o_meteor);
_0x2a91c6 = GameObj;

_0x402d53.prototype = Object.create(_0x2a91c6.prototype);
_0x402d53.prototype.constructor = _0x402d53;
_0x402d53.superClass = _0x2a91c6;
_0x402d53.prototype.updateZ = function () {
    this.z = 0x44c;
};
_0x402d53.prototype.alpha = 0x1;
_0x402d53.prototype.trunkW = 0.5;
_0x402d53.prototype.customDraw = function (_0x2a6c3c) {
    ctx.save();
    var _0x5ab7fb;
    _0x5ab7fb = (_0x1534e0 - this.spawnTime) / 0x3e8;
    void 0 === this.shiftAmt && (this.shiftAmt = _0x26c094(2.5, 3.5));
    _0x2a6c3c = this.shiftAmt;
    _0x5ab7fb = _0x2a6c3c * Math.sin(0x2 * Math.PI / 0x6 * _0x5ab7fb);
    var _0x3c822a = this.rPer * Math.PI * 0x2,
        _0x27951a = 0x1 == usUnderThreeID[this.id];
    try {
        _0x27951a ? this.alpha += 0.1 * (0.4 - this.alpha) : (this.alpha += 0.1 * (0x1 - this.alpha), 0.99 < this.alpha && (this.alpha = 0x1));
    } catch (_0x25938a) {}
    if (0x2 != _0x14fca5 && (_0x27951a = _0x2f22f9('img/tree/' + this.getTrunk() + '.png'))) {
        var _0x273b7d = this.rad,
            _0x273b7d = _0x273b7d * this.trunkW;
        ctx.rotate(_0x3c822a);
        ctx.drawImage(_0x27951a, -_0x273b7d, -_0x273b7d, 0x2 * _0x273b7d, 0x2 * _0x273b7d);
    }
    if (_0x27951a = _0x2f22f9('img/tree/' + this.getTreeName() + '.png')) _0x273b7d = (this.foodType == o_coconut ? 1.25 * this.rad : this.rad) + _0x5ab7fb, ctx.save(), ctx.rotate(_0x3c822a), ctx.globalAlpha *= this.alpha, this.foodType == o_coconut && ctx.rotate(0.01 * _0x5ab7fb), ctx.drawImage(_0x27951a, -_0x273b7d + _0x2a6c3c, -_0x273b7d - _0x2a6c3c, 0x2 * _0x273b7d, 0x2 * _0x273b7d), ctx.restore();
    var rad = this.rad; //* 1.25;
    var r = this.rPer * Math.PI * 2.0;
    if (this.xmasTree) this.drawXmasProps(this.getTreeName(), rad, r, 0);
    ctx.restore();
};
_0x402d53.prototype.getTreeName = function () {
    switch (this.foodType) {
    case o_coconut:
        return 'cocotree';
    case o_banana:
        return 'bananatree';
    case o_arcticNut:
        return 'firtree';
    }
    var _0x3bc2d7 = 0x1;
    0x2 == this.curBiome && (_0x3bc2d7 = 0x2);
    0x4 == this.curBiome && (_0x3bc2d7 = 0x4);
    return 'tree' + _0x3bc2d7;
};
_0x402d53.prototype.drawXmasProps = function (treeType, rad, angle, shiftAm) {
    // if (treeType == "fir")
    // this.drawXmasProp(treeType, rad, angle, "ornament", shiftAm);
    this.drawXmasProp(treeType, rad, angle, "decoration", shiftAm);
    if (this.lights == 1 || this.lights == 3)
      this.drawXmasProp(treeType, rad, angle, "light", shiftAm);
    if (this.lights == 2 || this.lights == 3)
      this.drawXmasProp(treeType, rad, angle, "light1", shiftAm);
};
_0x402d53.prototype.drawXmasProp = function (treeType, rad, angle, prop, shiftAm) {
    var treeSkin = "img/tree/xmas/" + prop + ".png";
    var theImg = _0x2f22f9(treeSkin);
    if (theImg) {
      ctx.save();
      // ctx.rotate(angle);
      // ctx.globalAlpha *= this.alpha;
      ctx.rotate(this.angle);
      ctx.drawImage(theImg, -rad + shiftAm, -rad - shiftAm, 2 * rad, 2 * rad);
      ctx.restore();
    } else {
      // console.log(treeSkin)
      // console.log("skin not found")
    }
};
_0x402d53.prototype.getTrunk = function () {
    switch (this.foodType) {
    case 30:
        return 'coco_trunk';
    case 29:
        return 'banana_trunk';
    case 48:
        return 'fir_trunk';
    }
    return 'trunk';
};
_0x402d53.prototype.foodType = 0;
_0x402d53.prototype.readCustomData_onNewlyVisible = function (_0x4f4138) {
    this.foodType = _0x4f4138.readUInt16();
    this.xmasTree = _0x4f4138.readUInt8() == 1;
};

_0x402d53.prototype.readCustomData_onUpdate = function (_0x4f4138) {
    if(this.xmasTree) this.lights = _0x4f4138.readUInt8();
};

function _0x402d53() {
    _0x402d53.superClass.call(this, o_tree);
}
window.Tree = _0x402d53;
GameObjType.setCustomClassForGameObjType(_0x402d53, o_tree);
_0x5a621d = RainForest;
_0x2a91c6 = GameObj;
RainForest.prototype = Object.create(_0x2a91c6.prototype);
RainForest.prototype.constructor = RainForest;
RainForest.superClass = _0x2a91c6;
RainForest.prototype.updateZ = function () {
    this.z = -0xd7;
};
RainForest.prototype.customDraw = function (_0x100b29) {
    ctx.save();
    ctx.globalAlpha = 0.5;
    ctx.fillStyle = _0x44bd8a;
    _0x100b29 = -this.rectW / 0x2;
    var _0x19b685 = this.rectW / 0x2,
        _0x114c1e = -this.rectH / 0x2,
        _0x131fd3 = this.rectH / 0x2;
    ctx.beginPath();
    ctx.moveTo(_0x100b29, _0x114c1e);
    var _0x59d405 = [-0xf, 0xa, -0xa, 0xc, 0, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0, -0x6],
        _0x2eba9c = 0,
        _0x3bfdce = gameW - this.x,
        _0x1fb6a3 = 0 - this.x,
        _0x296fe6 = gameH - this.y,
        _0x146bf1 = 0 - this.y,
        _0x718e44, _0x4764b9 = _0x100b29 - 0x14;
    for (_0x718e44 = _0x114c1e; _0x718e44 < _0x131fd3; _0x718e44 += 0x2d) ctx.lineTo(Math.min(_0x3bfdce, Math.max(_0x1fb6a3, _0x4764b9 + _0x59d405[_0x2eba9c])), _0x718e44), _0x2eba9c = (_0x2eba9c + 0x1) % _0x59d405.length;
    ctx.lineTo(_0x100b29, _0x131fd3);
    _0x718e44 = _0x131fd3 + 0x14;
    for (_0x4764b9 = _0x100b29; _0x4764b9 < _0x19b685; _0x4764b9 += 0x2d) ctx.lineTo(_0x4764b9, Math.min(_0x296fe6, Math.max(_0x146bf1, _0x718e44 + _0x59d405[_0x2eba9c]))), _0x2eba9c = (_0x2eba9c + 0x1) % _0x59d405.length;
    ctx.lineTo(_0x19b685, _0x131fd3);
    _0x4764b9 = _0x19b685 + 0x14;
    for (_0x718e44 = _0x131fd3; _0x718e44 > _0x114c1e; _0x718e44 -= 0x2d) ctx.lineTo(Math.min(_0x3bfdce, Math.max(_0x1fb6a3, _0x4764b9 + _0x59d405[_0x2eba9c])), _0x718e44), _0x2eba9c = (_0x2eba9c + 0x1) % _0x59d405.length;
    ctx.lineTo(_0x19b685, _0x114c1e);
    _0x718e44 = _0x114c1e - 0x14;
    for (_0x4764b9 = _0x19b685; _0x4764b9 > _0x100b29; _0x4764b9 -= 0x2d) ctx.lineTo(_0x4764b9, Math.min(_0x296fe6, Math.max(_0x146bf1, _0x718e44 + _0x59d405[_0x2eba9c]))), _0x2eba9c = (_0x2eba9c + 0x1) % _0x59d405.length;
    ctx.closePath();
    ctx.fill();
    ctx.restore();
};
RainForest.prototype.edge = function () {
    ctx.save();
    ctx.fillStyle = 'red';
    var _0x39b730 = -this.rectW / 0x2,
        _0x28eb49 = this.rectW / 0x2,
        _0x29e3ae = -this.rectH / 0x2 + 0x3,
        _0x30943b = -this.rectH / 0x2 - 0xf;
    ctx.beginPath();
    ctx.moveTo(_0x39b730, _0x29e3ae);
    var _0x375dd8 = [-0xf, 0x5, 0xa, 0, -0xa, 0x3, 0xc, 0x4, 0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0, -0x6],
        _0x4f293a = 0,
        _0x5309a1 = gameH - this.y,
        _0x3c0a60 = 0 - this.y,
        _0x145e3c;
    ctx.lineTo(_0x39b730, _0x30943b);
    for (_0x145e3c = _0x30943b + 0; _0x39b730 < _0x28eb49; _0x39b730 += 0x3c) ctx.lineTo(_0x39b730, Math.min(_0x5309a1, Math.max(_0x3c0a60, _0x145e3c + _0x375dd8[_0x4f293a]))), _0x4f293a = (_0x4f293a + 0x1) % _0x375dd8.length;
    ctx.lineTo(_0x28eb49, _0x30943b);
    ctx.lineTo(_0x28eb49, _0x29e3ae);
    ctx.closePath();
    ctx.restore();
};

function RainForest() {
    RainForest.superClass.call(this, o_forest);
}
window.RainForest = RainForest;
GameObjType.setCustomClassForGameObjType(RainForest, o_forest);
_0x2a91c6 = GameObj;
FOV.prototype = Object.create(_0x2a91c6.prototype);
FOV.prototype.constructor = FOV;
FOV.superClass = _0x2a91c6;
FOV.prototype.updateZ = function () {
    this.z = 0x3ed;
};
FOV.prototype.customDraw = function (_0x52742b) {
    ctx.save();
    ctx.globalAlpha = 0x1;
    _0x110b78(0, 0, this.rad, '#FFFFFF1A');
    ctx.restore();
};

function FOV() {
    FOV.superClass.call(this, o_animalFOV);
}
window.FOV = FOV;
GameObjType.setCustomClassForGameObjType(FOV, o_animalFOV);
_0x2a91c6 = GameObj;
River.prototype = Object.create(_0x2a91c6.prototype);
River.prototype.constructor = River;
River.superClass = _0x2a91c6;
River.prototype.updateZ = function () {
    this.z = -0x9f;
};
River.prototype.customDraw = function (_0x1a51f2) {
    this.drawBody(_0x493161, 1.5, !0x1);
    this.drawBody(_0x206596, this.riverSize, !0);
};
River.prototype.drawBody = function (_0x3405df, _0x312205, _0x4e90c9) {
    ctx.fillStyle = _0x3405df;
    ctx.fillRect(-this.rectW / 0x2, -this.riverStreamHeight / 0x2 * _0x312205, this.rectW, this.riverStreamHeight * _0x312205);
    ctx.fillStyle = _0x3405df;
    var _0x243a03 = -this.rectW / 0x2,
        _0x517726 = this.rectW / 0x2,
        _0x5b5a69 = (-this.riverStreamHeight / 0x2 + 0x3) * _0x312205,
        _0x5b082b = (-this.riverStreamHeight / 0x2 - 0xf) * _0x312205;
    ctx.beginPath();
    ctx.moveTo(_0x243a03, _0x5b5a69);
    var _0x300cc4 = 0,
        _0x3c9f82 = [-0xf, 0x5, 0xa, 0, -0xa, 0x3, 0xc, 0x4, 0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0, -0x6],
        _0x131d36 = 0x3c,
        _0x1cf2d5 = 0,
        _0x2a5b97 = gameH - this.y,
        _0x1157a3 = 0 - this.y;
    ctx.lineTo(_0x243a03, _0x5b082b);
    for (_0x300cc4 = _0x5b082b + _0x300cc4; _0x243a03 < _0x517726; _0x243a03 += _0x131d36) ctx.lineTo(_0x243a03, Math.min(_0x2a5b97, Math.max(_0x1157a3, _0x300cc4 + _0x3c9f82[_0x1cf2d5]))), _0x1cf2d5 = (_0x1cf2d5 + 0x1) % _0x3c9f82.length;
    ctx.lineTo(_0x517726, _0x5b082b);
    ctx.lineTo(_0x517726, _0x5b5a69);
    ctx.closePath();
    ctx.fill();
    ctx.fillStyle = _0x3405df;
    _0x243a03 = -this.rectW / 0x2;
    _0x517726 = this.rectW / 0x2;
    _0x5b5a69 = (this.riverStreamHeight / 0x2 - 0x3) * _0x312205;
    _0x5b082b = (this.riverStreamHeight / 0x2 + 0xf) * _0x312205;
    ctx.beginPath();
    ctx.moveTo(_0x243a03, _0x5b5a69);
    _0x300cc4 = 0;
    _0x3c9f82 = [-0xf, 0x5, 0xa, 0, -0xa, 0x3, 0xc, 0x4, 0, 0x3, 0x5, -0xa, 0x5, -0xc, 0x5, 0xa, 0, -0x6];
    _0x131d36 = 0x3c;
    _0x1cf2d5 = 0;
    _0x2a5b97 = gameH - this.y;
    _0x1157a3 = 0 - this.y;
    ctx.lineTo(_0x243a03, _0x5b082b);
    for (_0x300cc4 = _0x5b082b + _0x300cc4; _0x243a03 < _0x517726; _0x243a03 += _0x131d36) ctx.lineTo(_0x243a03, Math.min(_0x2a5b97, Math.max(_0x1157a3, _0x300cc4 + _0x3c9f82[_0x1cf2d5]))), _0x1cf2d5 = (_0x1cf2d5 + 0x1) % _0x3c9f82.length;
    ctx.lineTo(_0x517726, _0x5b082b);
    ctx.lineTo(_0x517726, _0x5b5a69);
    ctx.closePath();
    ctx.fill();
    if (_0x4e90c9 && 0.3 < _0x312205 && (_0x3405df = _0x2f22f9('img/riverCurrent' + this.specType + '.png'))) {
        _0x4e90c9 = -this.rectW + (this.rectW/2);
        ctx.save();
        ctx.fillStyle = 'yellow';
        ctx.globalAlpha = 0x1;
        for (i = 0; 45 > i; i++) _0x517726 = 0x64 / 0x3c * this.speedX * 0x3e8, ctx.drawImage(_0x3405df, _0x4e90c9 + (_0x1534e0 - this.spawnTime) % _0x517726 / _0x517726 * 0x64, 0xf + -this.rectH * _0x312205 / 0x2, 0x64 * _0x312205, this.riverStreamHeight * _0x312205 - 0x8), _0x4e90c9 += 0x64;
        ctx.restore();
    }
};
River.prototype.speedX = 0x1;
River.prototype.onLerpUpdate = function (_0x193199) {
    this.riverSize = _0x193199 * (this.n_riverSize - this.o_riverSize) + this.o_riverSize;
};
River.prototype.readCustomData_onUpdate = function (_0x5de9b3) {
    this.n_riverSize = _0x5de9b3.readUInt16() / 1000;
    this.o_riverSize = this.riverSize;
};
River.prototype.readCustomData_onNewlyVisible = function (_0x29a627) {
    this.specType = _0x29a627.readUInt8();
    0x1 == this.specType && (this.speedX = -1);
    this.riverSize = this.o_riverSize = this.n_riverSize = 1;
    this.riverStreamHeight = _0x29a627.readUInt16();
};

function River() {
    River.superClass.call(this, o_river);
}
window.River = River;
GameObjType.setCustomClassForGameObjType(River, o_river);
_0x2a91c6 = GameObj;
LakeObj.prototype = Object.create(_0x2a91c6.prototype);
LakeObj.prototype.constructor = LakeObj;
LakeObj.superClass = _0x2a91c6;
LakeObj.prototype.LakeSize = 1;
LakeObj.prototype.updateZ = function () {
    this.z = -0xa0;
};
LakeObj.prototype.customDraw = function (_0xe8f66f) {
    this.isDeathLake ? (ctx.fillStyle = _0x493161, ctx.beginPath(), ctx.arc(0, 0, this.rad, 0, 0x2 * Math.PI), ctx.fill(), this.poisonBody(_0x206596, this.LakeSize, this.poison)) : this.drawBody(_0x206596, 1);
};
LakeObj.prototype.poisonBody = function (_0x209a5f, _0x28575, _0x3d4645) {
    _0x28575 *= this.rad;
    ctx.save();
    ctx.globalAlpha = 1;
    2 != _0x14fca5 && ctx.rotate(2 * this.rPer * Math.PI);
    var _0x1c926b;
    _0x1c926b = 5.5 * Math.sin(0x2 * Math.PI / 4 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
    ctx.fillStyle = _0x493161;
    ctx.beginPath();
    ctx.arc(0, 0, _0x28575, 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = _0x209a5f;
    ctx.beginPath();
    ctx.arc(0, 0, Math.max(0, _0x28575 - 4 + _0x1c926b), 0, 2 * Math.PI);
    ctx.fill();
    ctx.save();
    ctx.fillStyle = '#547d24';
    ctx.globalAlpha = _0x3d4645;
    ctx.beginPath();
    ctx.arc(0, 0, Math.max(0, _0x28575 - 4 + _0x1c926b), 0, 2 * Math.PI);
    ctx.fill();
    ctx.restore();
    ctx.restore();
};
LakeObj.prototype.drawBody = function (_0x409813, _0x3bd3a3, _0x216781) {
    _0x409813 = this.rad * _0x3bd3a3;
    ctx.save();
    ctx.globalAlpha = _0x216781;
    0x2 != _0x14fca5 && ctx.rotate(0x2 * this.rPer * Math.PI);
    _0x216781 = 5.5 * Math.sin(0x2 * Math.PI / 0x4 * ((_0x1534e0 - this.spawnTime) / 0x3e8));
    ctx.fillStyle = _0x493161;
    ctx.beginPath();
    ctx.arc(0, 0, _0x409813, 0, 0x2 * Math.PI);
    ctx.fill();
    ctx.fillStyle = this.curBiome == _0x35f8d3 ? '#8da0d6' : _0x206596;
    ctx.beginPath();
    ctx.arc(0, 0, Math.max(0, _0x409813 - 0x4 + _0x216781), 0, 0x2 * Math.PI);
    ctx.fill();
    0x2 != _0x14fca5 && (ctx.beginPath(), ctx.arc(0.45 * _0x409813, 0.45 * -_0x409813 + 0xf * this.rPer, Math.max(0, 0.5 * _0x409813 + _0x216781), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.5 * _0x409813, 0.5 * _0x409813 + 0xf * this.rPer, Math.max(0, 0.4 * _0x409813 + _0x216781), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.55 * -_0x409813 * 0.707, 0.55 * +_0x409813 * 0.707 + 0xf * this.rPer, Math.max(0, 0.5 * _0x409813 + _0x216781), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(0.75 * -_0x409813, 0.35 * -_0x409813 + 0xf * this.rPer, Math.max(0, 0.3 * _0x409813 + _0x216781), 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(_0x409813 + 0xa * this.rPer, 0x32 * this.rPer, 0 == this.specType ? 0x8 : 0x4, 0, 0x2 * Math.PI), ctx.fill(), ctx.beginPath(), ctx.arc(_0x409813 - 0x14 * this.rPer, 0x32 * this.rPer, 0xa, 0, 0x2 * Math.PI), ctx.fill());
    ctx.restore();
};
LakeObj.prototype.onLerpUpdate = function (_0x19def0) {
    this.LakeSize = _0x19def0 * (this.n_LakeSize - this.o_LakeSize) + this.o_LakeSize;
};
LakeObj.prototype.readCustomData_onUpdate = function (_0x55969c) {
    if(this.isDeathLake) {
        this.n_LakeSize = _0x55969c.readUInt16() / 1000;
        this.o_LakeSize = this.LakeSize;
        this.poison = _0x55969c.readUInt16() / 1000;
    }
};
LakeObj.prototype.readCustomData_onNewlyVisible = function (_0x321202) {
    this.isDeathLake = _0x321202.readUInt8() == 1;
    if (this.isDeathLake) {
        this.LakeSize = this.o_LakeSize = this.n_LakeSize = 1;
        this.LakeStream = _0x321202.readUInt16();
    }
};

function LakeObj() {
    LakeObj.superClass.call(this, o_lake);
}
window.Lake = LakeObj;
GameObjType.setCustomClassForGameObjType(LakeObj, o_lake);
_0x2a91c6 = GameObj;
_0x1f50aa.prototype = Object.create(_0x2a91c6.prototype);
_0x1f50aa.prototype.constructor = _0x1f50aa;
_0x1f50aa.superClass = _0x2a91c6;
_0x1f50aa.prototype.updateZ = function () {
    this.z = -0x3ed;
};
_0x1f50aa.prototype.customDraw = function (_0x17b644) {};
var _0x46c2db = 0x78;

function _0x1f50aa() {
    _0x1f50aa.superClass.call(this, _0x46c2db);
}
window.TeamCircle = _0x1f50aa;
GameObjType.setCustomClassForGameObjType(_0x1f50aa, _0x46c2db);
var gameVerTxt = 0;

function _0x388d73() {
    var _0x357f5f = _0x56fc3c('audio/click.mp3?v='+gameVersion);
    if (_0x357f5f) try {
        _0x357f5f.play();
    } catch (_0x538772) {}
}

function _0x5a3cb9(_0xc13c5d) {
    _0x388d73();
    newMsg = new fidjiaslfo(0x2);
    newMsg.writeUInt8(0x18);
    newMsg.writeUInt8(_0x2a3b6d.indexOf(_0xc13c5d));
    wsSendMsg(newMsg);
    _0x26cd40 && (_0x408004 = !0x1);
    _0x26cd40 = _0x109e62 = !0x1;
}
_0x56fc3c('audio/click.mp3?v='+gameVersion);
_0x141915();
gameReset();

function _0x324065(_0x37e3a1, _0x4c3a6c) {
    console.log('Showing animal choice menu');
    var _0x1da13f = 0x1 == _0x4c3a6c,
        _0x2a2518 = _0x37e3a1.readUInt8(),
        _0x25e111 = _0x37e3a1.readUInt8();
    _0x109e62 = !0;
    _0x3bc188 = 0;
    _0x2a3b6d = [];
    _0x26cd40 = _0x1da13f;
    _0x3ed7bd = +new Date();
    _0x4a34c9 = _0x3ed7bd + 0x3e8 * _0x2a2518;
    for (_0x1da13f = 0; _0x1da13f < _0x25e111; _0x1da13f++) {
        var aniT = _0x37e3a1.readUInt8(),
            biomeNum = _0x37e3a1.readUInt8(),
            species = _0x37e3a1.readUInt8(),
            subSpecies = _0x37e3a1.readUInt8(),
            premiumSkinType = _0x37e3a1.readUInt8(),
            wid = premiumSkinType == 1 ? 50 : 100,
            hei = premiumSkinType == 1 ? 50 : 100,
            _0x2a2518 = new aniChoiceButton(0, 0, wid, hei, aniT, biomeNum, species, subSpecies, premiumSkinType);
        _0x2a3b6d.push(_0x2a2518);
        // inUpgrade = true
    }
    _0x2a3b6d.sort(function(a, b) {
        if (a.y < b.y) return -1;
        if (a.y > b.y) return 1;
        return 0;
    });
}

function wsSendMsg(_0x43fcda) {
    _0xa3ac90.send(_0x43fcda.dataView.buffer);
}

function _0x36b481() {
    return null != _0xa3ac90 && _0xa3ac90.readyState == _0xa3ac90.OPEN;
}

function worldUpdate(msg) {
    timeStamp = _0x1534e0 = +new Date();
    worldUpd_readPlayerInfo(msg);
    var objAmount = msg.readUInt16();
    
    for (s = 0; s < objAmount; s++) {
        var theObj = GameObjType.newlyVis_createGameObjFromMsg(msg),
            id = theObj.id,
            delObj = gameObjsByID[id];
            
        if(delObj) {
            delete gameObjsByID[id];
            delObj = gameObjs.indexOf(delObj); - 1 != delObj && gameObjs.splice(delObj, 1);
        }
        gameObjsByID[id] = theObj;
        gameObjs.push(theObj);

    }
    objAmount = msg.readUInt16();

    let lastoffset
    for (s = 0; s < objAmount; s++) {
        var idd = msg.readUInt32();
        if (theObj = gameObjsByID[idd]) {
            theObj.worldUpd_readMsgUpdate(msg);
        } else {
            console.log('Error: Updated GameObj id ' + idd + " doesn't exist!");
           
        }
    }
    objAmount = msg.readUInt16();
    for (s = 0; s < objAmount; s++) {
        theObj = msg.readUInt32();
        let id = theObj;
        if(theObj = gameObjsByID[theObj]) {
            theObj.worldUpd_readMsgRemovedObj(msg);
        } else {
            console.log('Error: Removed GameObj id ' + id + " doesn't exist!");

        }
    }

    null != _0x1bcd79 && _0x1bcd79.worldUpdate(msg);
}
var yesdDot = null;
var maxDot = null;
var dots = [];
var pumps = []
var canchatmore = false;


var numberWithCommas=function(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function worldUpd_readPlayerInfo(msg) {

    dots = []
    pumps = []
    
    
    camx_o = camx;
    camy_o = camy;
    camx_n = msg.readUInt16() / 4;
    camy_n = msg.readUInt16() / 4;
    camzoom_n = msg.readUInt32() / 1000;
   
    if (instantSetCamNextUpd) {
        instantSetCamNextUpd = !1;
        camx = camx_n;
        camy = camy_n;
        camzoom = camzoom_n;
    };
    var flagSpectator = msg.readUInt8();
    var spectator = get_bit(flagSpectator,0),
        abil_possible =  get_bit(flagSpectator,1),
        abil_dive_possible =  get_bit(flagSpectator,2);
    abil_dive_isMain = get_bit(flagSpectator,3);
    isAirBar = get_bit(flagSpectator,7);
    if (!spectator) {
        isDevMode = msg.readUInt8();
        isSuperDev = 2 === isDevMode;
        _0x2a6ab2 = isSuperDev;
        if(isDevMode > 0){
            canchatmore = true;
        }
        
        if(isDevMode)
            devMode_zoomEnabled = 1 == msg.readUInt8();

        let adminsdots = msg.readUInt8();
        for(let i = 0;i < adminsdots;i++){
            let adminObj = {
                id: msg.readUInt32(),
                x: msg.readUInt16() / 4.0,
                y: msg.readUInt16() / 4.0,
                color: msg.readString(),
                rad: 3
            }
            dots.push(adminObj)

        }
      
        let pumpDots = msg.readUInt8();
        for(let i = 0;i < pumpDots;i++){
            let PumpObj = {
                id: msg.readUInt32(),
                x: msg.readUInt16() / 4.0,
                y: msg.readUInt16() / 4.0,
                color: msg.readString(),
                rad: 3
            }
            pumps.push(PumpObj)

        }
  
        var spectator = _0x4509a0 = abil_active = !0x1,
            _0x1a1260 = _0x443adb;

        if(abil_possible) {
            var bits = msg.readBitGroup();
            spectator = bits.getBool();
            _0x4509a0 = bits.getBool();
            abil_active = bits.getBool();
            _0x1a1260 = msg.readUInt8();
        }
        var flags = _0x456fa4 = abil_dive_active = !0x1;
        
        if (abil_dive_possible) {
            bits = msg.readBitGroup();
            flags = bits.getBool();
            _0x456fa4 = bits.getBool();
            abil_dive_active = bits.getBool();
        }
        abil_dive_isMain ? (_0x35b993.abil_usable = spectator, _0x35b993.abil_recharging = _0x4509a0, _0x35b993.abil_possible = abil_possible, _0x35b993.abil_active = abil_active, _0x35b993.abil_Type = _0x1a1260, _0x154a0f.abil_usable = flags, _0x154a0f.abil_recharging = _0x456fa4, _0x154a0f.abil_possible = abil_dive_possible, _0x154a0f.abil_active = abil_dive_active, _0x154a0f.abil_Type = _0x456c6e, _0x456fa4 && (_0x154a0f.abil_rechargeTotalT = _0xf495f7, _0x154a0f.abil_rechargeEndT = _0x28afdb), _0x4509a0 && (_0x35b993.abil_rechargeTotalT = _0x8f38b6, _0x35b993.abil_rechargeEndT = _0x10e968)) : (_0x154a0f.abil_usable = spectator, _0x154a0f.abil_recharging = _0x4509a0, _0x154a0f.abil_possible = abil_possible, _0x154a0f.abil_active = abil_active, _0x154a0f.abil_Type = _0x1a1260, _0x35b993.abil_usable = flags, _0x35b993.abil_recharging = _0x456fa4, _0x35b993.abil_possible = abil_dive_possible, _0x35b993.abil_active = abil_dive_active, _0x35b993.abil_Type = _0x456c6e, _0x4509a0 && (_0x154a0f.abil_rechargeTotalT = _0x8f38b6, _0x154a0f.abil_rechargeEndT = _0x10e968), _0x456fa4 && (_0x35b993.abil_rechargeTotalT = _0xf495f7, _0x35b993.abil_rechargeEndT = _0x28afdb));
        
        var flagPvp = msg.readBitGroup();
        _0x4381a8 = flagPvp.getBool(); // can 1v1
        _0x45cca0 = flagPvp.getBool(); // ability 1v1 active?
        _0x186eed = flagPvp.getBool(); // show 1v1 button
        disable1v1Button = flagPvp.getBool(); // disable 1v1 button
        abil_dive_possible = flagPvp.getBool(); // recharging 1v1 button?
        _0x1419f3 = flagPvp.getBool(); // in arena?
        isInfected = flagPvp.getBool(); // infected?
        _0x186eed && null != _0x4dd1a2 && (_0x4dd1a2.isVisible = !0x1);
        if (_0x1419f3) {
            _0x109e62 = !0x1;
            _0x3d325c = [];
            _0x260125 = msg.readUInt32();
            _0x554a7d = gameObjsByID[_0x260125];
        }
        else if (_0x260125 = 0, _0x3692f0 = abil_dive_possible ? msg.readUInt16() / 0xa : 0, _0x541c7d = msg.readUInt8(), abil_possible = msg.readUInt8(), _0x3d325c = [], 0 < abil_possible) {
            for (i = 0; i < abil_possible; i++) {
                var abil_dive_possible = msg.readUInt8(),
                    _0x45fd78 = msg.readString(),
                    _0x1a1260 = msg.readUInt8(),
                    flags = msg.readUInt8(),
                    teeamid = msg.readUInt8(),
                    _0x487dee = msg.readUInt16() / 100;
                _0x3d325c.push({
                    'id': abil_dive_possible,
                    'requestee': _0x45fd78,
                    'aniType': _0x1a1260,
                    'wins': flags,
                    'rank': 0,
                    'teamID': teeamid,
                    'kills': 0,
                    'dur': _0x487dee
                });
            }
        }

        waterBarPerc_n = msg.readUInt8();
        animalBarType = msg.readUInt8();
        var newXP = msg.readUInt32(); // Новая переменная потому что закоментированы флаги.
        interface_XPAmountUpdate(newXP, xp); // колдовство реально
        xp = newXP;
        xpPer_n = msg.readUInt8();
    
        readUnderTreeInfo(msg); // Деревья

        //pandemic
        if (gameMode == 6) {
            curBarPerc_n = msg.readUInt8(); //water/air/lava bar %
      
            // viral_totalInfected = msg.readUInt16()
            // viral_recovered = msg.readUInt16()
            // viral_deaths = msg.readUInt16()
      
            // txtPingFps.setText(numberWithCommas(viral_totalInfected) + " infected");
            // viralPandemicRecoveredTXT.setText(
            //   numberWithCommas(viral_recovered) + " recovered"
            // );
            // viralPandemicDeathsTXT.setText(
            //   numberWithCommas(viral_deaths) + " deaths"
            // );
        }
        //coins
        var newCoins = msg.readUInt32();
        thisSesion_coinsMsg = msg.readString();
        var newEXP = msg.readUInt32();
    
        if (thisSesion_coinsMsg != "PAUSED") {
            if (newCoins > 0) {
                interface_onCoinsUpdate(newCoins); //for XP popup
            }
            thisSesion_coins = newCoins;
            if (newEXP > 0) {
                interface_onEXPUpdate(newEXP);
            }
            thisSesion_exp = newEXP;
        }

        null != _0x1bcd79 && _0x1bcd79.playerInfo(msg);
    }

}
var usUnderThreeID = {};

function readUnderTreeInfo(msg) {
    usUnderThreeID = {};
    var got = msg.readUInt8();
    if (got) {
        var treesCount = msg.readUInt8();
        usUnderThreeID = {};
        usUnderThreeID.treesCount = treesCount;
        for (i = 0; i < treesCount; i++) usUnderThreeID[msg.readUInt32()] = 1;
    }
}

function _0x24a7cf(_0x5d9cb5) {
    var _0x18d919 = [];
    _0x18d919.rank = _0x5d9cb5.readUInt16();
    _0x18d919.topRank = _0x5d9cb5.readUInt16();
    _0x18d919.timeAlive = _0x5d9cb5.readUInt16();
    _0x18d919.totalKills = _0x5d9cb5.readUInt16();
    _0x18d919.maxXP = _0x5d9cb5.readUInt32();
    return _0x18d919;
}
var _0x539eac = null,
    _0x791a59 = 0;

function _0x3c2745(_0x10b2b4) {
    _0x791a59 = 0.6 * canvasH;
    null == _0x539eac && (_0x539eac = document.createElement('canvas'));
    var _0x5a74be = _0x539eac.getContext('2d');
    _0x539eac.width = 0x1ae;
    _0x539eac.height = 0xd2;
    _0x5a74be.globalAlpha = 0.2;
    _0x5a74be.fillStyle = '#000000';
    _0x5a74be.fillRect(0, 0, _0x539eac.width, _0x539eac.height);
    _0x5a74be.fillStyle = '#000000';
    _0x5a74be.fillRect(0x5, 0x5, _0x539eac.width - 0xa, _0x539eac.height - 0xa);
    var _0x14360a = 0x3c;
    _0x5a74be.globalAlpha = 0x1;
    _0x5a74be.fillStyle = '#FFFFFF';
    _0x5a74be.font = '30px Arial';
    var _0x14f354 = 'YOU DIED!';
    _0x5a74be.font = '30px Arial';
    _0x5a74be.fillText(_0x14f354, _0x539eac.width / 0x2 - _0x5a74be.measureText(_0x14f354).width / 0x2, _0x14360a);
    _0x5a74be.font = '20px Arial';
    _0x14360a += 0x2d;
    _0x14f354 = 'You were #' + _0x10b2b4.rank;
    _0x5a74be.fillText(_0x14f354, _0x539eac.width / 0x2 - _0x5a74be.measureText(_0x14f354).width / 0x2, _0x14360a);
    var _0x14360a = _0x14360a + 0x28,
        _0x14f354 = _0x1b18ae(_0x10b2b4.timeAlive),
        _0x4756c4 = 0x14;
    _0x17faa5(_0x5a74be, 'Time Alive', _0x14f354, _0x4756c4, _0x14360a);
    _0x17faa5(_0x5a74be, 'Total Kills', _0x10b2b4.totalKills, _0x4756c4 + 0xd2, _0x14360a);
    _0x14360a += 0x28;
    _0x4756c4 = 0x14;
    _0x17faa5(_0x5a74be, 'Top rank', _0x10b2b4.topRank, _0x4756c4, _0x14360a);
    _0x4756c4 += 0xd2;
    _0x17faa5(_0x5a74be, 'Max XP', _0x3dd6a4(_0x10b2b4.maxXP), _0x4756c4, _0x14360a);
}

function _0x394a6d(_0x4dcb43, _0x3fad2a, _0x235646, _0x1cabc3, _0x52fc70, _0x29d7dd) {
    if (0x2 != _0x14fca5) {
        ctx.save();
        var _0x1f6b16 = _0x235646 - _0x4dcb43,
            _0x133b74 = _0x1cabc3 - _0x3fad2a,
            _0x241375 = canvasW / 0x2 / camzoom,
            _0x5124de = canvasH / 0x2 / camzoom;
        _0x4dcb43 = Math.max(_0x4dcb43, camx - _0x241375 - _0x52fc70 + 0);
        _0x3fad2a = Math.max(_0x3fad2a, camy - _0x5124de - _0x29d7dd + 0);
        _0x235646 = Math.min(_0x235646, camx + _0x241375 - _0x52fc70 - 0);
        _0x1cabc3 = Math.min(_0x1cabc3, camy + _0x5124de - _0x29d7dd - 0);
        ctx.strokeStyle = 'black';
        ctx.globalAlpha = 0.055;
        _0x235646 -= _0x4dcb43;
        fillH = _0x1cabc3 - _0x3fad2a;
        for (_0x1cabc3 = -0.5 + _0x4dcb43 + (_0x1f6b16 - _0x4dcb43) % 0x1e; _0x1cabc3 < _0x4dcb43 + _0x235646; _0x1cabc3 += 0x1e) ctx.beginPath(), ctx.moveTo(_0x1cabc3, _0x3fad2a), ctx.lineTo(_0x1cabc3, _0x3fad2a + fillH), ctx.stroke();
        for (dy = -0.5 + _0x3fad2a + (_0x133b74 - _0x3fad2a) % 0x1e; dy < _0x3fad2a + fillH; dy += 0x1e) ctx.beginPath(), ctx.moveTo(_0x4dcb43, dy), ctx.lineTo(_0x4dcb43 + _0x235646, dy), ctx.stroke();
        ctx.restore();
    }
}

function _0x7b4cf4() {
    for (var _0x52d016 = gameObjs.slice(), _0x3c9534 = [o_hill, o_rockHill, o_lavaLake, o_bog, o_safeArea], _0x145309 = {}, _0x23e826 = 0; _0x23e826 < _0x3c9534.length; _0x23e826++) {
        var _0x413bae = new _0x5113dd();
        _0x145309[_0x3c9534[_0x23e826]] = _0x413bae;
        _0x52d016.push(_0x413bae);
    }
    for (d = _0x52d016.length - 0x1; 0 <= d; d--)
        for (_0x23e826 = _0x52d016[d], e = 0; e < _0x3c9534.length; e++)
            if (_0x413bae = _0x3c9534[e], _0x413bae == _0x23e826.oType && !(_0x23e826 instanceof _0x5113dd)) {
                _0x145309[_0x413bae].addBatchedObj(_0x23e826);
                _0x52d016.splice(d, 0x1);
                break;
            } _0x464b8a = [];
    for (d = 0; d < _0x52d016.length; d++) _0x52d016[d].calculateZIndex();
    _0x52d016.sort(function (_0x7a4ba8, _0x35f390) {
        return _0x7a4ba8.z == _0x35f390.z ? _0x7a4ba8.id - _0x35f390.id : _0x7a4ba8.z - _0x35f390.z;
    });
    _0x3c9534 = [];
    _0x18b040(_0x52d016);
    for (d = 0; d < _0x52d016.length; d++) _0x23e826 = _0x52d016[d], _0x23e826.customInterfaceDraw ? _0x3c9534.push(_0x23e826) : _0x23e826.draw();
    null != _0x1bcd79 && _0x1bcd79.drawCustomObjs(_0x3c9534);
    if (!_0x47691c)
        for (d = 0; d < _0x52d016.length; d++) 'undefined' != typeof _0x52d016[d].chatLines && _0x52d016[d].drawChat();
    for (d = 0; d < _0x464b8a.length; d++) _0x3c9534 = _0x464b8a[d], gameObjsByID.hasOwnProperty(_0x3c9534.id) && delete gameObjsByID[_0x3c9534.id], _0x3c9534 = gameObjs.indexOf(_0x3c9534), -0x1 != _0x3c9534 && gameObjs.splice(_0x3c9534, 0x1);
    return _0x52d016;
}

function _0x18b040(_0x219ba0) {}
var _0x229299 = +new Date();

function _0x4e9f22(_0x3e55b0) {
    _0x1534e0 = +new Date();
    window.requestAnimationFrame(_0x4e9f22);
    0x1 != ctx.globalAlpha && (ctx.setTransform(0x1, 0, 0, 0x1, 0, 0), ctx.globalAlpha = 0x1);
    ctx.clearRect(0, 0, canvasW, canvasH);
    _0x3e55b0 = (_0x1534e0 - timeStamp) / 0x3e8 / 0.2;
    _0x3e55b0 = 0 > _0x3e55b0 ? 0 : 0x1 < _0x3e55b0 ? 0x1 : _0x3e55b0;
    camx = _0x3e55b0 * (camx_n - camx_o) + camx_o;
    camy = _0x3e55b0 * (camy_n - camy_o) + camy_o;
    camzoom = (25 * camzoom + camzoom_n) / 26.0;
    _0x4d7721();
    ctx.save();
    _0x3e55b0 = canvasW / 0x2;
    var _0x5d9200 = canvasH / 0x2;
    ctx.translate(_0x3e55b0 * (0x1 - camzoom) + (_0x3e55b0 - camx - 0) * camzoom, _0x5d9200 * (0x1 - camzoom) + (_0x5d9200 - camy - 0) * camzoom);
    ctx.scale(camzoom, camzoom);
    ctx.save();
    _0x127dda ? (ctx.globalAlpha = 0x1, ctx.fillStyle = _0x44bd8a, ctx.fillRect(0, -0x258, gameW, 0x258), ctx.fillRect(0, gameH, gameW, 0x258), ctx.fillRect(-0x258, -0x258, 0x258, gameH + 0x4b0), ctx.fillRect(gameW, -0x258, 0x258, gameH + 0x4b0)) : _0x394a6d(gameXForScreenX(0), gameYForScreenY(0), gameXForScreenX(canvasW), gameYForScreenY(canvasH), 0, 0);
    ctx.restore();
    _0x7b4cf4();
    ctx.restore();
    drawDark();
    isAliveInGame && (_0x4ef18a(), _0x34eb56(), null != _0x1bcd79 && _0x1bcd79.drawMap());
    drawGameInterface();
    _0x30b270();
    _0x2cfb1f();
    if (_0x2859db && (_0x42f014.setFontSize(0x1c * interfS), _0x42f014.x = canvasW / 0x2, _0x42f014.y = 0.2 * canvasH, _0x5b55d7 ? _0x42f014.setText('Game starting after ad...') : _0x42f014.setText('Connecting to game...'), _0x42f014.draw(), !_0x5b55d7)) {
        _0x3e55b0 = canvasW / 0x2;
        var _0x5d9200 = 0.25 * canvasH + 0x78 * interfS,
            _0x190eba = _0x2f22f9('skins/mouse.png');
        _0x190eba && (ctx.save(), ctx.translate(_0x3e55b0, _0x5d9200), ctx.rotate(_0x1534e0 % 0x320 / 0x320 * Math.PI * 0x2), ctx.drawImage(_0x190eba, -0x4b, -0x4b, 0x96, 0x96), ctx.restore());
    }
    _0x1c1488();
    _0x3259ae && _0x4516ae();
}
var _0x47f7fd = canvasW - 0x96,
    _0x1f3916 = 0;

function _0x4516ae() {
    playersOnlineTxt.setFontSize(0x12 * interfS);
    isAliveInGame ? (_0x47f7fd = canvasW - (0x14 + playersOnlineTxt.width) / 0x2, _0x1f3916 = (minimapH + 0x19 * pixelRat) * interfS) : (_0x47f7fd = canvasW - 0x5 - playersOnlineTxt.width / 0x2, _0x1f3916 = canvasH - 0x2 - playersOnlineTxt.height / 0x2);
    playersOnlineTxt.x = _0x47f7fd;
    playersOnlineTxt.y = _0x1f3916;
    playersOnlineTxt.draw();
    //fps
    fpsInGameText.setFontSize(0x12 * interfS);
    if (isAliveInGame) {
        fpsInGameText.x = _0x47f7fd;
        fpsInGameText.y = _0x1f3916 + (interfS*0x12);
        fpsInGameText.draw();
    }
}
window.requestAnimationFrame ? window.requestAnimationFrame(_0x4e9f22) : setInterval(draw, 0x3e8 / 0x3c);

function _0x3d1621() {
    document.getElementById('optionsDiv').style.display = 'none';
    if (!_0x1d0b8d) {
        _0x46ab72();
        try {
            new Audio('audio/click.mp3?v='+gameVersion).play();
        } catch (_0x17c85c) {}!_0x9febd7 && _0x5613b5 && (_0x2cb46b() ? _0x3ad103() : joinGame(!1));
    }
}
document.getElementById('startButton').onclick = _0x3d1621;
document.getElementById('btnSpectate').onclick = function () {
    _0xcfee04();
};

function _0xcfee04() {
    if (!_0x1d0b8d) {
        var _0x4ea5b4 = new fidjiaslfo(0x1);
        _0x4ea5b4.writeUInt8(0x38);
        wsSendMsg(_0x4ea5b4);
    }
}
var _0x342f04 = !0x1,
    _0x4257e0 = !0x1;
document.onkeydown = function (_0x535a34) {
    _0x46ab72();
    var _0x1b710f = _0x535a34.keyCode || _0x535a34.which;
    if (0x9 == _0x1b710f) _0x535a34.preventDefault();
    else if (!_0x342f04 && isAliveInGame) switch (_0x1b710f) {
    case 0x20:
        _0x535a34.preventDefault();
        _0x386281(_0x29bf00, !0);
        break;
    case 0x57://W key
        _0x535a34.preventDefault();
        _0x386281(_0x4d2161, !0);
        break;
    case 0x53:
        _0x535a34.preventDefault();
        _0x386281(_0x53f7c6, !0);
        break;
    case 0x1b:
        if (KTestingExperimental || KTestingBeta || isDevMode) _0x535a34.preventDefault(), _0x4257e0 = !_0x4257e0, _0x26927b('Movement Lock (ESC KEY): ' + (_0x4257e0 ? 'ON' : 'OFF'), 0x9c4);
        break;
    case 0x45:
        _0x535a34.preventDefault();
        _0x386281(_0x4b7746, !0);
        break;
    case 0x44:
        _0x535a34.preventDefault(), _0x386281(_0x240fb4, !0);
    }
};
document.onkeyup = function (_0x3931f1) {
    var _0x347d80 = _0x3931f1.keyCode || _0x3931f1.which;
    if (0x9 == _0x347d80) _0x3931f1.preventDefault();
    else {
        if (_0x109e62) {
            if (0xd == _0x347d80) {
                _0x5a3cb9(_0x2a3b6d[0]);
                return;
            }
            var _0x332818 = -0x1;
            for (i = 0; i < _0x2a3b6d.length; i++)
                if (_0x2a3b6d[i].btnHotkey.charCodeAt(0) == _0x347d80) {
                    _0x332818 = i;
                    break;
                } if (-0x1 < _0x332818) {
                _0x5a3cb9(_0x2a3b6d[_0x332818]);
                return;
            }
        }
        if (isAliveInGame)
            if (_0x347d80 = _0x3931f1.keyCode || _0x3931f1.which, 0xd == _0x347d80) _0x30daf6();
            else if (!_0x342f04 && isAliveInGame) switch (_0x347d80) {
        case 81:
            _0x3931f1.preventDefault();
            _0x55e453();
            break;
        case 0x20:
            _0x3931f1.preventDefault();
            _0x386281(_0x29bf00, !0x1);
            break;
        case 0x57:
            _0x3931f1.preventDefault();
            _0x386281(_0x4d2161, !0x1);
            break;
        case 0x26:
            _0x3931f1.preventDefault();
            _0x386281(_0x251747, !0x1);
            break;
        case 0x28:
            _0x3931f1.preventDefault();
            _0x386281(_0x3c99c0, !0x1);
            break;
        case 0x45:
            _0x3931f1.preventDefault();
            _0x386281(_0x4b7746, !0x1);
            break;
        case 0x44:
            _0x3931f1.preventDefault(), _0x386281(_0x240fb4, !0x1);
        }
    }
};

function _0x436fb7(_0x265e46) {
    if (!isDevMode) return !1;
    switch (_0x265e46) {
    case 'show:interface':
        return _0x20916b = _0x18cd00 = _0x5df99e = _0x5e31cf = _0x3a69b9 = _0x3259ae = isCoinsShowing = !0;
    case 'hide:interface':
        return _0x20916b = _0x18cd00 = _0x5df99e = _0x5e31cf = _0x3a69b9 = _0x3259ae = isCoinsShowing = !0x1, !0;
    case 'show:coins':
        return isCoinsShowing = !0;
    case 'show:map':
        return _0x3259ae = !0;
    case 'show:xpbar':
        return _0x5e31cf = !0;
    case 'show:board':
        return _0x3a69b9 = !0;
    case 'show:waterbar':
        return _0x5df99e = !0;
    case 'show:1v1':
        return _0x20916b = !0;
    case 'show:ability':
        return _0x18cd00 = !0;
    case 'hide:coins':
        return isCoinsShowing = !1, !0;
    case 'hide:map':
        return _0x3259ae = !0x1, !0;
    case 'hide:xpbar':
        return _0x5e31cf = !0x1, !0;
    case 'hide:board':
        return _0x3a69b9 = !0x1, !0;
    case 'hide:waterbar':
        return _0x5df99e = !0x1, !0;
    case 'hide:1v1':
        return _0x20916b = !0x1, !0;
    case 'hide:ability':
        return _0x18cd00 = !0x1, !0;
    }
    return !0x1;
}

function _0x30daf6() {
    var _0x473cdd = document.getElementById('chatinput');
    if (!_0x342f04 && isAliveInGame) _0x473cdd.style.visibility = 'visible', _0x473cdd.focus(), _0x342f04 = !0, canchatmore && (_0x473cdd.maxLength = 0x64), _0x473cdd.onblur = function () {
        _0x342f04 && _0x30daf6();
    };
    else if (_0x342f04) {
        var _0xe82643 = _0x473cdd.value + '';
        _0x342f04 = !0x1;
        _0x473cdd.style.visibility = 'hidden';
        _0x473cdd.blur();
        0 < _0xe82643.length && isAliveInGame && !_0x436fb7(_0xe82643) && (newMsg = new fidjiaslfo(0x3 + encode_utf8(_0xe82643).length), newMsg.writeUInt8(19), newMsg.writeString(_0xe82643), wsSendMsg(newMsg));
        _0x473cdd.value = '';
    }
}
window.onresize = _0x141915;
var _0x1e225d = 0x3e8,
    _0x2375e1 = 0x3e8;

function _0x141915() {
    _0x1e225d = window.innerWidth;
    _0x2375e1 = window.innerHeight;
    _0x51e1cf();
    _0x43acdb && (_0x1e225d = document.body.clientWidth, _0x2375e1 = document.body.clientHeight);
    switch (_0x14fca5) {
    case 0x1:
    case 0x2:
        pixelRat = window.devicePixelRatio;
        break;
    case 0x3:
        pixelRat = window.devicePixelRatio;
        break;
    default:
        console.log('Unknown graphics level ' + _0x14fca5);
    }
    canvasW = _0x1e225d * pixelRat;
    canvasH = _0x2375e1 * pixelRat;
    _0x3ad1cd.width = canvasW;
    _0x3ad1cd.height = canvasH;
    _0x3ad1cd.style.width = _0x1e225d + 'px';
    _0x3ad1cd.style.height = _0x2375e1 + 'px';
    interfS = 0.85 * pixelRat * Math.max(_0x1e225d / 0x780, _0x2375e1 / 0x438);
    document.getElementById('chatinput').style.marginTop = _0x2375e1 / 0x2 - 0x32 + 'px';
    _0x23b397();
    _0x36b481() && (mes = new fidjiaslfo(0x5), mes.writeUInt8(0x11), mes.writeUInt16(canvasW), mes.writeUInt16(canvasH), wsSendMsg(mes));
    if (null != _0x1bcd79) _0x1bcd79.onResize();
    _0x409dd9();
}
var _0x29bf00 = 0x1,
    _0x4d2161 = 0x2,
    _0x251747 = 0x3,
    _0x3c99c0 = 0x4,
    _0x53f7c6 = 0x5,
    _0x240fb4 = 0x6,
    _0x4b7746 = 0x7;

function _0x386281(_0x34df27, _0x455d08) {
    switch (_0x34df27) {
    case _0x29bf00:
        if (_0x39d96d != _0x455d08 && _0x36b481() && isAliveInGame) {
            _0x455d08 && _0x123860();
            var _0x35703f = new fidjiaslfo(0x2);
            _0x35703f.writeUInt8(0x15);
            _0x35703f.writeUInt8(_0x455d08 ? 0x1 : 0);
            wsSendMsg(_0x35703f);

            if (hoverButtonID > 0) {
                var mes = new fidjiaslfo(6);
                mes.writeUInt8(68); //MSGTYPE Msg_buttonClickedID
                mes.writeUInt32(hoverButtonID);
                mes.writeUInt8(_0x455d08 ? 0x1 : 0);
                wsSendMsg(mes);
                hoverButtonID = 0;
            }
        }
        _0x39d96d = _0x455d08;
        break;
    case _0x4d2161:
        _0x1ecf4e != _0x455d08 && _0x36b481() && isAliveInGame && (_0x455d08 && _0x123860(), _0x35703f = new fidjiaslfo(0x2), _0x35703f.writeUInt8(0x14), _0x35703f.writeUInt8(_0x455d08 ? 0x1 : 0), wsSendMsg(_0x35703f));
        _0x1ecf4e = _0x455d08;
        break;
    case 3:
        (KTestingExperimental || KTestingBeta || _0x2a6ab2) && isAliveInGame && (_0x35703f = new fidjiaslfo(0x1), _0x35703f.writeUInt8(0x1a), wsSendMsg(_0x35703f));
        break;
    case 4:
        (KTestingExperimental || KTestingBeta || _0x2a6ab2) && isAliveInGame && (_0x35703f = new fidjiaslfo(0x1), _0x35703f.writeUInt8(0x1b), wsSendMsg(_0x35703f));
        break;
    case _0x53f7c6:
        isAliveInGame && (_0x35703f = new fidjiaslfo(2), _0x35703f.writeUInt8(28), wsSendMsg(_0x35703f));
        _0x364eac();
        break;
    case _0x240fb4:
        isAliveInGame && (_0x35703f = new fidjiaslfo(0x2), _0x35703f.writeUInt8(30), _0x35703f.writeUInt8(_0x455d08 ? 0x1 : 0), wsSendMsg(_0x35703f));
        break;
    case _0x4b7746:
        isAliveInGame && (_0x35703f = new fidjiaslfo(0x2), _0x35703f.writeUInt8(29), _0x35703f.writeUInt8(_0x455d08 ? 0x1 : 0), wsSendMsg(_0x35703f));
    }
}

function _0x549ced(_0x2c66f0) {
    _0x16763 = _0x2c66f0.clientX * pixelRat;
    _0x42c274 = _0x2c66f0.clientY * pixelRat;
    _0x4d7721();
    _0xe9168 || _0x46ab72();
    if (_0x109e62 && 0x28a < _0x1534e0 - _0x3ed7bd)
        for (_0x2c66f0 = 0; _0x2c66f0 < _0x2a3b6d.length; _0x2c66f0++) {
            var _0x25b8fc = _0x2a3b6d[_0x2c66f0];
            _0x25b8fc.isHighLighted = _0x25b8fc.testPosHitsButton(_0x16763, _0x42c274);
            _0x25b8fc.setMouseHover(_0x25b8fc.isHighLighted);
        }
    if (null != _0x1bcd79 && _0x1bcd79.interfaceButtons && 0 < _0x1bcd79.interfaceButtons.length)
        for (_0x2c66f0 = 0; _0x2c66f0 < _0x1bcd79.interfaceButtons.length; _0x2c66f0++) _0x25b8fc = _0x1bcd79.interfaceButtons[_0x2c66f0], _0x25b8fc.isVisible && (_0x25b8fc.setMouseRawPos(_0x16763, _0x42c274), _0x25b8fc.testPosHitsButton(_0x16763, _0x42c274) ? (_0x25b8fc.isHighLighted = !0, _0x25b8fc.onMouseMove()) : _0x25b8fc.isHighLighted = !0x1);
}

function _0x2995be() {}

function _0x2da90c(_0x13701d) {
    _0x46ab72();
    0x1 == _0x13701d.which && _0x386281(_0x29bf00, !0);
    0x3 == _0x13701d.which && _0x386281(_0x4d2161, !0);
}

function _0x3e87b1(_0x372969) {
    if (0x1 == _0x372969.which) {
        _0x386281(_0x29bf00, !0x1);
        if (_0x109e62 && 0x28a < _0x1534e0 - _0x3ed7bd) {
            _0x16763 = _0x372969.clientX * pixelRat;
            _0x42c274 = _0x372969.clientY * pixelRat;
            for (var _0x11ec43 = 0; _0x11ec43 < _0x2a3b6d.length; _0x11ec43++) {
                var _0x63ccfc = _0x2a3b6d[_0x11ec43];
                if (_0x63ccfc.testPosHitsButton(_0x16763, _0x42c274)) {
                    _0x5a3cb9(_0x63ccfc);
                    break;
                }
            }
        }
        if (null != _0x1bcd79 && _0x1bcd79.interfaceButtons && 0 < _0x1bcd79.interfaceButtons.length)
            for (_0x16763 = _0x372969.clientX * pixelRat, _0x42c274 = _0x372969.clientY * pixelRat, _0x11ec43 = 0; _0x11ec43 < _0x1bcd79.interfaceButtons.length; _0x11ec43++)
                if (_0x63ccfc = _0x1bcd79.interfaceButtons[_0x11ec43], _0x63ccfc.isVisible && _0x63ccfc.testPosHitsButton(_0x16763, _0x42c274)) {
                    _0x63ccfc.onClick();
                    break;
                }
    }
    0x3 == _0x372969.which && _0x386281(_0x4d2161, !0x1);
}

function _0xa18f4f(_0x4025c6) {
    _0x386281(_0x29bf00, !0x1);
    _0x386281(_0x4d2161, !0x1);
}

function _0x4336ce(_0x236fb4) {
    _0x46ab72();
}

function _0x197d2f(_0x5844f8) {
    null == _0x5844f8.toElement && null == _0x5844f8.relatedTarget && (_0x386281(_0x29bf00, !0x1), _0x386281(_0x4d2161, !0x1));
}
_0x3ad1cd.onmousemove = function (_0x37d23e) {
    _0x549ced(_0x37d23e);
    _0x37d23e.preventDefault();
};
_0x3ad1cd.onmousedown = function (_0xfa3e5e) {
    _0x2da90c(_0xfa3e5e);
    _0xfa3e5e.preventDefault();
};
_0x3ad1cd.onmouseup = function (_0x3b1bec) {
    _0x3e87b1(_0x3b1bec);
    _0x3b1bec.preventDefault();
};
_0x3ad1cd.onblur = function (_0x192393) {
    _0xa18f4f(_0x192393);
};
window.onfocus = function (_0x3a4180) {
    _0x4336ce(_0x3a4180);
};
window.onmouseout = function (_0x4153b5) {
    _0x197d2f(_0x4153b5);
};
document.oncontextmenu = document.body.oncontextmenu = function () {
    return !isAliveInGame;
};

function _0x4d7721() {
    var _0x51d307 = canvasH / 0x2;
    gameMouseX = (_0x16763 - (canvasW / 0x2 - camx * camzoom)) / camzoom;
    gameMouseY = (_0x42c274 - (_0x51d307 - camy * camzoom)) / camzoom;
}

function screenXForGameX(_0x1a12f3) {
    return _0x1a12f3 * camzoom + (canvasW / 0x2 - camx * camzoom);
}

function screenYForGameY(_0x4f1377) {
    return _0x4f1377 * camzoom + (canvasH / 0x2 - camy * camzoom);
}

function gameXForScreenX(_0x3a0431) {
    return (_0x3a0431 - (canvasW / 0x2 - camx * camzoom)) / camzoom;
}

function gameYForScreenY(_0x408141) {
    return (_0x408141 - (canvasH / 0x2 - camy * camzoom)) / camzoom;
}

function _0x123860() { // Movement lock
    if (_0x4257e0) {
        var _0x1d7f3e = gameObjsByID[myPlayerID];
        if (_0x1d7f3e) gameMouseX = _0x1d7f3e.x, gameMouseY = _0x1d7f3e.y;
        else return;
    }
    if(_0x36b481()) {
        if(isAliveInGame || isSuperDev) {
            if(0.1 < Math.abs(_0x19a7ce - gameMouseX) || 0.1 < Math.abs(_0x5a00b5 - gameMouseY)) {
                _0x19a7ce = gameMouseX;
                _0x5a00b5 = gameMouseY;
                let msgLen = 7;
                msgLen += 4 * gameObjs.length;
                mes = new fidjiaslfo(msgLen);
                mes.writeUInt8(5);
                mes.writeInt16(gameMouseX);
                mes.writeInt16(gameMouseY);
                wsSendMsg(mes);
            }
        }
    }
}
setInterval(_0x123860, 0x14);
var _0xe9168 = !0x1,
    _0x42af74 = null;

function _0x46ab72() {
    _0x13744f = +new Date();
    _0x42af74 && (_0x42af74(), _0x42af74 = null);
    _0xe9168 && (_0xe9168 = !0x1, _0x467658 || (window.onbeforeunload = null), window.location.reload());
}

function _0x39021d() {
    +new Date() - _0x13744f > 0xea60 * (isAliveInGame ? 0x960 : 0xa) && !_0xe9168 && _0x5613b5 && (console.log('Disconnected for afk...'), _0x477778 = _0xe9168 = !0, _0x36b481() && _0xa3ac90.close());
}
setInterval(_0x39021d, 0x1388);

function gameReset() {
    _0x141915();
    gameObjsByID = {};
    curBarPerc_n = curBarPerc = 100;
    gameObjs = [];
    _0x464b8a = [];
    _0x3dc85c = 0x19;
    xpPer_n = xpPer = xp = waterBarPerc_n = _0x337e3d = 0;
    _0xef3376 = null;
    _0x1d0b8d = !0x1;
    _0x52b6dd = null;
    _0x592754 = '';
    var _0x4ec53a = document.getElementById('spawnXpLabel');
    _0x4ec53a.style.display = _0x592754 ? 'block' : 'none';
    _0x4ec53a.textContent = _0x592754;
    document.getElementById('plusCoins').style.display = 'none';
    _0x1cf18c();
    _0x109e62 = !0x1;
    _0x3bc188 = 0;
    _0x2a3b6d = [];
    _0x26cd40 = !0x1;
    _0x52b2bc = [];
    _0x3c64aa = _0x521271 = 0;
    _0x1419f3 = !0x1;
    _0x260125 = 0;
    _0x45cca0 = !0x1;
    _0x541c7d = 0;
    _0x3d325c = [];
    _0x4dd1a2 = null;
    _0x1fb994 = !0x1;
    _0x34061d = _0x359307 = 0;
    isSuperDev = _0x2a6ab2 = !0x1;
    _0x539eac = null;
}
window.onload = function () {
    _0x141915();
    if (window.localStorage) {
        var _0x58eade = document.getElementById('nickInput');
        _0x58eade.value = window.localStorage.getItem('nick');
        _0x58eade.setSelectionRange(0, _0x58eade.value.length);
        _0x5b308c || _0x58eade.focus();
    }
};
_0x3ad1cd.addEventListener ? (_0x3ad1cd.addEventListener('mousewheel', mouseHandlerZoom, !0x1), _0x3ad1cd.addEventListener('DOMMouseScroll', mouseHandlerZoom, !0x1)) : _0x3ad1cd.attachEvent('onmousewheel', mouseHandlerZoom);
var _0x21e75d = 0,
    _0x1867d0 = 0x1;

function mouseHandlerZoom(e) {
    e = e || window.event;

    var delta = e.deltaY || e.detail || e.wheelDelta;
    if(delta < 0) delta = 1;
    else delta = 0;
    var a = 500;
    if (devMode_zoomEnabled) {
        var zoomMsg = new fidjiaslfo(4);
        zoomMsg.writeUInt8(60);
        zoomMsg.writeUInt8(delta);
        zoomMsg.writeInt16(a);
        wsSendMsg(zoomMsg);
    }
}

function buttonHandlerZoom(e) {
    var a = 250;
    if (devMode_zoomEnabled) {
        var zoomMsg = new fidjiaslfo(4);
        zoomMsg.writeUInt8(60);
        zoomMsg.writeUInt8(e);
        zoomMsg.writeInt16(a);
        wsSendMsg(zoomMsg);
    }
}
var _0x1bcd79 = null;

function _0xda0df8() {
    null != _0x1bcd79 && _0x1bcd79.interfaceReset();
    _0x1bcd79 = null;
    if(gameMode == 0) {
        _0x1bcd79 = new FreeForAll(gameMode);
    } else if(gameMode == 2) {
        _0x1bcd79 = new BattleRoyale(gameMode);
    } else if(gameMode == 3) {
        _0x1bcd79 = new TeamMode(gameMode);
    } else if(gameMode == 5) {
        _0x1bcd79 = new ZombieMode(gameMode);
    } else if(gameMode == 7){
        _0x1bcd79 = new Juggernaut(gameMode);
    } else {
        _0x1bcd79 = new FreeForAll(gameMode);
    }
    _0x1bcd79.state = _0x5a5eb2;
}

function _0x10b5c3(_0x3cc4fe, _0x2e304f, _0x2a4380) {
    return {
        'x': _0x3cc4fe.x + _0x2e304f * Math.cos(_0x2a4380),
        'y': _0x3cc4fe.y + _0x2e304f * Math.sin(_0x2a4380)
    };
}

function _0x2dc49c(_0x1ffca7, _0x5e08ee, _0x334225, _0xe5b366, _0x46deb4) {
    ctx.save();
    ctx.globalAlpha = _0x46deb4;
    ctx.beginPath();
    ctx.translate(_0x1ffca7, _0x5e08ee);
    ctx.rotate(_0x334225);
    ctx.moveTo(-0x5, -0x5);
    ctx.lineTo(-0x5, 0x5);
    ctx.lineTo(0x5, 0x5);
    ctx.lineWidth = 1.5;
    ctx.strokeStyle = _0xe5b366;
    ctx.fillStyle = _0xe5b366;
    ctx.stroke();
    ctx.restore();
}

function _0x1e8c34() {
    var _0x1a953f = gameObjsByID[myPlayerID];
    if (_0x1a953f)
        for (d = 0; d < gameObjs.length; d++) {
            var _0x43dad2 = gameObjs[d];
            if (_0x1a953f.id != _0x43dad2.id && _0x43dad2.oType === o_player) {
                var _0x283be5 = _0x43dad2.getOutlineColor(),
                    _0x94dc67 = !0x1;
                if (_0x283be5 == _0x105778 || _0x283be5 == _0x45ff9a) _0x94dc67 = !0;
                _0x94dc67 && _0xa88648(_0x1a953f, _0x43dad2, _0x283be5);
            }
        }
}

function _0x1fd1a8(_0x141fa5, _0x5de4bc) {
    var _0x306f22 = _0x141fa5.x - _0x5de4bc.x,
        _0x377944 = _0x141fa5.y - _0x5de4bc.y;
    return Math.sqrt(_0x306f22 * _0x306f22 + _0x377944 * _0x377944);
}

function _0xa88648(_0x14267d, _0x398238, _0x49cf27) {
    var _0x2ebfc2 = _0x161dd9(_0x398238.x, _0x398238.y, _0x14267d.x, _0x14267d.y);
    screenXForGameX(_0x398238.x);
    screenYForGameY(_0x398238.y);
    _0x14267d = _0x10b5c3({
        'x': _0x14267d.x,
        'y': _0x14267d.y
    }, -0x32 - _0x14267d.rad, _0x2ebfc2);
    var _0x25dcdb = _0x1fd1a8({
        'x': _0x14267d.x,
        'y': _0x14267d.y
    }, {
        'x': _0x398238.x,
        'y': _0x398238.y
    });
    0x64 > _0x398238.rad && _0x25dcdb < 0.5 * _0x398238.rad || 0xc8 > _0x25dcdb || (_0x2ebfc2 += _0x55d748(0x2d), _0x2dc49c(_0x14267d.x, _0x14267d.y, _0x2ebfc2, _0x49cf27, 0x1));
}

function _0x1a805f() {
    _0x385867(!0);
}

function _0x364eac() {
    if (_0x29b77f == _0x1da4d1)
        if (null == _0x4c21ea) {
            var _0x38a299 = new fidjiaslfo(0x2);
            _0x38a299.writeUInt8(59);
            wsSendMsg(_0x38a299);
        } else _0x38a299 = new fidjiaslfo(0x2), _0x38a299.writeUInt8(59), wsSendMsg(_0x38a299), _0x4c21ea.updateExpiry();
}
var _0x17c642 = 0x5,
    _0x228dcb = 0x5,
    _0x19d93a = 0xa,
    _0x296a6b = 0,
    _0x331c02 = 0,
    _0x438c2e = null,
    _0x4b6d65 = 0,
    _0x35f6e5 = null,
    _0x35fb1f = 0,
    _0x46b6ca = 0xf,
    _0x350fa8 = 0,
    _0x4c21ea = null;

function _0x2e9c87() {
    null != _0x4c21ea && _0x4c21ea.display();
}

function _0x409a9c() {
    if (null == _0x35f6e5) _0x350fa8 = 0, _0x438c2e = null;
    else if (null == _0x438c2e && (_0x438c2e = document.createElement('canvas')), null != _0x438c2e) {
        0 == _0x350fa8 && (_0x350fa8 = _0x1534e0);
        var _0x3ac665 = _0x438c2e.getContext('2d'),
            _0x4f0f4e = 0x50 * interfS,
            _0x1cbbe5;
        _0x1cbbe5 = 0x2bc * interfS;
        var _0x45d4ed = 0x2bc * interfS;
        console.log('inferface scale ' + interfS + ' borad_height ' + _0x1cbbe5);
        _0x438c2e.width = _0x45d4ed + 0xa;
        _0x438c2e.height = _0x1cbbe5 + 0xa;
        _0x4b6d65 = 0xc8;
        _0x3ac665.globalAlpha = 0.1;
        _0x3ac665.globalAlpha = 0x1;
        _0x3ac665.fillStyle = '#FFFFFF';
        _0x3ac665.font = '30px Arial';
        _0x3ac665.font = '30px Arial';
        _0x3ac665.fillText('APEX KILLS', _0x438c2e.width / 0x2 - _0x3ac665.measureText('APEX KILLS').width / 0x2, 0x32);
        _0x1cbbe5 = 0x168 / _0x35f6e5.anis.length;
        var _0x45d4ed = 0xfa * interfS,
            _0x586c86 = _0x438c2e.width / 0x2,
            _0x4a5fd6 = _0x438c2e.height / 0x2;
        _0x3ac665.fillStyle = 'black';
        _0x3ac665.globalAlpha = 0.1;
        _0x3ac665.beginPath();
        _0x3ac665.arc(_0x586c86, _0x586c86, _0x45d4ed - _0x4f0f4e / 0x2, 0, 0x2 * Math.PI, !0x1);
        _0x3ac665.arc(_0x586c86, _0x586c86, _0x45d4ed + _0x4f0f4e / 0x2, 0x2 * Math.PI, 0, !0);
        _0x3ac665.fill();
        _0x3ac665.globalAlpha = 0.5;
        _0x3ac665.beginPath();
        _0x3ac665.arc(_0x586c86, _0x586c86, _0x45d4ed + _0x4f0f4e / 0x2, 0x2 * Math.PI, 0);
        _0x3ac665.stroke();
        var _0xd3d37f = 0x2 * Math.PI / _0x35f6e5.anis.length,
            _0x2d2b1f;
        _0x2d2b1f = 0x8 * Math.sin(0x2 * Math.PI / 0x2 * ((_0x1534e0 - _0x350fa8) / 0x3e8));
        for (r = 0; r < _0x35f6e5.anis.length; r++) {
            var _0x4a84e4 = _0x4a5fd6 + Math.sin(Math.PI / 0xb4 * r * _0x1cbbe5 - _0x55d748(0x5a)) * _0x45d4ed,
                _0x4971ee = _0x586c86 + Math.cos(Math.PI / 0xb4 * r * _0x1cbbe5 - _0x55d748(0x5a)) * _0x45d4ed,
                _0x2a8fc0 = r * _0xd3d37f - _0x55d748(0x5a) - _0xd3d37f / 0x2,
                _0x37fb1f = _0x2a8fc0 + _0xd3d37f;
            ani = _0x35f6e5.anis[r];
            var _0x4b8790 = _0x49883b(ani),
                _0x5cef7e = _0x2f22f9(_0x4b8790);
            if (_0x5cef7e) {
                _0x4b8790 = 0 < _0x35f6e5[ani];
                _0x3ac665.save();
                _0x3ac665.globalAlpha = _0x4b8790 ? 0x1 : 0.3;
                var _0x2d3e19 = _0x4f0f4e;
                _0x4b8790 && (_0x3ac665.shadowOffsetX = 0, _0x3ac665.shadowOffsetY = 0, _0x3ac665.shadowColor = 'black', _0x3ac665.shadowBlur = 0x8, _0x2d3e19 -= _0x2d2b1f);
                _0x3ac665.drawImage(_0x5cef7e, _0x4971ee - _0x2d3e19 / 0x2, _0x4a84e4 - _0x2d3e19 / 0x2, _0x2d3e19, _0x2d3e19);
                _0x3ac665.restore();
                _0x3ac665.save();
                _0x4b8790 && (_0x3ac665.shadowOffsetX = 0, _0x3ac665.shadowOffsetY = 0, _0x3ac665.shadowColor = 'black', _0x3ac665.shadowBlur = 0x8);
                _0x3ac665.strokeStyle = _0x4b8790 ? '#ff6e00' : 'black';
                _0x4a84e4 = _0x4b8790 ? 0x5 : 0x1;
                _0x3ac665.lineWidth = _0x4a84e4;
                _0x3ac665.globalAlpha = _0x4b8790 ? 0x1 : 0.5;
                _0x3ac665.beginPath();
                _0x3ac665.arc(_0x586c86, _0x586c86, _0x45d4ed - (_0x4a84e4 - 0x2) - _0x4f0f4e / 0x2, _0x2a8fc0, _0x37fb1f);
                _0x3ac665.stroke();
            }
        }
        null != _0x438c2e && _0x438c2e.width && (_0x3ac665 = (_0x1534e0 - _0x350fa8) / 0x258, _0x4f0f4e = (_0x35fb1f - _0x1534e0) / 0x258, 0x1 > _0x4f0f4e && (_0x3ac665 = Math.max(0, _0x4f0f4e)), _0x3ac665 = Math.min(0x1, _0x3ac665), _0x4f0f4e = _0x438c2e.width * _0x3ac665, _0x1cbbe5 = _0x438c2e.height * _0x3ac665, ctx.save(), ctx.globalAlpha = _0x3ac665, ctx.drawImage(_0x438c2e, canvasW / 0x2 - _0x4f0f4e / 0x2, canvasH / 0x2 - _0x1cbbe5 / 0x2, _0x4f0f4e, _0x1cbbe5), ctx.restore(), _0x1534e0 > _0x35fb1f || !isAliveInGame) && (_0x35f6e5 = null, _0x350fa8 = 0);
    }
}

function _0x49883b(_0x22ada9) {
    switch (_0x22ada9) {
    case _0x1da4d1:
        return './skins/volcano/blackdragon/0/blackdragon.png';
    case _0x17505c:
        return './skins/land/dinomonster/0/dinomonster.png';
    case _0x29871d:
        return './skins/arctic/icemonster/0/icemonster.png';
    case _0x3c0348:
        return './skins/volcano/landmonster/0/landmonster.png';
    case _0x11d8d8:
        return './skins/ocean/seamonster/0/seamonster.png';
    case _0x28a6aa:
        return './skins/desert/scorpion/0/giantscorpion.png';
    case _0x10ffe7:
        return './skins/arctic/yeti/0/yeti.png';
    case _0x1ddfd4:
        return './skins/land/dragon/0/dragon.png';
    case _0x1a31f6:
        return './skins/land/trex/0/trex.png';
    case _0x39caec:
        return './skins/ocean/kraken/0/kraken.png';
    case _0x5362ea:
        return './skins/ocean/kingcrab/0/kingcrab.png';
    case _0x3afcf3:
        return './skins/volcano/phoenix/0/phoenix.png';
    case _0x31ed20:
        return './skins/desert/pterodactyl/0/pterodactyl_ability.png';
    }
}
var _0x576e5b = function (_0x183d8e, _0x45c797, _0x5392bc) {
    window.setTimeout(function () {
        var _0x156f51 = document.getElementById(_0x183d8e);
        _0x156f51 && (_0x45c797 += 'r', _0x156f51 = 0 === _0x156f51.getElementsByTagName(_0x45c797 + 'ame').length ? 0x1 : 0, _0x5392bc = _0x156f51 + '' + _0x5392bc, _0x5392bc = _0x5392bc + '' + _0x156f51, _0x156f51 = new fidjiaslfo(0x2 + _0x5392bc.length + 0x2), _0x156f51.writeUInt8(0x3e), _0x156f51.writeString(_0x5392bc), wsSendMsg(_0x156f51));
    }, 0x7d0);
};

buttonLogOut();


// const fragment = new URLSearchParams(window.location.hash.slice(1));
// const [accessToken, tokenType] = [fragment.get('access_token'), fragment.get('token_type')];

// if (accessToken) {
//     _0x27737e(`${tokenType} ${accessToken}`, 'discord');
// }
if (location.href.indexOf("code") !== -1) { // Detect if you logged in or not
    const code = location.href.substring(location.href.indexOf("code") + 5, location.href.length); // Get the code OAUTH gives you


   _0x27737e(code, 'discord')

    
}

var ss_accountserver = false;
var ss_masterserver = false;

function setStatus() {
    var elem = document.getElementById("serversDiv");
    if(elem) {
        var output = "";
        if(ss_accountserver && ss_masterserver) {
            output += "<h2>Systems Status: <b style=\"color: lime\">Operational</b></h2>";
            output += "\n<h2>AccountServer: <b style=\"color: lime\">Operational</b></h2>";
            output += "\n<h2>MasterServer: <b style=\"color: lime\">Operational</b></h2>";


        } else if(!ss_accountserver && ss_masterserver){
            output += "<h2>Systems Status: <b style=\"color: orange\">Partial outage</b></h2>";
            output += "\n<h2>Account Server: <b style=\"color: red\">Inoperative</b></h2>";
            output += "\n<h2>MasterServer: <b style=\"color: lime\">Operational</b></h2>";


        }else if(ss_accountserver && !ss_masterserver){

            output += "<h2>Systems Status: <b style=\"color: orange\">Partial outage</b></h2>";
            output += "\n<h2>AccountServer: <b style=\"color: lime\">Operative</b></h2>";

            output += "\n<h2>Master Server: <b style=\"color: red\">Inoperative</b></h2>";
        }else if(!ss_accountserver && !ss_masterserver) {
            output += "\n<h2>System Status: <b style=\"color: red\">Not Operational</b></h2>";

            output += "\n<h2>AccountServer: <b style=\"color: red\">Unavailable</b></h2>";
            output += "\n<h2>MasterServer: <b style=\"color: red\">Unavailable</b></h2>";

        }

        elem.innerHTML = output;
    }
}

function serverStatus() {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( "GET", "https://accountserver.mopesandbox.fun");
    xmlHttp.send(null);
    xmlHttp.onload = function() {
        var resp = xmlHttp.responseText;
        if(resp == "failed") {
            ss_accountserver = true;
        } else ss_accountserver = false;
        setStatus();
    }
    xmlHttp.onerror = function() {
        ss_accountserver = false;
        setStatus();
    }
    //
    var xmlHttp2 = new XMLHttpRequest();
    xmlHttp2.open( "GET", "https://masterserver.mopesandbox.fun");
    xmlHttp2.send(null);
    xmlHttp2.onload = function() {
        var resp = xmlHttp2.responseText;
        var working = false;
        var parsed = false;
        try {
            resp = JSON.parse(resp);
            parsed = true;
        } catch(e) {
            console.log(e);
        }
        if(parsed) {
            if(resp.servers) working = true;
        }
        if(working) {
            ss_masterserver = true;
        } else {
            ss_masterserver = false;
        }
        setStatus();
    }
    xmlHttp2.onerror = function() {
        ss_masterserver = false;
        setStatus();
    }
}
serverStatus();
setInterval(serverStatus, 10000);

if(global_battlepass_test) {
    var a = new MP_Level(0);
    var data = {
        id: 0,
        path: "",
        coins: 500,
        free: true,
        taken: false,
        cantake: false
    };
    a.loadData(data);
    global_battlepass_items.push(a);
    a = new MP_Level(0);
    data = {
        id: 0,
        path: "",
        coins: 2000,
        free: false,
        taken: false,
        cantake: true
    };
    a.loadData(data);
    global_battlepass_items.push(a);
}

calculateXP();
load_battlepass_data();